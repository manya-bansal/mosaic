!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	python_bindings/pybind11/tests/test_builtin_casters.py	/^    class A(object):$/;"	c	function:test_bool_caster
A	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	m	class:E1	file:
A	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct A {};$/;"	s	class:E1	file:
A	python_bindings/pybind11/tests/test_pytypes.py	/^    class A(object):$/;"	c	function:test_str
ACCESS	include/taco/index_notation/index_notation_printer.h	/^    ACCESS = 2,$/;"	m	class:taco::IndexNotationPrinter::Precedence
ADD	include/taco/index_notation/index_notation_printer.h	/^    ADD = 6,$/;"	m	class:taco::IndexNotationPrinter::Precedence
ADD	include/taco/ir/ir_printer.h	/^    ADD = 6,$/;"	e	enum:taco::ir::IRPrinter::Precedence
ADD_FAILURE	test/gtest/gtest.h	/^#define ADD_FAILURE(/;"	d
ADD_FAILURE_AT	test/gtest/gtest.h	/^#define ADD_FAILURE_AT(/;"	d
ALLSPHINXOPTS	python_bindings/pybind11/docs/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
APIFileTestData	test/tests-api.cpp	/^  APIFileTestData(TensorBase tensor, std::string filename)$/;"	f	class:APIFileTestData
APIFileTestData	test/tests-api.cpp	/^  APIFileTestData(std::string filename) : initTensor(true), filename(filename) {$/;"	f	class:APIFileTestData
APIFileTestData	test/tests-api.cpp	/^  APIFileTestData(std::string filename, Format format)$/;"	f	class:APIFileTestData
APIFileTestData	test/tests-api.cpp	/^class APIFileTestData {$/;"	c	file:
APIMatrixStorageTestData	test/tests-api.cpp	/^	APIMatrixStorageTestData(TensorBase tensor, const Indices& expectedIndices,$/;"	f	class:APIMatrixStorageTestData
APIMatrixStorageTestData	test/tests-api.cpp	/^	APIMatrixStorageTestData(string tensorFile, const Indices& expectedIndices,$/;"	f	class:APIMatrixStorageTestData
APIMatrixStorageTestData	test/tests-api.cpp	/^class APIMatrixStorageTestData {$/;"	c	file:
API_PyArrayDescr_Type	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArrayDescr_Type = 3,$/;"	e	enum:npy_api::functions
API_PyArray_CopyInto	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_CopyInto = 82,$/;"	e	enum:npy_api::functions
API_PyArray_DescrConverter	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_DescrConverter = 174,$/;"	e	enum:npy_api::functions
API_PyArray_DescrFromScalar	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_DescrFromScalar = 57,$/;"	e	enum:npy_api::functions
API_PyArray_DescrFromType	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_DescrFromType = 45,$/;"	e	enum:npy_api::functions
API_PyArray_DescrNewFromType	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_DescrNewFromType = 96,$/;"	e	enum:npy_api::functions
API_PyArray_EquivTypes	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_EquivTypes = 182,$/;"	e	enum:npy_api::functions
API_PyArray_FromAny	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_FromAny = 69,$/;"	e	enum:npy_api::functions
API_PyArray_GetArrayParamsFromObject	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_GetArrayParamsFromObject = 278,$/;"	e	enum:npy_api::functions
API_PyArray_GetNDArrayCFeatureVersion	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_GetNDArrayCFeatureVersion = 211,$/;"	e	enum:npy_api::functions
API_PyArray_NewCopy	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_NewCopy = 85,$/;"	e	enum:npy_api::functions
API_PyArray_NewFromDescr	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_NewFromDescr = 94,$/;"	e	enum:npy_api::functions
API_PyArray_Resize	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_Resize = 80,$/;"	e	enum:npy_api::functions
API_PyArray_SetBaseObject	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_SetBaseObject = 282$/;"	e	enum:npy_api::functions
API_PyArray_Squeeze	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_Squeeze = 136,$/;"	e	enum:npy_api::functions
API_PyArray_Type	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyArray_Type = 2,$/;"	e	enum:npy_api::functions
API_PyVoidArrType_Type	python_bindings/pybind11/include/pybind11/numpy.h	/^        API_PyVoidArrType_Type = 39,$/;"	e	enum:npy_api::functions
AR	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class AR(m.A_Repeat):$/;"	c	function:test_inherited_virtuals
ARCHITECTURE_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ASSERT_ANY_THROW	test/gtest/gtest.h	/^#define ASSERT_ANY_THROW(/;"	d
ASSERT_ARRAY_EQ	test/test.h	/^void ASSERT_ARRAY_EQ(vector<T> expected, std::pair<const T*,size_t> actual) {$/;"	f	namespace:taco::test
ASSERT_COMPONENTS_EQUALS	test/test.h	/^void ASSERT_COMPONENTS_EQUALS(vector<vector<vector<int>>> expectedIndices,$/;"	f	namespace:taco::test
ASSERT_DEATH	test/gtest/gtest.h	/^# define ASSERT_DEATH(/;"	d
ASSERT_DEATH_IF_SUPPORTED	test/gtest/gtest.h	/^# define ASSERT_DEATH_IF_SUPPORTED(/;"	d
ASSERT_DEBUG_DEATH	test/gtest/gtest.h	/^#  define ASSERT_DEBUG_DEATH(/;"	d
ASSERT_DOUBLE_EQ	test/gtest/gtest.h	/^#define ASSERT_DOUBLE_EQ(/;"	d
ASSERT_EQ	test/gtest/gtest.h	/^# define ASSERT_EQ(/;"	d
ASSERT_EXIT	test/gtest/gtest.h	/^# define ASSERT_EXIT(/;"	d
ASSERT_FALSE	test/gtest/gtest.h	/^#define ASSERT_FALSE(/;"	d
ASSERT_FLOAT_EQ	test/gtest/gtest.h	/^#define ASSERT_FLOAT_EQ(/;"	d
ASSERT_GE	test/gtest/gtest.h	/^# define ASSERT_GE(/;"	d
ASSERT_GT	test/gtest/gtest.h	/^# define ASSERT_GT(/;"	d
ASSERT_HRESULT_FAILED	test/gtest/gtest.h	/^# define ASSERT_HRESULT_FAILED(/;"	d
ASSERT_HRESULT_SUCCEEDED	test/gtest/gtest.h	/^# define ASSERT_HRESULT_SUCCEEDED(/;"	d
ASSERT_LE	test/gtest/gtest.h	/^# define ASSERT_LE(/;"	d
ASSERT_LT	test/gtest/gtest.h	/^# define ASSERT_LT(/;"	d
ASSERT_NE	test/gtest/gtest.h	/^# define ASSERT_NE(/;"	d
ASSERT_NEAR	test/gtest/gtest.h	/^#define ASSERT_NEAR(/;"	d
ASSERT_NOTATION_EQ	test/test.h	/^#define ASSERT_NOTATION_EQ(/;"	d
ASSERT_NO_FATAL_FAILURE	test/gtest/gtest.h	/^#define ASSERT_NO_FATAL_FAILURE(/;"	d
ASSERT_NO_THROW	test/gtest/gtest.h	/^#define ASSERT_NO_THROW(/;"	d
ASSERT_PRED1	test/gtest/gtest.h	/^#define ASSERT_PRED1(/;"	d
ASSERT_PRED2	test/gtest/gtest.h	/^#define ASSERT_PRED2(/;"	d
ASSERT_PRED3	test/gtest/gtest.h	/^#define ASSERT_PRED3(/;"	d
ASSERT_PRED4	test/gtest/gtest.h	/^#define ASSERT_PRED4(/;"	d
ASSERT_PRED5	test/gtest/gtest.h	/^#define ASSERT_PRED5(/;"	d
ASSERT_PRED_FORMAT1	test/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT1(/;"	d
ASSERT_PRED_FORMAT2	test/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT2(/;"	d
ASSERT_PRED_FORMAT3	test/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT3(/;"	d
ASSERT_PRED_FORMAT4	test/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT4(/;"	d
ASSERT_PRED_FORMAT5	test/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT5(/;"	d
ASSERT_STORAGE_EQ	test/test.cpp	/^void ASSERT_STORAGE_EQ(TensorStorage expected, TensorStorage actual) {$/;"	f	namespace:taco::test
ASSERT_STRCASEEQ	test/gtest/gtest.h	/^#define ASSERT_STRCASEEQ(/;"	d
ASSERT_STRCASENE	test/gtest/gtest.h	/^#define ASSERT_STRCASENE(/;"	d
ASSERT_STREQ	test/gtest/gtest.h	/^#define ASSERT_STREQ(/;"	d
ASSERT_STRNE	test/gtest/gtest.h	/^#define ASSERT_STRNE(/;"	d
ASSERT_TENSOR_EQ	test/test.cpp	/^void ASSERT_TENSOR_EQ(TensorBase expected, TensorBase actual) {$/;"	f	namespace:taco::test
ASSERT_THROW	test/gtest/gtest.h	/^#define ASSERT_THROW(/;"	d
ASSERT_THROWS_EXCEPTION_WITH_ERROR	test/test.cpp	/^void ASSERT_THROWS_EXCEPTION_WITH_ERROR(std::function<void()> f, std::string err) {$/;"	f	namespace:taco::test
ASSERT_TRUE	test/gtest/gtest.h	/^#define ASSERT_TRUE(/;"	d
ASSERT_VECTOR_EQ	test/test.h	/^void ASSERT_VECTOR_EQ(std::vector<T> expected,$/;"	f	namespace:taco::test
AT	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class AT(m.A_Tpl):$/;"	c	function:test_inherited_virtuals
A_METHODS	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    A_METHODS;$/;"	m	class:A_Tpl	file:
A_METHODS	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^#define A_METHODS /;"	d	file:
A_Repeat	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class A_Repeat {$/;"	c	file:
A_Tpl	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class A_Tpl {$/;"	c	file:
Abort	test/gtest/gtest-all.cc	/^void Abort() {$/;"	f	namespace:testing::internal::posix
Abort	test/gtest/gtest-all.cc	/^void DeathTestImpl::Abort(AbortReason reason) {$/;"	f	class:testing::internal::DeathTestImpl
AbortReason	test/gtest/gtest.h	/^  enum AbortReason {$/;"	g	class:testing::internal::DeathTest
AbstractSocketWriter	test/gtest/gtest-all.cc	/^  class AbstractSocketWriter {$/;"	c	class:testing::internal::StreamingListener	file:
Access	include/taco/index_notation/index_notation.h	/^class Access : public IndexExpr {$/;"	c	namespace:taco
Access	src/index_notation/index_notation.cpp	/^Access::Access(const AccessNode* n) : IndexExpr(n) {$/;"	f	class:taco::Access
Access	src/index_notation/index_notation.cpp	/^Access::Access(const TensorVar& tensor,$/;"	f	class:taco::Access
AccessNode	include/taco/index_notation/index_notation_nodes.h	/^  AccessNode(TensorVar tensorVar,$/;"	f	struct:taco::AccessNode
AccessNode	include/taco/index_notation/index_notation_nodes.h	/^  explicit AccessNode(TensorVar tensorVar) : IndexExprNode(tensorVar.getType().getDataType()), tensorVar(tensorVar) {}$/;"	f	struct:taco::AccessNode
AccessNode	include/taco/index_notation/index_notation_nodes.h	/^struct AccessNode : public IndexExprNode {$/;"	s	namespace:taco
AccessTensorNode	src/tensor.cpp	/^  AccessTensorNode(TensorBase tensor, const std::vector<IndexVar>& indices)$/;"	f	struct:taco::AccessTensorNode
AccessTensorNode	src/tensor.cpp	/^  AccessTensorNode(TensorBase tensor, const std::vector<std::shared_ptr<IndexVarInterface>>& indices)$/;"	f	struct:taco::AccessTensorNode
AccessTensorNode	src/tensor.cpp	/^struct AccessTensorNode : public AccessNode {$/;"	s	namespace:taco	file:
AccessWindow	include/taco/index_notation/index_notation_nodes.h	/^struct AccessWindow : IndexVarIterationModifier {$/;"	s	namespace:taco
Add	include/taco/index_notation/index_notation.h	/^class Add : public IndexExpr {$/;"	c	namespace:taco
Add	include/taco/ir/ir.h	/^  Add,$/;"	m	class:taco::ir::IRNodeType
Add	include/taco/ir/ir.h	/^struct Add : public ExprNode<Add> {$/;"	s	namespace:taco::ir
Add	src/index_notation/index_notation.cpp	/^Add::Add() : Add(new AddNode) {$/;"	f	class:taco::Add
Add	src/index_notation/index_notation.cpp	/^Add::Add(IndexExpr a, IndexExpr b) : Add(new AddNode(a, b)) {$/;"	f	class:taco::Add
Add	src/index_notation/index_notation.cpp	/^Add::Add(const AddNode* n) : IndexExpr(n) {$/;"	f	class:taco::Add
AddArgument	test/gtest/gtest-all.cc	/^  void AddArgument(const char* argument) {$/;"	f	class:testing::internal::Arguments
AddArguments	test/gtest/gtest-all.cc	/^  void AddArguments(const ::std::vector<Str>& arguments) {$/;"	f	class:testing::internal::Arguments
AddEnvironment	test/gtest/gtest-all.cc	/^Environment* UnitTest::AddEnvironment(Environment* env) {$/;"	f	class:testing::UnitTest
AddGlobalTestEnvironment	test/gtest/gtest.h	/^inline Environment* AddGlobalTestEnvironment(Environment* env) {$/;"	f	namespace:testing
AddNode	include/taco/index_notation/index_notation_nodes.h	/^  AddNode() : BinaryExprNode() {}$/;"	f	struct:taco::AddNode
AddNode	include/taco/index_notation/index_notation_nodes.h	/^  AddNode(IndexExpr a, IndexExpr b) : BinaryExprNode(a, b) {}$/;"	f	struct:taco::AddNode
AddNode	include/taco/index_notation/index_notation_nodes.h	/^struct AddNode : public BinaryExprNode {$/;"	s	namespace:taco
AddRef	test/gtest/gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddRef	test/gtest/gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddReference	test/gtest/gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddReference	test/gtest/gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddSuchThatPredicates	include/taco/index_notation/transformations.h	/^class AddSuchThatPredicates : public TransformationInterface {$/;"	c	namespace:taco
AddSuchThatPredicates	src/index_notation/transformations.cpp	/^AddSuchThatPredicates::AddSuchThatPredicates() : content(nullptr) {$/;"	f	class:taco::AddSuchThatPredicates
AddSuchThatPredicates	src/index_notation/transformations.cpp	/^AddSuchThatPredicates::AddSuchThatPredicates(std::vector<IndexVarRel> predicates) : content(new Content) {$/;"	f	class:taco::AddSuchThatPredicates
AddTensorTest	test/tests-tensor_types.cpp	/^TYPED_TEST_CASE_P(AddTensorTest);$/;"	v
AddTensorTest	test/tests-tensor_types.cpp	/^template <typename T> class AddTensorTest : public ::testing::Test {};$/;"	c	file:
AddTestCaseInstantiation	test/gtest/gtest.h	/^  int AddTestCaseInstantiation(const string& instantiation_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AddTestInfo	test/gtest/gtest-all.cc	/^  void AddTestInfo(Test::SetUpTestCaseFunc set_up_tc,$/;"	f	class:testing::internal::UnitTestImpl
AddTestInfo	test/gtest/gtest-all.cc	/^void TestCase::AddTestInfo(TestInfo * test_info) {$/;"	f	class:testing::TestCase
AddTestName	test/gtest/gtest.h	/^  bool AddTestName(const char* file, int line, const char* case_name,$/;"	f	class:testing::internal::TypedTestCasePState
AddTestPartResult	test/gtest/gtest-all.cc	/^void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {$/;"	f	class:testing::TestResult
AddTestPattern	test/gtest/gtest.h	/^  void AddTestPattern(const char* test_case_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Advance	test/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
AlgComparer	src/index_notation/iteration_algebra.cpp	/^  explicit AlgComparer(bool checkIndexExprs) : checkIndexExprs(checkIndexExprs) {$/;"	f	struct:taco::AlgComparer
AlgComparer	src/index_notation/iteration_algebra.cpp	/^struct AlgComparer : public IterationAlgebraVisitorStrict {$/;"	s	namespace:taco	file:
AlgebraImpl	include/taco/index_notation/index_notation_nodes.h	/^  typedef std::function<IterationAlgebra(const std::vector<IndexExpr>&)> AlgebraImpl;$/;"	t	struct:taco::CallNode
AllTypes	test/tests-tensor_types.cpp	/^typedef ::testing::Types<int8_t, int16_t, int32_t, int64_t, long long, uint8_t, uint16_t, uint32_t, uint64_t, unsigned long long, float, double, std::complex<float>, std::complex<double>> AllTypes;$/;"	t	file:
Allocate	include/taco/ir/ir.h	/^  Allocate,$/;"	m	class:taco::ir::IRNodeType
Allocate	include/taco/ir/ir.h	/^struct Allocate : public StmtNode<Allocate> {$/;"	s	namespace:taco::ir
AlmostEquals	test/gtest/gtest.h	/^  bool AlmostEquals(const FloatingPoint& rhs) const {$/;"	f	class:testing::internal::FloatingPoint
AlwaysFalse	test/gtest/gtest.h	/^inline bool AlwaysFalse() { return !AlwaysTrue(); }$/;"	f	namespace:testing::internal
AlwaysTrue	test/gtest/gtest-all.cc	/^bool AlwaysTrue() {$/;"	f	namespace:testing::internal
And	include/taco/ir/ir.h	/^  And,$/;"	m	class:taco::ir::IRNodeType
And	include/taco/ir/ir.h	/^struct And : public ExprNode<And> {$/;"	s	namespace:taco::ir
AndImpl	test/op_factory.h	/^struct AndImpl {$/;"	s	namespace:taco
Animal	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    Animal(const std::string& _name, Kind _kind)$/;"	f	class:Animal::Kind
Animal	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^struct Animal$/;"	s	file:
Annihilator	include/taco/index_notation/properties.h	/^class Annihilator : public Property {$/;"	c	namespace:taco
Annihilator	src/index_notation/properties.cpp	/^Annihilator::Annihilator(Literal annihilator) : Annihilator(new AnnihilatorPtr(annihilator)) {$/;"	f	class:taco::Annihilator
Annihilator	src/index_notation/properties.cpp	/^Annihilator::Annihilator(Literal annihilator, std::vector<int> &p) : Annihilator(new AnnihilatorPtr(annihilator, p)) {$/;"	f	class:taco::Annihilator
Annihilator	src/index_notation/properties.cpp	/^Annihilator::Annihilator(const PropertyPtr* p) : Property(p) {$/;"	f	class:taco::Annihilator
AnnihilatorPtr	include/taco/index_notation/property_pointers.h	/^struct AnnihilatorPtr : public PropertyPtr {$/;"	s	namespace:taco
AnnihilatorPtr	src/index_notation/property_pointers.cpp	/^AnnihilatorPtr::AnnihilatorPtr() : PropertyPtr(), content(nullptr) {$/;"	f	class:taco::AnnihilatorPtr
AnnihilatorPtr	src/index_notation/property_pointers.cpp	/^AnnihilatorPtr::AnnihilatorPtr(Literal annihilator) : PropertyPtr(), content(new Content) {$/;"	f	class:taco::AnnihilatorPtr
AnnihilatorPtr	src/index_notation/property_pointers.cpp	/^AnnihilatorPtr::AnnihilatorPtr(Literal annihilator, std::vector<int>& pos) : PropertyPtr(), content(new Content) {$/;"	f	class:taco::AnnihilatorPtr
AnsiToUtf16	test/gtest/gtest-all.cc	/^LPCWSTR String::AnsiToUtf16(const char* ansi) {$/;"	f	class:testing::internal::String
Append	test/gtest/gtest-all.cc	/^void TestEventListeners::Append(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Append	test/gtest/gtest-all.cc	/^void TestEventRepeater::Append(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
Append	test/gtest/gtest-all.cc	/^void TestPartResultArray::Append(const TestPartResult& result) {$/;"	f	class:testing::TestPartResultArray
AppendMessage	test/gtest/gtest.h	/^  void AppendMessage(const Message& a_message) {$/;"	f	class:testing::AssertionResult
AppendUserMessage	test/gtest/gtest-all.cc	/^std::string AppendUserMessage(const std::string& gtest_msg,$/;"	f	namespace:testing::internal
Arch	include/taco/target.h	/^  enum Arch {C99=0, X86} arch;$/;"	g	struct:taco::Target
ArgAlwaysConverts	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^class ArgAlwaysConverts { };$/;"	c	file:
ArgInspector1	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^class ArgInspector1 { public: std::string arg = "(default arg inspector 1)"; };$/;"	c	file:
ArgInspector2	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^class ArgInspector2 { public: std::string arg = "(default arg inspector 2)"; };$/;"	c	file:
Arguments	test/gtest/gtest-all.cc	/^  Arguments() {$/;"	f	class:testing::internal::Arguments
Arguments	test/gtest/gtest-all.cc	/^class Arguments {$/;"	c	namespace:testing::internal	file:
Argv	test/gtest/gtest-all.cc	/^  char* const* Argv() {$/;"	f	class:testing::internal::Arguments
Array	include/taco/storage/array.h	/^class Array {$/;"	c	namespace:taco
Array	src/storage/array.cpp	/^Array::Array() : content(new Content) {$/;"	f	class:taco::Array
Array	src/storage/array.cpp	/^Array::Array(Datatype type, void* data, size_t size, Policy policy) : Array() {$/;"	f	class:taco::Array
ArrayAsVector	test/gtest/gtest-all.cc	/^std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {$/;"	f	namespace:testing
ArrayAwareFind	test/gtest/gtest.h	/^Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {$/;"	f	namespace:testing::internal
ArrayEq	test/gtest/gtest.h	/^bool ArrayEq(const T* lhs, size_t size, const U* rhs) {$/;"	f	namespace:testing::internal
ArrayEq	test/gtest/gtest.h	/^inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }$/;"	f	namespace:testing::internal
ArrayStruct	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct ArrayStruct {$/;"	s	file:
AssertHeld	test/gtest/gtest-all.cc	/^void Mutex::AssertHeld() {$/;"	f	class:testing::internal::Mutex
AssertHeld	test/gtest/gtest.h	/^  void AssertHeld() const {$/;"	f	class:std::tr1::MutexBase
AssertHeld	test/gtest/gtest.h	/^  void AssertHeld() const {}$/;"	f	class:std::tr1::Mutex
AssertHelper	test/gtest/gtest-all.cc	/^AssertHelper::AssertHelper(TestPartResult::Type type,$/;"	f	class:testing::internal::AssertHelper
AssertHelper	test/gtest/gtest.h	/^class GTEST_API_ AssertHelper {$/;"	c	namespace:testing::internal
AssertHelperData	test/gtest/gtest.h	/^    AssertHelperData(TestPartResult::Type t,$/;"	f	struct:testing::internal::AssertHelper::AssertHelperData
AssertHelperData	test/gtest/gtest.h	/^  struct AssertHelperData {$/;"	s	class:testing::internal::AssertHelper
AssertPred1Helper	test/gtest/gtest.h	/^AssertionResult AssertPred1Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred2Helper	test/gtest/gtest.h	/^AssertionResult AssertPred2Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred3Helper	test/gtest/gtest.h	/^AssertionResult AssertPred3Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred4Helper	test/gtest/gtest.h	/^AssertionResult AssertPred4Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred5Helper	test/gtest/gtest.h	/^AssertionResult AssertPred5Helper(const char* pred_text,$/;"	f	namespace:testing
AssertTypeEq	test/gtest/gtest.h	/^struct AssertTypeEq<T, T> {$/;"	s	namespace:testing::internal
AssertionFailure	test/gtest/gtest-all.cc	/^AssertionResult AssertionFailure() {$/;"	f	namespace:testing
AssertionFailure	test/gtest/gtest-all.cc	/^AssertionResult AssertionFailure(const Message& message) {$/;"	f	namespace:testing
AssertionResult	test/gtest/gtest-all.cc	/^AssertionResult::AssertionResult(const AssertionResult& other)$/;"	f	class:testing::AssertionResult
AssertionResult	test/gtest/gtest.h	/^  explicit AssertionResult($/;"	f	class:testing::AssertionResult
AssertionResult	test/gtest/gtest.h	/^class GTEST_API_ AssertionResult {$/;"	c	namespace:testing
AssertionSuccess	test/gtest/gtest-all.cc	/^AssertionResult AssertionSuccess() {$/;"	f	namespace:testing
Assign	include/taco/ir/ir.h	/^struct Assign : public StmtNode<Assign> {$/;"	s	namespace:taco::ir
Assignment	include/taco/index_notation/index_notation.h	/^class Assignment : public IndexStmt {$/;"	c	namespace:taco
Assignment	src/index_notation/index_notation.cpp	/^Assignment::Assignment(Access lhs, IndexExpr rhs, IndexExpr op)$/;"	f	class:taco::Assignment
Assignment	src/index_notation/index_notation.cpp	/^Assignment::Assignment(TensorVar tensor, vector<IndexVar> indices,$/;"	f	class:taco::Assignment
Assignment	src/index_notation/index_notation.cpp	/^Assignment::Assignment(const AssignmentNode* n) : IndexStmt(n) {$/;"	f	class:taco::Assignment
AssignmentNode	include/taco/index_notation/index_notation_nodes.h	/^  AssignmentNode(const Access& lhs, const IndexExpr& rhs, const IndexExpr& op)$/;"	f	struct:taco::AssignmentNode
AssignmentNode	include/taco/index_notation/index_notation_nodes.h	/^struct AssignmentNode : public IndexStmtNode {$/;"	s	namespace:taco
Associative	include/taco/index_notation/properties.h	/^class Associative : public Property {$/;"	c	namespace:taco
Associative	src/index_notation/properties.cpp	/^Associative::Associative() : Associative(new AssociativePtr) {$/;"	f	class:taco::Associative
Associative	src/index_notation/properties.cpp	/^Associative::Associative(const PropertyPtr* p) : Property(p) {$/;"	f	class:taco::Associative
AssociativePtr	include/taco/index_notation/property_pointers.h	/^struct AssociativePtr : public PropertyPtr {$/;"	s	namespace:taco
AssociativePtr	src/index_notation/property_pointers.cpp	/^AssociativePtr::AssociativePtr() : PropertyPtr() {$/;"	f	class:taco::AssociativePtr
AssumeRole	test/gtest/gtest-all.cc	/^DeathTest::TestRole ExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::ExecDeathTest
AssumeRole	test/gtest/gtest-all.cc	/^DeathTest::TestRole NoExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::NoExecDeathTest
AssumeRole	test/gtest/gtest-all.cc	/^DeathTest::TestRole WindowsDeathTest::AssumeRole() {$/;"	f	class:testing::internal::WindowsDeathTest
AtEnd	test/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
AtEnd	test/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
AtEnd	test/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
AtEnd	test/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
AtEnd	test/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
AtEnd	test/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
AtEnd	test/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
AtEnd	test/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
AtEnd	test/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
AtomMatchesChar	test/gtest/gtest-all.cc	/^bool AtomMatchesChar(bool escaped, char pattern_char, char ch) {$/;"	f	namespace:testing::internal
Atomics	include/taco/ir_tags.h	/^  IgnoreRaces, NoRaces, Atomics, Temporary, ParallelReduction$/;"	m	class:taco::OutputRaceStrategy
AutoHandle	test/gtest/gtest-all.cc	/^AutoHandle::AutoHandle()$/;"	f	class:testing::internal::AutoHandle
AutoHandle	test/gtest/gtest-all.cc	/^AutoHandle::AutoHandle(Handle handle)$/;"	f	class:testing::internal::AutoHandle
AutoHandle	test/gtest/gtest.h	/^class GTEST_API_ AutoHandle {$/;"	c	namespace:std::tr1
B	python_bindings/pybind11/tests/test_builtin_casters.py	/^    class B(object):$/;"	c	function:test_bool_caster
B	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	m	class:E1	file:
B	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct B {};$/;"	s	class:E1	file:
B	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class B(m.A):$/;"	c	function:test_alias_delay_initialization1
B1	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class B1(object):$/;"	c	function:test_multiple_inheritance_python
B2	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class B2(B1):$/;"	c	function:test_multiple_inheritance_python
B2	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class B2(m.A2):$/;"	c	function:test_alias_delay_initialization2
B3	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class B3(object):$/;"	c	function:test_multiple_inheritance_python
B4	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class B4(B3, B2):$/;"	c	function:test_multiple_inheritance_python
BAND	include/taco/ir/ir_printer.h	/^    BAND = 11,$/;"	e	enum:taco::ir::IRPrinter::Precedence
BC_BD_CD	test/op_factory.h	/^struct BC_BD_CD {$/;"	s	namespace:taco
BOR	include/taco/ir/ir_printer.h	/^    BOR = 11,$/;"	e	enum:taco::ir::IRPrinter::Precedence
BOTTOM	include/taco/ir/ir_printer.h	/^    BOTTOM = 0,$/;"	e	enum:taco::ir::IRPrinter::Precedence
BOUND	include/taco/index_notation/provenance_graph.h	/^enum IndexVarRelType {UNDEFINED, SPLIT, DIVIDE, POS, FUSE, BOUND, PRECOMPUTE};$/;"	e	enum:taco::IndexVarRelType
BRANCHLESS	include/taco/format.h	/^    FULL, NOT_FULL, ORDERED, NOT_ORDERED, UNIQUE, NOT_UNIQUE, BRANCHLESS,$/;"	e	enum:taco::ModeFormat::Property
BT	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class BT(m.B_Tpl):$/;"	c	function:test_inherited_virtuals
BUILDDIR	python_bindings/Makefile	/^BUILDDIR      = build$/;"	m
BUILDDIR	python_bindings/pybind11/docs/Makefile	/^BUILDDIR      = .build$/;"	m
B_METHODS	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^#define B_METHODS /;"	d	file:
B_Repeat	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class B_Repeat : public A_Repeat {$/;"	c	file:
B_Tpl	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class B_Tpl : public A_Tpl { B_METHODS };$/;"	c	file:
BadLen	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^    class BadLen(RuntimeError):$/;"	c	function:test_sequence_length
Base	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^struct Base {$/;"	s	file:
Base1	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class Base1:$/;"	c	function:test_multiple_inheritance_mix1
Base2	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class Base2:$/;"	c	function:test_multiple_inheritance_mix2
BaseExprNode	include/taco/ir/ir.h	/^struct BaseExprNode : public IRNode {$/;"	s	namespace:taco::ir
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
BaseGenerator	test/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
BaseN	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    BaseN(int i) : i(i) { }$/;"	f	struct:BaseN
BaseN	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^template <int N> struct BaseN {$/;"	s	file:
BaseStmtNode	include/taco/ir/ir.h	/^struct BaseStmtNode : public IRNode {$/;"	s	namespace:taco::ir
BasicNarrowIoManip	test/gtest/gtest.h	/^  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);$/;"	t	class:testing::Message::std
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::RangeGenerator
Begin	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
BfsLower	test/op_factory.h	/^struct BfsLower {$/;"	s	namespace:taco
BfsMaskAlg	test/op_factory.h	/^struct BfsMaskAlg {$/;"	s	namespace:taco
BiggestInt	test/gtest/gtest.h	/^typedef __int64 BiggestInt;$/;"	t	namespace:std::tr1
BiggestInt	test/gtest/gtest.h	/^typedef long long BiggestInt;  \/\/ NOLINT$/;"	t	namespace:std::tr1
BinOp	include/taco/ir/ir.h	/^  BinOp,$/;"	m	class:taco::ir::IRNodeType
BinOp	include/taco/ir/ir.h	/^struct BinOp : public ExprNode<BinOp> {$/;"	s	namespace:taco::ir
BinaryExprNode	include/taco/index_notation/index_notation_nodes.h	/^  BinaryExprNode() : IndexExprNode() {}$/;"	f	struct:taco::BinaryExprNode
BinaryExprNode	include/taco/index_notation/index_notation_nodes.h	/^  BinaryExprNode(IndexExpr a, IndexExpr b)$/;"	f	struct:taco::BinaryExprNode
BinaryExprNode	include/taco/index_notation/index_notation_nodes.h	/^struct BinaryExprNode : public IndexExprNode {$/;"	s	namespace:taco
BinaryIterationAlgebraNode	include/taco/index_notation/iteration_algebra.h	/^  BinaryIterationAlgebraNode(IterationAlgebra a, IterationAlgebra b) : IterationAlgebraNode(), a(a), b(b) {}$/;"	f	struct:taco::BinaryIterationAlgebraNode
BinaryIterationAlgebraNode	include/taco/index_notation/iteration_algebra.h	/^struct BinaryIterationAlgebraNode: public IterationAlgebraNode  {$/;"	s	namespace:taco
Bind	test/gtest/gtest.h	/^  struct Bind {$/;"	s	struct:testing::internal::TemplateSel
BitAnd	include/taco/ir/ir.h	/^  BitAnd,$/;"	m	class:taco::ir::IRNodeType
BitAnd	include/taco/ir/ir.h	/^struct BitAnd : public ExprNode<BitAnd> {$/;"	s	namespace:taco::ir
BitOr	include/taco/ir/ir.h	/^  BitOr,$/;"	m	class:taco::ir::IRNodeType
BitOr	include/taco/ir/ir.h	/^struct BitOr : public ExprNode<BitOr> {$/;"	s	namespace:taco::ir
BitOrImpl	test/op_factory.h	/^struct BitOrImpl {$/;"	s	namespace:taco
Bits	test/gtest/gtest.h	/^  typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;$/;"	t	class:testing::internal::FloatingPoint
BlankLine	include/taco/ir/ir.h	/^  BlankLine,$/;"	m	class:taco::ir::IRNodeType
BlankLine	include/taco/ir/ir.h	/^struct BlankLine : public StmtNode<BlankLine> {$/;"	s	namespace:taco::ir
Block	include/taco/ir/ir.h	/^  Block,$/;"	m	class:taco::ir::IRNodeType
Block	include/taco/ir/ir.h	/^struct Block : public StmtNode<Block> {$/;"	s	namespace:taco::ir
Bool	include/taco/type.h	/^    Bool,$/;"	e	enum:taco::Datatype::Kind
Bool	src/type.cpp	/^Datatype Bool = Datatype(Datatype::Bool);$/;"	m	namespace:taco	file:
Bool	test/gtest/gtest.h	/^inline internal::ParamGenerator<bool> Bool() {$/;"	f	namespace:testing
BoolFromGTestEnv	test/gtest/gtest-all.cc	/^bool BoolFromGTestEnv(const char* flag, bool default_value) {$/;"	f	namespace:testing::internal
BoundRelNode	include/taco/index_notation/provenance_graph.h	/^struct BoundRelNode : public IndexVarRelNode {$/;"	s	namespace:taco
BoundRelNode	src/index_notation/provenance_graph.cpp	/^BoundRelNode::BoundRelNode(taco::IndexVar parentVar, taco::IndexVar boundVar, size_t bound,$/;"	f	class:taco::BoundRelNode
BoundType	include/taco/ir_tags.h	/^enum class BoundType {$/;"	c	namespace:taco
BoundType_NAMES	src/ir_tags.cpp	/^const char *BoundType_NAMES[] = {"MinExact", "MinConstraint", "MaxExact", "MaxConstraint"};$/;"	m	namespace:taco	file:
Break	include/taco/ir/ir.h	/^struct Break : public StmtNode<Break> {$/;"	s	namespace:taco::ir
BreaksBase	python_bindings/pybind11/tests/test_class.cpp	/^template <int N> class BreaksBase { public:$/;"	c	file:
BreaksTramp	python_bindings/pybind11/tests/test_class.cpp	/^template <int N> class BreaksTramp : public BreaksBase<N> {};$/;"	c	file:
BrokenTF1	python_bindings/pybind11/tests/test_factory_constructors.py	/^    class BrokenTF1(m.TestFactory1):$/;"	c	function:test_invalid_self
BrokenTF6	python_bindings/pybind11/tests/test_factory_constructors.py	/^    class BrokenTF6(m.TestFactory6):$/;"	c	function:test_invalid_self
ByRef	test/gtest/gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
ByRef	test/gtest/gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
C	python_bindings/pybind11/tests/test_class.py	/^    class C(m.ProtectedB):$/;"	c	function:test_bind_protected_functions
C	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^struct C {$/;"	s	namespace:test_exc_sp	file:
C	src/codegen/codegen.h	/^  enum CodeGenType { C, CUDA };$/;"	e	enum:taco::ir::CodeGen::CodeGenType
C1	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^class C1 { };$/;"	c	file:
C2	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^class C2 { };$/;"	c	file:
C99	include/taco/target.h	/^  enum Arch {C99=0, X86} arch;$/;"	e	enum:taco::Target::Arch
CALL	include/taco/ir/ir_printer.h	/^    CALL = 2,$/;"	e	enum:taco::ir::IRPrinter::Precedence
CAST	include/taco/index_notation/index_notation_printer.h	/^    CAST = 2,$/;"	m	class:taco::IndexNotationPrinter::Precedence
CAST	include/taco/ir/ir_printer.h	/^    CAST = 3,$/;"	e	enum:taco::ir::IRPrinter::Precedence
CATCH_CONFIG_RUNNER	python_bindings/pybind11/tests/test_embed/catch.cpp	/^#define CATCH_CONFIG_RUNNER$/;"	d	file:
CCR	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class CCR(CR):$/;"	c	function:test_inherited_virtuals
CCT	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class CCT(CT):$/;"	c	function:test_inherited_virtuals
CHECK_ALIAS	python_bindings/pybind11/tests/test_class.cpp	/^#define CHECK_ALIAS(/;"	d	file:
CHECK_BASE	python_bindings/pybind11/tests/test_class.cpp	/^#define CHECK_BASE(/;"	d	file:
CHECK_BROKEN	python_bindings/pybind11/tests/test_class.cpp	/^#define CHECK_BROKEN(/;"	d	file:
CHECK_HOLDER	python_bindings/pybind11/tests/test_class.cpp	/^#define CHECK_HOLDER(/;"	d	file:
CHECK_NOALIAS	python_bindings/pybind11/tests/test_class.cpp	/^#define CHECK_NOALIAS(/;"	d	file:
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/Users\/manyab\/taco-rda\/build$/;"	m
CMAKE_BINARY_DIR	build/apps/Makefile	/^CMAKE_BINARY_DIR = \/Users\/manyab\/taco-rda\/build$/;"	m
CMAKE_BINARY_DIR	build/apps/tensor_times_vector/Makefile	/^CMAKE_BINARY_DIR = \/Users\/manyab\/taco-rda\/build$/;"	m
CMAKE_BINARY_DIR	build/src/Makefile	/^CMAKE_BINARY_DIR = \/Users\/manyab\/taco-rda\/build$/;"	m
CMAKE_BINARY_DIR	build/test/Makefile	/^CMAKE_BINARY_DIR = \/Users\/manyab\/taco-rda\/build$/;"	m
CMAKE_BINARY_DIR	build/tools/Makefile	/^CMAKE_BINARY_DIR = \/Users\/manyab\/taco-rda\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/apps/Makefile	/^CMAKE_COMMAND = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/apps/tensor_times_vector/Makefile	/^CMAKE_COMMAND = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/Makefile	/^CMAKE_COMMAND = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/test/Makefile	/^CMAKE_COMMAND = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/tools/Makefile	/^CMAKE_COMMAND = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/manyab\/taco-rda$/;"	m
CMAKE_SOURCE_DIR	build/apps/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/manyab\/taco-rda$/;"	m
CMAKE_SOURCE_DIR	build/apps/tensor_times_vector/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/manyab\/taco-rda$/;"	m
CMAKE_SOURCE_DIR	build/src/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/manyab\/taco-rda$/;"	m
CMAKE_SOURCE_DIR	build/test/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/manyab\/taco-rda$/;"	m
CMAKE_SOURCE_DIR	build/tools/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/manyab\/taco-rda$/;"	m
COLOR_DEFAULT	test/gtest/gtest-all.cc	/^  COLOR_DEFAULT,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_GREEN	test/gtest/gtest-all.cc	/^  COLOR_GREEN,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_RED	test/gtest/gtest-all.cc	/^  COLOR_RED,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_YELLOW	test/gtest/gtest-all.cc	/^  COLOR_YELLOW$/;"	e	enum:testing::internal::GTestColor	file:
COMPACT	include/taco/format.h	/^    NOT_BRANCHLESS, COMPACT, NOT_COMPACT, ZEROLESS, NOT_ZEROLESS$/;"	e	enum:taco::ModeFormat::Property
COMPILER_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPLEMENT	include/taco/index_notation/iteration_algebra_printer.h	/^    COMPLEMENT = 3,$/;"	m	class:taco::IterationAlgebraPrinter::Precedence
COO	src/format.cpp	/^const Format COO(int order, bool isUnique, bool isOrdered, bool isAoS, $/;"	f	namespace:taco
CPUThread	include/taco/ir_tags.h	/^  NotParallel, DefaultUnit, GPUBlock, GPUWarp, GPUThread, CPUThread, CPUVector, CPUThreadGroupReduction, GPUBlockReduction, GPUWarpReduction$/;"	m	class:taco::ParallelUnit
CPUThreadGroupReduction	include/taco/ir_tags.h	/^  NotParallel, DefaultUnit, GPUBlock, GPUWarp, GPUThread, CPUThread, CPUVector, CPUThreadGroupReduction, GPUBlockReduction, GPUWarpReduction$/;"	m	class:taco::ParallelUnit
CPUVector	include/taco/ir_tags.h	/^  NotParallel, DefaultUnit, GPUBlock, GPUWarp, GPUThread, CPUThread, CPUVector, CPUThreadGroupReduction, GPUBlockReduction, GPUWarpReduction$/;"	m	class:taco::ParallelUnit
CPYTHON	python_bindings/pybind11/tests/env.py	/^CPYTHON = platform.python_implementation() == "CPython"$/;"	v
CR	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class CR(m.C_Repeat):$/;"	c	function:test_inherited_virtuals
CStringEquals	test/gtest/gtest-all.cc	/^bool String::CStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CT	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class CT(m.C_Tpl):$/;"	c	function:test_inherited_virtuals
CUDA	src/codegen/codegen.h	/^  enum CodeGenType { C, CUDA };$/;"	e	enum:taco::ir::CodeGen::CodeGenType
CUDA_BUILT	include/taco/cuda.h	/^  #define CUDA_BUILT /;"	d
CUDA_H	include/taco/cuda.h	/^#define CUDA_H$/;"	d
CUDA_codegen_enabled	src/cuda.cpp	/^static bool CUDA_codegen_enabled = CUDA_BUILT;$/;"	m	namespace:taco	file:
CUDA_unified_memory_enabled	src/cuda.cpp	/^static bool CUDA_unified_memory_enabled = CUDA_BUILT;$/;"	m	namespace:taco	file:
CXX_STD	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
C_METHODS	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^#define C_METHODS /;"	d	file:
C_Repeat	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class C_Repeat : public B_Repeat {$/;"	c	file:
C_Tpl	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class C_Tpl : public B_Tpl { C_METHODS };$/;"	c	file:
C_VERSION	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION /;"	d	file:
C_VERSION	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION$/;"	d	file:
C_VERSION	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define C_VERSION /;"	d	file:
CalculateEndIndex	test/gtest/gtest.h	/^  static int CalculateEndIndex(const T& begin,$/;"	f	class:testing::internal::RangeGenerator
Call	include/taco/index_notation/index_notation.h	/^class Call: public IndexExpr {$/;"	c	namespace:taco
Call	include/taco/ir/ir.h	/^  Call,$/;"	m	class:taco::ir::IRNodeType
Call	include/taco/ir/ir.h	/^struct Call : public ExprNode<Call> {$/;"	s	namespace:taco::ir
Call	src/index_notation/index_notation.cpp	/^Call::Call(const CallNode *n, std::string name) : IndexExpr(n), name(name) {$/;"	f	class:taco::Call
Call	src/index_notation/index_notation.cpp	/^Call::Call(const CallNode* n) : IndexExpr(n) {$/;"	f	class:taco::Call
CallIntrinsic	include/taco/index_notation/index_notation.h	/^class CallIntrinsic : public IndexExpr {$/;"	c	namespace:taco
CallIntrinsic	src/index_notation/index_notation.cpp	/^CallIntrinsic::CallIntrinsic(const CallIntrinsicNode* n) : IndexExpr(n) {$/;"	f	class:taco::CallIntrinsic
CallIntrinsic	src/index_notation/index_notation.cpp	/^CallIntrinsic::CallIntrinsic(const std::shared_ptr<Intrinsic>& func,$/;"	f	class:taco::CallIntrinsic
CallIntrinsicNode	include/taco/index_notation/index_notation_nodes.h	/^struct CallIntrinsicNode : public IndexExprNode {$/;"	s	namespace:taco
CallIntrinsicNode	src/index_notation/index_notation_nodes.cpp	/^CallIntrinsicNode::CallIntrinsicNode(const std::shared_ptr<Intrinsic>& func, $/;"	f	class:taco::CallIntrinsicNode
CallNode	include/taco/index_notation/index_notation_nodes.h	/^struct CallNode : public IndexExprNode {$/;"	s	namespace:taco
CallNode	src/index_notation/index_notation_nodes.cpp	/^  CallNode::CallNode(std::string name, const std::vector<IndexExpr>& args, OpImpl defaultLowerFunc,$/;"	f	class:taco::CallNode
CallNode	src/index_notation/index_notation_nodes.cpp	/^CallNode::CallNode(std::string name, const std::vector<IndexExpr>& args, OpImpl defaultLowerFunc,$/;"	f	class:taco::CallNode
Capture	python_bindings/pybind11/tests/conftest.py	/^class Capture(object):$/;"	c
CaptureStderr	test/gtest/gtest-all.cc	/^void CaptureStderr() {$/;"	f	namespace:testing::internal
CaptureStdout	test/gtest/gtest-all.cc	/^void CaptureStdout() {$/;"	f	namespace:testing::internal
CaptureStream	test/gtest/gtest-all.cc	/^void CaptureStream(int fd, const char* stream_name, CapturedStream** stream) {$/;"	f	namespace:testing::internal
CapturedStream	test/gtest/gtest-all.cc	/^  explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {$/;"	f	class:testing::internal::CapturedStream
CapturedStream	test/gtest/gtest-all.cc	/^class CapturedStream {$/;"	c	namespace:testing::internal	file:
CartesianProductGenerator10	test/gtest/gtest.h	/^  CartesianProductGenerator10(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator10
CartesianProductGenerator10	test/gtest/gtest.h	/^class CartesianProductGenerator10$/;"	c	namespace:testing::internal
CartesianProductGenerator2	test/gtest/gtest.h	/^  CartesianProductGenerator2(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator2
CartesianProductGenerator2	test/gtest/gtest.h	/^class CartesianProductGenerator2$/;"	c	namespace:testing::internal
CartesianProductGenerator3	test/gtest/gtest.h	/^  CartesianProductGenerator3(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator3
CartesianProductGenerator3	test/gtest/gtest.h	/^class CartesianProductGenerator3$/;"	c	namespace:testing::internal
CartesianProductGenerator4	test/gtest/gtest.h	/^  CartesianProductGenerator4(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator4
CartesianProductGenerator4	test/gtest/gtest.h	/^class CartesianProductGenerator4$/;"	c	namespace:testing::internal
CartesianProductGenerator5	test/gtest/gtest.h	/^  CartesianProductGenerator5(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator5
CartesianProductGenerator5	test/gtest/gtest.h	/^class CartesianProductGenerator5$/;"	c	namespace:testing::internal
CartesianProductGenerator6	test/gtest/gtest.h	/^  CartesianProductGenerator6(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator6
CartesianProductGenerator6	test/gtest/gtest.h	/^class CartesianProductGenerator6$/;"	c	namespace:testing::internal
CartesianProductGenerator7	test/gtest/gtest.h	/^  CartesianProductGenerator7(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator7
CartesianProductGenerator7	test/gtest/gtest.h	/^class CartesianProductGenerator7$/;"	c	namespace:testing::internal
CartesianProductGenerator8	test/gtest/gtest.h	/^  CartesianProductGenerator8(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator8
CartesianProductGenerator8	test/gtest/gtest.h	/^class CartesianProductGenerator8$/;"	c	namespace:testing::internal
CartesianProductGenerator9	test/gtest/gtest.h	/^  CartesianProductGenerator9(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator9
CartesianProductGenerator9	test/gtest/gtest.h	/^class CartesianProductGenerator9$/;"	c	namespace:testing::internal
CartesianProductHolder10	test/gtest/gtest.h	/^CartesianProductHolder10(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder10
CartesianProductHolder10	test/gtest/gtest.h	/^class CartesianProductHolder10 {$/;"	c	namespace:testing::internal
CartesianProductHolder2	test/gtest/gtest.h	/^CartesianProductHolder2(const Generator1& g1, const Generator2& g2)$/;"	f	class:testing::internal::CartesianProductHolder2
CartesianProductHolder2	test/gtest/gtest.h	/^class CartesianProductHolder2 {$/;"	c	namespace:testing::internal
CartesianProductHolder3	test/gtest/gtest.h	/^CartesianProductHolder3(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder3
CartesianProductHolder3	test/gtest/gtest.h	/^class CartesianProductHolder3 {$/;"	c	namespace:testing::internal
CartesianProductHolder4	test/gtest/gtest.h	/^CartesianProductHolder4(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder4
CartesianProductHolder4	test/gtest/gtest.h	/^class CartesianProductHolder4 {$/;"	c	namespace:testing::internal
CartesianProductHolder5	test/gtest/gtest.h	/^CartesianProductHolder5(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder5
CartesianProductHolder5	test/gtest/gtest.h	/^class CartesianProductHolder5 {$/;"	c	namespace:testing::internal
CartesianProductHolder6	test/gtest/gtest.h	/^CartesianProductHolder6(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder6
CartesianProductHolder6	test/gtest/gtest.h	/^class CartesianProductHolder6 {$/;"	c	namespace:testing::internal
CartesianProductHolder7	test/gtest/gtest.h	/^CartesianProductHolder7(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder7
CartesianProductHolder7	test/gtest/gtest.h	/^class CartesianProductHolder7 {$/;"	c	namespace:testing::internal
CartesianProductHolder8	test/gtest/gtest.h	/^CartesianProductHolder8(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder8
CartesianProductHolder8	test/gtest/gtest.h	/^class CartesianProductHolder8 {$/;"	c	namespace:testing::internal
CartesianProductHolder9	test/gtest/gtest.h	/^CartesianProductHolder9(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder9
CartesianProductHolder9	test/gtest/gtest.h	/^class CartesianProductHolder9 {$/;"	c	namespace:testing::internal
Case	include/taco/ir/ir.h	/^  Case,$/;"	m	class:taco::ir::IRNodeType
Case	include/taco/ir/ir.h	/^struct Case : public StmtNode<Case> {$/;"	s	namespace:taco::ir
CaseInsensitiveCStringEquals	test/gtest/gtest-all.cc	/^bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CaseInsensitiveWideCStringEquals	test/gtest/gtest-all.cc	/^bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,$/;"	f	class:testing::internal::String
Cast	include/taco/index_notation/index_notation.h	/^class Cast : public IndexExpr {$/;"	c	namespace:taco
Cast	include/taco/ir/ir.h	/^  Cast,$/;"	m	class:taco::ir::IRNodeType
Cast	include/taco/ir/ir.h	/^struct Cast : public ExprNode<Cast> {$/;"	s	namespace:taco::ir
Cast	src/index_notation/index_notation.cpp	/^Cast::Cast(IndexExpr a, Datatype newType) : Cast(new CastNode(a, newType)) {$/;"	f	class:taco::Cast
Cast	src/index_notation/index_notation.cpp	/^Cast::Cast(const CastNode* n) : IndexExpr(n) {$/;"	f	class:taco::Cast
CastNode	include/taco/index_notation/index_notation_nodes.h	/^struct CastNode : public IndexExprNode {$/;"	s	namespace:taco
CastNode	src/index_notation/index_notation_nodes.cpp	/^CastNode::CastNode(IndexExpr a, Datatype newType)$/;"	f	class:taco::CastNode
Cat	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^        Cat = 200, Panther, LastCat = 299$/;"	m	class:Animal::Kind	file:
Cat	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    Cat(const std::string& _name, Kind _kind = Kind::Cat) : Animal(_name, _kind) {}$/;"	f	struct:Animal::Cat
Cat	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^struct Cat : Animal$/;"	s	struct:Animal	file:
ChDir	test/gtest/gtest.h	/^inline int ChDir(const char* dir) { return chdir(dir); }$/;"	f	namespace:std::tr1::posix
CharFormat	test/gtest/gtest-all.cc	/^enum CharFormat {$/;"	g	namespace:testing::internal	file:
CheckedDowncastToActualType	test/gtest/gtest.h	/^Derived* CheckedDowncastToActualType(Base* base) {$/;"	f	namespace:std::tr1
Chihuahua	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^        Dog = 100, Labrador, Chihuahua, LastDog = 199,$/;"	m	class:Animal::Kind	file:
Chihuahua	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    Chihuahua(const std::string& _name) : Dog(_name, Kind::Chihuahua) { sound = "iyiyiyiyiyi"; }$/;"	f	struct:Animal::Chihuahua
Chihuahua	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^struct Chihuahua : Dog$/;"	s	struct:Animal	file:
ChopLowBits	test/gtest/gtest-all.cc	/^inline UInt32 ChopLowBits(UInt32* bits, int n) {$/;"	f	namespace:testing::internal
ClassScope	python_bindings/pybind11/tests/test_class.py	/^    class ClassScope:$/;"	c	function:test_register_duplicate_class
ClassUniqueToAlwaysTrue	test/gtest/gtest-all.cc	/^class ClassUniqueToAlwaysTrue {};$/;"	c	namespace:testing::internal::__anon5	file:
Clear	test/gtest/gtest-all.cc	/^void TestResult::Clear() {$/;"	f	class:testing::TestResult
ClearAdHocTestResult	test/gtest/gtest-all.cc	/^  void ClearAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearNonAdHocTestResult	test/gtest/gtest-all.cc	/^  void ClearNonAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearResult	test/gtest/gtest-all.cc	/^void TestCase::ClearResult() {$/;"	f	class:testing::TestCase
ClearTestCaseResult	test/gtest/gtest.h	/^  static void ClearTestCaseResult(TestCase* test_case) {$/;"	f	class:testing::TestCase
ClearTestPartResults	test/gtest/gtest-all.cc	/^  static void ClearTestPartResults(TestResult* test_result) {$/;"	f	class:testing::internal::TestResultAccessor
ClearTestPartResults	test/gtest/gtest-all.cc	/^void TestResult::ClearTestPartResults() {$/;"	f	class:testing::TestResult
ClearTestResult	test/gtest/gtest.h	/^  static void ClearTestResult(TestInfo* test_info) {$/;"	f	class:testing::TestInfo
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Clone	test/gtest/gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Close	test/gtest/gtest.h	/^inline int Close(int fd) { return close(fd); }$/;"	f	namespace:std::tr1::posix
CloseConnection	test/gtest/gtest-all.cc	/^    virtual void CloseConnection() {}$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
CloseConnection	test/gtest/gtest-all.cc	/^    void CloseConnection() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter	file:
CmpHelperEQ	test/gtest/gtest-all.cc	/^AssertionResult CmpHelperEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperEQ	test/gtest/gtest.h	/^AssertionResult CmpHelperEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperFloatingPointEQ	test/gtest/gtest.h	/^AssertionResult CmpHelperFloatingPointEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRCASEEQ	test/gtest/gtest-all.cc	/^AssertionResult CmpHelperSTRCASEEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRCASENE	test/gtest/gtest-all.cc	/^AssertionResult CmpHelperSTRCASENE(const char* s1_expression,$/;"	f	namespace:testing::internal
CmpHelperSTREQ	test/gtest/gtest-all.cc	/^AssertionResult CmpHelperSTREQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRNE	test/gtest/gtest-all.cc	/^AssertionResult CmpHelperSTRNE(const char* s1_expression,$/;"	f	namespace:testing::internal
CodeGen	src/codegen/codegen.h	/^  CodeGen(std::ostream& stream, CodeGenType type) : IRPrinter(stream), codeGenType(type) {};$/;"	f	class:taco::ir::CodeGen
CodeGen	src/codegen/codegen.h	/^  CodeGen(std::ostream& stream, bool color, bool simplify, CodeGenType type) : IRPrinter(stream, color, simplify), codeGenType(type) {};$/;"	f	class:taco::ir::CodeGen
CodeGen	src/codegen/codegen.h	/^class CodeGen : public IRPrinter {$/;"	c	namespace:taco::ir
CodeGenType	src/codegen/codegen.h	/^  enum CodeGenType { C, CUDA };$/;"	g	class:taco::ir::CodeGen
CodeGen_C	src/codegen/codegen_c.cpp	/^CodeGen_C::CodeGen_C(std::ostream &dest, OutputKind outputKind, bool simplify)$/;"	f	class:taco::ir::CodeGen_C
CodeGen_C	src/codegen/codegen_c.h	/^class CodeGen_C : public CodeGen {$/;"	c	namespace:taco::ir
CodeGen_CUDA	src/codegen/codegen_cuda.cpp	/^CodeGen_CUDA::CodeGen_CUDA(std::ostream &dest, OutputKind outputKind)$/;"	f	class:taco::ir::CodeGen_CUDA
CodeGen_CUDA	src/codegen/codegen_cuda.h	/^class CodeGen_CUDA : public CodeGen {$/;"	c	namespace:taco::ir
CodePointToUtf8	test/gtest/gtest-all.cc	/^std::string CodePointToUtf8(UInt32 code_point) {$/;"	f	namespace:testing::internal
ColoredPrintf	test/gtest/gtest-all.cc	/^void ColoredPrintf(GTestColor color, const char* fmt, ...) {$/;"	f	namespace:testing::internal
Combine	test/gtest/gtest.h	/^    Generator10> Combine($/;"	f	namespace:testing
Combine	test/gtest/gtest.h	/^    Generator4, Generator5, Generator6, Generator7, Generator8> Combine($/;"	f	namespace:testing
Combine	test/gtest/gtest.h	/^    Generator4, Generator5, Generator6, Generator7> Combine($/;"	f	namespace:testing
Combine	test/gtest/gtest.h	/^    Generator4, Generator5, Generator6> Combine($/;"	f	namespace:testing
Combine	test/gtest/gtest.h	/^    Generator4, Generator5> Combine($/;"	f	namespace:testing
Combine	test/gtest/gtest.h	/^    Generator4> Combine($/;"	f	namespace:testing
Combine	test/gtest/gtest.h	/^    Generator9> Combine($/;"	f	namespace:testing
Combine	test/gtest/gtest.h	/^internal::CartesianProductHolder2<Generator1, Generator2> Combine($/;"	f	namespace:testing
Combine	test/gtest/gtest.h	/^internal::CartesianProductHolder3<Generator1, Generator2, Generator3> Combine($/;"	f	namespace:testing
Comment	include/taco/ir/ir.h	/^  Comment,$/;"	m	class:taco::ir::IRNodeType
Comment	include/taco/ir/ir.h	/^struct Comment : public StmtNode<Comment> {$/;"	s	namespace:taco::ir
Commutative	include/taco/index_notation/properties.h	/^class Commutative : public Property {$/;"	c	namespace:taco
Commutative	src/index_notation/properties.cpp	/^Commutative::Commutative() : Commutative(new CommutativePtr) {$/;"	f	class:taco::Commutative
Commutative	src/index_notation/properties.cpp	/^Commutative::Commutative(const PropertyPtr* p) : Property(p) {$/;"	f	class:taco::Commutative
Commutative	src/index_notation/properties.cpp	/^Commutative::Commutative(const std::vector<int>& ordering) : Commutative(new CommutativePtr(ordering)) {$/;"	f	class:taco::Commutative
CommutativePtr	include/taco/index_notation/property_pointers.h	/^struct CommutativePtr : public PropertyPtr {$/;"	s	namespace:taco
CommutativePtr	src/index_notation/property_pointers.cpp	/^CommutativePtr::CommutativePtr() : PropertyPtr() {$/;"	f	class:taco::CommutativePtr
CommutativePtr	src/index_notation/property_pointers.cpp	/^CommutativePtr::CommutativePtr(const std::vector<int>& ordering) : ordering_(ordering) {$/;"	f	class:taco::CommutativePtr
Comparable	include/taco/util/comparable.h	/^class Comparable {};$/;"	c	namespace:taco::util
Compare	test/gtest/gtest.h	/^  static AssertionResult Compare($/;"	f	class:testing::internal::EqHelper
Compare	test/gtest/gtest.h	/^  static AssertionResult Compare(const char* expected_expression,$/;"	f	class:testing::internal::EqHelper
CompileAssertTypesEqual	test/gtest/gtest.h	/^struct CompileAssertTypesEqual<T, T> {$/;"	s	namespace:testing::internal
Complement	include/taco/index_notation/iteration_algebra.h	/^class Complement: public IterationAlgebra {$/;"	c	namespace:taco
Complement	src/index_notation/iteration_algebra.cpp	/^Complement::Complement(IterationAlgebra alg) : Complement(new ComplementNode(alg)) {$/;"	f	class:taco::Complement
Complement	src/index_notation/iteration_algebra.cpp	/^Complement::Complement(const ComplementNode* n): IterationAlgebra(n) {$/;"	f	class:taco::Complement
ComplementIntersect	test/op_factory.h	/^struct ComplementIntersect {$/;"	s	namespace:taco
ComplementNode	include/taco/index_notation/iteration_algebra.h	/^  ComplementNode(IterationAlgebra a) : IterationAlgebraNode(), a(a) {}$/;"	f	struct:taco::ComplementNode
ComplementNode	include/taco/index_notation/iteration_algebra.h	/^struct ComplementNode: public IterationAlgebraNode {$/;"	s	namespace:taco
ComplementUnion	test/op_factory.h	/^struct ComplementUnion {$/;"	s	namespace:taco
Complex	src/type.cpp	/^Datatype Complex(int bits) {$/;"	f	namespace:taco
Complex128	include/taco/type.h	/^    Complex128,$/;"	e	enum:taco::Datatype::Kind
Complex128	src/type.cpp	/^Datatype Complex128 = Datatype(Datatype::Complex128);$/;"	m	namespace:taco	file:
Complex64	include/taco/type.h	/^    Complex64,$/;"	e	enum:taco::Datatype::Kind
Complex64	src/type.cpp	/^Datatype Complex64  = Datatype(Datatype::Complex64);$/;"	m	namespace:taco	file:
ComplexStruct	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct ComplexStruct {$/;"	s	file:
Component	include/taco/component.h	/^  Component() : coord(), val(0) {}$/;"	f	class:taco::Component
Component	include/taco/component.h	/^  Component(Coordinate<Order> coordinate, CType value) : coord(coordinate), val(value) {$/;"	f	class:taco::Component
Component	include/taco/component.h	/^class Component {$/;"	c	namespace:taco
ComponentSize	include/taco/ir/ir.h	/^  ComponentSize,$/;"	m	class:taco::ir::TensorProperty
ComponentTypeUnion	include/taco/type.h	/^  ComponentTypeUnion() {int32Value = 0;}$/;"	f	union:taco::ComponentTypeUnion
ComponentTypeUnion	include/taco/type.h	/^union ComponentTypeUnion {$/;"	u	namespace:taco
Compressed	include/taco/format.h	/^  static ModeFormat Compressed;  \/\/\/ alias for compressed$/;"	m	class:taco::ModeFormat
Compressed	src/format.cpp	/^const ModeFormat Compressed = ModeFormat::Compressed;$/;"	m	namespace:taco	file:
CompressedModeFormat	include/taco/lower/mode_format_compressed.h	/^class CompressedModeFormat : public ModeFormatImpl {$/;"	c	namespace:taco
CompressedModeFormat	src/lower/mode_format_compressed.cpp	/^CompressedModeFormat::CompressedModeFormat() : $/;"	f	class:taco::CompressedModeFormat
CompressedModeFormat	src/lower/mode_format_compressed.cpp	/^CompressedModeFormat::CompressedModeFormat(bool isFull, bool isOrdered,$/;"	f	class:taco::CompressedModeFormat
ComputeCurrentValue	test/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
ComputeCurrentValue	test/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
ComputeCurrentValue	test/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
ComputeCurrentValue	test/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
ComputeCurrentValue	test/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
ComputeCurrentValue	test/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
ComputeCurrentValue	test/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
ComputeCurrentValue	test/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
ComputeCurrentValue	test/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
ConcatPaths	test/gtest/gtest-all.cc	/^FilePath FilePath::ConcatPaths(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
ConcreteTest	test/tests-index_notation.cpp	/^  ConcreteTest(IndexStmt reduction, IndexStmt concrete)$/;"	f	struct:ConcreteTest
ConcreteTest	test/tests-index_notation.cpp	/^struct ConcreteTest {$/;"	s	file:
ConfigureStreamingOutput	test/gtest/gtest-all.cc	/^void UnitTestImpl::ConfigureStreamingOutput() {$/;"	f	class:testing::internal::UnitTestImpl
ConfigureXmlOutput	test/gtest/gtest-all.cc	/^void UnitTestImpl::ConfigureXmlOutput() {$/;"	f	class:testing::internal::UnitTestImpl
ConstCharPtr	test/gtest/gtest.h	/^  ConstCharPtr(const char* str) : value(str) {}$/;"	f	struct:testing::internal::ConstCharPtr
ConstCharPtr	test/gtest/gtest.h	/^struct GTEST_API_ ConstCharPtr {$/;"	s	namespace:testing::internal
ConstRefCasted	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^struct ConstRefCasted {$/;"	s	file:
ConstructorStats	python_bindings/pybind11/tests/constructor_stats.h	/^class ConstructorStats {$/;"	c
ConstructorStats	python_bindings/pybind11/tests/test_buffers.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_call_policies.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_class.py	/^from pybind11_tests import UserType, ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_eigen.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_factory_constructors.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_modules.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_opaque_types.py	/^from pybind11_tests import ConstructorStats, UserType$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_operator_overloading.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_smart_ptr.py	/^from pybind11_tests import ConstructorStats  # noqa: E402$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_stl.py	/^from pybind11_tests import ConstructorStats$/;"	i
ConstructorStats	python_bindings/pybind11/tests/test_virtual_functions.py	/^from pybind11_tests import ConstructorStats  # noqa: E402$/;"	i
ContainerType	test/gtest/gtest.h	/^  typedef typename ::std::vector<T> ContainerType;$/;"	t	class:testing::internal::ValuesInIteratorRangeGenerator
Content	include/taco/index_notation/index_notation.h	/^struct IndexSetVar::Content {$/;"	s	class:taco::IndexSetVar
Content	include/taco/index_notation/index_notation.h	/^struct IndexVar::Content {$/;"	s	class:taco::IndexVar
Content	include/taco/index_notation/index_notation.h	/^struct WindowedIndexVar::Content {$/;"	s	class:taco::WindowedIndexVar
Content	include/taco/index_notation/index_notation_nodes.h	/^struct IndexVarNode::Content {$/;"	s	class:taco::IndexVarNode
Content	include/taco/tensor.h	/^  Content(std::string name, Datatype dataType, const std::vector<int>& dimensions,$/;"	f	struct:taco::TensorBase::Content
Content	include/taco/tensor.h	/^struct TensorBase::Content {$/;"	s	class:taco::TensorBase
Content	src/index_notation/index_notation.cpp	/^struct TensorVar::Content {$/;"	s	class:taco::TensorVar	file:
Content	src/index_notation/kernel.cpp	/^struct Kernel::Content {$/;"	s	class:taco::Kernel	file:
Content	src/index_notation/property_pointers.cpp	/^struct AnnihilatorPtr::Content {$/;"	s	class:taco::AnnihilatorPtr	file:
Content	src/index_notation/property_pointers.cpp	/^struct IdentityPtr::Content {$/;"	s	class:taco::IdentityPtr	file:
Content	src/index_notation/provenance_graph.cpp	/^  Content(IndexVar parentVar, IndexVar posVar, Access access) : parentVar(parentVar), posVar(posVar), access(access) {}$/;"	f	struct:taco::PosRelNode::Content
Content	src/index_notation/provenance_graph.cpp	/^struct BoundRelNode::Content {$/;"	s	class:taco::BoundRelNode	file:
Content	src/index_notation/provenance_graph.cpp	/^struct DivideRelNode::Content {$/;"	s	class:taco::DivideRelNode	file:
Content	src/index_notation/provenance_graph.cpp	/^struct FuseRelNode::Content {$/;"	s	class:taco::FuseRelNode	file:
Content	src/index_notation/provenance_graph.cpp	/^struct PosRelNode::Content {$/;"	s	class:taco::PosRelNode	file:
Content	src/index_notation/provenance_graph.cpp	/^struct PrecomputeRelNode::Content {$/;"	s	class:taco::PrecomputeRelNode	file:
Content	src/index_notation/provenance_graph.cpp	/^struct SplitRelNode::Content {$/;"	s	class:taco::SplitRelNode	file:
Content	src/index_notation/schedule.cpp	/^struct Schedule::Content {$/;"	s	class:taco::Schedule	file:
Content	src/index_notation/transformations.cpp	/^struct AddSuchThatPredicates::Content {$/;"	s	class:taco::AddSuchThatPredicates	file:
Content	src/index_notation/transformations.cpp	/^struct ForAllReplace::Content {$/;"	s	class:taco::ForAllReplace	file:
Content	src/index_notation/transformations.cpp	/^struct Parallelize::Content {$/;"	s	class:taco::Parallelize	file:
Content	src/index_notation/transformations.cpp	/^struct Precompute::Content {$/;"	s	class:taco::Precompute	file:
Content	src/index_notation/transformations.cpp	/^struct Reorder::Content {$/;"	s	class:taco::Reorder	file:
Content	src/lower/iteration_graph.cpp	/^  Content(IterationForest iterationForest, const vector<IndexVar>& freeVars,$/;"	f	struct:taco::IterationGraph::Content
Content	src/lower/iteration_graph.cpp	/^struct IterationGraph::Content {$/;"	s	class:taco::IterationGraph	file:
Content	src/lower/iterator.cpp	/^struct Iterator::Content {$/;"	s	class:taco::Iterator	file:
Content	src/lower/iterator.cpp	/^struct Iterators::Content {$/;"	s	class:taco::Iterators	file:
Content	src/lower/merge_lattice.cpp	/^struct MergePoint::Content {$/;"	s	class:taco::MergePoint	file:
Content	src/lower/mode.cpp	/^struct Mode::Content {$/;"	s	class:taco::Mode	file:
Content	src/lower/mode.cpp	/^struct ModePack::Content {$/;"	s	class:taco::ModePack	file:
Content	src/lower/mode_format_impl.cpp	/^struct ModeFunction::Content {$/;"	s	class:taco::ModeFunction	file:
Content	src/lower/tensor_path.cpp	/^  Content(vector<IndexVar> vars, Access access) : vars(vars), access(access) {}$/;"	f	struct:taco::TensorPath::Content
Content	src/lower/tensor_path.cpp	/^struct TensorPath::Content {$/;"	s	class:taco::TensorPath	file:
Content	src/parser/parser.cpp	/^struct Parser::Content {$/;"	s	class:taco::parser::Parser	file:
Content	src/storage/array.cpp	/^struct Array::Content : util::Uncopyable {$/;"	s	class:taco::Array	file:
Content	src/storage/index.cpp	/^struct Index::Content {$/;"	s	class:taco::Index	file:
Content	src/storage/index.cpp	/^struct ModeIndex::Content {$/;"	s	class:taco::ModeIndex	file:
Content	src/storage/storage.cpp	/^  Content(Datatype componentType, vector<int> dimensions, Format format, Literal fill)$/;"	f	struct:taco::TensorStorage::Content
Content	src/storage/storage.cpp	/^struct TensorStorage::Content {$/;"	s	class:taco::TensorStorage	file:
Content	src/type.cpp	/^struct Dimension::Content {$/;"	s	class:taco::Dimension	file:
Context	include/taco/tensor.h	/^      Context(int order, int bufferCapacity, void* iterCtx) :$/;"	f	struct:taco::TensorBase::const_iterator::Context
Context	include/taco/tensor.h	/^    struct Context {$/;"	s	class:taco::TensorBase::const_iterator
Continue	include/taco/ir/ir.h	/^  Continue,$/;"	m	class:taco::ir::IRNodeType
Continue	include/taco/ir/ir.h	/^struct Continue : public StmtNode<Continue> {$/;"	s	namespace:taco::ir
Coordinate	include/taco/coordinate.h	/^  Coordinate() {}$/;"	f	class:taco::Coordinate
Coordinate	include/taco/coordinate.h	/^  Coordinate(T... coordinates) : coordinates{{coordinates...}} {}$/;"	f	class:taco::Coordinate
Coordinate	include/taco/coordinate.h	/^class Coordinate : util::Comparable<Coordinate<Order, Type>> {$/;"	c	namespace:taco
Coordinates	include/taco/storage/coordinate.h	/^  Coordinates(T... coordinates) : coordinates{{coordinates...}} {}$/;"	f	class:taco::Coordinates
Coordinates	include/taco/storage/coordinate.h	/^class Coordinates : util::Comparable<Coordinates<Order, Type>> {$/;"	c	namespace:taco
Coordinates	include/taco/tensor.h	/^      Coordinates(size_t order) : $/;"	f	class:taco::TensorBase::const_iterator::Coordinates
Coordinates	include/taco/tensor.h	/^    class Coordinates {$/;"	c	class:taco::TensorBase::const_iterator
CopyArray	test/gtest/gtest.h	/^inline void CopyArray(const T& from, U* to) { *to = from; }$/;"	f	namespace:testing::internal
CopyArray	test/gtest/gtest.h	/^void CopyArray(const T* from, size_t size, U* to) {$/;"	f	namespace:testing::internal
CopyOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt() { print_default_created(this); }$/;"	f	class:CopyOnlyInt
CopyOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt(const CopyOnlyInt &c) { print_copy_created(this, c.value); value = c.value; }$/;"	f	class:CopyOnlyInt
CopyOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt(int v) : value{std::move(v)} { print_created(this, value); }$/;"	f	class:CopyOnlyInt
CopyOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^class CopyOnlyInt {$/;"	c	file:
CountIf	test/gtest/gtest-all.cc	/^inline int CountIf(const Container& c, Predicate predicate) {$/;"	f	namespace:testing::internal
Create	test/gtest/gtest-all.cc	/^bool DeathTest::Create(const char* statement, const RE* regex,$/;"	f	class:testing::internal::DeathTest
Create	test/gtest/gtest-all.cc	/^bool DefaultDeathTestFactory::Create(const char* statement, const RE* regex,$/;"	f	class:testing::internal::DefaultDeathTestFactory
CreateCodePointFromUtf16SurrogatePair	test/gtest/gtest-all.cc	/^inline UInt32 CreateCodePointFromUtf16SurrogatePair(wchar_t first,$/;"	f	namespace:testing::internal
CreateDirectoriesRecursively	test/gtest/gtest-all.cc	/^bool FilePath::CreateDirectoriesRecursively() const {$/;"	f	class:testing::internal::FilePath
CreateFolder	test/gtest/gtest-all.cc	/^bool FilePath::CreateFolder() const {$/;"	f	class:testing::internal::FilePath
CreateKey	test/gtest/gtest.h	/^  static pthread_key_t CreateKey() {$/;"	f	class:std::tr1::ThreadLocal
CreateTest	test/gtest/gtest.h	/^  virtual Test* CreateTest() { return new TestClass; }$/;"	f	class:testing::internal::TestFactoryImpl
CreateTest	test/gtest/gtest.h	/^  virtual Test* CreateTest() {$/;"	f	class:testing::internal::ParameterizedTestFactory
CreateTestFactory	test/gtest/gtest.h	/^  virtual TestFactoryBase* CreateTestFactory(ParamType parameter) {$/;"	f	class:testing::internal::TestMetaFactory
CreateThread	test/gtest/gtest-all.cc	/^  static HANDLE CreateThread(Runnable* runnable,$/;"	f	class:testing::internal::__anon6::ThreadWithParamSupport
Current	test/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Current	test/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Current	test/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Current	test/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Current	test/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Current	test/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Current	test/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Current	test/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Current	test/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Current	test/gtest/gtest.h	/^    virtual const T* Current() const { return &value_; }$/;"	f	class:testing::internal::RangeGenerator::Iterator
Current	test/gtest/gtest.h	/^    virtual const T* Current() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
CurrentOsStackTraceExceptTop	test/gtest/gtest-all.cc	/^std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {$/;"	f	class:testing::internal::UnitTestImpl
CustomGuard	python_bindings/pybind11/tests/test_call_policies.cpp	/^    CustomGuard() { enabled = true; }$/;"	f	struct:CustomGuard
CustomGuard	python_bindings/pybind11/tests/test_call_policies.cpp	/^struct CustomGuard {$/;"	s	file:
CustomOperatorNew	python_bindings/pybind11/tests/test_eigen.cpp	/^struct CustomOperatorNew {$/;"	s	file:
DEC	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DECLARE_INTRINSIC	include/taco/index_notation/intrinsic.h	/^#define DECLARE_INTRINSIC(/;"	d
DECL_NPY_API	python_bindings/pybind11/include/pybind11/numpy.h	/^#define DECL_NPY_API(/;"	d
DECL_NPY_API	python_bindings/pybind11/include/pybind11/numpy.h	/^#undef DECL_NPY_API$/;"	d
DEFAULT_ALLOC_SIZE	include/taco/lower/mode_format_impl.h	/^static const int DEFAULT_ALLOC_SIZE = 1 << 20;$/;"	m	namespace:taco
DIED	test/gtest/gtest-all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
DIR	python_bindings/pybind11/docs/conf.py	/^DIR = Path(__file__).parent.resolve()$/;"	v
DIR	python_bindings/pybind11/pybind11/commands.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
DIR	python_bindings/pybind11/setup.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
DIR	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
DIR	python_bindings/pybind11/tests/extra_setuptools/test_setuphelper.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
DIV	include/taco/index_notation/index_notation_printer.h	/^    DIV = 5,$/;"	m	class:taco::IndexNotationPrinter::Precedence
DIV	include/taco/ir/ir_printer.h	/^    DIV = 5,$/;"	e	enum:taco::ir::IRPrinter::Precedence
DIVIDE	include/taco/index_notation/provenance_graph.h	/^enum IndexVarRelType {UNDEFINED, SPLIT, DIVIDE, POS, FUSE, BOUND, PRECOMPUTE};$/;"	e	enum:taco::IndexVarRelType
DR	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class DR(m.D_Repeat):$/;"	c	function:test_inherited_virtuals
DT	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class DT(m.D_Tpl):$/;"	c	function:test_inherited_virtuals
DT2	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class DT2(DT):$/;"	c	function:test_inherited_virtuals
D_METHODS	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^#define D_METHODS /;"	d	file:
D_Repeat	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class D_Repeat : public C_Repeat {$/;"	c	file:
D_Tpl	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class D_Tpl : public C_Tpl { D_METHODS };$/;"	c	file:
Datatype	include/taco/type.h	/^class Datatype {$/;"	c	namespace:taco
Datatype	src/type.cpp	/^Datatype::Datatype() : kind(Undefined) {$/;"	f	class:taco::Datatype
Datatype	src/type.cpp	/^Datatype::Datatype(Kind kind) : kind(kind) {$/;"	f	class:taco::Datatype
DeMorganApplier	src/index_notation/iteration_algebra.cpp	/^class DeMorganApplier : public IterationAlgebraRewriterStrict {$/;"	c	namespace:taco	file:
DeMorganDispatcher	src/index_notation/iteration_algebra.cpp	/^struct DeMorganDispatcher : public IterationAlgebraRewriter {$/;"	s	namespace:taco	file:
DeathTest	test/gtest/gtest-all.cc	/^DeathTest::DeathTest() {$/;"	f	class:testing::internal::DeathTest
DeathTest	test/gtest/gtest.h	/^class GTEST_API_ DeathTest {$/;"	c	namespace:testing::internal
DeathTestAbort	test/gtest/gtest-all.cc	/^void DeathTestAbort(const std::string& message) {$/;"	f	namespace:testing::internal
DeathTestFactory	test/gtest/gtest.h	/^class DeathTestFactory {$/;"	c	namespace:testing::internal
DeathTestImpl	test/gtest/gtest-all.cc	/^  DeathTestImpl(const char* a_statement, const RE* a_regex)$/;"	f	class:testing::internal::DeathTestImpl
DeathTestImpl	test/gtest/gtest-all.cc	/^class DeathTestImpl : public DeathTest {$/;"	c	namespace:testing::internal	file:
DeathTestOutcome	test/gtest/gtest-all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	g	namespace:testing::internal	file:
DefaultDeathTestFactory	test/gtest/gtest.h	/^class DefaultDeathTestFactory : public DeathTestFactory {$/;"	c	namespace:testing::internal
DefaultGlobalTestPartResultReporter	test/gtest/gtest-all.cc	/^DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
DefaultGlobalTestPartResultReporter	test/gtest/gtest-all.cc	/^class DefaultGlobalTestPartResultReporter$/;"	c	namespace:testing::internal	file:
DefaultPerThreadTestPartResultReporter	test/gtest/gtest-all.cc	/^DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
DefaultPerThreadTestPartResultReporter	test/gtest/gtest-all.cc	/^class DefaultPerThreadTestPartResultReporter$/;"	c	namespace:testing::internal	file:
DefaultPrintNonContainerTo	test/gtest/gtest.h	/^void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing_internal
DefaultPrintTo	test/gtest/gtest.h	/^void DefaultPrintTo(IsContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	test/gtest/gtest.h	/^void DefaultPrintTo(IsNotContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultUnit	include/taco/ir_tags.h	/^  NotParallel, DefaultUnit, GPUBlock, GPUWarp, GPUThread, CPUThread, CPUVector, CPUThreadGroupReduction, GPUBlockReduction, GPUWarpReduction$/;"	m	class:taco::ParallelUnit
Delete	include/taco/storage/array.h	/^  enum Policy {UserOwns, Free, Delete};$/;"	e	enum:taco::Array::Policy
Delete	test/gtest/gtest-all.cc	/^static void Delete(T* x) {$/;"	f	namespace:testing::internal
DeleteSelf_	test/gtest/gtest.h	/^  void DeleteSelf_() { delete this; }$/;"	f	class:testing::Test
DeleteThreadLocalValue	test/gtest/gtest.h	/^extern "C" inline void DeleteThreadLocalValue(void* value_holder) {$/;"	f	namespace:std::tr1
Dense	include/taco/format.h	/^  static ModeFormat Dense;       \/\/\/ alias for dense$/;"	m	class:taco::ModeFormat
Dense	include/taco/util/fill.h	/^  Dense,$/;"	m	class:taco::util::FillMethod
Dense	src/format.cpp	/^const ModeFormat Dense = ModeFormat::Dense;$/;"	m	namespace:taco	file:
Dense	test/tests-storage.cpp	/^const auto Dense  = taco::ModeFormat::Dense;$/;"	v
DenseModeFormat	include/taco/lower/mode_format_dense.h	/^class DenseModeFormat : public ModeFormatImpl {$/;"	c	namespace:taco
DenseModeFormat	src/lower/mode_format_dense.cpp	/^DenseModeFormat::DenseModeFormat() : DenseModeFormat(true, true, false) {$/;"	f	class:taco::DenseModeFormat
DenseModeFormat	src/lower/mode_format_dense.cpp	/^DenseModeFormat::DenseModeFormat(const bool isOrdered, const bool isUnique, const bool isZeroless) : $/;"	f	class:taco::DenseModeFormat
DependentGuard	python_bindings/pybind11/tests/test_call_policies.cpp	/^    DependentGuard() { enabled = CustomGuard::enabled; }$/;"	f	struct:DependentGuard
DependentGuard	python_bindings/pybind11/tests/test_call_policies.cpp	/^struct DependentGuard {$/;"	s	file:
Derived	python_bindings/pybind11/tests/test_call_policies.py	/^    class Derived(m.Parent):$/;"	c	function:test_alive_gc_derived
Derived	python_bindings/pybind11/tests/test_call_policies.py	/^    class Derived(m.Parent, m.Child):$/;"	c	function:test_alive_gc_multi_derived
DerivedWidget	python_bindings/pybind11/tests/test_embed/test_interpreter.py	/^class DerivedWidget(Widget):$/;"	c
DestructionTester	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    DestructionTester() { print_default_created(this); }$/;"	f	class:DestructionTester
DestructionTester	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    DestructionTester(DestructionTester &&) { print_move_created(this); }$/;"	f	class:DestructionTester
DestructionTester	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    DestructionTester(const DestructionTester &) { print_copy_created(this); }$/;"	f	class:DestructionTester
DestructionTester	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^class DestructionTester {$/;"	c	file:
DeviceFunctionCollector	src/codegen/codegen_cuda.cpp	/^  DeviceFunctionCollector(vector<Expr> inputs, vector<Expr> outputs, CodeGen_CUDA *codeGen) : codeGen(codeGen)  {$/;"	f	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector
DeviceFunctionCollector	src/codegen/codegen_cuda.cpp	/^class CodeGen_CUDA::DeviceFunctionCollector : public IRVisitor {$/;"	c	class:taco::ir::CodeGen_CUDA	file:
Dimension	include/taco/ir/ir.h	/^  Dimension,$/;"	m	class:taco::ir::TensorProperty
Dimension	include/taco/type.h	/^class Dimension {$/;"	c	namespace:taco
Dimension	src/type.cpp	/^Dimension::Dimension() : content(new Content) {$/;"	f	class:taco::Dimension
Dimension	src/type.cpp	/^Dimension::Dimension(IndexVar indexVar) : content(new Content) {$/;"	f	class:taco::Dimension
Dimension	src/type.cpp	/^Dimension::Dimension(size_t size) : content(new Content) {$/;"	f	class:taco::Dimension
DirectoryExists	test/gtest/gtest-all.cc	/^bool FilePath::DirectoryExists() const {$/;"	f	class:testing::internal::FilePath
DispatchIssue	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^struct DispatchIssue : Base {$/;"	s	file:
DistanceBetweenSignAndMagnitudeNumbers	test/gtest/gtest.h	/^  static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,$/;"	f	class:testing::internal::FloatingPoint
Div	include/taco/index_notation/index_notation.h	/^class Div : public IndexExpr {$/;"	c	namespace:taco
Div	include/taco/ir/ir.h	/^  Div,$/;"	m	class:taco::ir::IRNodeType
Div	include/taco/ir/ir.h	/^struct Div : public ExprNode<Div> {$/;"	s	namespace:taco::ir
Div	src/index_notation/index_notation.cpp	/^Div::Div() : Div(new DivNode) {$/;"	f	class:taco::Div
Div	src/index_notation/index_notation.cpp	/^Div::Div(IndexExpr a, IndexExpr b) : Div(new DivNode(a, b)) {$/;"	f	class:taco::Div
Div	src/index_notation/index_notation.cpp	/^Div::Div(const DivNode* n) : IndexExpr(n) {$/;"	f	class:taco::Div
DivNode	include/taco/index_notation/index_notation_nodes.h	/^  DivNode() : BinaryExprNode() {}$/;"	f	struct:taco::DivNode
DivNode	include/taco/index_notation/index_notation_nodes.h	/^  DivNode(IndexExpr a, IndexExpr b) : BinaryExprNode(a, b) {}$/;"	f	struct:taco::DivNode
DivNode	include/taco/index_notation/index_notation_nodes.h	/^struct DivNode : public BinaryExprNode {$/;"	s	namespace:taco
DivideRelNode	include/taco/index_notation/provenance_graph.h	/^  struct DivideRelNode : public IndexVarRelNode {$/;"	s	namespace:taco
DivideRelNode	src/index_notation/provenance_graph.cpp	/^DivideRelNode::DivideRelNode(IndexVar parentVar, IndexVar outerVar, IndexVar innerVar, size_t divFactor)$/;"	f	class:taco::DivideRelNode
Dog	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^        Dog = 100, Labrador, Chihuahua, LastDog = 199,$/;"	m	class:Animal::Kind	file:
Dog	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    Dog(const std::string& _name, Kind _kind = Kind::Dog) : Animal(_name, _kind) {}$/;"	f	struct:Animal::Dog
Dog	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^struct Dog : Animal$/;"	s	struct:Animal	file:
Double	test/gtest/gtest.h	/^typedef FloatingPoint<double> Double;$/;"	t	namespace:testing::internal
DoubleLE	test/gtest/gtest-all.cc	/^AssertionResult DoubleLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
DoubleNearPredFormat	test/gtest/gtest-all.cc	/^AssertionResult DoubleNearPredFormat(const char* expr1,$/;"	f	namespace:testing::internal
DownCast_	test/gtest/gtest.h	/^inline To DownCast_(From* f) {  \/\/ so we only accept pointers$/;"	f	namespace:std::tr1
DtypeCheck	python_bindings/pybind11/tests/test_numpy_array.cpp	/^struct DtypeCheck {$/;"	s	file:
DtypeSizeCheck	python_bindings/pybind11/tests/test_numpy_array.cpp	/^struct DtypeSizeCheck {$/;"	s	file:
Dummy	include/taco/error.h	/^  struct Dummy {$/;"	s	namespace:taco
Dynamic	include/taco/ir/ir.h	/^enum class LoopKind {Serial, Static, Dynamic, Runtime, Vectorized, Static_Chunked};$/;"	m	class:taco::ir::LoopKind
Dynamic	python_bindings/pybind11/include/pybind11/numpy.h	/^    static constexpr bool Dynamic = Dims < 0;$/;"	m	class:unchecked_reference
E1	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	c	file:
E402	python_bindings/pybind11/tests/test_smart_ptr.py	/^from pybind11_tests import ConstructorStats  # noqa: E402$/;"	i
E402	python_bindings/pybind11/tests/test_virtual_functions.py	/^from pybind11_tests import ConstructorStats  # noqa: E402$/;"	i
EFirstEntry	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	e	enum:MyEnum	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	python_bindings/pybind11/tests/test_eigen.cpp	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:CustomOperatorNew	file:
ENTRY	python_bindings/pybind11/tools/make_changelog.py	/^ENTRY = re.compile($/;"	v
EQ	include/taco/ir/ir_printer.h	/^    EQ = 10,$/;"	e	enum:taco::ir::IRPrinter::Precedence
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/apps/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/apps/tensor_times_vector/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/test/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/tools/Makefile	/^EQUALS = =$/;"	m
ESecondEntry	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	e	enum:MyEnum	file:
EXECUTE_TEST	test/gtest/gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
EXPECT_ANY_THROW	test/gtest/gtest.h	/^#define EXPECT_ANY_THROW(/;"	d
EXPECT_DEATH	test/gtest/gtest.h	/^# define EXPECT_DEATH(/;"	d
EXPECT_DEATH_IF_SUPPORTED	test/gtest/gtest.h	/^# define EXPECT_DEATH_IF_SUPPORTED(/;"	d
EXPECT_DEBUG_DEATH	test/gtest/gtest.h	/^#  define EXPECT_DEBUG_DEATH(/;"	d
EXPECT_DOUBLE_EQ	test/gtest/gtest.h	/^#define EXPECT_DOUBLE_EQ(/;"	d
EXPECT_EQ	test/gtest/gtest.h	/^#define EXPECT_EQ(/;"	d
EXPECT_EXIT	test/gtest/gtest.h	/^# define EXPECT_EXIT(/;"	d
EXPECT_FALSE	test/gtest/gtest.h	/^#define EXPECT_FALSE(/;"	d
EXPECT_FATAL_FAILURE	test/gtest/gtest-all.cc	/^#define EXPECT_FATAL_FAILURE(/;"	d	file:
EXPECT_FATAL_FAILURE_ON_ALL_THREADS	test/gtest/gtest-all.cc	/^#define EXPECT_FATAL_FAILURE_ON_ALL_THREADS(/;"	d	file:
EXPECT_FLOAT_EQ	test/gtest/gtest.h	/^#define EXPECT_FLOAT_EQ(/;"	d
EXPECT_GE	test/gtest/gtest.h	/^#define EXPECT_GE(/;"	d
EXPECT_GT	test/gtest/gtest.h	/^#define EXPECT_GT(/;"	d
EXPECT_HRESULT_FAILED	test/gtest/gtest.h	/^# define EXPECT_HRESULT_FAILED(/;"	d
EXPECT_HRESULT_SUCCEEDED	test/gtest/gtest.h	/^# define EXPECT_HRESULT_SUCCEEDED(/;"	d
EXPECT_LE	test/gtest/gtest.h	/^#define EXPECT_LE(/;"	d
EXPECT_LT	test/gtest/gtest.h	/^#define EXPECT_LT(/;"	d
EXPECT_NE	test/gtest/gtest.h	/^#define EXPECT_NE(/;"	d
EXPECT_NEAR	test/gtest/gtest.h	/^#define EXPECT_NEAR(/;"	d
EXPECT_NONFATAL_FAILURE	test/gtest/gtest-all.cc	/^#define EXPECT_NONFATAL_FAILURE(/;"	d	file:
EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS	test/gtest/gtest-all.cc	/^#define EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(/;"	d	file:
EXPECT_NO_FATAL_FAILURE	test/gtest/gtest.h	/^#define EXPECT_NO_FATAL_FAILURE(/;"	d
EXPECT_NO_THROW	test/gtest/gtest.h	/^#define EXPECT_NO_THROW(/;"	d
EXPECT_PRED1	test/gtest/gtest.h	/^#define EXPECT_PRED1(/;"	d
EXPECT_PRED2	test/gtest/gtest.h	/^#define EXPECT_PRED2(/;"	d
EXPECT_PRED3	test/gtest/gtest.h	/^#define EXPECT_PRED3(/;"	d
EXPECT_PRED4	test/gtest/gtest.h	/^#define EXPECT_PRED4(/;"	d
EXPECT_PRED5	test/gtest/gtest.h	/^#define EXPECT_PRED5(/;"	d
EXPECT_PRED_FORMAT1	test/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT1(/;"	d
EXPECT_PRED_FORMAT2	test/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT2(/;"	d
EXPECT_PRED_FORMAT3	test/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT3(/;"	d
EXPECT_PRED_FORMAT4	test/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT4(/;"	d
EXPECT_PRED_FORMAT5	test/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT5(/;"	d
EXPECT_STRCASEEQ	test/gtest/gtest.h	/^#define EXPECT_STRCASEEQ(/;"	d
EXPECT_STRCASENE	test/gtest/gtest.h	/^#define EXPECT_STRCASENE(/;"	d
EXPECT_STREQ	test/gtest/gtest.h	/^#define EXPECT_STREQ(/;"	d
EXPECT_STRNE	test/gtest/gtest.h	/^#define EXPECT_STRNE(/;"	d
EXPECT_THROW	test/gtest/gtest.h	/^#define EXPECT_THROW(/;"	d
EXPECT_TRUE	test/gtest/gtest.h	/^#define EXPECT_TRUE(/;"	d
E_nc	python_bindings/pybind11/tests/test_stl_binders.cpp	/^    explicit E_nc(int i) : value{i} {}$/;"	f	class:E_nc
E_nc	python_bindings/pybind11/tests/test_stl_binders.cpp	/^class E_nc {$/;"	c	file:
EigenConformable	python_bindings/pybind11/include/pybind11/eigen.h	/^    EigenConformable(EigenIndex r, EigenIndex c, EigenIndex stride)$/;"	f	struct:EigenConformable
EigenConformable	python_bindings/pybind11/include/pybind11/eigen.h	/^    EigenConformable(EigenIndex r, EigenIndex c,$/;"	f	struct:EigenConformable
EigenConformable	python_bindings/pybind11/include/pybind11/eigen.h	/^    EigenConformable(bool fits = false) : conformable{fits} {}$/;"	f	struct:EigenConformable
EigenConformable	python_bindings/pybind11/include/pybind11/eigen.h	/^template <bool EigenRowMajor> struct EigenConformable {$/;"	s
EigenProps	python_bindings/pybind11/include/pybind11/eigen.h	/^template <typename Type_> struct EigenProps {$/;"	s
EinsumParser	include/taco/parser/einsum_parser.h	/^class EinsumParser : public util::Uncopyable {$/;"	c	namespace:taco::parser
EinsumParser	src/parser/einsum_parser.cpp	/^EinsumParser::EinsumParser(const std::string &expression,$/;"	f	class:taco::parser::EinsumParser
El	python_bindings/pybind11/tests/test_stl_binders.cpp	/^    El(int v) : a(v) { }$/;"	f	class:El
El	python_bindings/pybind11/tests/test_stl_binders.cpp	/^class El {$/;"	c	file:
EmptyTestEventListener	test/gtest/gtest.h	/^class EmptyTestEventListener : public TestEventListener {$/;"	c	namespace:testing
EnableIf	test/gtest/gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::RangeGenerator
End	test/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
EndsWithCaseInsensitive	test/gtest/gtest-all.cc	/^bool String::EndsWithCaseInsensitive($/;"	f	class:testing::internal::String
Environment	test/gtest/gtest.h	/^class Environment {$/;"	c	namespace:testing
Eq	include/taco/ir/ir.h	/^  Eq,$/;"	m	class:taco::ir::IRNodeType
Eq	include/taco/ir/ir.h	/^struct Eq : public ExprNode<Eq> {$/;"	s	namespace:taco::ir
EqFailure	test/gtest/gtest-all.cc	/^AssertionResult EqFailure(const char* expected_expression,$/;"	f	namespace:testing::internal
EqHelper	test/gtest/gtest.h	/^class EqHelper {$/;"	c	namespace:testing::internal
EqHelper	test/gtest/gtest.h	/^class EqHelper<true> {$/;"	c	namespace:testing::internal
Equals	src/index_notation/index_notation.cpp	/^struct Equals : public IndexNotationVisitorStrict {$/;"	s	namespace:taco	file:
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Equals	test/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
ErrorReport	include/taco/error.h	/^struct ErrorReport {$/;"	s	namespace:taco
ErrorReport	src/error.cpp	/^ErrorReport::ErrorReport(const char *file, const char *func, int line,$/;"	f	class:taco::ErrorReport
EscapeXml	test/gtest/gtest-all.cc	/^std::string XmlUnitTestResultPrinter::EscapeXml($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
EscapeXmlAttribute	test/gtest/gtest-all.cc	/^  static std::string EscapeXmlAttribute(const std::string& str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
EscapeXmlText	test/gtest/gtest-all.cc	/^  static std::string EscapeXmlText(const char* str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
EventForwardingEnabled	test/gtest/gtest-all.cc	/^bool TestEventListeners::EventForwardingEnabled() const {$/;"	f	class:testing::TestEventListeners
ExampleMandA	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA() { print_default_created(this); }$/;"	f	class:ExampleMandA
ExampleMandA	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA(ExampleMandA &&e) : value(e.value) { print_move_created(this); }$/;"	f	class:ExampleMandA
ExampleMandA	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA(const ExampleMandA &e) : value(e.value) { print_copy_created(this); }$/;"	f	class:ExampleMandA
ExampleMandA	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA(int value) : value(value) { print_created(this, value); }$/;"	f	class:ExampleMandA
ExampleMandA	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA(std::string&&) {}$/;"	f	class:ExampleMandA
ExampleMandA	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^class ExampleMandA {$/;"	c	file:
ExampleVirt	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    ExampleVirt(ExampleVirt &&e) : state(e.state) { print_move_created(this); e.state = 0; }$/;"	f	class:ExampleVirt
ExampleVirt	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    ExampleVirt(const ExampleVirt &e) : state(e.state) { print_copy_created(this); }$/;"	f	class:ExampleVirt
ExampleVirt	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    ExampleVirt(int state) : state(state) { print_created(this, state); }$/;"	f	class:ExampleVirt
ExampleVirt	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class ExampleVirt  {$/;"	c	file:
ExcludeFirstConstIterable	include/taco/util/collections.h	/^  ExcludeFirstConstIterable(const Collection &c) : c(c) {}$/;"	f	class:taco::util::ExcludeFirstConstIterable
ExcludeFirstConstIterable	include/taco/util/collections.h	/^class ExcludeFirstConstIterable {$/;"	c	namespace:taco::util
ExcludeFirstIterable	include/taco/util/collections.h	/^  ExcludeFirstIterable(Collection &c) : c(c) {}$/;"	f	class:taco::util::ExcludeFirstIterable
ExcludeFirstIterable	include/taco/util/collections.h	/^class ExcludeFirstIterable {$/;"	c	namespace:taco::util
ExecDeathTest	test/gtest/gtest-all.cc	/^  ExecDeathTest(const char* a_statement, const RE* a_regex,$/;"	f	class:testing::internal::ExecDeathTest
ExecDeathTest	test/gtest/gtest-all.cc	/^class ExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
ExecDeathTestArgs	test/gtest/gtest-all.cc	/^struct ExecDeathTestArgs {$/;"	s	namespace:testing::internal	file:
ExecDeathTestChildMain	test/gtest/gtest-all.cc	/^static int ExecDeathTestChildMain(void* child_arg) {$/;"	f	namespace:testing::internal
ExecDeathTestSpawnChild	test/gtest/gtest-all.cc	/^static pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {$/;"	f	namespace:testing::internal
ExitSummary	test/gtest/gtest-all.cc	/^static std::string ExitSummary(int exit_code) {$/;"	f	namespace:testing::internal
ExitedUnsuccessfully	test/gtest/gtest-all.cc	/^bool ExitedUnsuccessfully(int exit_status) {$/;"	f	namespace:testing::internal
ExitedWithCode	test/gtest/gtest-all.cc	/^ExitedWithCode::ExitedWithCode(int exit_code) : exit_code_(exit_code) {$/;"	f	class:testing::ExitedWithCode
ExitedWithCode	test/gtest/gtest.h	/^class GTEST_API_ ExitedWithCode {$/;"	c	namespace:testing
Expr	include/taco/ir/ir.h	/^  Expr() : IRHandle() {}$/;"	f	class:taco::ir::Expr
Expr	include/taco/ir/ir.h	/^  Expr(const BaseExprNode *expr) : IRHandle(expr) {}$/;"	f	class:taco::ir::Expr
Expr	include/taco/ir/ir.h	/^class Expr : public IRHandle {$/;"	c	namespace:taco::ir
Expr	src/ir/ir.cpp	/^Expr::Expr(bool n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(double n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(float n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(int16_t n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(int32_t n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(int64_t n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(int8_t n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(std::complex<double> n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(std::complex<float> n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(uint16_t n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(uint32_t n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(uint64_t n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
Expr	src/ir/ir.cpp	/^Expr::Expr(uint8_t n) : IRHandle(Literal::make(n)) {$/;"	f	class:taco::ir::Expr
ExprCompare	include/taco/ir/ir.h	/^class ExprCompare {$/;"	c	namespace:taco::ir
ExprFactory	test/expr_factory.h	/^struct ExprFactory {$/;"	s	namespace:taco::test
ExprNode	include/taco/ir/ir.h	/^struct ExprNode : public BaseExprNode {$/;"	s	namespace:taco::ir
ExpressionSimplifier	src/ir/simplify.cpp	/^struct ExpressionSimplifier : IRRewriter {$/;"	s	namespace:taco::ir	file:
ExtendedExampleVirt	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class ExtendedExampleVirt(m.ExampleVirt):$/;"	c	function:test_override
ExtendedExampleVirt2	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class ExtendedExampleVirt2(ExtendedExampleVirt):$/;"	c	function:test_override
ExtendedVirtClass	python_bindings/pybind11/tests/test_gil_scoped.py	/^    class ExtendedVirtClass(m.VirtClass):$/;"	c	function:_python_to_cpp_to_python
ExtractSummary	test/gtest/gtest-all.cc	/^std::string TestPartResult::ExtractSummary(const char* message) {$/;"	f	class:testing::TestPartResult
F401	python_bindings/pybind11/tests/conftest.py	/^import pybind11_tests  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_buffers.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_builtin_casters.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_call_policies.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_chrono.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_class.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_eval.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_factory_constructors.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_local_bindings.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_numpy_array.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_pickling.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_pytypes.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_stl_binders.py	/^import env  # noqa: F401$/;"	i
F401	python_bindings/pybind11/tests/test_virtual_functions.py	/^import env  # noqa: F401$/;"	i
FAIL	test/gtest/gtest.h	/^# define FAIL(/;"	d
FClose	test/gtest/gtest.h	/^inline int FClose(FILE* fp) { return fclose(fp); }$/;"	f	namespace:std::tr1::posix
FDOpen	test/gtest/gtest.h	/^inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }$/;"	f	namespace:std::tr1::posix
FEM	include/taco/util/fill.h	/^  FEM,$/;"	m	class:taco::util::FillMethod
FOpen	test/gtest/gtest.h	/^inline FILE* FOpen(const char* path, const char* mode) {$/;"	f	namespace:std::tr1::posix
FRIEND_TEST	test/gtest/gtest.h	/^#define FRIEND_TEST(/;"	d
FReopen	test/gtest/gtest.h	/^inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {$/;"	f	namespace:std::tr1::posix
FULL	include/taco/format.h	/^    FULL, NOT_FULL, ORDERED, NOT_ORDERED, UNIQUE, NOT_UNIQUE, BRANCHLESS,$/;"	e	enum:taco::ModeFormat::Property
FUNC	include/taco/index_notation/index_notation_printer.h	/^    FUNC = 2,$/;"	m	class:taco::IndexNotationPrinter::Precedence
FUSE	include/taco/index_notation/provenance_graph.h	/^enum IndexVarRelType {UNDEFINED, SPLIT, DIVIDE, POS, FUSE, BOUND, PRECOMPUTE};$/;"	e	enum:taco::IndexVarRelType
FactorizedTensorInnerProductFactory	test/expr_factory.h	/^struct FactorizedTensorInnerProductFactory : public ExprFactory {$/;"	s	namespace:taco::test
FactorizedTensorSquaredNormFactory	test/expr_factory.h	/^struct FactorizedTensorSquaredNormFactory : public ExprFactory {$/;"	s	namespace:taco::test
FailFromInternalError	test/gtest/gtest-all.cc	/^static void FailFromInternalError(int fd) {$/;"	f	namespace:testing::internal
Failed	test/gtest/gtest-all.cc	/^  bool Failed() const {$/;"	f	class:testing::internal::UnitTestImpl
Failed	test/gtest/gtest-all.cc	/^bool TestResult::Failed() const {$/;"	f	class:testing::TestResult
Failed	test/gtest/gtest-all.cc	/^bool UnitTest::Failed() const { return impl()->Failed(); }$/;"	f	class:testing::UnitTest
Failed	test/gtest/gtest.h	/^  bool Failed() const { return failed_test_count() > 0; }$/;"	f	class:testing::TestCase
FileNo	test/gtest/gtest.h	/^inline int FileNo(FILE* file) { return _fileno(file); }$/;"	f	namespace:std::tr1::posix
FileNo	test/gtest/gtest.h	/^inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }$/;"	f	namespace:std::tr1::posix
FileOrDirectoryExists	test/gtest/gtest-all.cc	/^bool FilePath::FileOrDirectoryExists() const {$/;"	f	class:testing::internal::FilePath
FilePath	test/gtest/gtest.h	/^  FilePath() : pathname_("") { }$/;"	f	class:testing::internal::FilePath
FilePath	test/gtest/gtest.h	/^  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) { }$/;"	f	class:testing::internal::FilePath
FilePath	test/gtest/gtest.h	/^  explicit FilePath(const std::string& pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	test/gtest/gtest.h	/^class GTEST_API_ FilePath {$/;"	c	namespace:testing::internal
FileType	include/taco/tensor.h	/^enum class FileType {$/;"	c	namespace:taco
FillMethod	include/taco/util/fill.h	/^enum class FillMethod {$/;"	c	namespace:taco::util
FillValue	include/taco/ir/ir.h	/^  FillValue,$/;"	m	class:taco::ir::TensorProperty
FilterMatchesTest	test/gtest/gtest-all.cc	/^bool UnitTestOptions::FilterMatchesTest(const std::string &test_case_name,$/;"	f	class:testing::internal::UnitTestOptions
FilterTests	test/gtest/gtest-all.cc	/^int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {$/;"	f	class:testing::internal::UnitTestImpl
FindLastPathSeparator	test/gtest/gtest-all.cc	/^const char* FilePath::FindLastPathSeparator() const {$/;"	f	class:testing::internal::FilePath
FindVars	src/codegen/codegen_c.cpp	/^  FindVars(vector<Expr> inputs, vector<Expr> outputs, CodeGen_C *codeGen)$/;"	f	class:taco::ir::CodeGen_C::FindVars
FindVars	src/codegen/codegen_c.cpp	/^class CodeGen_C::FindVars : public IRVisitor {$/;"	c	class:taco::ir::CodeGen_C	file:
FindVars	src/codegen/codegen_cuda.cpp	/^  FindVars(vector<Expr> inputs, vector<Expr> outputs, CodeGen_CUDA *codeGen,$/;"	f	class:taco::ir::CodeGen_CUDA::FindVars
FindVars	src/codegen/codegen_cuda.cpp	/^class CodeGen_CUDA::FindVars : public IRVisitor {$/;"	c	class:taco::ir::CodeGen_CUDA	file:
FlagToEnvVar	test/gtest/gtest-all.cc	/^static std::string FlagToEnvVar(const char* flag) {$/;"	f	namespace:testing::internal
Float	python_bindings/pybind11/tests/test_builtin_casters.py	/^    class Float(object):$/;"	c	function:test_int_convert
Float	src/type.cpp	/^Datatype Float(int bits) {$/;"	f	namespace:taco
Float	test/gtest/gtest.h	/^typedef FloatingPoint<float> Float;$/;"	t	namespace:testing::internal
Float32	include/taco/type.h	/^    Float32,$/;"	e	enum:taco::Datatype::Kind
Float32	src/type.cpp	/^Datatype Float32 = Datatype(Datatype::Float32);$/;"	m	namespace:taco	file:
Float64	include/taco/type.h	/^    Float64,$/;"	e	enum:taco::Datatype::Kind
Float64	src/type.cpp	/^Datatype Float64 = Datatype(Datatype::Float64);$/;"	m	namespace:taco	file:
FloatLE	test/gtest/gtest-all.cc	/^AssertionResult FloatLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
FloatTest	test/tests-type.cpp	/^TYPED_TEST_CASE_P(FloatTest);$/;"	v
FloatTest	test/tests-type.cpp	/^template <typename T> class FloatTest : public ::testing::Test {};$/;"	c	file:
FloatingPoint	test/gtest/gtest.h	/^  explicit FloatingPoint(const RawType& x) { u_.value_ = x; }$/;"	f	class:testing::internal::FloatingPoint
FloatingPoint	test/gtest/gtest.h	/^class FloatingPoint {$/;"	c	namespace:testing::internal
FloatingPointLE	test/gtest/gtest-all.cc	/^AssertionResult FloatingPointLE(const char* expr1,$/;"	f	namespace:testing::internal
FloatingPointUnion	test/gtest/gtest.h	/^  union FloatingPointUnion {$/;"	u	class:testing::internal::FloatingPoint
FlushInfoLog	test/gtest/gtest.h	/^inline void FlushInfoLog() { fflush(NULL); }$/;"	f	namespace:std::tr1
For	include/taco/ir/ir.h	/^  For,$/;"	m	class:taco::ir::IRNodeType
For	include/taco/ir/ir.h	/^struct For : public StmtNode<For> {$/;"	s	namespace:taco::ir
ForAllReplace	include/taco/index_notation/transformations.h	/^class ForAllReplace : public TransformationInterface {$/;"	c	namespace:taco
ForAllReplace	src/index_notation/transformations.cpp	/^ForAllReplace::ForAllReplace() : content(nullptr) {$/;"	f	class:taco::ForAllReplace
ForAllReplace	src/index_notation/transformations.cpp	/^ForAllReplace::ForAllReplace(std::vector<IndexVar> pattern, std::vector<IndexVar> replacement) : content(new Content) {$/;"	f	class:taco::ForAllReplace
ForEach	test/gtest/gtest-all.cc	/^void ForEach(const Container& c, Functor functor) {$/;"	f	namespace:testing::internal
Forall	include/taco/index_notation/index_notation.h	/^class Forall : public IndexStmt {$/;"	c	namespace:taco
Forall	src/index_notation/index_notation.cpp	/^Forall::Forall(IndexVar indexVar, IndexStmt stmt)$/;"	f	class:taco::Forall
Forall	src/index_notation/index_notation.cpp	/^Forall::Forall(IndexVar indexVar, IndexStmt stmt, ParallelUnit parallel_unit, OutputRaceStrategy output_race_strategy, size_t unrollFactor)$/;"	f	class:taco::Forall
Forall	src/index_notation/index_notation.cpp	/^Forall::Forall(const ForallNode* n) : IndexStmt(n) {$/;"	f	class:taco::Forall
ForallNode	include/taco/index_notation/index_notation_nodes.h	/^  ForallNode(IndexVar indexVar, IndexStmt stmt, ParallelUnit parallel_unit, OutputRaceStrategy  output_race_strategy, size_t unrollFactor = 0)$/;"	f	struct:taco::ForallNode
ForallNode	include/taco/index_notation/index_notation_nodes.h	/^struct ForallNode : public IndexStmtNode {$/;"	s	namespace:taco
ForkingDeathTest	test/gtest/gtest-all.cc	/^ForkingDeathTest::ForkingDeathTest(const char* a_statement, const RE* a_regex)$/;"	f	class:testing::internal::ForkingDeathTest
ForkingDeathTest	test/gtest/gtest-all.cc	/^class ForkingDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
Format	include/taco/format.h	/^class Format {$/;"	c	namespace:taco
Format	src/format.cpp	/^Format::Format() {$/;"	f	class:taco::Format
Format	src/format.cpp	/^Format::Format(const ModeFormat modeFormat) : modeFormatPacks({modeFormat}),$/;"	f	class:taco::Format
Format	src/format.cpp	/^Format::Format(const std::initializer_list<ModeFormatPack>& modeFormatPacks)$/;"	f	class:taco::Format
Format	src/format.cpp	/^Format::Format(const std::vector<ModeFormatPack>& modeFormatPacks) :$/;"	f	class:taco::Format
Format	src/format.cpp	/^Format::Format(const std::vector<ModeFormatPack>& modeFormatPacks,$/;"	f	class:taco::Format
Format	test/gtest/gtest.h	/^  static ::std::string Format(const ToPrint& value) {$/;"	f	class:testing::internal::FormatForComparison
Format	test/gtest/gtest.h	/^  static ::std::string Format(const ToPrint* value) {$/;"	f	class:testing::internal::FormatForComparison
FormatBool	test/gtest/gtest-all.cc	/^  string FormatBool(bool value) { return value ? "1" : "0"; }$/;"	f	class:testing::internal::StreamingListener	file:
FormatByte	test/gtest/gtest-all.cc	/^std::string String::FormatByte(unsigned char value) {$/;"	f	class:testing::internal::String
FormatCompilerIndependentFileLocation	test/gtest/gtest-all.cc	/^GTEST_API_ ::std::string FormatCompilerIndependentFileLocation($/;"	f	namespace:testing::internal
FormatCountableNoun	test/gtest/gtest-all.cc	/^static std::string FormatCountableNoun(int count,$/;"	f	namespace:testing
FormatCxxExceptionMessage	test/gtest/gtest-all.cc	/^static std::string FormatCxxExceptionMessage(const char* description,$/;"	f	namespace:testing::internal
FormatDeathTestOutput	test/gtest/gtest-all.cc	/^static ::std::string FormatDeathTestOutput(const ::std::string& output) {$/;"	f	namespace:testing::internal
FormatEpochTimeInMillisAsIso8601	test/gtest/gtest-all.cc	/^std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatFileLocation	test/gtest/gtest-all.cc	/^GTEST_API_ ::std::string FormatFileLocation(const char* file, int line) {$/;"	f	namespace:testing::internal
FormatForComparison	test/gtest/gtest.h	/^class FormatForComparison {$/;"	c	namespace:testing::internal
FormatForComparison	test/gtest/gtest.h	/^class FormatForComparison<ToPrint[N], OtherOperand> {$/;"	c	namespace:testing::internal
FormatForComparisonFailureMessage	test/gtest/gtest.h	/^std::string FormatForComparisonFailureMessage($/;"	f	namespace:testing::internal
FormatHexInt	test/gtest/gtest-all.cc	/^std::string String::FormatHexInt(int value) {$/;"	f	class:testing::internal::String
FormatIntWidth2	test/gtest/gtest-all.cc	/^std::string String::FormatIntWidth2(int value) {$/;"	f	class:testing::internal::String
FormatRegexSyntaxError	test/gtest/gtest-all.cc	/^std::string FormatRegexSyntaxError(const char* regex, int index) {$/;"	f	namespace:testing::internal
FormatSehExceptionMessage	test/gtest/gtest-all.cc	/^static std::string* FormatSehExceptionMessage(DWORD exception_code,$/;"	f	namespace:testing
FormatTestCaseCount	test/gtest/gtest-all.cc	/^static std::string FormatTestCaseCount(int test_case_count) {$/;"	f	namespace:testing
FormatTestCount	test/gtest/gtest-all.cc	/^static std::string FormatTestCount(int test_count) {$/;"	f	namespace:testing
FormatTimeInMillisAsSeconds	test/gtest/gtest-all.cc	/^std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatWordList	test/gtest/gtest-all.cc	/^static std::string FormatWordList(const std::vector<std::string>& words) {$/;"	f	namespace:testing
Formats	test/tests-lower.cpp	/^  Formats() {}$/;"	f	struct:taco::test::Formats
Formats	test/tests-lower.cpp	/^  Formats(map<TensorVar, Format> formats) : formats(formats) {}$/;"	f	struct:taco::test::Formats
Formats	test/tests-lower.cpp	/^struct Formats {$/;"	s	namespace:taco::test	file:
Free	include/taco/ir/ir.h	/^  Free,$/;"	m	class:taco::ir::IRNodeType
Free	include/taco/ir/ir.h	/^struct Free : public StmtNode<Free> {$/;"	s	namespace:taco::ir
Free	include/taco/storage/array.h	/^  enum Policy {UserOwns, Free, Delete};$/;"	e	enum:taco::Array::Policy
Free	src/lower/iteration_graph.h	/^  Free,$/;"	m	class:taco::IndexVarType
FullMatch	test/gtest/gtest-all.cc	/^bool RE::FullMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
FullMatch	test/gtest/gtest.h	/^  static bool FullMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FullMatch	test/gtest/gtest.h	/^  static bool FullMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
Func	include/taco/index_notation/tensor_operator.h	/^class Func {$/;"	c	namespace:taco
Func	src/index_notation/tensor_operator.cpp	/^Func::Func(FuncBodyGenerator lowererFunc, FuncAlgebraGenerator algebraFunc, std::vector<Property> properties,$/;"	f	class:taco::Func
Func	src/index_notation/tensor_operator.cpp	/^Func::Func(FuncBodyGenerator lowererFunc, FuncAlgebraGenerator algebraFunc,$/;"	f	class:taco::Func
Func	src/index_notation/tensor_operator.cpp	/^Func::Func(FuncBodyGenerator lowererFunc, std::map<std::vector<int>, FuncBodyGenerator> specialDefinitions)$/;"	f	class:taco::Func
Func	src/index_notation/tensor_operator.cpp	/^Func::Func(FuncBodyGenerator lowererFunc, std::vector<Property> properties,$/;"	f	class:taco::Func
Func	src/index_notation/tensor_operator.cpp	/^Func::Func(std::string name, FuncBodyGenerator lowererFunc, FuncAlgebraGenerator algebraFunc, std::vector<Property> properties,$/;"	f	class:taco::Func
Func	src/index_notation/tensor_operator.cpp	/^Func::Func(std::string name, FuncBodyGenerator lowererFunc, FuncAlgebraGenerator algebraFunc,$/;"	f	class:taco::Func
Func	src/index_notation/tensor_operator.cpp	/^Func::Func(std::string name, FuncBodyGenerator lowererFunc, std::map<std::vector<int>, FuncBodyGenerator> specialDefinitions)$/;"	f	class:taco::Func
Func	src/index_notation/tensor_operator.cpp	/^Func::Func(std::string name, FuncBodyGenerator lowererFunc, std::vector<Property> properties,$/;"	f	class:taco::Func
Function	include/taco/ir/ir.h	/^  Function,$/;"	m	class:taco::ir::IRNodeType
Function	include/taco/ir/ir.h	/^struct Function : public StmtNode<Function> {$/;"	s	namespace:taco::ir
FuseRelNode	include/taco/index_notation/provenance_graph.h	/^struct FuseRelNode : public IndexVarRelNode {$/;"	s	namespace:taco
FuseRelNode	src/index_notation/provenance_graph.cpp	/^FuseRelNode::FuseRelNode(IndexVar outerParentVar, IndexVar innerParentVar, IndexVar fusedVar)$/;"	f	class:taco::FuseRelNode
GC_IF_NEEDED	python_bindings/pybind11/tests/test_kwargs_and_defaults.cpp	/^    #define GC_IF_NEEDED /;"	d	file:
GEN_TIMING_CODE	src/codegen/codegen_cuda.cpp	/^#define GEN_TIMING_CODE /;"	d	file:
GPUBlock	include/taco/ir_tags.h	/^  NotParallel, DefaultUnit, GPUBlock, GPUWarp, GPUThread, CPUThread, CPUVector, CPUThreadGroupReduction, GPUBlockReduction, GPUWarpReduction$/;"	m	class:taco::ParallelUnit
GPUBlockReduction	include/taco/ir_tags.h	/^  NotParallel, DefaultUnit, GPUBlock, GPUWarp, GPUThread, CPUThread, CPUVector, CPUThreadGroupReduction, GPUBlockReduction, GPUWarpReduction$/;"	m	class:taco::ParallelUnit
GPUThread	include/taco/ir_tags.h	/^  NotParallel, DefaultUnit, GPUBlock, GPUWarp, GPUThread, CPUThread, CPUVector, CPUThreadGroupReduction, GPUBlockReduction, GPUWarpReduction$/;"	m	class:taco::ParallelUnit
GPUWarp	include/taco/ir_tags.h	/^  NotParallel, DefaultUnit, GPUBlock, GPUWarp, GPUThread, CPUThread, CPUVector, CPUThreadGroupReduction, GPUBlockReduction, GPUWarpReduction$/;"	m	class:taco::ParallelUnit
GT	include/taco/ir/ir_printer.h	/^    GT = 9,$/;"	e	enum:taco::ir::IRPrinter::Precedence
GTE	include/taco/ir/ir_printer.h	/^    GTE = 9,$/;"	e	enum:taco::ir::IRPrinter::Precedence
GTEST_0_TUPLE_	test/gtest/gtest.h	/^#define GTEST_0_TUPLE_(/;"	d
GTEST_0_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_0_TUPLE_$/;"	d
GTEST_0_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_0_TYPENAMES_(/;"	d
GTEST_0_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_0_TYPENAMES_$/;"	d
GTEST_10_TUPLE_	test/gtest/gtest.h	/^#define GTEST_10_TUPLE_(/;"	d
GTEST_10_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_10_TUPLE_$/;"	d
GTEST_10_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_10_TYPENAMES_(/;"	d
GTEST_10_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_10_TYPENAMES_$/;"	d
GTEST_1_TUPLE_	test/gtest/gtest.h	/^#define GTEST_1_TUPLE_(/;"	d
GTEST_1_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_1_TUPLE_$/;"	d
GTEST_1_TUPLE_	test/gtest/gtest.h	/^class GTEST_1_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_1_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_1_TYPENAMES_(/;"	d
GTEST_1_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_1_TYPENAMES_$/;"	d
GTEST_2_TUPLE_	test/gtest/gtest.h	/^#define GTEST_2_TUPLE_(/;"	d
GTEST_2_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_2_TUPLE_$/;"	d
GTEST_2_TUPLE_	test/gtest/gtest.h	/^class GTEST_2_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_2_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_2_TYPENAMES_(/;"	d
GTEST_2_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_2_TYPENAMES_$/;"	d
GTEST_3_TUPLE_	test/gtest/gtest.h	/^#define GTEST_3_TUPLE_(/;"	d
GTEST_3_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_3_TUPLE_$/;"	d
GTEST_3_TUPLE_	test/gtest/gtest.h	/^class GTEST_3_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_3_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_3_TYPENAMES_(/;"	d
GTEST_3_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_3_TYPENAMES_$/;"	d
GTEST_4_TUPLE_	test/gtest/gtest.h	/^#define GTEST_4_TUPLE_(/;"	d
GTEST_4_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_4_TUPLE_$/;"	d
GTEST_4_TUPLE_	test/gtest/gtest.h	/^class GTEST_4_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_4_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_4_TYPENAMES_(/;"	d
GTEST_4_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_4_TYPENAMES_$/;"	d
GTEST_5_TUPLE_	test/gtest/gtest.h	/^#define GTEST_5_TUPLE_(/;"	d
GTEST_5_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_5_TUPLE_$/;"	d
GTEST_5_TUPLE_	test/gtest/gtest.h	/^class GTEST_5_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_5_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_5_TYPENAMES_(/;"	d
GTEST_5_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_5_TYPENAMES_$/;"	d
GTEST_6_TUPLE_	test/gtest/gtest.h	/^#define GTEST_6_TUPLE_(/;"	d
GTEST_6_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_6_TUPLE_$/;"	d
GTEST_6_TUPLE_	test/gtest/gtest.h	/^class GTEST_6_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_6_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_6_TYPENAMES_(/;"	d
GTEST_6_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_6_TYPENAMES_$/;"	d
GTEST_7_TUPLE_	test/gtest/gtest.h	/^#define GTEST_7_TUPLE_(/;"	d
GTEST_7_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_7_TUPLE_$/;"	d
GTEST_7_TUPLE_	test/gtest/gtest.h	/^class GTEST_7_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_7_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_7_TYPENAMES_(/;"	d
GTEST_7_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_7_TYPENAMES_$/;"	d
GTEST_8_TUPLE_	test/gtest/gtest.h	/^#define GTEST_8_TUPLE_(/;"	d
GTEST_8_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_8_TUPLE_$/;"	d
GTEST_8_TUPLE_	test/gtest/gtest.h	/^class GTEST_8_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_8_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_8_TYPENAMES_(/;"	d
GTEST_8_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_8_TYPENAMES_$/;"	d
GTEST_9_TUPLE_	test/gtest/gtest.h	/^#define GTEST_9_TUPLE_(/;"	d
GTEST_9_TUPLE_	test/gtest/gtest.h	/^#undef GTEST_9_TUPLE_$/;"	d
GTEST_9_TUPLE_	test/gtest/gtest.h	/^class GTEST_9_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_9_TYPENAMES_	test/gtest/gtest.h	/^#define GTEST_9_TYPENAMES_(/;"	d
GTEST_9_TYPENAMES_	test/gtest/gtest.h	/^#undef GTEST_9_TYPENAMES_$/;"	d
GTEST_ADD_REFERENCE_	test/gtest/gtest.h	/^#define GTEST_ADD_REFERENCE_(/;"	d
GTEST_ADD_REF_	test/gtest/gtest.h	/^#define GTEST_ADD_REF_(/;"	d
GTEST_ADD_REF_	test/gtest/gtest.h	/^#undef GTEST_ADD_REF_$/;"	d
GTEST_AMBIGUOUS_ELSE_BLOCKER_	test/gtest/gtest.h	/^# define GTEST_AMBIGUOUS_ELSE_BLOCKER_$/;"	d
GTEST_API_	test/gtest/gtest.h	/^#  define GTEST_API_ /;"	d
GTEST_API_	test/gtest/gtest.h	/^# define GTEST_API_$/;"	d
GTEST_ARRAY_SIZE_	test/gtest/gtest.h	/^#define GTEST_ARRAY_SIZE_(/;"	d
GTEST_ASSERT_	test/gtest/gtest.h	/^#define GTEST_ASSERT_(/;"	d
GTEST_ASSERT_EQ	test/gtest/gtest.h	/^#define GTEST_ASSERT_EQ(/;"	d
GTEST_ASSERT_GE	test/gtest/gtest.h	/^#define GTEST_ASSERT_GE(/;"	d
GTEST_ASSERT_GT	test/gtest/gtest.h	/^#define GTEST_ASSERT_GT(/;"	d
GTEST_ASSERT_LE	test/gtest/gtest.h	/^#define GTEST_ASSERT_LE(/;"	d
GTEST_ASSERT_LT	test/gtest/gtest.h	/^#define GTEST_ASSERT_LT(/;"	d
GTEST_ASSERT_NE	test/gtest/gtest.h	/^#define GTEST_ASSERT_NE(/;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_	test/gtest/gtest.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ /;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_	test/gtest/gtest.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ /;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_	test/gtest/gtest.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ /;"	d
GTEST_ATTRIBUTE_UNUSED_	test/gtest/gtest-all.cc	/^} GTEST_ATTRIBUTE_UNUSED_;$/;"	m	namespace:testing::internal	typeref:class:testing::internal::GTestFlagSaver	file:
GTEST_ATTRIBUTE_UNUSED_	test/gtest/gtest.h	/^  } GTEST_ATTRIBUTE_UNUSED_;$/;"	m	class:testing::internal::DeathTest	typeref:class:testing::internal::DeathTest::ReturnSentinel
GTEST_ATTRIBUTE_UNUSED_	test/gtest/gtest.h	/^# define GTEST_ATTRIBUTE_UNUSED_ /;"	d
GTEST_ATTRIBUTE_UNUSED_	test/gtest/gtest.h	/^} GTEST_ATTRIBUTE_UNUSED_;  \/\/ A ScopedTrace object does its job in its$/;"	m	namespace:testing::internal	typeref:class:testing::internal::ScopedTrace
GTEST_BIND_	test/gtest/gtest.h	/^# define GTEST_BIND_(/;"	d
GTEST_BY_REF_	test/gtest/gtest.h	/^#define GTEST_BY_REF_(/;"	d
GTEST_BY_REF_	test/gtest/gtest.h	/^#undef GTEST_BY_REF_$/;"	d
GTEST_CAN_COMPARE_NULL	test/gtest/gtest.h	/^# define GTEST_CAN_COMPARE_NULL /;"	d
GTEST_CAN_STREAM_RESULTS_	test/gtest/gtest.h	/^# define GTEST_CAN_STREAM_RESULTS_ /;"	d
GTEST_CASE_NAMESPACE_	test/gtest/gtest.h	/^# define GTEST_CASE_NAMESPACE_(/;"	d
GTEST_CHECK_	test/gtest/gtest.h	/^#define GTEST_CHECK_(/;"	d
GTEST_CHECK_POSIX_SUCCESS_	test/gtest/gtest.h	/^#define GTEST_CHECK_POSIX_SUCCESS_(/;"	d
GTEST_COMPILE_ASSERT_	test/gtest/gtest.h	/^#define GTEST_COMPILE_ASSERT_(/;"	d
GTEST_CONCAT_TOKEN_	test/gtest/gtest.h	/^#define GTEST_CONCAT_TOKEN_(/;"	d
GTEST_CONCAT_TOKEN_IMPL_	test/gtest/gtest.h	/^#define GTEST_CONCAT_TOKEN_IMPL_(/;"	d
GTEST_DEATH_TEST_	test/gtest/gtest.h	/^# define GTEST_DEATH_TEST_(/;"	d
GTEST_DEATH_TEST_CHECK_	test/gtest/gtest-all.cc	/^# define GTEST_DEATH_TEST_CHECK_(/;"	d	file:
GTEST_DEATH_TEST_CHECK_SYSCALL_	test/gtest/gtest-all.cc	/^# define GTEST_DEATH_TEST_CHECK_SYSCALL_(/;"	d	file:
GTEST_DECLARE_STATIC_MUTEX_	test/gtest/gtest.h	/^#  define GTEST_DECLARE_STATIC_MUTEX_(/;"	d
GTEST_DECLARE_STATIC_MUTEX_	test/gtest/gtest.h	/^# define GTEST_DECLARE_STATIC_MUTEX_(/;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	test/gtest/gtest.h	/^# define GTEST_DECLARE_TUPLE_AS_FRIEND_ /;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	test/gtest/gtest.h	/^#undef GTEST_DECLARE_TUPLE_AS_FRIEND_$/;"	d
GTEST_DECLARE_bool_	test/gtest/gtest.h	/^#define GTEST_DECLARE_bool_(/;"	d
GTEST_DECLARE_int32_	test/gtest/gtest.h	/^#define GTEST_DECLARE_int32_(/;"	d
GTEST_DECLARE_string_	test/gtest/gtest.h	/^#define GTEST_DECLARE_string_(/;"	d
GTEST_DEFINE_STATIC_MUTEX_	test/gtest/gtest.h	/^#  define GTEST_DEFINE_STATIC_MUTEX_(/;"	d
GTEST_DEFINE_STATIC_MUTEX_	test/gtest/gtest.h	/^# define GTEST_DEFINE_STATIC_MUTEX_(/;"	d
GTEST_DEFINE_bool_	test/gtest/gtest.h	/^#define GTEST_DEFINE_bool_(/;"	d
GTEST_DEFINE_int32_	test/gtest/gtest.h	/^#define GTEST_DEFINE_int32_(/;"	d
GTEST_DEFINE_string_	test/gtest/gtest.h	/^#define GTEST_DEFINE_string_(/;"	d
GTEST_DEV_EMAIL_	test/gtest/gtest.h	/^#define GTEST_DEV_EMAIL_ /;"	d
GTEST_DISABLE_MSC_WARNINGS_POP_	test/gtest/gtest.h	/^# define GTEST_DISABLE_MSC_WARNINGS_POP_(/;"	d
GTEST_DISABLE_MSC_WARNINGS_PUSH_	test/gtest/gtest.h	/^# define GTEST_DISABLE_MSC_WARNINGS_PUSH_(/;"	d
GTEST_DISALLOW_ASSIGN_	test/gtest/gtest.h	/^#define GTEST_DISALLOW_ASSIGN_(/;"	d
GTEST_DISALLOW_COPY_AND_ASSIGN_	test/gtest/gtest.h	/^#define GTEST_DISALLOW_COPY_AND_ASSIGN_(/;"	d
GTEST_ELLIPSIS_NEEDS_POD_	test/gtest/gtest.h	/^# define GTEST_ELLIPSIS_NEEDS_POD_ /;"	d
GTEST_ENV_HAS_STD_TUPLE_	test/gtest/gtest.h	/^#  define GTEST_ENV_HAS_STD_TUPLE_ /;"	d
GTEST_ENV_HAS_TR1_TUPLE_	test/gtest/gtest.h	/^#  define GTEST_ENV_HAS_TR1_TUPLE_ /;"	d
GTEST_ERROR	test/gtest/gtest.h	/^  GTEST_ERROR,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_EXCLUSIVE_LOCK_REQUIRED_	test/gtest/gtest.h	/^#define GTEST_EXCLUSIVE_LOCK_REQUIRED_(/;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	test/gtest/gtest.h	/^#  define GTEST_EXECUTE_DEATH_TEST_STATEMENT_(/;"	d
GTEST_EXECUTE_STATEMENT_	test/gtest/gtest.h	/^# define GTEST_EXECUTE_STATEMENT_(/;"	d
GTEST_FAIL	test/gtest/gtest.h	/^#define GTEST_FAIL(/;"	d
GTEST_FATAL	test/gtest/gtest.h	/^  GTEST_FATAL$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_FATAL_FAILURE_	test/gtest/gtest.h	/^#define GTEST_FATAL_FAILURE_(/;"	d
GTEST_FLAG	test/gtest/gtest.h	/^#define GTEST_FLAG(/;"	d
GTEST_FLAG_PREFIX_	test/gtest/gtest.h	/^#define GTEST_FLAG_PREFIX_ /;"	d
GTEST_FLAG_PREFIX_DASH_	test/gtest/gtest.h	/^#define GTEST_FLAG_PREFIX_DASH_ /;"	d
GTEST_FLAG_PREFIX_UPPER_	test/gtest/gtest.h	/^#define GTEST_FLAG_PREFIX_UPPER_ /;"	d
GTEST_GCC_VER_	test/gtest/gtest.h	/^# define GTEST_GCC_VER_ /;"	d
GTEST_HAS_ALT_PATH_SEP_	test/gtest/gtest.h	/^# define GTEST_HAS_ALT_PATH_SEP_ /;"	d
GTEST_HAS_CLONE	test/gtest/gtest.h	/^#     define GTEST_HAS_CLONE /;"	d
GTEST_HAS_COMBINE	test/gtest/gtest.h	/^# define GTEST_HAS_COMBINE /;"	d
GTEST_HAS_CXXABI_H_	test/gtest/gtest.h	/^# define GTEST_HAS_CXXABI_H_ /;"	d
GTEST_HAS_DEATH_TEST	test/gtest/gtest.h	/^# define GTEST_HAS_DEATH_TEST /;"	d
GTEST_HAS_EXCEPTIONS	test/gtest/gtest.h	/^#  define GTEST_HAS_EXCEPTIONS /;"	d
GTEST_HAS_GETTIMEOFDAY_	test/gtest/gtest-all.cc	/^# define GTEST_HAS_GETTIMEOFDAY_ /;"	d	file:
GTEST_HAS_GLOBAL_STRING	test/gtest/gtest.h	/^# define GTEST_HAS_GLOBAL_STRING /;"	d
GTEST_HAS_GLOBAL_WSTRING	test/gtest/gtest.h	/^# define GTEST_HAS_GLOBAL_WSTRING /;"	d
GTEST_HAS_PARAM_TEST	test/gtest/gtest.h	/^#define GTEST_HAS_PARAM_TEST /;"	d
GTEST_HAS_POSIX_RE	test/gtest/gtest.h	/^#  define GTEST_HAS_POSIX_RE /;"	d
GTEST_HAS_PTHREAD	test/gtest/gtest.h	/^# define GTEST_HAS_PTHREAD /;"	d
GTEST_HAS_RTTI	test/gtest/gtest.h	/^#    define GTEST_HAS_RTTI /;"	d
GTEST_HAS_RTTI	test/gtest/gtest.h	/^#   define GTEST_HAS_RTTI /;"	d
GTEST_HAS_RTTI	test/gtest/gtest.h	/^#  define GTEST_HAS_RTTI /;"	d
GTEST_HAS_SEH	test/gtest/gtest.h	/^#  define GTEST_HAS_SEH /;"	d
GTEST_HAS_STD_INITIALIZER_LIST_	test/gtest/gtest.h	/^# define GTEST_HAS_STD_INITIALIZER_LIST_ /;"	d
GTEST_HAS_STD_STRING	test/gtest/gtest.h	/^# define GTEST_HAS_STD_STRING /;"	d
GTEST_HAS_STD_TUPLE_	test/gtest/gtest.h	/^#   undef GTEST_HAS_STD_TUPLE_$/;"	d
GTEST_HAS_STD_TUPLE_	test/gtest/gtest.h	/^# define GTEST_HAS_STD_TUPLE_ /;"	d
GTEST_HAS_STD_WSTRING	test/gtest/gtest.h	/^# define GTEST_HAS_STD_WSTRING /;"	d
GTEST_HAS_STREAM_REDIRECTION	test/gtest/gtest.h	/^#  define GTEST_HAS_STREAM_REDIRECTION /;"	d
GTEST_HAS_TR1_TUPLE	test/gtest/gtest.h	/^#  define GTEST_HAS_TR1_TUPLE /;"	d
GTEST_HAS_TYPED_TEST	test/gtest/gtest.h	/^# define GTEST_HAS_TYPED_TEST /;"	d
GTEST_HAS_TYPED_TEST_P	test/gtest/gtest.h	/^# define GTEST_HAS_TYPED_TEST_P /;"	d
GTEST_IMPLEMENTATION_	test/gtest/gtest-all.cc	/^#define GTEST_IMPLEMENTATION_ /;"	d	file:
GTEST_IMPLEMENTATION_	test/gtest/gtest-all.cc	/^#undef GTEST_IMPLEMENTATION_$/;"	d	file:
GTEST_IMPL_CMP_HELPER_	test/gtest/gtest-all.cc	/^#define GTEST_IMPL_CMP_HELPER_(/;"	d	file:
GTEST_IMPL_CMP_HELPER_	test/gtest/gtest-all.cc	/^#undef GTEST_IMPL_CMP_HELPER_$/;"	d	file:
GTEST_IMPL_CMP_HELPER_	test/gtest/gtest.h	/^#define GTEST_IMPL_CMP_HELPER_(/;"	d
GTEST_IMPL_CMP_HELPER_	test/gtest/gtest.h	/^#undef GTEST_IMPL_CMP_HELPER_$/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	test/gtest/gtest.h	/^#define GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	test/gtest/gtest.h	/^#undef GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_$/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	test/gtest/gtest.h	/^#define GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	test/gtest/gtest.h	/^#undef GTEST_IMPL_FORMAT_C_STRING_AS_STRING_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PROD_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PROD_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_SPI_H_	test/gtest/gtest-all.cc	/^#define GTEST_INCLUDE_GTEST_GTEST_SPI_H_$/;"	d	file:
GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_	test/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_$/;"	d
GTEST_INFO	test/gtest/gtest.h	/^  GTEST_INFO,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_INTENTIONAL_CONST_COND_POP_	test/gtest/gtest.h	/^# define GTEST_INTENTIONAL_CONST_COND_POP_(/;"	d
GTEST_INTENTIONAL_CONST_COND_PUSH_	test/gtest/gtest.h	/^# define GTEST_INTENTIONAL_CONST_COND_PUSH_(/;"	d
GTEST_IS_NULL_LITERAL_	test/gtest/gtest.h	/^# define GTEST_IS_NULL_LITERAL_(/;"	d
GTEST_IS_THREADSAFE	test/gtest/gtest.h	/^#define GTEST_IS_THREADSAFE /;"	d
GTEST_LANG_CXX11	test/gtest/gtest.h	/^#  define GTEST_LANG_CXX11 /;"	d
GTEST_LOCK_EXCLUDED_	test/gtest/gtest-all.cc	/^        GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	test/gtest/gtest-all.cc	/^    GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	test/gtest/gtest-all.cc	/^    GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing::internal
GTEST_LOCK_EXCLUDED_	test/gtest/gtest-all.cc	/^    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	test/gtest/gtest.h	/^      GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex) {$/;"	f	class:testing::internal::linked_ptr_internal
GTEST_LOCK_EXCLUDED_	test/gtest/gtest.h	/^#define GTEST_LOCK_EXCLUDED_(/;"	d
GTEST_LOG_	test/gtest/gtest.h	/^#define GTEST_LOG_(/;"	d
GTEST_MESSAGE_	test/gtest/gtest.h	/^#define GTEST_MESSAGE_(/;"	d
GTEST_MESSAGE_AT_	test/gtest/gtest.h	/^#define GTEST_MESSAGE_AT_(/;"	d
GTEST_MOVE_	test/gtest/gtest.h	/^# define GTEST_MOVE_(/;"	d
GTEST_MUST_USE_RESULT_	test/gtest/gtest.h	/^  int Run() GTEST_MUST_USE_RESULT_;$/;"	m	class:testing::UnitTest
GTEST_MUST_USE_RESULT_	test/gtest/gtest.h	/^# define GTEST_MUST_USE_RESULT_ /;"	d
GTEST_NAME_	test/gtest/gtest.h	/^#define GTEST_NAME_ /;"	d
GTEST_NEEDS_IS_POINTER_	test/gtest/gtest.h	/^# define GTEST_NEEDS_IS_POINTER_ /;"	d
GTEST_NONFATAL_FAILURE_	test/gtest/gtest.h	/^#define GTEST_NONFATAL_FAILURE_(/;"	d
GTEST_NO_INLINE_	test/gtest/gtest-all.cc	/^  std::string CurrentOsStackTraceExceptTop(int skip_count) GTEST_NO_INLINE_;$/;"	m	class:testing::internal::UnitTestImpl	file:
GTEST_NO_INLINE_	test/gtest/gtest-all.cc	/^void StackLowerThanAddress(const void* ptr, bool* result) GTEST_NO_INLINE_;$/;"	m	namespace:testing::internal	file:
GTEST_NO_INLINE_	test/gtest/gtest.h	/^# define GTEST_NO_INLINE_ /;"	d
GTEST_OS_AIX	test/gtest/gtest.h	/^# define GTEST_OS_AIX /;"	d
GTEST_OS_CYGWIN	test/gtest/gtest.h	/^# define GTEST_OS_CYGWIN /;"	d
GTEST_OS_HPUX	test/gtest/gtest.h	/^# define GTEST_OS_HPUX /;"	d
GTEST_OS_IOS	test/gtest/gtest.h	/^#  define GTEST_OS_IOS /;"	d
GTEST_OS_IOS_SIMULATOR	test/gtest/gtest.h	/^#   define GTEST_OS_IOS_SIMULATOR /;"	d
GTEST_OS_LINUX	test/gtest/gtest.h	/^# define GTEST_OS_LINUX /;"	d
GTEST_OS_LINUX_ANDROID	test/gtest/gtest.h	/^#  define GTEST_OS_LINUX_ANDROID /;"	d
GTEST_OS_MAC	test/gtest/gtest.h	/^# define GTEST_OS_MAC /;"	d
GTEST_OS_NACL	test/gtest/gtest.h	/^# define GTEST_OS_NACL /;"	d
GTEST_OS_OPENBSD	test/gtest/gtest.h	/^# define GTEST_OS_OPENBSD /;"	d
GTEST_OS_QNX	test/gtest/gtest.h	/^# define GTEST_OS_QNX /;"	d
GTEST_OS_SOLARIS	test/gtest/gtest.h	/^# define GTEST_OS_SOLARIS /;"	d
GTEST_OS_SYMBIAN	test/gtest/gtest.h	/^# define GTEST_OS_SYMBIAN /;"	d
GTEST_OS_WINDOWS	test/gtest/gtest.h	/^# define GTEST_OS_WINDOWS /;"	d
GTEST_OS_WINDOWS_DESKTOP	test/gtest/gtest.h	/^#   define GTEST_OS_WINDOWS_DESKTOP /;"	d
GTEST_OS_WINDOWS_DESKTOP	test/gtest/gtest.h	/^#  define GTEST_OS_WINDOWS_DESKTOP /;"	d
GTEST_OS_WINDOWS_MINGW	test/gtest/gtest.h	/^#  define GTEST_OS_WINDOWS_MINGW /;"	d
GTEST_OS_WINDOWS_MOBILE	test/gtest/gtest.h	/^#  define GTEST_OS_WINDOWS_MOBILE /;"	d
GTEST_OS_WINDOWS_PHONE	test/gtest/gtest.h	/^#   define GTEST_OS_WINDOWS_PHONE /;"	d
GTEST_OS_WINDOWS_RT	test/gtest/gtest.h	/^#   define GTEST_OS_WINDOWS_RT /;"	d
GTEST_OS_ZOS	test/gtest/gtest.h	/^# define GTEST_OS_ZOS /;"	d
GTEST_PATH_MAX_	test/gtest/gtest-all.cc	/^# define GTEST_PATH_MAX_ /;"	d	file:
GTEST_PATH_SEP_	test/gtest/gtest.h	/^# define GTEST_PATH_SEP_ /;"	d
GTEST_PRED1_	test/gtest/gtest.h	/^#define GTEST_PRED1_(/;"	d
GTEST_PRED2_	test/gtest/gtest.h	/^#define GTEST_PRED2_(/;"	d
GTEST_PRED3_	test/gtest/gtest.h	/^#define GTEST_PRED3_(/;"	d
GTEST_PRED4_	test/gtest/gtest.h	/^#define GTEST_PRED4_(/;"	d
GTEST_PRED5_	test/gtest/gtest.h	/^#define GTEST_PRED5_(/;"	d
GTEST_PRED_FORMAT1_	test/gtest/gtest.h	/^#define GTEST_PRED_FORMAT1_(/;"	d
GTEST_PRED_FORMAT2_	test/gtest/gtest.h	/^#define GTEST_PRED_FORMAT2_(/;"	d
GTEST_PRED_FORMAT3_	test/gtest/gtest.h	/^#define GTEST_PRED_FORMAT3_(/;"	d
GTEST_PRED_FORMAT4_	test/gtest/gtest.h	/^#define GTEST_PRED_FORMAT4_(/;"	d
GTEST_PRED_FORMAT5_	test/gtest/gtest.h	/^#define GTEST_PRED_FORMAT5_(/;"	d
GTEST_PROJECT_URL_	test/gtest/gtest.h	/^#define GTEST_PROJECT_URL_ /;"	d
GTEST_REFERENCE_TO_CONST_	test/gtest/gtest.h	/^#define GTEST_REFERENCE_TO_CONST_(/;"	d
GTEST_REGISTERED_TEST_NAMES_	test/gtest/gtest.h	/^# define GTEST_REGISTERED_TEST_NAMES_(/;"	d
GTEST_REMOVE_CONST_	test/gtest/gtest.h	/^#define GTEST_REMOVE_CONST_(/;"	d
GTEST_REMOVE_REFERENCE_	test/gtest/gtest.h	/^#define GTEST_REMOVE_REFERENCE_(/;"	d
GTEST_REMOVE_REFERENCE_AND_CONST_	test/gtest/gtest.h	/^#define GTEST_REMOVE_REFERENCE_AND_CONST_(/;"	d
GTEST_REPEATER_METHOD_	test/gtest/gtest-all.cc	/^#define GTEST_REPEATER_METHOD_(/;"	d	file:
GTEST_REPEATER_METHOD_	test/gtest/gtest-all.cc	/^#undef GTEST_REPEATER_METHOD_$/;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	test/gtest/gtest-all.cc	/^#define GTEST_REVERSE_REPEATER_METHOD_(/;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	test/gtest/gtest-all.cc	/^#undef GTEST_REVERSE_REPEATER_METHOD_$/;"	d	file:
GTEST_SNPRINTF_	test/gtest/gtest.h	/^# define GTEST_SNPRINTF_(/;"	d
GTEST_SRC_GTEST_INTERNAL_INL_H_	test/gtest/gtest-all.cc	/^#define GTEST_SRC_GTEST_INTERNAL_INL_H_$/;"	d	file:
GTEST_SUCCEED	test/gtest/gtest.h	/^#define GTEST_SUCCEED(/;"	d
GTEST_SUCCESS_	test/gtest/gtest.h	/^#define GTEST_SUCCESS_(/;"	d
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_	test/gtest/gtest.h	/^#define GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(/;"	d
GTEST_TEMPLATE_	test/gtest/gtest.h	/^# define GTEST_TEMPLATE_ /;"	d
GTEST_TEST	test/gtest/gtest.h	/^#define GTEST_TEST(/;"	d
GTEST_TEST_	test/gtest/gtest.h	/^#define GTEST_TEST_(/;"	d
GTEST_TEST_ANY_THROW_	test/gtest/gtest.h	/^#define GTEST_TEST_ANY_THROW_(/;"	d
GTEST_TEST_BOOLEAN_	test/gtest/gtest.h	/^#define GTEST_TEST_BOOLEAN_(/;"	d
GTEST_TEST_CLASS_NAME_	test/gtest/gtest.h	/^#define GTEST_TEST_CLASS_NAME_(/;"	d
GTEST_TEST_NO_FATAL_FAILURE_	test/gtest/gtest.h	/^#define GTEST_TEST_NO_FATAL_FAILURE_(/;"	d
GTEST_TEST_NO_THROW_	test/gtest/gtest.h	/^#define GTEST_TEST_NO_THROW_(/;"	d
GTEST_TEST_THROW_	test/gtest/gtest.h	/^#define GTEST_TEST_THROW_(/;"	d
GTEST_TUPLE_ELEMENT_	test/gtest/gtest.h	/^#define GTEST_TUPLE_ELEMENT_(/;"	d
GTEST_TUPLE_ELEMENT_	test/gtest/gtest.h	/^#undef GTEST_TUPLE_ELEMENT_$/;"	d
GTEST_TUPLE_NAMESPACE_	test/gtest/gtest.h	/^#  define GTEST_TUPLE_NAMESPACE_ /;"	d
GTEST_TUPLE_NAMESPACE_	test/gtest/gtest.h	/^# define GTEST_TUPLE_NAMESPACE_ /;"	d
GTEST_TYPED_TEST_CASE_P_STATE_	test/gtest/gtest.h	/^# define GTEST_TYPED_TEST_CASE_P_STATE_(/;"	d
GTEST_TYPE_PARAMS_	test/gtest/gtest.h	/^# define GTEST_TYPE_PARAMS_(/;"	d
GTEST_UNSUPPORTED_DEATH_TEST_	test/gtest/gtest.h	/^# define GTEST_UNSUPPORTED_DEATH_TEST_(/;"	d
GTEST_USES_POSIX_RE	test/gtest/gtest.h	/^# define GTEST_USES_POSIX_RE /;"	d
GTEST_USES_SIMPLE_RE	test/gtest/gtest.h	/^# define GTEST_USES_SIMPLE_RE /;"	d
GTEST_USE_OWN_TR1_TUPLE	test/gtest/gtest.h	/^#  define GTEST_USE_OWN_TR1_TUPLE /;"	d
GTEST_WARNING	test/gtest/gtest.h	/^  GTEST_WARNING,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_WIDE_STRING_USES_UTF16_	test/gtest/gtest.h	/^#define GTEST_WIDE_STRING_USES_UTF16_ /;"	d
GTestColor	test/gtest/gtest-all.cc	/^enum GTestColor {$/;"	g	namespace:testing::internal	file:
GTestFlagSaver	test/gtest/gtest-all.cc	/^  GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
GTestFlagSaver	test/gtest/gtest-all.cc	/^class GTestFlagSaver {$/;"	c	namespace:testing::internal	file:
GTestIsInitialized	test/gtest/gtest-all.cc	/^static bool GTestIsInitialized() { return g_init_gtest_count != 0; }$/;"	f	namespace:testing::internal
GTestLog	test/gtest/gtest-all.cc	/^GTestLog::GTestLog(GTestLogSeverity severity, const char* file, int line)$/;"	f	class:testing::internal::GTestLog
GTestLog	test/gtest/gtest.h	/^class GTEST_API_ GTestLog {$/;"	c	namespace:std::tr1
GTestLogSeverity	test/gtest/gtest.h	/^enum GTestLogSeverity {$/;"	g	namespace:std::tr1
GTestMutexLock	test/gtest/gtest.h	/^  explicit GTestMutexLock(Mutex* mutex)$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	test/gtest/gtest.h	/^  explicit GTestMutexLock(Mutex*) {}  \/\/ NOLINT$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	test/gtest/gtest.h	/^  explicit GTestMutexLock(MutexBase* mutex)$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	test/gtest/gtest.h	/^class GTestMutexLock {$/;"	c	namespace:std::tr1
GTestShouldProcessSEH	test/gtest/gtest-all.cc	/^int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {$/;"	f	class:testing::internal::UnitTestOptions
GeneralAdd	test/op_factory.h	/^struct GeneralAdd {$/;"	s	namespace:taco
Generate	test/gtest/gtest-all.cc	/^UInt32 Random::Generate(UInt32 range) {$/;"	f	class:testing::internal::Random
GenerateUniqueFileName	test/gtest/gtest-all.cc	/^FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
GeneratorCreationFunc	test/gtest/gtest.h	/^  typedef ParamGenerator<ParamType>(GeneratorCreationFunc)();$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
GenericFloat	test/tests-type.cpp	/^typedef ::testing::Types<float, double> GenericFloat;$/;"	t	file:
GenericInts	test/tests-type.cpp	/^typedef ::testing::Types<char, short, int, long, long long> GenericInts;$/;"	t	file:
GenericUInts	test/tests-type.cpp	/^                         unsigned long, unsigned long long> GenericUInts;$/;"	t	file:
Get	test/gtest/gtest-all.cc	/^AutoHandle::Handle AutoHandle::Get() const {$/;"	f	class:testing::internal::AutoHandle
GetAbsolutePathToOutputFile	test/gtest/gtest-all.cc	/^std::string UnitTestOptions::GetAbsolutePathToOutputFile() {$/;"	f	class:testing::internal::UnitTestOptions
GetAnsiColorCode	test/gtest/gtest-all.cc	/^const char* GetAnsiColorCode(GTestColor color) {$/;"	f	namespace:testing::internal
GetArgvsForDeathTestChildProcess	test/gtest/gtest-all.cc	/^  GetArgvsForDeathTestChildProcess() {$/;"	f	class:testing::internal::ExecDeathTest	file:
GetBoolAssertionFailureMessage	test/gtest/gtest-all.cc	/^std::string GetBoolAssertionFailureMessage($/;"	f	namespace:testing::internal
GetCapturedStderr	test/gtest/gtest-all.cc	/^std::string GetCapturedStderr() {$/;"	f	namespace:testing::internal
GetCapturedStdout	test/gtest/gtest-all.cc	/^std::string GetCapturedStdout() {$/;"	f	namespace:testing::internal
GetCapturedStream	test/gtest/gtest-all.cc	/^std::string GetCapturedStream(CapturedStream** captured_stream) {$/;"	f	namespace:testing::internal
GetCapturedString	test/gtest/gtest-all.cc	/^  std::string GetCapturedString() {$/;"	f	class:testing::internal::CapturedStream
GetColorAttribute	test/gtest/gtest-all.cc	/^WORD GetColorAttribute(GTestColor color) {$/;"	f	namespace:testing::internal
GetCurrentDir	test/gtest/gtest-all.cc	/^FilePath FilePath::GetCurrentDir() {$/;"	f	class:testing::internal::FilePath
GetCurrentExecutableName	test/gtest/gtest-all.cc	/^FilePath GetCurrentExecutableName() {$/;"	f	namespace:testing::internal
GetCurrentOsStackTraceExceptTop	test/gtest/gtest-all.cc	/^std::string GetCurrentOsStackTraceExceptTop(UnitTest* \/*unit_test*\/,$/;"	f	namespace:testing::internal
GetDefaultFilter	test/gtest/gtest-all.cc	/^static const char* GetDefaultFilter() {$/;"	f	namespace:testing
GetElementOr	test/gtest/gtest-all.cc	/^inline E GetElementOr(const std::vector<E>& v, int i, E default_value) {$/;"	f	namespace:testing::internal
GetEnv	test/gtest/gtest.h	/^inline const char* GetEnv(const char* name) {$/;"	f	namespace:std::tr1::posix
GetEnviron	test/gtest/gtest-all.cc	/^inline char** GetEnviron() { return environ; }$/;"	f	namespace:testing::internal
GetEnviron	test/gtest/gtest-all.cc	/^inline char** GetEnviron() {$/;"	f	namespace:testing::internal
GetFileSize	test/gtest/gtest-all.cc	/^size_t CapturedStream::GetFileSize(FILE* file) {$/;"	f	class:testing::internal::CapturedStream
GetGlobalTestPartResultReporter	test/gtest/gtest-all.cc	/^UnitTestImpl::GetGlobalTestPartResultReporter() {$/;"	f	class:testing::internal::UnitTestImpl
GetIndexVars	src/index_notation/index_notation.cpp	/^  GetIndexVars(ProvenanceGraph provGraph) : provGraph(provGraph) {}$/;"	f	struct:taco::GetIndexVars
GetIndexVars	src/index_notation/index_notation.cpp	/^struct GetIndexVars : IndexNotationVisitor {$/;"	s	namespace:taco	file:
GetInjectableArgvs	test/gtest/gtest-all.cc	/^const ::std::vector<testing::internal::string>& GetInjectableArgvs() {$/;"	f	namespace:testing::internal
GetInstance	test/gtest/gtest-all.cc	/^UnitTest* UnitTest::GetInstance() {$/;"	f	class:testing::UnitTest
GetLastErrnoDescription	test/gtest/gtest-all.cc	/^std::string GetLastErrnoDescription() {$/;"	f	namespace:testing::internal
GetMutableTestCase	test/gtest/gtest-all.cc	/^  TestCase* GetMutableTestCase(int i) {$/;"	f	class:testing::internal::UnitTestImpl
GetMutableTestCase	test/gtest/gtest-all.cc	/^TestCase* UnitTest::GetMutableTestCase(int i) {$/;"	f	class:testing::UnitTest
GetMutableTestInfo	test/gtest/gtest-all.cc	/^TestInfo* TestCase::GetMutableTestInfo(int i) {$/;"	f	class:testing::TestCase
GetNextRandomSeed	test/gtest/gtest-all.cc	/^inline int GetNextRandomSeed(int seed) {$/;"	f	namespace:testing::internal
GetOrCreateValue	test/gtest/gtest.h	/^  T* GetOrCreateValue() const {$/;"	f	class:std::tr1::ThreadLocal
GetOutputFormat	test/gtest/gtest-all.cc	/^std::string UnitTestOptions::GetOutputFormat() {$/;"	f	class:testing::internal::UnitTestOptions
GetParam	test/gtest/gtest.h	/^  const ParamType& GetParam() const {$/;"	f	class:testing::WithParamInterface
GetPrefixUntilComma	test/gtest/gtest.h	/^inline std::string GetPrefixUntilComma(const char* str) {$/;"	f	namespace:testing::internal
GetProperty	include/taco/ir/ir.h	/^  GetProperty,$/;"	m	class:taco::ir::IRNodeType
GetProperty	include/taco/ir/ir.h	/^struct GetProperty : public ExprNode<GetProperty> {$/;"	s	namespace:taco::ir
GetRandomSeedFromFlag	test/gtest/gtest-all.cc	/^inline int GetRandomSeedFromFlag(Int32 random_seed_flag) {$/;"	f	namespace:testing::internal
GetReservedAttributesForElement	test/gtest/gtest-all.cc	/^static std::vector<std::string> GetReservedAttributesForElement($/;"	f	namespace:testing
GetStatusFileDescriptor	test/gtest/gtest-all.cc	/^int GetStatusFileDescriptor(unsigned int parent_process_id,$/;"	f	namespace:testing::internal
GetStream	test/gtest/gtest.h	/^  ::std::ostream& GetStream() { return ::std::cerr; }$/;"	f	class:std::tr1::GTestLog
GetString	test/gtest/gtest-all.cc	/^std::string Message::GetString() const {$/;"	f	class:testing::Message
GetTestCase	test/gtest/gtest-all.cc	/^  const TestCase* GetTestCase(int i) const {$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	test/gtest/gtest-all.cc	/^TestCase* UnitTestImpl::GetTestCase(const char* test_case_name,$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	test/gtest/gtest-all.cc	/^const TestCase* UnitTest::GetTestCase(int i) const {$/;"	f	class:testing::UnitTest
GetTestCaseName	test/gtest/gtest.h	/^  virtual const string& GetTestCaseName() const { return test_case_name_; }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestCasePatternHolder	test/gtest/gtest.h	/^  ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder($/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
GetTestCaseTypeId	test/gtest/gtest.h	/^  virtual TypeId GetTestCaseTypeId() const { return GetTypeId<TestCase>(); }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestInfo	test/gtest/gtest-all.cc	/^const TestInfo* TestCase::GetTestInfo(int i) const {$/;"	f	class:testing::TestCase
GetTestPartResult	test/gtest/gtest-all.cc	/^const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {$/;"	f	class:testing::TestPartResultArray
GetTestPartResult	test/gtest/gtest-all.cc	/^const TestPartResult& TestResult::GetTestPartResult(int i) const {$/;"	f	class:testing::TestResult
GetTestPartResultReporterForCurrentThread	test/gtest/gtest-all.cc	/^UnitTestImpl::GetTestPartResultReporterForCurrentThread() {$/;"	f	class:testing::internal::UnitTestImpl
GetTestProperty	test/gtest/gtest-all.cc	/^const TestProperty& TestResult::GetTestProperty(int i) const {$/;"	f	class:testing::TestResult
GetTestTypeId	test/gtest/gtest-all.cc	/^TypeId GetTestTypeId() {$/;"	f	namespace:testing::internal
GetThreadCount	test/gtest/gtest-all.cc	/^size_t GetThreadCount() {$/;"	f	namespace:testing::internal
GetThreadLocalsMapLocked	test/gtest/gtest-all.cc	/^  static ThreadIdToThreadLocals* GetThreadLocalsMapLocked() {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl	file:
GetTimeInMillis	test/gtest/gtest-all.cc	/^TimeInMillis GetTimeInMillis() {$/;"	f	namespace:testing::internal
GetTypeId	test/gtest/gtest.h	/^TypeId GetTypeId() {$/;"	f	namespace:testing::internal
GetTypeName	test/gtest/gtest.h	/^std::string GetTypeName() {$/;"	f	namespace:testing::internal
GetUnitTestImpl	test/gtest/gtest-all.cc	/^inline UnitTestImpl* GetUnitTestImpl() {$/;"	f	namespace:testing::internal
GetValueOnCurrentThread	test/gtest/gtest-all.cc	/^  static ThreadLocalValueHolderBase* GetValueOnCurrentThread($/;"	f	class:testing::internal::ThreadLocalRegistryImpl
GetValueOnCurrentThread	test/gtest/gtest-all.cc	/^ThreadLocalValueHolderBase* ThreadLocalRegistry::GetValueOnCurrentThread($/;"	f	class:testing::internal::ThreadLocalRegistry
GoogleTestFailureException	test/gtest/gtest-all.cc	/^GoogleTestFailureException::GoogleTestFailureException($/;"	f	class:testing::internal::GoogleTestFailureException
GoogleTestFailureException	test/gtest/gtest.h	/^class GTEST_API_ GoogleTestFailureException : public ::std::runtime_error {$/;"	c	namespace:testing::internal
Gt	include/taco/ir/ir.h	/^  Gt,$/;"	m	class:taco::ir::IRNodeType
Gt	include/taco/ir/ir.h	/^struct Gt : public ExprNode<Gt> {$/;"	s	namespace:taco::ir
Gte	include/taco/ir/ir.h	/^  Gte,$/;"	m	class:taco::ir::IRNodeType
Gte	include/taco/ir/ir.h	/^struct Gte : public ExprNode<Gte> {$/;"	s	namespace:taco::ir
HAVE_ROUND	python_bindings/pybind11/include/pybind11/detail/common.h	/^#    define HAVE_ROUND /;"	d
HAVE_SNPRINTF	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  define HAVE_SNPRINTF /;"	d
HEX	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HONOR_SHARDING_PROTOCOL	test/gtest/gtest-all.cc	/^    HONOR_SHARDING_PROTOCOL,$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding	file:
HRESULTFailureHelper	test/gtest/gtest-all.cc	/^AssertionResult HRESULTFailureHelper(const char* expr,$/;"	f	namespace:testing::internal::__anon3
Handle	test/gtest/gtest.h	/^  typedef void* Handle;$/;"	t	class:std::tr1::AutoHandle
HandleExceptionsInMethodIfSupported	test/gtest/gtest-all.cc	/^Result HandleExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HandleSehExceptionsInMethodIfSupported	test/gtest/gtest-all.cc	/^Result HandleSehExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HasFailure	test/gtest/gtest.h	/^  static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }$/;"	f	class:testing::Test
HasFatalFailure	test/gtest/gtest-all.cc	/^bool Test::HasFatalFailure() {$/;"	f	class:testing::Test
HasFatalFailure	test/gtest/gtest-all.cc	/^bool TestResult::HasFatalFailure() const {$/;"	f	class:testing::TestResult
HasGoogleTestFlagPrefix	test/gtest/gtest-all.cc	/^static bool HasGoogleTestFlagPrefix(const char* str) {$/;"	f	namespace:testing::internal
HasNewFatalFailureHelper	test/gtest/gtest-all.cc	/^HasNewFatalFailureHelper::HasNewFatalFailureHelper()$/;"	f	class:testing::internal::HasNewFatalFailureHelper
HasNewFatalFailureHelper	test/gtest/gtest.h	/^class GTEST_API_ HasNewFatalFailureHelper$/;"	c	namespace:testing::internal
HasNonfatalFailure	test/gtest/gtest-all.cc	/^bool Test::HasNonfatalFailure() {$/;"	f	class:testing::Test
HasNonfatalFailure	test/gtest/gtest-all.cc	/^bool TestResult::HasNonfatalFailure() const {$/;"	f	class:testing::TestResult
HasOneFailure	test/gtest/gtest-all.cc	/^AssertionResult HasOneFailure(const char* \/* results_expr *\/,$/;"	f	namespace:testing::internal
HasSameFixtureClass	test/gtest/gtest-all.cc	/^bool Test::HasSameFixtureClass() {$/;"	f	class:testing::Test
Hashable	python_bindings/pybind11/tests/test_pytypes.py	/^    class Hashable(object):$/;"	c	function:test_hash
HashedModeFormat	test/tests-merge_lattice.cpp	/^  HashedModeFormat() : ModeFormatImpl("hashed", false, false, true, false,$/;"	f	class:tests::HashedModeFormat
HashedModeFormat	test/tests-merge_lattice.cpp	/^class HashedModeFormat : public ModeFormatImpl {$/;"	c	namespace:tests	file:
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types1
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types10
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types11
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types12
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types13
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types14
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types15
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types16
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types17
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types18
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types19
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types2
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types20
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types21
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types22
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types23
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types24
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types25
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types26
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types27
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types28
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types29
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types3
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types30
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types31
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types32
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types33
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types34
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types35
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types36
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types37
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types38
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types39
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types4
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types40
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types41
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types42
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types43
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types44
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types45
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types46
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types47
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types48
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types49
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types5
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types50
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types6
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types7
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types8
Head	test/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types9
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates1
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates10
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates11
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates12
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates13
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates14
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates15
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates16
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates17
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates18
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates19
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates2
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates20
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates21
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates22
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates23
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates24
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates25
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates26
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates27
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates28
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates29
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates3
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates30
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates31
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates32
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates33
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates34
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates35
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates36
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates37
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates38
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates39
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates4
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates40
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates41
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates42
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates43
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates44
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates45
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates46
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates47
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates48
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates49
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates5
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates50
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates6
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates7
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates8
Head	test/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates9
HeaderGen	src/codegen/codegen.h	/^  enum OutputKind { HeaderGen, ImplementationGen };$/;"	e	enum:taco::ir::CodeGen::OutputKind
HelperFuncsCache	include/taco/tensor.h	/^                                 std::shared_ptr<ir::Module>>> HelperFuncsCache;$/;"	t	class:taco::TensorBase
HyperSparse	include/taco/util/fill.h	/^  HyperSparse,$/;"	m	class:taco::util::FillMethod
I	python_bindings/pybind11/include/pybind11/complex.h	/^#  undef I$/;"	d
I18NSPHINXOPTS	python_bindings/pybind11/docs/Makefile	/^I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
ID_VOID_MAIN	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IGNORE_SHARDING_PROTOCOL	test/gtest/gtest-all.cc	/^    IGNORE_SHARDING_PROTOCOL$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding	file:
INIT_REASON	include/taco/error/error_messages.h	/^#define INIT_REASON(/;"	d
INSTANTIATE_TEST_CASE_P	test/gtest/gtest.h	/^# define INSTANTIATE_TEST_CASE_P(/;"	d
INSTANTIATE_TYPED_TEST_CASE_P	test/gtest/gtest.h	/^# define INSTANTIATE_TYPED_TEST_CASE_P(/;"	d
INTERCEPT_ALL_THREADS	test/gtest/gtest-all.cc	/^    INTERCEPT_ALL_THREADS           \/\/ Intercepts all failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode	file:
INTERCEPT_ONLY_CURRENT_THREAD	test/gtest/gtest-all.cc	/^    INTERCEPT_ONLY_CURRENT_THREAD,  \/\/ Intercepts only thread local failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode	file:
INTERSECT	include/taco/index_notation/iteration_algebra_printer.h	/^    INTERSECT = 4,$/;"	m	class:taco::IterationAlgebraPrinter::Precedence
IN_PROGRESS	test/gtest/gtest-all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
IRHandle	include/taco/ir/ir.h	/^  IRHandle() : util::IntrusivePtr<const IRNode>() {}$/;"	f	struct:taco::ir::IRHandle
IRHandle	include/taco/ir/ir.h	/^  IRHandle(const IRNode *p) : util::IntrusivePtr<const IRNode>(p) {}$/;"	f	struct:taco::ir::IRHandle
IRHandle	include/taco/ir/ir.h	/^struct IRHandle : public util::IntrusivePtr<const IRNode> {$/;"	s	namespace:taco::ir
IRNode	include/taco/ir/ir.h	/^  IRNode() {}$/;"	f	struct:taco::ir::IRNode
IRNode	include/taco/ir/ir.h	/^struct IRNode : private util::Uncopyable {$/;"	s	namespace:taco::ir
IRNodeType	include/taco/ir/ir.h	/^enum class IRNodeType {$/;"	c	namespace:taco::ir
IRPrinter	include/taco/ir/ir_printer.h	/^class IRPrinter : public IRVisitorStrict {$/;"	c	namespace:taco::ir
IRPrinter	src/ir/ir_printer.cpp	/^IRPrinter::IRPrinter(ostream &s) : IRPrinter(s, false, false) {$/;"	f	class:taco::ir::IRPrinter
IRPrinter	src/ir/ir_printer.cpp	/^IRPrinter::IRPrinter(ostream &s, bool color, bool simplify)$/;"	f	class:taco::ir::IRPrinter
IRRewriter	include/taco/ir/ir_rewriter.h	/^class IRRewriter : public IRVisitorStrict {$/;"	c	namespace:taco::ir
IRVerifier	src/ir/ir_verifier.cpp	/^class IRVerifier : IRVisitor {$/;"	c	namespace:taco::ir::__anon15	file:
IRVisitor	include/taco/ir/ir_visitor.h	/^class IRVisitor : public IRVisitorStrict {$/;"	c	namespace:taco::ir
IRVisitorStrict	include/taco/ir/ir_visitor.h	/^class IRVisitorStrict {$/;"	c	namespace:taco::ir
Identity	include/taco/index_notation/properties.h	/^class Identity : public Property {$/;"	c	namespace:taco
Identity	src/index_notation/properties.cpp	/^Identity::Identity(Literal identity) : Identity(new IdentityPtr(identity)) {$/;"	f	class:taco::Identity
Identity	src/index_notation/properties.cpp	/^Identity::Identity(Literal identity, std::vector<int>& positions) : Identity(new IdentityPtr(identity, positions)) {$/;"	f	class:taco::Identity
Identity	src/index_notation/properties.cpp	/^Identity::Identity(const PropertyPtr* p) : Property(p) {$/;"	f	class:taco::Identity
IdentityPtr	include/taco/index_notation/property_pointers.h	/^struct IdentityPtr : public PropertyPtr {$/;"	s	namespace:taco
IdentityPtr	src/index_notation/property_pointers.cpp	/^IdentityPtr::IdentityPtr() : PropertyPtr(), content(nullptr) {$/;"	f	class:taco::IdentityPtr
IdentityPtr	src/index_notation/property_pointers.cpp	/^IdentityPtr::IdentityPtr(Literal identity) : PropertyPtr(), content(new Content) {$/;"	f	class:taco::IdentityPtr
IdentityPtr	src/index_notation/property_pointers.cpp	/^IdentityPtr::IdentityPtr(Literal identity, std::vector<int> &p) : PropertyPtr(), content(new Content) {$/;"	f	class:taco::IdentityPtr
Idx	test/tests-api.cpp	/^typedef std::vector<IndexArray> Idx;        \/\/ [0,2] index arrays per Index$/;"	t	file:
IfThenElse	include/taco/ir/ir.h	/^  IfThenElse,$/;"	m	class:taco::ir::IRNodeType
IfThenElse	include/taco/ir/ir.h	/^struct IfThenElse : public StmtNode<IfThenElse> {$/;"	s	namespace:taco::ir
IgnoreRaces	include/taco/ir_tags.h	/^  IgnoreRaces, NoRaces, Atomics, Temporary, ParallelReduction$/;"	m	class:taco::OutputRaceStrategy
ImplementationGen	src/codegen/codegen.h	/^  enum OutputKind { HeaderGen, ImplementationGen };$/;"	e	enum:taco::ir::CodeGen::OutputKind
ImplicitCast_	test/gtest/gtest.h	/^inline To ImplicitCast_(To x) { return x; }$/;"	f	namespace:std::tr1
ImplicitlyConvertible	test/gtest/gtest.h	/^class ImplicitlyConvertible {$/;"	c	namespace:testing::internal
InDeathTestChild	test/gtest/gtest-all.cc	/^bool InDeathTestChild() {$/;"	f	namespace:testing::internal
IncType	python_bindings/pybind11/tests/pybind11_tests.h	/^    IncType(const IncType &other) : IncType(other.value() + 1) { }$/;"	f	class:IncType
IncType	python_bindings/pybind11/tests/pybind11_tests.h	/^class IncType : public UserType {$/;"	c
IncType	python_bindings/pybind11/tests/test_builtin_casters.py	/^from pybind11_tests import UserType, IncType$/;"	i
Index	include/taco/storage/index.h	/^class Index {$/;"	c	namespace:taco
Index	python_bindings/pybind11/tests/test_builtin_casters.py	/^    class Index(object):$/;"	c	function:test_int_convert
Index	src/storage/index.cpp	/^Index::Index() : content(new Content) {$/;"	f	class:taco::Index
Index	src/storage/index.cpp	/^Index::Index(const Format& format) : Index() {$/;"	f	class:taco::Index
Index	src/storage/index.cpp	/^Index::Index(const Format& format, const std::vector<ModeIndex>& indices)$/;"	f	class:taco::Index
Index	test/tests-expr_storage.cpp	/^typedef std::vector<IndexArray> Index;      \/\/ [0,2] index arrays per Index$/;"	t	namespace:expr_storage_tests	file:
Index	test/tests-storage.cpp	/^typedef std::vector<IndexArray> Index;      \/\/ [0,2] index arrays per Index$/;"	t	file:
Index	test/tests-storage_alloc.cpp	/^typedef std::vector<IndexArray> Index;      \/\/ [0,2] index arrays per Index$/;"	t	namespace:storage_alloc_tests	file:
IndexArray	test/tests-api.cpp	/^typedef std::vector<IndexType>  IndexArray; \/\/ Index values$/;"	t	file:
IndexArray	test/tests-expr_storage.cpp	/^typedef std::vector<IndexType>  IndexArray; \/\/ Index values$/;"	t	namespace:expr_storage_tests	file:
IndexArray	test/tests-storage.cpp	/^typedef std::vector<IndexType>  IndexArray; \/\/ Index values$/;"	t	file:
IndexArray	test/tests-storage_alloc.cpp	/^typedef std::vector<IndexType>  IndexArray; \/\/ Index values$/;"	t	namespace:storage_alloc_tests	file:
IndexExpr	include/taco/index_notation/index_notation.h	/^  IndexExpr() : util::IntrusivePtr<const IndexExprNode>(nullptr) {}$/;"	f	class:taco::IndexExpr
IndexExpr	include/taco/index_notation/index_notation.h	/^  IndexExpr(const IndexExprNode* n) : util::IntrusivePtr<const IndexExprNode>(n) {}$/;"	f	class:taco::IndexExpr
IndexExpr	include/taco/index_notation/index_notation.h	/^class IndexExpr : public util::IntrusivePtr<const IndexExprNode> {$/;"	c	namespace:taco
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(TensorVar var) : IndexExpr(new AccessNode(var,{})) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(char val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(double val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(float val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(int16_t val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(int32_t val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(int64_t val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(int8_t val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(std::complex<double> val) :IndexExpr(new LiteralNode(val)){$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(std::complex<float> val) :IndexExpr(new LiteralNode(val)){$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(uint16_t val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(uint32_t val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(uint64_t val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExpr	src/index_notation/index_notation.cpp	/^IndexExpr::IndexExpr(uint8_t val) : IndexExpr(new LiteralNode(val)) {$/;"	f	class:taco::IndexExpr
IndexExprNode	include/taco/index_notation/index_notation_nodes_abstract.h	/^struct IndexExprNode : public util::Manageable<IndexExprNode>,$/;"	s	namespace:taco
IndexExprNode	src/index_notation/index_notation_nodes_abstract.cpp	/^IndexExprNode::IndexExprNode() : workspace(nullptr) {$/;"	f	class:taco::IndexExprNode
IndexExprNode	src/index_notation/index_notation_nodes_abstract.cpp	/^IndexExprNode::IndexExprNode(Datatype type)$/;"	f	class:taco::IndexExprNode
IndexExprReplacer	src/index_notation/iteration_algebra.cpp	/^  IndexExprReplacer(const std::map<IndexExpr, IndexExpr>& substitutions) : substitutions(substitutions) {$/;"	f	class:taco::IndexExprReplacer
IndexExprReplacer	src/index_notation/iteration_algebra.cpp	/^class IndexExprReplacer : public IterationAlgebraRewriter {$/;"	c	namespace:taco	file:
IndexExprRewriterStrict	include/taco/index_notation/index_notation_rewriter.h	/^class IndexExprRewriterStrict : public IndexExprVisitorStrict {$/;"	c	namespace:taco
IndexExprVisitorStrict	include/taco/index_notation/index_notation_visitor.h	/^class IndexExprVisitorStrict {$/;"	c	namespace:taco
IndexNotationPrinter	include/taco/index_notation/index_notation_printer.h	/^class IndexNotationPrinter : public IndexNotationVisitorStrict {$/;"	c	namespace:taco
IndexNotationPrinter	src/index_notation/index_notation_printer.cpp	/^IndexNotationPrinter::IndexNotationPrinter(std::ostream& os) : os(os) {$/;"	f	class:taco::IndexNotationPrinter
IndexNotationRewriter	include/taco/index_notation/index_notation_rewriter.h	/^class IndexNotationRewriter : public IndexNotationRewriterStrict {$/;"	c	namespace:taco
IndexNotationRewriterStrict	include/taco/index_notation/index_notation_rewriter.h	/^class IndexNotationRewriterStrict : public IndexExprRewriterStrict,$/;"	c	namespace:taco
IndexNotationVisitor	include/taco/index_notation/index_notation_visitor.h	/^class IndexNotationVisitor : public IndexNotationVisitorStrict {$/;"	c	namespace:taco
IndexNotationVisitorStrict	include/taco/index_notation/index_notation_visitor.h	/^class IndexNotationVisitorStrict : public IndexExprVisitorStrict,$/;"	c	namespace:taco
IndexSet	include/taco/index_notation/index_notation_nodes.h	/^struct IndexSet : IndexVarIterationModifier {$/;"	s	namespace:taco
IndexSetVar	include/taco/index_notation/index_notation.h	/^class IndexSetVar : public util::Comparable<IndexSetVar>, public IndexVarInterface {$/;"	c	namespace:taco
IndexSetVar	src/index_notation/index_notation.cpp	/^IndexSetVar::IndexSetVar(IndexVar base, std::vector<int> indexSet): content (new Content) {$/;"	f	class:taco::IndexSetVar
IndexStmt	include/taco/index_notation/index_notation.h	/^class IndexStmt : public util::IntrusivePtr<const IndexStmtNode> {$/;"	c	namespace:taco
IndexStmt	src/index_notation/index_notation.cpp	/^IndexStmt::IndexStmt() : util::IntrusivePtr<const IndexStmtNode>(nullptr) {$/;"	f	class:taco::IndexStmt
IndexStmt	src/index_notation/index_notation.cpp	/^IndexStmt::IndexStmt(const IndexStmtNode* n)$/;"	f	class:taco::IndexStmt
IndexStmtNode	include/taco/index_notation/index_notation_nodes_abstract.h	/^struct IndexStmtNode : public util::Manageable<IndexStmtNode>,$/;"	s	namespace:taco
IndexStmtNode	src/index_notation/index_notation_nodes_abstract.cpp	/^IndexStmtNode::IndexStmtNode() {$/;"	f	class:taco::IndexStmtNode
IndexStmtNode	src/index_notation/index_notation_nodes_abstract.cpp	/^IndexStmtNode::IndexStmtNode(Type type) : type (type) {$/;"	f	class:taco::IndexStmtNode
IndexStmtRewriterStrict	include/taco/index_notation/index_notation_rewriter.h	/^class IndexStmtRewriterStrict : public IndexStmtVisitorStrict {$/;"	c	namespace:taco
IndexStmtVisitorStrict	include/taco/index_notation/index_notation_visitor.h	/^class IndexStmtVisitorStrict {$/;"	c	namespace:taco
IndexType	test/tests-api.cpp	/^typedef int                     IndexType;$/;"	t	file:
IndexType	test/tests-expr_storage.cpp	/^typedef int                     IndexType;$/;"	t	namespace:expr_storage_tests	file:
IndexType	test/tests-storage.cpp	/^typedef int                     IndexType;$/;"	t	file:
IndexType	test/tests-storage_alloc.cpp	/^typedef int                     IndexType;$/;"	t	namespace:storage_alloc_tests	file:
IndexTypeUnion	include/taco/type.h	/^  IndexTypeUnion() {int32Value = 0;}$/;"	f	union:taco::IndexTypeUnion
IndexTypeUnion	include/taco/type.h	/^union IndexTypeUnion {$/;"	u	namespace:taco
IndexVar	include/taco/index_notation/index_notation.h	/^class IndexVar : public IndexExpr, public IndexVarInterface {$/;"	c	namespace:taco
IndexVar	src/index_notation/index_notation.cpp	/^IndexVar::IndexVar() : IndexVar(util::uniqueName('i')) {}$/;"	f	class:taco::IndexVar
IndexVar	src/index_notation/index_notation.cpp	/^IndexVar::IndexVar(const IndexVarNode* n) : IndexExpr(n) {}$/;"	f	class:taco::IndexVar
IndexVar	src/index_notation/index_notation.cpp	/^IndexVar::IndexVar(const std::string& name) : IndexVar(name, Datatype::Int32) {}$/;"	f	class:taco::IndexVar
IndexVar	src/index_notation/index_notation.cpp	/^IndexVar::IndexVar(const std::string& name, const Datatype& type) : IndexVar(new IndexVarNode(name, type)) {}$/;"	f	class:taco::IndexVar
IndexVarInterface	include/taco/index_notation/index_notation.h	/^class IndexVarInterface {$/;"	c	namespace:taco
IndexVarIterationModifier	include/taco/index_notation/index_notation_nodes.h	/^struct IndexVarIterationModifier {$/;"	s	namespace:taco
IndexVarNode	include/taco/index_notation/index_notation_nodes.h	/^struct IndexVarNode : public IndexExprNode, public util::Comparable<IndexVarNode> {$/;"	s	namespace:taco
IndexVarNode	src/index_notation/index_notation_nodes.cpp	/^IndexVarNode::IndexVarNode(const std::string& name, const Datatype& type) $/;"	f	class:taco::IndexVarNode
IndexVarRel	include/taco/index_notation/provenance_graph.h	/^  IndexVarRel() : IntrusivePtr(nullptr) {}$/;"	f	class:taco::IndexVarRel
IndexVarRel	include/taco/index_notation/provenance_graph.h	/^  IndexVarRel(IndexVarRelNode* node) : IntrusivePtr(node) {}$/;"	f	class:taco::IndexVarRel
IndexVarRel	include/taco/index_notation/provenance_graph.h	/^class IndexVarRel : public util::IntrusivePtr<const IndexVarRelNode> {$/;"	c	namespace:taco
IndexVarRelNode	include/taco/index_notation/provenance_graph.h	/^  IndexVarRelNode() : relType(UNDEFINED) {}$/;"	f	struct:taco::IndexVarRelNode
IndexVarRelNode	include/taco/index_notation/provenance_graph.h	/^  IndexVarRelNode(IndexVarRelType type) : relType(type) {}$/;"	f	struct:taco::IndexVarRelNode
IndexVarRelNode	include/taco/index_notation/provenance_graph.h	/^struct IndexVarRelNode : public util::Manageable<IndexVarRelNode>,$/;"	s	namespace:taco
IndexVarRelType	include/taco/index_notation/provenance_graph.h	/^enum IndexVarRelType {UNDEFINED, SPLIT, DIVIDE, POS, FUSE, BOUND, PRECOMPUTE};$/;"	g	namespace:taco
IndexVarType	src/lower/iteration_graph.h	/^enum class IndexVarType {$/;"	c	namespace:taco
Indices	include/taco/ir/ir.h	/^  Indices,$/;"	m	class:taco::ir::TensorProperty
Indices	test/tests-api.cpp	/^typedef std::vector<Idx>        Indices;    \/\/ One Index per level$/;"	t	file:
Indices	test/tests-expr_storage.cpp	/^typedef std::vector<Index>      Indices;    \/\/ One Index per level$/;"	t	namespace:expr_storage_tests	file:
Indices	test/tests-storage.cpp	/^typedef std::vector<Index>      Indices;    \/\/ One Index per level$/;"	t	file:
Indices	test/tests-storage_alloc.cpp	/^typedef std::vector<Index>      Indices;    \/\/ One Index per level$/;"	t	namespace:storage_alloc_tests	file:
Infinity	test/gtest/gtest.h	/^  static RawType Infinity() {$/;"	f	class:testing::internal::FloatingPoint
Init	test/gtest/gtest-all.cc	/^void RE::Init(const char* regex) {$/;"	f	class:testing::internal::RE
Init	test/gtest/gtest-all.cc	/^void ScopedFakeTestPartResultReporter::Init() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
InitCopy	test/gtest/gtest.h	/^  void InitCopy(const Element* array, size_t a_size) {$/;"	f	class:testing::internal::NativeArray
InitDeathTestSubprocessControlInfo	test/gtest/gtest-all.cc	/^  void InitDeathTestSubprocessControlInfo() {$/;"	f	class:testing::internal::UnitTestImpl
InitGoogleTest	test/gtest/gtest-all.cc	/^void InitGoogleTest(int* argc, char** argv) {$/;"	f	namespace:testing
InitGoogleTest	test/gtest/gtest-all.cc	/^void InitGoogleTest(int* argc, wchar_t** argv) {$/;"	f	namespace:testing
InitGoogleTestImpl	test/gtest/gtest-all.cc	/^void InitGoogleTestImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
InitRef	test/gtest/gtest.h	/^  void InitRef(const Element* array, size_t a_size) {$/;"	f	class:testing::internal::NativeArray
InitializingFunctionRecordDeleter	python_bindings/pybind11/include/pybind11/pybind11.h	/^    struct InitializingFunctionRecordDeleter {$/;"	s	class:cpp_function
InstantiationContainer	test/gtest/gtest.h	/^      InstantiationContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Int	python_bindings/pybind11/tests/test_builtin_casters.py	/^    class Int(object):$/;"	c	function:test_int_convert
Int	src/type.cpp	/^Datatype Int(int bits) {$/;"	f	namespace:taco
Int	test/gtest/gtest.h	/^  typedef __int64 Int;$/;"	t	class:std::tr1::TypeWithSize
Int	test/gtest/gtest.h	/^  typedef int Int;$/;"	t	class:std::tr1::TypeWithSize
Int128	include/taco/type.h	/^    Int128,$/;"	e	enum:taco::Datatype::Kind
Int128	src/type.cpp	/^Datatype Int128 = Datatype(Datatype::UInt128);$/;"	m	namespace:taco	file:
Int16	include/taco/type.h	/^    Int16,$/;"	e	enum:taco::Datatype::Kind
Int16	src/type.cpp	/^Datatype Int16  = Datatype(Datatype::Int16);$/;"	m	namespace:taco	file:
Int32	include/taco/type.h	/^    Int32,$/;"	e	enum:taco::Datatype::Kind
Int32	src/type.cpp	/^Datatype Int32  = Datatype(Datatype::Int32);$/;"	m	namespace:taco	file:
Int32	test/gtest/gtest.h	/^typedef TypeWithSize<4>::Int Int32;$/;"	t	namespace:std::tr1
Int32FromEnvOrDie	test/gtest/gtest-all.cc	/^Int32 Int32FromEnvOrDie(const char* var, Int32 default_val) {$/;"	f	namespace:testing::internal
Int32FromGTestEnv	test/gtest/gtest-all.cc	/^Int32 Int32FromGTestEnv(const char* flag, Int32 default_value) {$/;"	f	namespace:testing::internal
Int64	include/taco/type.h	/^    Int64,$/;"	e	enum:taco::Datatype::Kind
Int64	src/type.cpp	/^Datatype Int64  = Datatype(Datatype::Int64);$/;"	m	namespace:taco	file:
Int64	test/gtest/gtest.h	/^typedef TypeWithSize<8>::Int Int64;$/;"	t	namespace:std::tr1
Int8	include/taco/type.h	/^    Int8,$/;"	e	enum:taco::Datatype::Kind
Int8	src/type.cpp	/^Datatype Int8   = Datatype(Datatype::Int8);$/;"	m	namespace:taco	file:
IntAndIndex	python_bindings/pybind11/tests/test_builtin_casters.py	/^    class IntAndIndex(object):$/;"	c	function:test_int_convert
IntFloat	python_bindings/pybind11/tests/pybind11_tests.h	/^union IntFloat {$/;"	u
IntTest	test/tests-type.cpp	/^TYPED_TEST_CASE_P(IntTest);$/;"	v
IntTest	test/tests-type.cpp	/^template <typename T> class IntTest : public ::testing::Test {};$/;"	c	file:
InterceptMode	test/gtest/gtest-all.cc	/^  enum InterceptMode {$/;"	g	class:testing::ScopedFakeTestPartResultReporter	file:
Internal	include/taco/error.h	/^  enum Kind { User, Internal, Temporary };$/;"	e	enum:taco::ErrorReport::Kind
InternalRunDeathTestFlag	test/gtest/gtest.h	/^  InternalRunDeathTestFlag(const std::string& a_file,$/;"	f	class:testing::internal::InternalRunDeathTestFlag
InternalRunDeathTestFlag	test/gtest/gtest.h	/^class InternalRunDeathTestFlag {$/;"	c	namespace:testing::internal
Intersect	include/taco/index_notation/iteration_algebra.h	/^class Intersect: public IterationAlgebra {$/;"	c	namespace:taco
Intersect	src/index_notation/iteration_algebra.cpp	/^Intersect::Intersect(IterationAlgebra a, IterationAlgebra b) : Intersect(new IntersectNode(a, b)) {}$/;"	f	class:taco::Intersect
Intersect	src/index_notation/iteration_algebra.cpp	/^Intersect::Intersect(const IterationAlgebraNode* n) : IterationAlgebra(n) {}$/;"	f	class:taco::Intersect
IntersectGen	test/op_factory.h	/^struct IntersectGen {$/;"	s	namespace:taco
IntersectGenDeMorgan	test/op_factory.h	/^struct IntersectGenDeMorgan {$/;"	s	namespace:taco
IntersectNode	include/taco/index_notation/iteration_algebra.h	/^  IntersectNode(IterationAlgebra a, IterationAlgebra b) : BinaryIterationAlgebraNode(a, b) {}$/;"	f	struct:taco::IntersectNode
IntersectNode	include/taco/index_notation/iteration_algebra.h	/^struct IntersectNode: public BinaryIterationAlgebraNode {$/;"	s	namespace:taco
Intrinsic	include/taco/index_notation/intrinsic.h	/^class Intrinsic {$/;"	c	namespace:taco
IntrusivePtr	include/taco/util/intrusive_ptr.h	/^  IntrusivePtr() : ptr(nullptr) {}$/;"	f	class:taco::util::IntrusivePtr
IntrusivePtr	include/taco/util/intrusive_ptr.h	/^  IntrusivePtr(IntrusivePtr &&other) : ptr(other.ptr) {$/;"	f	class:taco::util::IntrusivePtr
IntrusivePtr	include/taco/util/intrusive_ptr.h	/^  IntrusivePtr(T *p) : ptr(p) {$/;"	f	class:taco::util::IntrusivePtr
IntrusivePtr	include/taco/util/intrusive_ptr.h	/^  IntrusivePtr(const IntrusivePtr &other) : ptr(other.ptr) {$/;"	f	class:taco::util::IntrusivePtr
IntrusivePtr	include/taco/util/intrusive_ptr.h	/^class IntrusivePtr {$/;"	c	namespace:taco::util
IsAProtocolMessage	test/gtest/gtest.h	/^struct IsAProtocolMessage$/;"	s	namespace:testing::internal
IsATTY	test/gtest/gtest.h	/^inline int IsATTY(int \/* fd *\/) { return 0; }$/;"	f	namespace:std::tr1::posix
IsATTY	test/gtest/gtest.h	/^inline int IsATTY(int fd) { return _isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsATTY	test/gtest/gtest.h	/^inline int IsATTY(int fd) { return isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsAbsolutePath	test/gtest/gtest-all.cc	/^bool FilePath::IsAbsolutePath() const {$/;"	f	class:testing::internal::FilePath
IsAlNum	test/gtest/gtest.h	/^inline bool IsAlNum(char ch) {$/;"	f	namespace:std::tr1
IsAlpha	test/gtest/gtest.h	/^inline bool IsAlpha(char ch) {$/;"	f	namespace:std::tr1
IsAsciiDigit	test/gtest/gtest-all.cc	/^bool IsAsciiDigit(char ch) { return '0' <= ch && ch <= '9'; }$/;"	f	namespace:testing::internal
IsAsciiPunct	test/gtest/gtest-all.cc	/^bool IsAsciiPunct(char ch) {$/;"	f	namespace:testing::internal
IsAsciiWhiteSpace	test/gtest/gtest-all.cc	/^bool IsAsciiWhiteSpace(char ch) { return IsInSet(ch, " \\f\\n\\r\\t\\v"); }$/;"	f	namespace:testing::internal
IsAsciiWordChar	test/gtest/gtest-all.cc	/^bool IsAsciiWordChar(char ch) {$/;"	f	namespace:testing::internal
IsCloseable	test/gtest/gtest-all.cc	/^bool AutoHandle::IsCloseable() const {$/;"	f	class:testing::internal::AutoHandle
IsContainer	test/gtest/gtest.h	/^typedef int IsContainer;$/;"	t	namespace:testing::internal
IsContainerTest	test/gtest/gtest.h	/^IsContainer IsContainerTest(int \/* dummy *\/,$/;"	f	namespace:testing::internal
IsContainerTest	test/gtest/gtest.h	/^IsNotContainer IsContainerTest(long \/* dummy *\/) { return '\\0'; }$/;"	f	namespace:testing::internal
IsDigit	test/gtest/gtest.h	/^inline bool IsDigit(char ch) {$/;"	f	namespace:std::tr1
IsDir	test/gtest/gtest.h	/^inline bool IsDir(const StatStruct& st) {$/;"	f	namespace:std::tr1::posix
IsDirectory	test/gtest/gtest-all.cc	/^bool FilePath::IsDirectory() const {$/;"	f	class:testing::internal::FilePath
IsEmpty	test/gtest/gtest.h	/^  bool IsEmpty() const { return pathname_.empty(); }$/;"	f	class:testing::internal::FilePath
IsHRESULTFailure	test/gtest/gtest-all.cc	/^AssertionResult IsHRESULTFailure(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsHRESULTSuccess	test/gtest/gtest-all.cc	/^AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsInSet	test/gtest/gtest-all.cc	/^bool IsInSet(char ch, const char* str) {$/;"	f	namespace:testing::internal
IsLower	test/gtest/gtest.h	/^inline bool IsLower(char ch) {$/;"	f	namespace:std::tr1
IsNormalizableWhitespace	test/gtest/gtest-all.cc	/^  static bool IsNormalizableWhitespace(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsNotContainer	test/gtest/gtest.h	/^typedef char IsNotContainer;$/;"	t	namespace:testing::internal
IsNotSubstring	test/gtest/gtest-all.cc	/^AssertionResult IsNotSubstring($/;"	f	namespace:testing
IsPathSeparator	test/gtest/gtest-all.cc	/^static bool IsPathSeparator(char c) {$/;"	f	namespace:testing::internal
IsPrintableAscii	test/gtest/gtest-all.cc	/^inline bool IsPrintableAscii(wchar_t c) {$/;"	f	namespace:testing::internal
IsRepeat	test/gtest/gtest-all.cc	/^bool IsRepeat(char ch) { return IsInSet(ch, "?*+"); }$/;"	f	namespace:testing::internal
IsRootDirectory	test/gtest/gtest-all.cc	/^bool FilePath::IsRootDirectory() const {$/;"	f	class:testing::internal::FilePath
IsSpace	test/gtest/gtest.h	/^inline bool IsSpace(char ch) {$/;"	f	namespace:std::tr1
IsSubstring	test/gtest/gtest-all.cc	/^AssertionResult IsSubstring($/;"	f	namespace:testing
IsSubstringImpl	test/gtest/gtest-all.cc	/^AssertionResult IsSubstringImpl($/;"	f	namespace:testing::__anon2
IsSubstringPred	test/gtest/gtest-all.cc	/^bool IsSubstringPred(const StringType& needle,$/;"	f	namespace:testing::__anon2
IsSubstringPred	test/gtest/gtest-all.cc	/^bool IsSubstringPred(const char* needle, const char* haystack) {$/;"	f	namespace:testing::__anon2
IsSubstringPred	test/gtest/gtest-all.cc	/^bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {$/;"	f	namespace:testing::__anon2
IsTrue	test/gtest/gtest-all.cc	/^bool IsTrue(bool condition) { return condition; }$/;"	f	namespace:testing::internal
IsUpper	test/gtest/gtest.h	/^inline bool IsUpper(char ch) {$/;"	f	namespace:std::tr1
IsUtf16SurrogatePair	test/gtest/gtest-all.cc	/^inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {$/;"	f	namespace:testing::internal
IsValidEscape	test/gtest/gtest-all.cc	/^bool IsValidEscape(char c) {$/;"	f	namespace:testing::internal
IsValidXmlCharacter	test/gtest/gtest-all.cc	/^  static bool IsValidXmlCharacter(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsXDigit	test/gtest/gtest.h	/^inline bool IsXDigit(char ch) {$/;"	f	namespace:std::tr1
IsXDigit	test/gtest/gtest.h	/^inline bool IsXDigit(wchar_t ch) {$/;"	f	namespace:std::tr1
Isomorphic	src/index_notation/index_notation.cpp	/^struct Isomorphic : public IndexNotationVisitorStrict {$/;"	s	namespace:taco	file:
Item	python_bindings/pybind11/tests/test_callbacks.py	/^    class Item:$/;"	c	function:test_async_callbacks
IterateTensorTest	test/tests-tensor_types.cpp	/^TYPED_TEST_CASE_P(IterateTensorTest);$/;"	v
IterateTensorTest	test/tests-tensor_types.cpp	/^template <typename T> class IterateTensorTest : public ::testing::Test {};$/;"	c	file:
IterationAlgebra	include/taco/index_notation/iteration_algebra.h	/^class IterationAlgebra : public util::IntrusivePtr<const IterationAlgebraNode> {$/;"	c	namespace:taco
IterationAlgebra	src/index_notation/iteration_algebra.cpp	/^IterationAlgebra::IterationAlgebra() : IterationAlgebra(nullptr) {}$/;"	f	class:taco::IterationAlgebra
IterationAlgebra	src/index_notation/iteration_algebra.cpp	/^IterationAlgebra::IterationAlgebra(IndexExpr expr) : IterationAlgebra(new RegionNode(expr)) {}$/;"	f	class:taco::IterationAlgebra
IterationAlgebra	src/index_notation/iteration_algebra.cpp	/^IterationAlgebra::IterationAlgebra(const IterationAlgebraNode* n) : util::IntrusivePtr<const IterationAlgebraNode>(n) {}$/;"	f	class:taco::IterationAlgebra
IterationAlgebraNode	include/taco/index_notation/iteration_algebra.h	/^  IterationAlgebraNode() {}$/;"	f	struct:taco::IterationAlgebraNode
IterationAlgebraNode	include/taco/index_notation/iteration_algebra.h	/^struct IterationAlgebraNode: public util::Manageable<IterationAlgebraNode>,$/;"	s	namespace:taco
IterationAlgebraPrinter	include/taco/index_notation/iteration_algebra_printer.h	/^class IterationAlgebraPrinter : IterationAlgebraVisitorStrict {$/;"	c	namespace:taco
IterationAlgebraPrinter	src/index_notation/iteration_algebra_printer.cpp	/^IterationAlgebraPrinter::IterationAlgebraPrinter(std::ostream& os) : os(os) {}$/;"	f	class:taco::IterationAlgebraPrinter
IterationAlgebraRewriter	include/taco/index_notation/iteration_algebra.h	/^class IterationAlgebraRewriter : public IterationAlgebraRewriterStrict {$/;"	c	namespace:taco
IterationAlgebraRewriterStrict	include/taco/index_notation/iteration_algebra.h	/^class IterationAlgebraRewriterStrict : public IterationAlgebraVisitorStrict {$/;"	c	namespace:taco
IterationAlgebraVisitor	include/taco/index_notation/iteration_algebra.h	/^class IterationAlgebraVisitor : public IterationAlgebraVisitorStrict {$/;"	c	namespace:taco
IterationAlgebraVisitorStrict	include/taco/index_notation/iteration_algebra.h	/^class IterationAlgebraVisitorStrict {$/;"	c	namespace:taco
IterationForest	src/lower/iteration_forest.cpp	/^IterationForest::IterationForest(const vector<TensorPath>& paths) {$/;"	f	class:taco::IterationForest
IterationForest	src/lower/iteration_forest.h	/^  IterationForest() {}$/;"	f	class:taco::IterationForest
IterationForest	src/lower/iteration_forest.h	/^class IterationForest {$/;"	c	namespace:taco
IterationGraph	src/lower/iteration_graph.cpp	/^IterationGraph::IterationGraph() {$/;"	f	class:taco::IterationGraph
IterationGraph	src/lower/iteration_graph.h	/^class IterationGraph {$/;"	c	namespace:taco
Iterator	include/taco/lower/iterator.h	/^class Iterator : public util::Comparable<Iterator> {$/;"	c	namespace:taco
Iterator	src/lower/iterator.cpp	/^Iterator::Iterator() : content(nullptr) {$/;"	f	class:taco::Iterator
Iterator	src/lower/iterator.cpp	/^Iterator::Iterator(IndexVar indexVar, Expr tensor, Mode mode, Iterator parent,$/;"	f	class:taco::Iterator
Iterator	src/lower/iterator.cpp	/^Iterator::Iterator(IndexVar indexVar, bool isFull) : content(new Content) {$/;"	f	class:taco::Iterator
Iterator	src/lower/iterator.cpp	/^Iterator::Iterator(ir::Expr tensor) : content(new Content) {$/;"	f	class:taco::Iterator
Iterator	src/lower/iterator.cpp	/^Iterator::Iterator(std::shared_ptr<Content> content) : content(content) {$/;"	f	class:taco::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base, T value, int index,$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	test/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base,$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator10
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator2
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator3
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator4
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator5
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator6
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator7
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator8
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator9
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::RangeGenerator
Iterator	test/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::ValuesInIteratorRangeGenerator
IteratorTraits	test/gtest/gtest.h	/^struct IteratorTraits {$/;"	s	namespace:std::tr1
IteratorTraits	test/gtest/gtest.h	/^struct IteratorTraits<T*> {$/;"	s	namespace:std::tr1
IteratorTraits	test/gtest/gtest.h	/^struct IteratorTraits<const T*> {$/;"	s	namespace:std::tr1
Iterators	include/taco/lower/iterator.h	/^class Iterators {$/;"	c	namespace:taco
Iterators	src/lower/iterator.cpp	/^Iterators::Iterators()$/;"	f	class:taco::Iterators
Iterators	src/lower/iterator.cpp	/^Iterators::Iterators(IndexStmt stmt) : Iterators(stmt, createIRTensorVars(stmt))$/;"	f	class:taco::Iterators
Iterators	src/lower/iterator.cpp	/^Iterators::Iterators(IndexStmt stmt, const map<TensorVar, Expr>& tensorVars)$/;"	f	class:taco::Iterators
Join	test/gtest/gtest-all.cc	/^void ThreadWithParamBase::Join() {$/;"	f	class:testing::internal::ThreadWithParamBase
Join	test/gtest/gtest.h	/^  void Join() {$/;"	f	class:std::tr1::ThreadWithParam
Kernel	include/taco/index_notation/kernel.h	/^class Kernel {$/;"	c	namespace:taco
Kernel	src/index_notation/kernel.cpp	/^Kernel::Kernel() : content(nullptr) {$/;"	f	class:taco::Kernel
Kernel	src/index_notation/kernel.cpp	/^Kernel::Kernel(IndexStmt stmt, shared_ptr<ir::Module> module, void* evaluate,$/;"	f	class:taco::Kernel
KernelsCache	include/taco/tensor.h	/^                                std::shared_ptr<ir::Module>>> KernelsCache;$/;"	t	class:taco::TensorBase
KilledBySignal	test/gtest/gtest-all.cc	/^KilledBySignal::KilledBySignal(int signum) : signum_(signum) {$/;"	f	class:testing::KilledBySignal
KilledBySignal	test/gtest/gtest.h	/^class GTEST_API_ KilledBySignal {$/;"	c	namespace:testing
Kind	include/taco/error.h	/^  enum Kind { User, Internal, Temporary };$/;"	g	struct:taco::ErrorReport
Kind	include/taco/type.h	/^  enum Kind {$/;"	g	class:taco::Datatype
Kind	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    enum class Kind {$/;"	c	struct:Animal	file:
Kronecker	test/tests-parafac.cpp	/^KroneckerFactory                    Kronecker;$/;"	v
KroneckerFactory	test/expr_factory.h	/^struct KroneckerFactory : public ExprFactory {$/;"	s	namespace:taco::test
LAND	include/taco/ir/ir_printer.h	/^    LAND = 14,$/;"	e	enum:taco::ir::IRPrinter::Precedence
LINUX	python_bindings/pybind11/tests/env.py	/^LINUX = sys.platform.startswith("linux")$/;"	v
LIVED	test/gtest/gtest-all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
LOAD	include/taco/ir/ir_printer.h	/^    LOAD = 2,$/;"	e	enum:taco::ir::IRPrinter::Precedence
LOR	include/taco/ir/ir_printer.h	/^    LOR = 15,$/;"	e	enum:taco::ir::IRPrinter::Precedence
LT	include/taco/ir/ir_printer.h	/^    LT = 9,$/;"	e	enum:taco::ir::IRPrinter::Precedence
LTE	include/taco/ir/ir_printer.h	/^    LTE = 9,$/;"	e	enum:taco::ir::IRPrinter::Precedence
Labrador	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^        Dog = 100, Labrador, Chihuahua, LastDog = 199,$/;"	m	class:Animal::Kind	file:
Labrador	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    Labrador(const std::string& _name, int _excitement = 9001)$/;"	f	struct:Animal::Labrador
Labrador	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^struct Labrador : Dog$/;"	s	struct:Animal	file:
LapTimer	include/taco/util/timers.h	/^  LapTimer(string timerName = "") : timerGroup(true), isTiming(false) {$/;"	f	class:taco::util::LapTimer
LapTimer	include/taco/util/timers.h	/^class LapTimer {$/;"	c	namespace:taco::util
LastCat	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^        Cat = 200, Panther, LastCat = 299$/;"	m	class:Animal::Kind	file:
LastDog	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^        Dog = 100, Labrador, Chihuahua, LastDog = 199,$/;"	m	class:Animal::Kind	file:
LastMessage	test/gtest/gtest-all.cc	/^const char* DeathTest::LastMessage() {$/;"	f	class:testing::internal::DeathTest
Lexer	include/taco/parser/lexer.h	/^  Lexer() {}$/;"	f	class:taco::parser::Lexer
Lexer	include/taco/parser/lexer.h	/^  Lexer(std::string expr) : expr(expr) {}$/;"	f	class:taco::parser::Lexer
Lexer	include/taco/parser/lexer.h	/^class Lexer {$/;"	c	namespace:taco::parser
Linux	include/taco/target.h	/^  enum OS {OSUnknown=0, Linux, MacOS, Windows} os;$/;"	e	enum:taco::Target::OS
ListTestsMatchingFilter	test/gtest/gtest-all.cc	/^void UnitTestImpl::ListTestsMatchingFilter() {$/;"	f	class:testing::internal::UnitTestImpl
Literal	include/taco/index_notation/index_notation.h	/^class Literal : public IndexExpr {$/;"	c	namespace:taco
Literal	include/taco/ir/ir.h	/^  Literal,$/;"	m	class:taco::ir::IRNodeType
Literal	include/taco/ir/ir.h	/^struct Literal : public ExprNode<Literal> {$/;"	s	namespace:taco::ir
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(bool val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(char val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(const LiteralNode* n) : IndexExpr(n) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(double val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(float val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(int val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(int8_t val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(long long val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(long val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(short val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(std::complex<double> val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(std::complex<float> val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(unsigned char val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(unsigned int val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(unsigned long long val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(unsigned long val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
Literal	src/index_notation/index_notation.cpp	/^Literal::Literal(unsigned short val) : Literal(new LiteralNode(val)) {$/;"	f	class:taco::Literal
LiteralNode	include/taco/index_notation/index_notation_nodes.h	/^  template <typename T> LiteralNode(T val) : IndexExprNode(type<T>()) {$/;"	f	struct:taco::LiteralNode
LiteralNode	include/taco/index_notation/index_notation_nodes.h	/^struct LiteralNode : public IndexExprNode {$/;"	s	namespace:taco
Load	include/taco/ir/ir.h	/^  Load,$/;"	m	class:taco::ir::IRNodeType
Load	include/taco/ir/ir.h	/^struct Load : public ExprNode<Load> {$/;"	s	namespace:taco::ir
LocalBase	python_bindings/pybind11/tests/local_bindings.h	/^    LocalBase(int i) : i(i) { }$/;"	f	class:LocalBase
LocalBase	python_bindings/pybind11/tests/local_bindings.h	/^template <int> class LocalBase {$/;"	c
LocalMap	python_bindings/pybind11/tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(LocalMap);$/;"	v
LocalVec2	python_bindings/pybind11/tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(LocalVec2);$/;"	v
Lock	test/gtest/gtest-all.cc	/^void Mutex::Lock() {$/;"	f	class:testing::internal::Mutex
Lock	test/gtest/gtest.h	/^  void Lock() {$/;"	f	class:std::tr1::MutexBase
Lock	test/gtest/gtest.h	/^  void Lock() {}$/;"	f	class:std::tr1::Mutex
LogToStderr	test/gtest/gtest.h	/^inline void LogToStderr() {}$/;"	f	namespace:std::tr1
LoopKind	include/taco/ir/ir.h	/^enum class LoopKind {Serial, Static, Dynamic, Runtime, Vectorized, Static_Chunked};$/;"	c	namespace:taco::ir
LooseVersion	python_bindings/pybind11/tests/test_numpy_array.py	/^        from distutils.version import LooseVersion$/;"	i
Lowerer	include/taco/lower/lower.h	/^class Lowerer {$/;"	c	namespace:taco
Lowerer	src/lower/lower.cpp	/^Lowerer::Lowerer() : impl(new LowererImpl()) {$/;"	f	class:taco::Lowerer
Lowerer	src/lower/lower.cpp	/^Lowerer::Lowerer(LowererImpl* impl) : impl(impl) {$/;"	f	class:taco::Lowerer
LowererImpl	include/taco/lower/lowerer_impl.h	/^class LowererImpl : public util::Uncopyable {$/;"	c	namespace:taco
LowererImpl	src/lower/lowerer_impl.cpp	/^LowererImpl::LowererImpl() : visitor(new Visitor(this)) {$/;"	f	class:taco::LowererImpl
Lt	include/taco/ir/ir.h	/^  Lt,$/;"	m	class:taco::ir::IRNodeType
Lt	include/taco/ir/ir.h	/^struct Lt : public ExprNode<Lt> {$/;"	s	namespace:taco::ir
Lte	include/taco/ir/ir.h	/^  Lte,$/;"	m	class:taco::ir::IRNodeType
Lte	include/taco/ir/ir.h	/^struct Lte : public ExprNode<Lte> {$/;"	s	namespace:taco::ir
MACOS	python_bindings/pybind11/pybind11/setup_helpers.py	/^MACOS = sys.platform.startswith("darwin")$/;"	v
MACOS	python_bindings/pybind11/tests/env.py	/^MACOS = sys.platform.startswith("darwin")$/;"	v
MAIN_DIR	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^MAIN_DIR = os.path.dirname(os.path.dirname(DIR))$/;"	v
MAIN_DIR	python_bindings/pybind11/tests/extra_setuptools/test_setuphelper.py	/^MAIN_DIR = os.path.dirname(os.path.dirname(DIR))$/;"	v
MAKE_TAG_TYPE	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^#define MAKE_TAG_TYPE(/;"	d	file:
MI1	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MI1(m.Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_python
MI2	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MI2(B1, m.Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_python
MI3	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MI3(MI2):$/;"	c	function:test_multiple_inheritance_python
MI4	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MI4(MI3, m.Base2):$/;"	c	function:test_multiple_inheritance_python
MI5	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MI5(m.Base2, B1, m.Base1):$/;"	c	function:test_multiple_inheritance_python
MI6	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MI6(m.Base2, B1):$/;"	c	function:test_multiple_inheritance_python
MI7	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MI7(B4, MI6):$/;"	c	function:test_multiple_inheritance_python
MI8	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MI8(MI6, B3):$/;"	c	function:test_multiple_inheritance_python
MI8b	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MI8b(B3, MI6):$/;"	c	function:test_multiple_inheritance_python
MIMany117	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MIMany117(MIMany14, MIMany58, MIMany916, m.BaseN17):$/;"	c	function:test_multiple_inheritance_python_many_bases
MIMany14	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MIMany14(m.BaseN1, m.BaseN2, m.BaseN3, m.BaseN4):$/;"	c	function:test_multiple_inheritance_python_many_bases
MIMany19	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MIMany19(MIMany14, MIMany58, m.BaseN9):$/;"	c	function:test_multiple_inheritance_python_many_bases
MIMany58	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MIMany58(m.BaseN5, m.BaseN6, m.BaseN7, m.BaseN8):$/;"	c	function:test_multiple_inheritance_python_many_bases
MIMany916	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    ):$/;"	c	function:test_multiple_inheritance_python_many_bases
MITest	python_bindings/pybind11/tests/test_factory_constructors.py	/^    class MITest(m.TestFactory1, m.TestFactory2):$/;"	c	function:test_multiple_inheritance
MITypePy	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MITypePy(Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_mix1
MITypePy	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MITypePy(m.Base1, Base2):$/;"	c	function:test_multiple_inheritance_mix2
MITypePy	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^    class MITypePy(m.Base12a):$/;"	c	function:test_multiple_inheritance_virtbase
MTTKRP1	test/tests-parafac.cpp	/^MTTKRP1Factory                      MTTKRP1;$/;"	v
MTTKRP1Factory	test/expr_factory.h	/^struct MTTKRP1Factory : public ExprFactory {$/;"	s	namespace:taco::test
MTTKRP2	test/tests-parafac.cpp	/^MTTKRP2Factory                      MTTKRP2;$/;"	v
MTTKRP2Factory	test/expr_factory.h	/^struct MTTKRP2Factory : public ExprFactory {$/;"	s	namespace:taco::test
MTTKRP3	test/tests-parafac.cpp	/^MTTKRP3Factory                      MTTKRP3;$/;"	v
MTTKRP3Factory	test/expr_factory.h	/^struct MTTKRP3Factory : public ExprFactory {$/;"	s	namespace:taco::test
MUL	include/taco/index_notation/index_notation_printer.h	/^    MUL = 5,$/;"	m	class:taco::IndexNotationPrinter::Precedence
MUL	include/taco/ir/ir_printer.h	/^    MUL = 5,$/;"	e	enum:taco::ir::IRPrinter::Precedence
MacOS	include/taco/target.h	/^  enum OS {OSUnknown=0, Linux, MacOS, Windows} os;$/;"	e	enum:taco::Target::OS
MakeAndRegisterTestInfo	test/gtest/gtest-all.cc	/^TestInfo* MakeAndRegisterTestInfo($/;"	f	namespace:testing::internal
MakeConnection	test/gtest/gtest-all.cc	/^void StreamingListener::SocketWriter::MakeConnection() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
MakeFileName	test/gtest/gtest-all.cc	/^FilePath FilePath::MakeFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
Malloc	include/taco/ir/ir.h	/^  Malloc,$/;"	m	class:taco::ir::IRNodeType
Malloc	include/taco/ir/ir.h	/^struct Malloc : public ExprNode<Malloc> {$/;"	s	namespace:taco::ir
Manageable	include/taco/util/intrusive_ptr.h	/^class Manageable {$/;"	c	namespace:taco::util
MatchRegexAnywhere	test/gtest/gtest-all.cc	/^bool MatchRegexAnywhere(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRegexAtHead	test/gtest/gtest-all.cc	/^bool MatchRegexAtHead(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRepetitionAndRegexAtHead	test/gtest/gtest-all.cc	/^bool MatchRepetitionAndRegexAtHead($/;"	f	namespace:testing::internal
Matcher	include/taco/index_notation/index_notation_visitor.h	/^class Matcher : public IndexNotationVisitor {$/;"	c	namespace:taco
MatchesFilter	test/gtest/gtest-all.cc	/^bool UnitTestOptions::MatchesFilter($/;"	f	class:testing::internal::UnitTestOptions
MatrixColumnNormalizeFactory	test/expr_factory.h	/^struct MatrixColumnNormalizeFactory : public ExprFactory {$/;"	s	namespace:taco::test
MatrixColumnSquaredNormFactory	test/expr_factory.h	/^struct MatrixColumnSquaredNormFactory : public ExprFactory {$/;"	s	namespace:taco::test
MatrixElwiseMultiplyFactory	test/expr_factory.h	/^struct MatrixElwiseMultiplyFactory : public ExprFactory {$/;"	s	namespace:taco::test
MatrixMultiplyFactory	test/expr_factory.h	/^struct MatrixMultiplyFactory : public ExprFactory {$/;"	s	namespace:taco::test
MatrixTransposeMultiplyFactory	test/expr_factory.h	/^struct MatrixTransposeMultiplyFactory : public ExprFactory {$/;"	s	namespace:taco::test
Max	include/taco/ir/ir.h	/^  Max,$/;"	m	class:taco::ir::IRNodeType
Max	include/taco/ir/ir.h	/^struct Max : public ExprNode<Max> {$/;"	s	namespace:taco::ir
Max	test/gtest/gtest.h	/^inline double FloatingPoint<double>::Max() { return DBL_MAX; }$/;"	f	class:testing::internal::FloatingPoint
Max	test/gtest/gtest.h	/^inline float FloatingPoint<float>::Max() { return FLT_MAX; }$/;"	f	class:testing::internal::FloatingPoint
MaxExact	include/taco/ir_tags.h	/^  MinExact, MinConstraint, MaxExact, MaxConstraint$/;"	m	class:taco::BoundType
MergeLattice	include/taco/lower/merge_lattice.h	/^class MergeLattice {$/;"	c	namespace:taco
MergeLattice	src/lower/merge_lattice.cpp	/^MergeLattice::MergeLattice(vector<MergePoint> points, set<set<Iterator>> regionsToKeep) : points_(points),$/;"	f	class:taco::MergeLattice
MergeLatticeBuilder	src/lower/merge_lattice.cpp	/^  MergeLatticeBuilder(IndexVar i, Iterators iterators, ProvenanceGraph provGraph, std::set<IndexVar> definedIndexVars,$/;"	f	class:taco::MergeLatticeBuilder
MergeLatticeBuilder	src/lower/merge_lattice.cpp	/^class MergeLatticeBuilder : public IndexNotationVisitorStrict, public IterationAlgebraVisitorStrict {$/;"	c	namespace:taco	file:
MergePoint	include/taco/lower/merge_lattice.h	/^class MergePoint {$/;"	c	namespace:taco
MergePoint	src/lower/merge_lattice.cpp	/^MergePoint::MergePoint(const vector<Iterator>& iterators,$/;"	f	class:taco::MergePoint
Message	test/gtest/gtest-all.cc	/^Message::Message() : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	test/gtest/gtest.h	/^  Message(const Message& msg) : ss_(new ::std::stringstream) {  \/\/ NOLINT$/;"	f	class:testing::Message
Message	test/gtest/gtest.h	/^  explicit Message(const char* str) : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	test/gtest/gtest.h	/^class GTEST_API_ Message {$/;"	c	namespace:testing
Min	include/taco/ir/ir.h	/^  Min,$/;"	m	class:taco::ir::IRNodeType
Min	include/taco/ir/ir.h	/^struct Min : public ExprNode<Min> {$/;"	s	namespace:taco::ir
MinConstraint	include/taco/ir_tags.h	/^  MinExact, MinConstraint, MaxExact, MaxConstraint$/;"	m	class:taco::BoundType
MinExact	include/taco/ir_tags.h	/^  MinExact, MinConstraint, MaxExact, MaxConstraint$/;"	m	class:taco::BoundType
MinImpl	test/op_factory.h	/^struct MinImpl {$/;"	s	namespace:taco
MixGL	python_bindings/pybind11/tests/local_bindings.h	/^struct MixGL { int i; MixGL(int i) : i{i} {} };$/;"	f	struct:MixGL
MixGL	python_bindings/pybind11/tests/local_bindings.h	/^struct MixGL { int i; MixGL(int i) : i{i} {} };$/;"	s
MixGL2	python_bindings/pybind11/tests/local_bindings.h	/^struct MixGL2 { int i; MixGL2(int i) : i{i} {} };$/;"	f	struct:MixGL2
MixGL2	python_bindings/pybind11/tests/local_bindings.h	/^struct MixGL2 { int i; MixGL2(int i) : i{i} {} };$/;"	s
Mode	include/taco/lower/mode.h	/^class Mode {$/;"	c	namespace:taco
Mode	src/lower/mode.cpp	/^Mode::Mode() : content(nullptr) {$/;"	f	class:taco::Mode
Mode	src/lower/mode.cpp	/^Mode::Mode(ir::Expr tensor, Dimension size, int mode, ModeFormat modeFormat,$/;"	f	class:taco::Mode
ModeAccess	src/lower/mode_access.cpp	/^ModeAccess::ModeAccess(Access access, int mode) : access(access), mode(mode){$/;"	f	class:taco::ModeAccess
ModeAccess	src/lower/mode_access.h	/^class ModeAccess : public util::Comparable<ModeAccess> {$/;"	c	namespace:taco
ModeFormat	include/taco/format.h	/^class ModeFormat {$/;"	c	namespace:taco
ModeFormat	src/format.cpp	/^ModeFormat::ModeFormat() {$/;"	f	class:taco::ModeFormat
ModeFormat	src/format.cpp	/^ModeFormat::ModeFormat(const std::shared_ptr<ModeFormatImpl> impl) : $/;"	f	class:taco::ModeFormat
ModeFormatImpl	include/taco/lower/mode_format_impl.h	/^class ModeFormatImpl {$/;"	c	namespace:taco
ModeFormatImpl	src/lower/mode_format_impl.cpp	/^ModeFormatImpl::ModeFormatImpl(const std::string name, bool isFull, $/;"	f	class:taco::ModeFormatImpl
ModeFormatPack	include/taco/format.h	/^class ModeFormatPack {$/;"	c	namespace:taco
ModeFormatPack	src/format.cpp	/^ModeFormatPack::ModeFormatPack(const ModeFormat modeFormat)$/;"	f	class:taco::ModeFormatPack
ModeFormatPack	src/format.cpp	/^ModeFormatPack::ModeFormatPack(const initializer_list<ModeFormat> modeFormats)$/;"	f	class:taco::ModeFormatPack
ModeFormatPack	src/format.cpp	/^ModeFormatPack::ModeFormatPack(const std::vector<ModeFormat> modeFormats)$/;"	f	class:taco::ModeFormatPack
ModeFunction	include/taco/lower/mode_format_impl.h	/^class ModeFunction {$/;"	c	namespace:taco
ModeFunction	src/lower/mode_format_impl.cpp	/^ModeFunction::ModeFunction() : content(nullptr) {$/;"	f	class:taco::ModeFunction
ModeFunction	src/lower/mode_format_impl.cpp	/^ModeFunction::ModeFunction(Stmt body, const vector<Expr>& results)$/;"	f	class:taco::ModeFunction
ModeIndex	include/taco/storage/index.h	/^class ModeIndex {$/;"	c	namespace:taco
ModeIndex	src/storage/index.cpp	/^ModeIndex::ModeIndex() : content(new Content) {$/;"	f	class:taco::ModeIndex
ModeIndex	src/storage/index.cpp	/^ModeIndex::ModeIndex(const std::vector<Array>& indexArrays) : ModeIndex() {$/;"	f	class:taco::ModeIndex
ModeOrdering	include/taco/ir/ir.h	/^  ModeOrdering,$/;"	m	class:taco::ir::TensorProperty
ModePack	include/taco/lower/mode.h	/^class ModePack {$/;"	c	namespace:taco
ModePack	src/lower/mode.cpp	/^ModePack::ModePack() : content(new Content) {$/;"	f	class:taco::ModePack
ModePack	src/lower/mode.cpp	/^ModePack::ModePack(size_t numModes, ModeFormat modeType, ir::Expr tensor,$/;"	f	class:taco::ModePack
ModeTypes	include/taco/ir/ir.h	/^  ModeTypes,$/;"	m	class:taco::ir::TensorProperty
Module	include/taco/codegen/module.h	/^  Module(Target target=getTargetFromEnvironment())$/;"	f	class:taco::ir::Module
Module	include/taco/codegen/module.h	/^class Module {$/;"	c	namespace:taco::ir
Movable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    Movable(Movable &&m) { value = std::move(m.value); print_move_created(this); }$/;"	f	class:Movable
Movable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    Movable(const Movable &m) { value = m.value; print_copy_created(this); }$/;"	f	class:Movable
Movable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    Movable(int a, int b) : value{a+b} { print_created(this, a, b); }$/;"	f	class:Movable
Movable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class Movable {$/;"	c	file:
MoveOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOnlyInt() { print_default_created(this); }$/;"	f	class:MoveOnlyInt
MoveOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOnlyInt(MoveOnlyInt &&m) { print_move_created(this, m.value); std::swap(value, m.value); }$/;"	f	class:MoveOnlyInt
MoveOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOnlyInt(int v) : value{std::move(v)} { print_created(this, value); }$/;"	f	class:MoveOnlyInt
MoveOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^class MoveOnlyInt {$/;"	c	file:
MoveOrCopyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt() { print_default_created(this); }$/;"	f	class:MoveOrCopyInt
MoveOrCopyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt(MoveOrCopyInt &&m) { print_move_created(this, m.value); std::swap(value, m.value); }$/;"	f	class:MoveOrCopyInt
MoveOrCopyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt(const MoveOrCopyInt &c) { print_copy_created(this, c.value); value = c.value; }$/;"	f	class:MoveOrCopyInt
MoveOrCopyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt(int v) : value{std::move(v)} { print_created(this, value); }$/;"	f	class:MoveOrCopyInt
MoveOrCopyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^class MoveOrCopyInt {$/;"	c	file:
Mul	include/taco/index_notation/index_notation.h	/^class Mul : public IndexExpr {$/;"	c	namespace:taco
Mul	include/taco/ir/ir.h	/^  Mul,$/;"	m	class:taco::ir::IRNodeType
Mul	include/taco/ir/ir.h	/^struct Mul : public ExprNode<Mul> {$/;"	s	namespace:taco::ir
Mul	src/index_notation/index_notation.cpp	/^Mul::Mul() : Mul(new MulNode) {$/;"	f	class:taco::Mul
Mul	src/index_notation/index_notation.cpp	/^Mul::Mul(IndexExpr a, IndexExpr b) : Mul(new MulNode(a, b)) {$/;"	f	class:taco::Mul
Mul	src/index_notation/index_notation.cpp	/^Mul::Mul(const MulNode* n) : IndexExpr(n) {$/;"	f	class:taco::Mul
MulAdd	test/op_factory.h	/^struct MulAdd {$/;"	s	namespace:taco
MulNode	include/taco/index_notation/index_notation_nodes.h	/^  MulNode() : BinaryExprNode() {}$/;"	f	struct:taco::MulNode
MulNode	include/taco/index_notation/index_notation_nodes.h	/^  MulNode(IndexExpr a, IndexExpr b) : BinaryExprNode(a, b) {}$/;"	f	struct:taco::MulNode
MulNode	include/taco/index_notation/index_notation_nodes.h	/^struct MulNode : public BinaryExprNode {$/;"	s	namespace:taco
MulRegionDef	test/op_factory.h	/^struct MulRegionDef {$/;"	s	namespace:taco
MulTensorTest	test/tests-tensor_types.cpp	/^TYPED_TEST_CASE_P(MulTensorTest);$/;"	v
MulTensorTest	test/tests-tensor_types.cpp	/^template <typename T> class MulTensorTest : public ::testing::Test {};$/;"	c	file:
Multi	include/taco/index_notation/index_notation.h	/^class Multi : public IndexStmt {$/;"	c	namespace:taco
Multi	src/index_notation/index_notation.cpp	/^Multi::Multi(IndexStmt stmt1, IndexStmt stmt2)$/;"	f	class:taco::Multi
Multi	src/index_notation/index_notation.cpp	/^Multi::Multi(const MultiNode* n) : IndexStmt(n) {$/;"	f	class:taco::Multi
MultiNode	include/taco/index_notation/index_notation_nodes.h	/^  MultiNode(IndexStmt stmt1, IndexStmt stmt2) : stmt1(stmt1), stmt2(stmt2) {}$/;"	f	struct:taco::MultiNode
MultiNode	include/taco/index_notation/index_notation_nodes.h	/^struct MultiNode : public IndexStmtNode {$/;"	s	namespace:taco
Mutex	test/gtest/gtest-all.cc	/^Mutex::Mutex()$/;"	f	class:testing::internal::Mutex
Mutex	test/gtest/gtest.h	/^  Mutex() {$/;"	f	class:std::tr1::Mutex
Mutex	test/gtest/gtest.h	/^  Mutex() {}$/;"	f	class:std::tr1::Mutex
Mutex	test/gtest/gtest.h	/^  explicit Mutex(StaticConstructorSelector \/*dummy*\/) {}$/;"	f	class:std::tr1::Mutex
Mutex	test/gtest/gtest.h	/^class GTEST_API_ Mutex {$/;"	c	namespace:std::tr1
Mutex	test/gtest/gtest.h	/^class Mutex : public MutexBase {$/;"	c	namespace:std::tr1
Mutex	test/gtest/gtest.h	/^class Mutex {$/;"	c	namespace:std::tr1
MutexBase	test/gtest/gtest.h	/^class MutexBase {$/;"	c	namespace:std::tr1
MutexLock	test/gtest/gtest.h	/^typedef GTestMutexLock MutexLock;$/;"	t	namespace:std::tr1
MutexType	test/gtest/gtest.h	/^  enum MutexType { kStatic = 0, kDynamic = 1 };$/;"	g	class:std::tr1::Mutex
MyClass	python_bindings/pybind11/tests/test_callbacks.py	/^    class MyClass:$/;"	c	function:test_bound_method_callback
MyEnum	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	g	file:
MyException	python_bindings/pybind11/tests/test_exceptions.cpp	/^    explicit MyException(const char * m) : message{m} {}$/;"	f	class:MyException
MyException	python_bindings/pybind11/tests/test_exceptions.cpp	/^class MyException : public std::exception {$/;"	c	file:
MyException2	python_bindings/pybind11/tests/test_exceptions.cpp	/^    explicit MyException2(const char * m) : message{m} {}$/;"	f	class:MyException2
MyException2	python_bindings/pybind11/tests/test_exceptions.cpp	/^class MyException2 : public std::exception {$/;"	c	file:
MyException3	python_bindings/pybind11/tests/test_exceptions.cpp	/^    explicit MyException3(const char * m) : message{m} {}$/;"	f	class:MyException3
MyException3	python_bindings/pybind11/tests/test_exceptions.cpp	/^class MyException3 {$/;"	c	file:
MyException4	python_bindings/pybind11/tests/test_exceptions.cpp	/^    explicit MyException4(const char * m) : message{m} {}$/;"	f	class:MyException4
MyException4	python_bindings/pybind11/tests/test_exceptions.cpp	/^class MyException4 : public std::exception {$/;"	c	file:
MyException5	python_bindings/pybind11/tests/test_exceptions.cpp	/^    explicit MyException5(const std::string &what) : std::logic_error(what) {}$/;"	f	class:MyException5
MyException5	python_bindings/pybind11/tests/test_exceptions.cpp	/^class MyException5 : public std::logic_error {$/;"	c	file:
MyException5_1	python_bindings/pybind11/tests/test_exceptions.cpp	/^class MyException5_1 : public MyException5 {$/;"	c	file:
MyRepr	python_bindings/pybind11/tests/test_exceptions.py	/^    class MyRepr(object):$/;"	c	function:test_invalid_repr
MyTest	python_bindings/pybind11/tests/test_factory_constructors.py	/^    class MyTest(m.TestFactory6):$/;"	c	function:test_init_factory_alias
N	test/tests-format-mm-permute.cpp	/^static int N = 5;$/;"	v	file:
NCVirt	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class NCVirt {$/;"	c	file:
NCVirtExt	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class NCVirtExt(m.NCVirt):$/;"	c	function:test_move_support
NCVirtExt2	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class NCVirtExt2(m.NCVirt):$/;"	c	function:test_move_support
NCVirtTrampoline	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class NCVirtTrampoline : public NCVirt {$/;"	c	file:
NEG	include/taco/index_notation/index_notation_printer.h	/^    NEG = 3,$/;"	m	class:taco::IndexNotationPrinter::Precedence
NEG	include/taco/ir/ir_printer.h	/^    NEG = 3,$/;"	e	enum:taco::ir::IRPrinter::Precedence
NEQ	include/taco/ir/ir_printer.h	/^    NEQ = 10,$/;"	e	enum:taco::ir::IRPrinter::Precedence
NOT_BRANCHLESS	include/taco/format.h	/^    NOT_BRANCHLESS, COMPACT, NOT_COMPACT, ZEROLESS, NOT_ZEROLESS$/;"	e	enum:taco::ModeFormat::Property
NOT_COMPACT	include/taco/format.h	/^    NOT_BRANCHLESS, COMPACT, NOT_COMPACT, ZEROLESS, NOT_ZEROLESS$/;"	e	enum:taco::ModeFormat::Property
NOT_FULL	include/taco/format.h	/^    FULL, NOT_FULL, ORDERED, NOT_ORDERED, UNIQUE, NOT_UNIQUE, BRANCHLESS,$/;"	e	enum:taco::ModeFormat::Property
NOT_ORDERED	include/taco/format.h	/^    FULL, NOT_FULL, ORDERED, NOT_ORDERED, UNIQUE, NOT_UNIQUE, BRANCHLESS,$/;"	e	enum:taco::ModeFormat::Property
NOT_UNIQUE	include/taco/format.h	/^    FULL, NOT_FULL, ORDERED, NOT_ORDERED, UNIQUE, NOT_UNIQUE, BRANCHLESS,$/;"	e	enum:taco::ModeFormat::Property
NOT_ZEROLESS	include/taco/format.h	/^    NOT_BRANCHLESS, COMPACT, NOT_COMPACT, ZEROLESS, NOT_ZEROLESS$/;"	e	enum:taco::ModeFormat::Property
NPY_ARRAY_ALIGNED_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_ALIGNED_ = 0x0100,$/;"	e	enum:npy_api::constants
NPY_ARRAY_C_CONTIGUOUS_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_C_CONTIGUOUS_ = 0x0001,$/;"	e	enum:npy_api::constants
NPY_ARRAY_ENSUREARRAY_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_ENSUREARRAY_ = 0x0040,$/;"	e	enum:npy_api::constants
NPY_ARRAY_FORCECAST_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_FORCECAST_ = 0x0010,$/;"	e	enum:npy_api::constants
NPY_ARRAY_F_CONTIGUOUS_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_F_CONTIGUOUS_ = 0x0002,$/;"	e	enum:npy_api::constants
NPY_ARRAY_OWNDATA_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_OWNDATA_ = 0x0004,$/;"	e	enum:npy_api::constants
NPY_ARRAY_WRITEABLE_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_ARRAY_WRITEABLE_ = 0x0400,$/;"	e	enum:npy_api::constants
NPY_BOOL_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_BOOL_ = 0,$/;"	e	enum:npy_api::constants
NPY_BYTE_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_BYTE_, NPY_UBYTE_,$/;"	e	enum:npy_api::constants
NPY_CDOUBLE_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_CFLOAT_, NPY_CDOUBLE_, NPY_CLONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_CFLOAT_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_CFLOAT_, NPY_CDOUBLE_, NPY_CLONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_CLONGDOUBLE_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_CFLOAT_, NPY_CDOUBLE_, NPY_CLONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_DOUBLE_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_FLOAT_, NPY_DOUBLE_, NPY_LONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_FLOAT_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_FLOAT_, NPY_DOUBLE_, NPY_LONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_INT16_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_INT16_ = NPY_SHORT_,$/;"	e	enum:npy_api::constants
NPY_INT32_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_INT32_ = platform_lookup<std::int32_t, long, int, short>($/;"	e	enum:npy_api::constants
NPY_INT64_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_INT64_ = platform_lookup<std::int64_t, long, long long, int>($/;"	e	enum:npy_api::constants
NPY_INT8_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_INT8_ = NPY_BYTE_,$/;"	e	enum:npy_api::constants
NPY_INT_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_INT_, NPY_UINT_,$/;"	e	enum:npy_api::constants
NPY_LONGDOUBLE_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_FLOAT_, NPY_DOUBLE_, NPY_LONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_LONGLONG_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_LONGLONG_, NPY_ULONGLONG_,$/;"	e	enum:npy_api::constants
NPY_LONG_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_LONG_, NPY_ULONG_,$/;"	e	enum:npy_api::constants
NPY_OBJECT_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_OBJECT_ = 17,$/;"	e	enum:npy_api::constants
NPY_SHORT_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_SHORT_, NPY_USHORT_,$/;"	e	enum:npy_api::constants
NPY_STRING_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_STRING_, NPY_UNICODE_, NPY_VOID_,$/;"	e	enum:npy_api::constants
NPY_UBYTE_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_BYTE_, NPY_UBYTE_,$/;"	e	enum:npy_api::constants
NPY_UINT16_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_UINT16_ = NPY_USHORT_,$/;"	e	enum:npy_api::constants
NPY_UINT32_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_UINT32_ = platform_lookup<std::uint32_t, unsigned long, unsigned int, unsigned short>($/;"	e	enum:npy_api::constants
NPY_UINT64_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_UINT64_ = platform_lookup<std::uint64_t, unsigned long, unsigned long long, unsigned int>($/;"	e	enum:npy_api::constants
NPY_UINT8_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_UINT8_ = NPY_UBYTE_,$/;"	e	enum:npy_api::constants
NPY_UINT_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_INT_, NPY_UINT_,$/;"	e	enum:npy_api::constants
NPY_ULONGLONG_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_LONGLONG_, NPY_ULONGLONG_,$/;"	e	enum:npy_api::constants
NPY_ULONG_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_LONG_, NPY_ULONG_,$/;"	e	enum:npy_api::constants
NPY_UNICODE_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_STRING_, NPY_UNICODE_, NPY_VOID_,$/;"	e	enum:npy_api::constants
NPY_USHORT_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_SHORT_, NPY_USHORT_,$/;"	e	enum:npy_api::constants
NPY_VOID_	python_bindings/pybind11/include/pybind11/numpy.h	/^        NPY_STRING_, NPY_UNICODE_, NPY_VOID_,$/;"	e	enum:npy_api::constants
NameGenerator	include/taco/util/name_generator.h	/^class NameGenerator {$/;"	c	namespace:taco::util
NameGenerator	src/util/name_generator.cpp	/^NameGenerator::NameGenerator() {$/;"	f	class:taco::util::NameGenerator
NameGenerator	src/util/name_generator.cpp	/^NameGenerator::NameGenerator(std::vector<std::string> reserved) {$/;"	f	class:taco::util::NameGenerator
NativeArray	test/gtest/gtest.h	/^  NativeArray(const Element* array, size_t count, RelationToSourceCopy) {$/;"	f	class:testing::internal::NativeArray
NativeArray	test/gtest/gtest.h	/^  NativeArray(const Element* array, size_t count, RelationToSourceReference) {$/;"	f	class:testing::internal::NativeArray
NativeArray	test/gtest/gtest.h	/^  NativeArray(const NativeArray& rhs) {$/;"	f	class:testing::internal::NativeArray
NativeArray	test/gtest/gtest.h	/^class NativeArray {$/;"	c	namespace:testing::internal
Neg	include/taco/index_notation/index_notation.h	/^class Neg : public IndexExpr {$/;"	c	namespace:taco
Neg	include/taco/ir/ir.h	/^  Neg,$/;"	m	class:taco::ir::IRNodeType
Neg	include/taco/ir/ir.h	/^struct Neg : public ExprNode<Neg> {$/;"	s	namespace:taco::ir
Neg	src/index_notation/index_notation.cpp	/^Neg::Neg(IndexExpr a) : Neg(new NegNode(a)) {$/;"	f	class:taco::Neg
Neg	src/index_notation/index_notation.cpp	/^Neg::Neg(const NegNode* n) : IndexExpr(n) {$/;"	f	class:taco::Neg
NegNode	include/taco/index_notation/index_notation_nodes.h	/^  NegNode(IndexExpr operand) : UnaryExprNode(operand) {}$/;"	f	struct:taco::NegNode
NegNode	include/taco/index_notation/index_notation_nodes.h	/^struct NegNode : public UnaryExprNode {$/;"	s	namespace:taco
Neq	include/taco/ir/ir.h	/^  Neq,$/;"	m	class:taco::ir::IRNodeType
Neq	include/taco/ir/ir.h	/^struct Neq : public ExprNode<Neq> {$/;"	s	namespace:taco::ir
NewValueForCurrentThread	test/gtest/gtest.h	/^  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const {$/;"	f	class:std::tr1::ThreadLocal
NoBraceInitialization	python_bindings/pybind11/tests/test_class.cpp	/^    NoBraceInitialization(std::initializer_list<T> l) : vec(l) {}$/;"	f	struct:NoBraceInitialization
NoBraceInitialization	python_bindings/pybind11/tests/test_class.cpp	/^    NoBraceInitialization(std::vector<int> v) : vec{std::move(v)} {}$/;"	f	struct:NoBraceInitialization
NoBraceInitialization	python_bindings/pybind11/tests/test_class.cpp	/^struct NoBraceInitialization {$/;"	s	file:
NoExecDeathTest	test/gtest/gtest-all.cc	/^  NoExecDeathTest(const char* a_statement, const RE* a_regex) :$/;"	f	class:testing::internal::NoExecDeathTest
NoExecDeathTest	test/gtest/gtest-all.cc	/^class NoExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
NoRaces	include/taco/ir_tags.h	/^  IgnoreRaces, NoRaces, Atomics, Temporary, ParallelReduction$/;"	m	class:taco::OutputRaceStrategy
Node	include/taco/index_notation/index_notation.h	/^  typedef AccessNode Node;$/;"	t	class:taco::Access
Node	include/taco/index_notation/index_notation.h	/^  typedef AddNode Node;$/;"	t	class:taco::Add
Node	include/taco/index_notation/index_notation.h	/^  typedef AssignmentNode Node;$/;"	t	class:taco::Assignment
Node	include/taco/index_notation/index_notation.h	/^  typedef CallIntrinsicNode Node;$/;"	t	class:taco::CallIntrinsic
Node	include/taco/index_notation/index_notation.h	/^  typedef CallNode Node;$/;"	t	class:taco::Call
Node	include/taco/index_notation/index_notation.h	/^  typedef CastNode Node;$/;"	t	class:taco::Cast
Node	include/taco/index_notation/index_notation.h	/^  typedef DivNode Node;$/;"	t	class:taco::Div
Node	include/taco/index_notation/index_notation.h	/^  typedef ForallNode Node;$/;"	t	class:taco::Forall
Node	include/taco/index_notation/index_notation.h	/^  typedef IndexVarNode Node;$/;"	t	class:taco::IndexVar
Node	include/taco/index_notation/index_notation.h	/^  typedef LiteralNode Node;$/;"	t	class:taco::Literal
Node	include/taco/index_notation/index_notation.h	/^  typedef MulNode Node;$/;"	t	class:taco::Mul
Node	include/taco/index_notation/index_notation.h	/^  typedef MultiNode Node;$/;"	t	class:taco::Multi
Node	include/taco/index_notation/index_notation.h	/^  typedef NegNode Node;$/;"	t	class:taco::Neg
Node	include/taco/index_notation/index_notation.h	/^  typedef ReductionNode Node;$/;"	t	class:taco::Reduction
Node	include/taco/index_notation/index_notation.h	/^  typedef SequenceNode Node;$/;"	t	class:taco::Sequence
Node	include/taco/index_notation/index_notation.h	/^  typedef SqrtNode Node;$/;"	t	class:taco::Sqrt
Node	include/taco/index_notation/index_notation.h	/^  typedef SubNode Node;$/;"	t	class:taco::Sub
Node	include/taco/index_notation/index_notation.h	/^  typedef SuchThatNode Node;$/;"	t	class:taco::SuchThat
Node	include/taco/index_notation/index_notation.h	/^  typedef WhereNode Node;$/;"	t	class:taco::Where
Node	include/taco/index_notation/index_notation.h	/^  typedef YieldNode Node;$/;"	t	class:taco::Yield
NonCopyable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    NonCopyable(NonCopyable &&o) { value = std::move(o.value); print_move_created(this); }$/;"	f	class:NonCopyable
NonCopyable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    NonCopyable(int a, int b) : value{new int(a*b)} { print_created(this, a, b); }$/;"	f	class:NonCopyable
NonCopyable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class NonCopyable {$/;"	c	file:
NonLocalMap	python_bindings/pybind11/tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(NonLocalMap);$/;"	v
NonLocalMap2	python_bindings/pybind11/tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(NonLocalMap2);$/;"	v
NonLocalVec	python_bindings/pybind11/tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(NonLocalVec);$/;"	v
NonZeroIterator	python_bindings/pybind11/tests/test_sequences_and_iterators.cpp	/^    NonZeroIterator(const T* ptr) : ptr_(ptr) {}$/;"	f	class:NonZeroIterator
NonZeroIterator	python_bindings/pybind11/tests/test_sequences_and_iterators.cpp	/^class NonZeroIterator {$/;"	c	file:
NonZeroSentinel	python_bindings/pybind11/tests/test_sequences_and_iterators.cpp	/^class NonZeroSentinel {};$/;"	c	file:
None	test/gtest/gtest.h	/^struct None {};$/;"	s	namespace:testing::internal
NoneT	test/gtest/gtest.h	/^struct NoneT {};$/;"	s	namespace:testing::internal
NoneTester	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^class NoneTester { public: int answer = 42; };$/;"	c	file:
Normalize	test/gtest/gtest-all.cc	/^void FilePath::Normalize() {$/;"	f	class:testing::internal::FilePath
Not	include/taco/ir/ir.h	/^  Not,$/;"	m	class:taco::ir::IRNodeType
Not	src/index_notation/index_notation.cpp	/^IndexExpr Not(IndexExpr a) {$/;"	f	namespace:taco
NotInt	python_bindings/pybind11/tests/test_builtin_casters.py	/^    class NotInt(object):$/;"	c	function:test_int_convert
NotParallel	include/taco/ir_tags.h	/^  NotParallel, DefaultUnit, GPUBlock, GPUWarp, GPUThread, CPUThread, CPUVector, CPUThreadGroupReduction, GPUBlockReduction, GPUWarpReduction$/;"	m	class:taco::ParallelUnit
NotPybindDerived	python_bindings/pybind11/tests/test_factory_constructors.py	/^    class NotPybindDerived(object):$/;"	c	function:test_invalid_self
NotationTest	test/test.h	/^  NotationTest(IndexStmt actual, IndexStmt expected)$/;"	f	struct:taco::test::NotationTest
NotationTest	test/test.h	/^struct NotationTest {$/;"	s	namespace:taco::test
Notification	test/gtest/gtest-all.cc	/^Notification::Notification()$/;"	f	class:testing::internal::Notification
Notification	test/gtest/gtest.h	/^  Notification() : notified_(false) {$/;"	f	class:std::tr1::Notification
Notification	test/gtest/gtest.h	/^class GTEST_API_ Notification {$/;"	c	namespace:std::tr1
Notification	test/gtest/gtest.h	/^class Notification {$/;"	c	namespace:std::tr1
Notify	test/gtest/gtest-all.cc	/^void Notification::Notify() {$/;"	f	class:testing::internal::Notification
Notify	test/gtest/gtest.h	/^  void Notify() {$/;"	f	class:std::tr1::Notification
OD	python_bindings/pybind11/tests/test_modules.py	/^    from pybind11_tests.modules import OD$/;"	i
ORDERED	include/taco/format.h	/^    FULL, NOT_FULL, ORDERED, NOT_ORDERED, UNIQUE, NOT_UNIQUE, BRANCHLESS,$/;"	e	enum:taco::ModeFormat::Property
OS	include/taco/target.h	/^  enum OS {OSUnknown=0, Linux, MacOS, Windows} os;$/;"	g	struct:taco::Target
OSUnknown	include/taco/target.h	/^  enum OS {OSUnknown=0, Linux, MacOS, Windows} os;$/;"	e	enum:taco::Target::OS
OVERSEE_TEST	test/gtest/gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
Object	python_bindings/pybind11/tests/object.h	/^    Object() { print_default_created(this); }$/;"	f	class:Object
Object	python_bindings/pybind11/tests/object.h	/^    Object(const Object &) : m_refCount(0) { print_copy_created(this); }$/;"	f	class:Object
Object	python_bindings/pybind11/tests/object.h	/^class Object {$/;"	c
OnEnvironmentsSetUpEnd	test/gtest/gtest-all.cc	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsSetUpEnd	test/gtest/gtest.h	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsSetUpStart	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsSetUpStart	test/gtest/gtest.h	/^  virtual void OnEnvironmentsSetUpStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownEnd	test/gtest/gtest-all.cc	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsTearDownEnd	test/gtest/gtest.h	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownStart	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsTearDownStart	test/gtest/gtest.h	/^  virtual void OnEnvironmentsTearDownStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseEnd	test/gtest/gtest-all.cc	/^  void OnTestCaseEnd(const TestCase& test_case) {$/;"	f	class:testing::internal::StreamingListener
OnTestCaseEnd	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseEnd	test/gtest/gtest.h	/^  virtual void OnTestCaseEnd(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseStart	test/gtest/gtest-all.cc	/^  void OnTestCaseStart(const TestCase& test_case) {$/;"	f	class:testing::internal::StreamingListener
OnTestCaseStart	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseStart	test/gtest/gtest.h	/^  virtual void OnTestCaseStart(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestEnd	test/gtest/gtest-all.cc	/^  void OnTestEnd(const TestInfo& test_info) {$/;"	f	class:testing::internal::StreamingListener
OnTestEnd	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestEnd	test/gtest/gtest.h	/^  virtual void OnTestEnd(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationEnd	test/gtest/gtest-all.cc	/^  void OnTestIterationEnd(const UnitTest& unit_test, int \/* iteration *\/) {$/;"	f	class:testing::internal::StreamingListener
OnTestIterationEnd	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationEnd	test/gtest/gtest-all.cc	/^void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestIterationEnd	test/gtest/gtest-all.cc	/^void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OnTestIterationEnd	test/gtest/gtest.h	/^  virtual void OnTestIterationEnd(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationStart	test/gtest/gtest-all.cc	/^  void OnTestIterationStart(const UnitTest& \/* unit_test *\/, int iteration) {$/;"	f	class:testing::internal::StreamingListener
OnTestIterationStart	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::OnTestIterationStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationStart	test/gtest/gtest-all.cc	/^void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestIterationStart	test/gtest/gtest.h	/^  virtual void OnTestIterationStart(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestPartResult	test/gtest/gtest-all.cc	/^  void OnTestPartResult(const TestPartResult& test_part_result) {$/;"	f	class:testing::internal::StreamingListener
OnTestPartResult	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::OnTestPartResult($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestPartResult	test/gtest/gtest.h	/^  virtual void OnTestPartResult(const TestPartResult& \/*test_part_result*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramEnd	test/gtest/gtest-all.cc	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestProgramEnd	test/gtest/gtest-all.cc	/^  void OnTestProgramEnd(const UnitTest& unit_test) {$/;"	f	class:testing::internal::StreamingListener
OnTestProgramEnd	test/gtest/gtest.h	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramStart	test/gtest/gtest-all.cc	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestProgramStart	test/gtest/gtest-all.cc	/^  void OnTestProgramStart(const UnitTest& \/* unit_test *\/) {$/;"	f	class:testing::internal::StreamingListener
OnTestProgramStart	test/gtest/gtest.h	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestStart	test/gtest/gtest-all.cc	/^  void OnTestStart(const TestInfo& test_info) {$/;"	f	class:testing::internal::StreamingListener
OnTestStart	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestStart	test/gtest/gtest.h	/^  virtual void OnTestStart(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnThreadExit	test/gtest/gtest-all.cc	/^  static void OnThreadExit(DWORD thread_id) {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl
OnThreadLocalDestroyed	test/gtest/gtest-all.cc	/^  static void OnThreadLocalDestroyed($/;"	f	class:testing::internal::ThreadLocalRegistryImpl
OnThreadLocalDestroyed	test/gtest/gtest-all.cc	/^void ThreadLocalRegistry::OnThreadLocalDestroyed($/;"	f	class:testing::internal::ThreadLocalRegistry
OpImpl	include/taco/index_notation/index_notation_nodes.h	/^  typedef std::function<ir::Expr(const std::vector<ir::Expr>&)> OpImpl;$/;"	t	struct:taco::CallNode
OptionalHolder	python_bindings/pybind11/tests/test_stl.cpp	/^struct OptionalHolder$/;"	s	file:
Or	include/taco/ir/ir.h	/^  Or,$/;"	m	class:taco::ir::IRNodeType
Or	include/taco/ir/ir.h	/^struct Or : public ExprNode<Or> {$/;"	s	namespace:taco::ir
OrImpl	test/op_factory.h	/^struct OrImpl {$/;"	s	namespace:taco
Order	include/taco/ir/ir.h	/^  Order,$/;"	m	class:taco::ir::TensorProperty
OrderedDict	python_bindings/pybind11/tests/test_modules.py	/^    from collections import OrderedDict$/;"	i
OsStackTraceGetter	test/gtest/gtest-all.cc	/^  OsStackTraceGetter() : caller_frame_(NULL) {}$/;"	f	class:testing::internal::OsStackTraceGetter
OsStackTraceGetter	test/gtest/gtest-all.cc	/^class OsStackTraceGetter : public OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal	file:
OsStackTraceGetterInterface	test/gtest/gtest-all.cc	/^  OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
OsStackTraceGetterInterface	test/gtest/gtest-all.cc	/^class OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal	file:
OstreamRedirect	python_bindings/pybind11/include/pybind11/iostream.h	/^    OstreamRedirect(bool do_stdout = true, bool do_stderr = true)$/;"	f	class:OstreamRedirect
OstreamRedirect	python_bindings/pybind11/include/pybind11/iostream.h	/^class OstreamRedirect {$/;"	c
Output	python_bindings/pybind11/tests/conftest.py	/^class Output(object):$/;"	c
OutputKind	src/codegen/codegen.h	/^  enum OutputKind { HeaderGen, ImplementationGen };$/;"	g	class:taco::ir::CodeGen
OutputRaceStrategy	include/taco/ir_tags.h	/^enum class OutputRaceStrategy {$/;"	c	namespace:taco
OutputRaceStrategy_NAMES	src/ir_tags.cpp	/^const char *OutputRaceStrategy_NAMES[] = {"IgnoreRaces", "NoRaces", "Atomics", "Temporary", "ParallelReduction"};$/;"	m	namespace:taco	file:
OutputXmlAttribute	test/gtest/gtest-all.cc	/^void XmlUnitTestResultPrinter::OutputXmlAttribute($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlCDataSection	test/gtest/gtest-all.cc	/^void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlTestInfo	test/gtest/gtest-all.cc	/^void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
PACK_NEXT_LEVEL	src/storage/pack.cpp	/^#define PACK_NEXT_LEVEL(/;"	d	file:
PAPER	python_bindings/pybind11/docs/Makefile	/^PAPER         =$/;"	m
PAPEROPT_a4	python_bindings/pybind11/docs/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	python_bindings/pybind11/docs/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PLATFORM_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
POS	include/taco/index_notation/provenance_graph.h	/^enum IndexVarRelType {UNDEFINED, SPLIT, DIVIDE, POS, FUSE, BOUND, PRECOMPUTE};$/;"	e	enum:taco::IndexVarRelType
PRECOMPUTE	include/taco/index_notation/provenance_graph.h	/^enum IndexVarRelType {UNDEFINED, SPLIT, DIVIDE, POS, FUSE, BOUND, PRECOMPUTE};$/;"	e	enum:taco::IndexVarRelType
PY	python_bindings/pybind11/tests/env.py	/^PY = sys.version_info$/;"	v
PY2	python_bindings/pybind11/pybind11/setup_helpers.py	/^PY2 = sys.version_info[0] < 3$/;"	v
PYBIND11_BASEN	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    #define PYBIND11_BASEN(/;"	d	file:
PYBIND11_BINARY_OPERATOR	python_bindings/pybind11/include/pybind11/operators.h	/^#define PYBIND11_BINARY_OPERATOR(/;"	d
PYBIND11_BINARY_OPERATOR	python_bindings/pybind11/include/pybind11/operators.h	/^#undef PYBIND11_BINARY_OPERATOR$/;"	d
PYBIND11_BOOL_ATTR	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_BOOL_ATTR /;"	d
PYBIND11_BUILD_ABI	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#    define PYBIND11_BUILD_ABI /;"	d
PYBIND11_BUILD_TYPE	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#  define PYBIND11_BUILD_TYPE /;"	d
PYBIND11_BUILTINS_MODULE	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_BUILTINS_MODULE /;"	d
PYBIND11_BUILTIN_QUALNAME	python_bindings/pybind11/include/pybind11/detail/class.h	/^#  define PYBIND11_BUILTIN_QUALNAME$/;"	d
PYBIND11_BYTES_AS_STRING	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_AS_STRING /;"	d
PYBIND11_BYTES_AS_STRING_AND_SIZE	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_AS_STRING_AND_SIZE /;"	d
PYBIND11_BYTES_CHECK	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_CHECK /;"	d
PYBIND11_BYTES_FROM_STRING	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_FROM_STRING /;"	d
PYBIND11_BYTES_FROM_STRING_AND_SIZE	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_FROM_STRING_AND_SIZE /;"	d
PYBIND11_BYTES_NAME	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_NAME /;"	d
PYBIND11_BYTES_SIZE	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_SIZE /;"	d
PYBIND11_CATCH_INIT_EXCEPTIONS	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_CATCH_INIT_EXCEPTIONS /;"	d
PYBIND11_CHECK_PYTHON_VERSION	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_CHECK_PYTHON_VERSION /;"	d
PYBIND11_COMPILER_TYPE	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#    define PYBIND11_COMPILER_TYPE /;"	d
PYBIND11_CONCAT	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_CONCAT(/;"	d
PYBIND11_CPP14	python_bindings/pybind11/include/pybind11/detail/common.h	/^#    define PYBIND11_CPP14$/;"	d
PYBIND11_CPP17	python_bindings/pybind11/include/pybind11/detail/common.h	/^#      define PYBIND11_CPP17$/;"	d
PYBIND11_DEBUG_MARKER	python_bindings/pybind11/include/pybind11/detail/common.h	/^#    define PYBIND11_DEBUG_MARKER$/;"	d
PYBIND11_DEBUG_MARKER	python_bindings/pybind11/include/pybind11/detail/common.h	/^#    undef PYBIND11_DEBUG_MARKER$/;"	d
PYBIND11_DECLARE_HOLDER_TYPE	python_bindings/pybind11/include/pybind11/cast.h	/^#define PYBIND11_DECLARE_HOLDER_TYPE(/;"	d
PYBIND11_DEPRECATED	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  define PYBIND11_DEPRECATED(/;"	d
PYBIND11_DESCR_CONSTEXPR	python_bindings/pybind11/include/pybind11/detail/descr.h	/^#  define PYBIND11_DESCR_CONSTEXPR /;"	d
PYBIND11_EMBEDDED_MODULE	python_bindings/pybind11/include/pybind11/embed.h	/^#define PYBIND11_EMBEDDED_MODULE(/;"	d
PYBIND11_EMBEDDED_MODULE	python_bindings/pybind11/tests/test_cmake_build/embed.cpp	/^PYBIND11_EMBEDDED_MODULE(test_cmake_build, m) {$/;"	f
PYBIND11_EMBEDDED_MODULE	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(throw_error_already_set, ) {$/;"	f
PYBIND11_EMBEDDED_MODULE	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(throw_exception, ) {$/;"	f
PYBIND11_EMBEDDED_MODULE	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(widget_module, m) {$/;"	f
PYBIND11_EMBEDDED_MODULE_IMPL	python_bindings/pybind11/include/pybind11/embed.h	/^#  define PYBIND11_EMBEDDED_MODULE_IMPL(/;"	d
PYBIND11_ENSURE_INTERNALS_READY	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_ENSURE_INTERNALS_READY /;"	d
PYBIND11_ENUM_OP_CONV	python_bindings/pybind11/include/pybind11/pybind11.h	/^        #define PYBIND11_ENUM_OP_CONV(/;"	d
PYBIND11_ENUM_OP_CONV	python_bindings/pybind11/include/pybind11/pybind11.h	/^        #undef PYBIND11_ENUM_OP_CONV$/;"	d
PYBIND11_ENUM_OP_CONV_LHS	python_bindings/pybind11/include/pybind11/pybind11.h	/^        #define PYBIND11_ENUM_OP_CONV_LHS(/;"	d
PYBIND11_ENUM_OP_CONV_LHS	python_bindings/pybind11/include/pybind11/pybind11.h	/^        #undef PYBIND11_ENUM_OP_CONV_LHS$/;"	d
PYBIND11_ENUM_OP_STRICT	python_bindings/pybind11/include/pybind11/pybind11.h	/^        #define PYBIND11_ENUM_OP_STRICT(/;"	d
PYBIND11_ENUM_OP_STRICT	python_bindings/pybind11/include/pybind11/pybind11.h	/^        #undef PYBIND11_ENUM_OP_STRICT$/;"	d
PYBIND11_EXPAND_SIDE_EFFECTS	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_EXPAND_SIDE_EFFECTS(/;"	d
PYBIND11_EXPORT	python_bindings/pybind11/include/pybind11/detail/common.h	/^#    define PYBIND11_EXPORT /;"	d
PYBIND11_FROM_STRING	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_FROM_STRING /;"	d
PYBIND11_HAS_EXP_OPTIONAL	python_bindings/pybind11/include/pybind11/stl.h	/^#    define PYBIND11_HAS_EXP_OPTIONAL /;"	d
PYBIND11_HAS_OPTIONAL	python_bindings/pybind11/include/pybind11/stl.h	/^#    define PYBIND11_HAS_OPTIONAL /;"	d
PYBIND11_HAS_OPTIONAL	python_bindings/pybind11/include/pybind11/stl.h	/^#  define PYBIND11_HAS_OPTIONAL /;"	d
PYBIND11_HAS_STRING_VIEW	python_bindings/pybind11/include/pybind11/cast.h	/^#      define PYBIND11_HAS_STRING_VIEW$/;"	d
PYBIND11_HAS_STRING_VIEW	python_bindings/pybind11/include/pybind11/cast.h	/^#    define PYBIND11_HAS_STRING_VIEW$/;"	d
PYBIND11_HAS_U8STRING	python_bindings/pybind11/include/pybind11/cast.h	/^#  define PYBIND11_HAS_U8STRING$/;"	d
PYBIND11_HAS_VARIANT	python_bindings/pybind11/include/pybind11/stl.h	/^#    define PYBIND11_HAS_VARIANT /;"	d
PYBIND11_HAS_VARIANT	python_bindings/pybind11/include/pybind11/stl.h	/^#  define PYBIND11_HAS_VARIANT /;"	d
PYBIND11_INPLACE_OPERATOR	python_bindings/pybind11/include/pybind11/operators.h	/^#define PYBIND11_INPLACE_OPERATOR(/;"	d
PYBIND11_INPLACE_OPERATOR	python_bindings/pybind11/include/pybind11/operators.h	/^#undef PYBIND11_INPLACE_OPERATOR$/;"	d
PYBIND11_INSTANCE_METHOD_CHECK	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_INSTANCE_METHOD_CHECK /;"	d
PYBIND11_INSTANCE_METHOD_GET_FUNCTION	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_INSTANCE_METHOD_GET_FUNCTION /;"	d
PYBIND11_INSTANCE_METHOD_NEW	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_INSTANCE_METHOD_NEW(/;"	d
PYBIND11_INTERNALS_ID	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#define PYBIND11_INTERNALS_ID /;"	d
PYBIND11_INTERNALS_KIND	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#    define PYBIND11_INTERNALS_KIND /;"	d
PYBIND11_INTERNALS_VERSION	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#define PYBIND11_INTERNALS_VERSION /;"	d
PYBIND11_LONG_AS_LONGLONG	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_LONG_AS_LONGLONG(/;"	d
PYBIND11_LONG_CHECK	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_LONG_CHECK(/;"	d
PYBIND11_LONG_FROM_SIGNED	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_LONG_FROM_SIGNED(/;"	d
PYBIND11_LONG_FROM_UNSIGNED	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_LONG_FROM_UNSIGNED(/;"	d
PYBIND11_MAKE_OPAQUE	python_bindings/pybind11/include/pybind11/cast.h	/^#define PYBIND11_MAKE_OPAQUE(/;"	d
PYBIND11_MATH_OPERATOR_BINARY	python_bindings/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_MATH_OPERATOR_BINARY(/;"	d
PYBIND11_MATH_OPERATOR_BINARY	python_bindings/pybind11/include/pybind11/pytypes.h	/^#undef PYBIND11_MATH_OPERATOR_BINARY$/;"	d
PYBIND11_MATH_OPERATOR_UNARY	python_bindings/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_MATH_OPERATOR_UNARY(/;"	d
PYBIND11_MATH_OPERATOR_UNARY	python_bindings/pybind11/include/pybind11/pytypes.h	/^#undef PYBIND11_MATH_OPERATOR_UNARY$/;"	d
PYBIND11_MAYBE_UNUSED	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  define PYBIND11_MAYBE_UNUSED /;"	d
PYBIND11_MAYBE_UNUSED	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  define PYBIND11_MAYBE_UNUSED$/;"	d
PYBIND11_MODULE	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_MODULE(/;"	d
PYBIND11_MODULE	python_bindings/pybind11/tests/pybind11_cross_module_tests.cpp	/^PYBIND11_MODULE(pybind11_cross_module_tests, m) {$/;"	f
PYBIND11_MODULE	python_bindings/pybind11/tests/pybind11_tests.cpp	/^PYBIND11_MODULE(pybind11_tests, m) {$/;"	f
PYBIND11_MODULE	python_bindings/pybind11/tests/test_cmake_build/main.cpp	/^PYBIND11_MODULE(test_cmake_build, m) {$/;"	f
PYBIND11_MODULE	python_bindings/pybind11/tests/test_embed/external_module.cpp	/^PYBIND11_MODULE(external_module, m) {$/;"	f
PYBIND11_MODULE	python_bindings/src/pytaco.cpp	/^PYBIND11_MODULE(core_modules, m){$/;"	f
PYBIND11_MODULE_LOCAL_ID	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#define PYBIND11_MODULE_LOCAL_ID /;"	d
PYBIND11_NAMESPACE	python_bindings/pybind11/include/pybind11/detail/common.h	/^#    define PYBIND11_NAMESPACE /;"	d
PYBIND11_NAMESPACE_BEGIN	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_NAMESPACE_BEGIN(/;"	d
PYBIND11_NAMESPACE_END	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_NAMESPACE_END(/;"	d
PYBIND11_NB_BOOL	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_NB_BOOL(/;"	d
PYBIND11_NOINLINE	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  define PYBIND11_NOINLINE /;"	d
PYBIND11_OBJECT	python_bindings/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT(/;"	d
PYBIND11_OBJECT_CHECK_FAILED	python_bindings/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_CHECK_FAILED(/;"	d
PYBIND11_OBJECT_COMMON	python_bindings/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_COMMON(/;"	d
PYBIND11_OBJECT_CVT	python_bindings/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_CVT(/;"	d
PYBIND11_OBJECT_DEFAULT	python_bindings/pybind11/include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_DEFAULT(/;"	d
PYBIND11_OVERLOAD	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD(/;"	d
PYBIND11_OVERLOAD_CAST	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_OVERLOAD_CAST /;"	d
PYBIND11_OVERLOAD_INT	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_INT(/;"	d
PYBIND11_OVERLOAD_NAME	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_NAME(/;"	d
PYBIND11_OVERLOAD_PURE	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_PURE(/;"	d
PYBIND11_OVERLOAD_PURE_NAME	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_PURE_NAME(/;"	d
PYBIND11_OVERRIDE	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE(/;"	d
PYBIND11_OVERRIDE_IMPL	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE_IMPL(/;"	d
PYBIND11_OVERRIDE_NAME	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE_NAME(/;"	d
PYBIND11_OVERRIDE_PURE	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE_PURE(/;"	d
PYBIND11_OVERRIDE_PURE_NAME	python_bindings/pybind11/include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE_PURE_NAME(/;"	d
PYBIND11_PACKED	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^#define PYBIND11_PACKED(/;"	d	file:
PYBIND11_PLUGIN	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_PLUGIN(/;"	d
PYBIND11_PLUGIN_IMPL	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_PLUGIN_IMPL(/;"	d
PYBIND11_RUNTIME_EXCEPTION	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_RUNTIME_EXCEPTION(/;"	d
PYBIND11_SET_OLDPY_QUALNAME	python_bindings/pybind11/include/pybind11/detail/class.h	/^#  define PYBIND11_SET_OLDPY_QUALNAME(/;"	d
PYBIND11_SLICE_OBJECT	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_SLICE_OBJECT /;"	d
PYBIND11_STDLIB	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#    define PYBIND11_STDLIB /;"	d
PYBIND11_STRINGIFY	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_STRINGIFY(/;"	d
PYBIND11_STRING_NAME	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_STRING_NAME /;"	d
PYBIND11_STR_TYPE	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_STR_TYPE /;"	d
PYBIND11_THROW	python_bindings/pybind11/include/pybind11/pybind11.h	/^                #define PYBIND11_THROW /;"	d
PYBIND11_THROW	python_bindings/pybind11/include/pybind11/pybind11.h	/^                #undef PYBIND11_THROW$/;"	d
PYBIND11_TLS_DELETE_VALUE	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#        define PYBIND11_TLS_DELETE_VALUE(/;"	d
PYBIND11_TLS_DELETE_VALUE	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_DELETE_VALUE(/;"	d
PYBIND11_TLS_FREE	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_FREE(/;"	d
PYBIND11_TLS_GET_VALUE	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_GET_VALUE(/;"	d
PYBIND11_TLS_KEY_INIT	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_KEY_INIT(/;"	d
PYBIND11_TLS_REPLACE_VALUE	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#        define PYBIND11_TLS_REPLACE_VALUE(/;"	d
PYBIND11_TLS_REPLACE_VALUE	python_bindings/pybind11/include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_REPLACE_VALUE(/;"	d
PYBIND11_TOSTRING	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_TOSTRING(/;"	d
PYBIND11_TRY_NEXT_OVERLOAD	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_TRY_NEXT_OVERLOAD /;"	d
PYBIND11_TYPE	python_bindings/pybind11/include/pybind11/cast.h	/^#define PYBIND11_TYPE(/;"	d
PYBIND11_TYPE_CASTER	python_bindings/pybind11/include/pybind11/cast.h	/^#define PYBIND11_TYPE_CASTER(/;"	d
PYBIND11_UNARY_OPERATOR	python_bindings/pybind11/include/pybind11/operators.h	/^#define PYBIND11_UNARY_OPERATOR(/;"	d
PYBIND11_UNARY_OPERATOR	python_bindings/pybind11/include/pybind11/operators.h	/^#undef PYBIND11_UNARY_OPERATOR$/;"	d
PYBIND11_VERSION_MAJOR	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_VERSION_MAJOR /;"	d
PYBIND11_VERSION_MINOR	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_VERSION_MINOR /;"	d
PYBIND11_VERSION_PATCH	python_bindings/pybind11/include/pybind11/detail/common.h	/^#define PYBIND11_VERSION_PATCH /;"	d
PYPY	python_bindings/pybind11/tests/env.py	/^PYPY = platform.python_implementation() == "PyPy"$/;"	v
Panther	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^        Cat = 200, Panther, LastCat = 299$/;"	m	class:Animal::Kind	file:
Panther	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    Panther(const std::string& _name) : Cat(_name, Kind::Panther) {}$/;"	f	struct:Animal::Panther
Panther	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^struct Panther : Cat$/;"	s	struct:Animal	file:
ParallelCompile	python_bindings/pybind11/pybind11/setup_helpers.py	/^class ParallelCompile(object):$/;"	c
ParallelSchedule	include/taco/tensor.h	/^enum class ParallelSchedule {$/;"	c	namespace:taco
ParallelUnit	include/taco/ir_tags.h	/^enum class ParallelUnit {$/;"	c	namespace:taco
ParallelUnit_NAMES	src/ir_tags.cpp	/^const char *ParallelUnit_NAMES[] = {"NotParallel", "DefaultUnit", "GPUBlock", "GPUWarp", "GPUThread", "CPUThread", "CPUVector", "CPUThreadGroupReduction", "GPUBlockReduction", "GPUWarpReduction"};$/;"	m	namespace:taco	file:
Parallelize	include/taco/index_notation/transformations.h	/^class Parallelize : public TransformationInterface {$/;"	c	namespace:taco
Parallelize	src/index_notation/transformations.cpp	/^Parallelize::Parallelize() : content(nullptr) {$/;"	f	class:taco::Parallelize
Parallelize	src/index_notation/transformations.cpp	/^Parallelize::Parallelize(IndexVar i) : Parallelize(i, ParallelUnit::DefaultUnit, OutputRaceStrategy::NoRaces) {}$/;"	f	class:taco::Parallelize
Parallelize	src/index_notation/transformations.cpp	/^Parallelize::Parallelize(IndexVar i, ParallelUnit parallel_unit, OutputRaceStrategy output_race_strategy) : content(new Content) {$/;"	f	class:taco::Parallelize
ParamGenerator	test/gtest/gtest.h	/^  ParamGenerator(const ParamGenerator& other) : impl_(other.impl_) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	test/gtest/gtest.h	/^  explicit ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	test/gtest/gtest.h	/^class ParamGenerator {$/;"	c	namespace:testing::internal
ParamGeneratorInterface	test/gtest/gtest.h	/^class ParamGeneratorInterface {$/;"	c	namespace:testing::internal
ParamIterator	test/gtest/gtest.h	/^  ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	test/gtest/gtest.h	/^  explicit ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	test/gtest/gtest.h	/^class ParamIterator {$/;"	c	namespace:testing::internal
ParamIteratorInterface	test/gtest/gtest.h	/^class ParamIteratorInterface {$/;"	c	namespace:testing::internal
ParamType	test/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator10
ParamType	test/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator9
ParamType	test/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator8
ParamType	test/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6, T7> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator7
ParamType	test/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator6
ParamType	test/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator5
ParamType	test/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator4
ParamType	test/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator3
ParamType	test/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator2
ParamType	test/gtest/gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::WithParamInterface
ParamType	test/gtest/gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::internal::ParamGeneratorInterface
ParamType	test/gtest/gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
ParamType	test/gtest/gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::TestMetaFactory
ParamType	test/gtest/gtest.h	/^  typedef typename TestClass::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestFactory
ParameterizedTestCaseInfo	test/gtest/gtest.h	/^  explicit ParameterizedTestCaseInfo(const char* name)$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
ParameterizedTestCaseInfo	test/gtest/gtest.h	/^class ParameterizedTestCaseInfo : public ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseInfoBase	test/gtest/gtest.h	/^  ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
ParameterizedTestCaseInfoBase	test/gtest/gtest.h	/^class ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseRegistry	test/gtest/gtest.h	/^  ParameterizedTestCaseRegistry() {}$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
ParameterizedTestCaseRegistry	test/gtest/gtest.h	/^class ParameterizedTestCaseRegistry {$/;"	c	namespace:testing::internal
ParameterizedTestFactory	test/gtest/gtest.h	/^  explicit ParameterizedTestFactory(ParamType parameter) :$/;"	f	class:testing::internal::ParameterizedTestFactory
ParameterizedTestFactory	test/gtest/gtest.h	/^class ParameterizedTestFactory : public TestFactoryBase {$/;"	c	namespace:testing::internal
ParseBoolFlag	test/gtest/gtest-all.cc	/^bool ParseBoolFlag(const char* str, const char* flag, bool* value) {$/;"	f	namespace:testing::internal
ParseError	include/taco/parser/parser.h	/^  ParseError(std::string msg) : msg(msg) {}$/;"	f	class:taco::parser::ParseError
ParseError	include/taco/parser/parser.h	/^class ParseError {$/;"	c	namespace:taco::parser
ParseFlagValue	test/gtest/gtest-all.cc	/^const char* ParseFlagValue(const char* str,$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	test/gtest/gtest-all.cc	/^void ParseGoogleTestFlagsOnly(int* argc, char** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	test/gtest/gtest-all.cc	/^void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnlyImpl	test/gtest/gtest-all.cc	/^void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
ParseInt32	test/gtest/gtest-all.cc	/^bool ParseInt32(const Message& src_text, const char* str, Int32* value) {$/;"	f	namespace:testing::internal
ParseInt32Flag	test/gtest/gtest-all.cc	/^bool ParseInt32Flag(const char* str, const char* flag, Int32* value) {$/;"	f	namespace:testing::internal
ParseInternalRunDeathTestFlag	test/gtest/gtest-all.cc	/^InternalRunDeathTestFlag* ParseInternalRunDeathTestFlag() {$/;"	f	namespace:testing::internal
ParseNaturalNumber	test/gtest/gtest-all.cc	/^bool ParseNaturalNumber(const ::std::string& str, Integer* number) {$/;"	f	namespace:testing::internal
ParseStringFlag	test/gtest/gtest-all.cc	/^bool ParseStringFlag(const char* str, const char* flag, std::string* value) {$/;"	f	namespace:testing::internal
Parser	include/taco/parser/parser.h	/^class Parser : public util::Uncopyable {$/;"	c	namespace:taco::parser
Parser	src/parser/parser.cpp	/^Parser::Parser(string expression, const map<string,Format>& formats,$/;"	f	class:taco::parser::Parser
PartialMatch	test/gtest/gtest-all.cc	/^bool RE::PartialMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
PartialMatch	test/gtest/gtest.h	/^  static bool PartialMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
PartialMatch	test/gtest/gtest.h	/^  static bool PartialMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
PartialNestedStruct	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct PartialNestedStruct {$/;"	s	file:
PartialStruct	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct PartialStruct {$/;"	s	file:
Passed	test/gtest/gtest-all.cc	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::internal::UnitTestImpl
Passed	test/gtest/gtest-all.cc	/^bool DeathTestImpl::Passed(bool status_ok) {$/;"	f	class:testing::internal::DeathTestImpl
Passed	test/gtest/gtest-all.cc	/^bool UnitTest::Passed() const { return impl()->Passed(); }$/;"	f	class:testing::UnitTest
Passed	test/gtest/gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestCase
Passed	test/gtest/gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestResult
Path	python_bindings/pybind11/docs/conf.py	/^from pathlib import Path$/;"	i
PatternMatchesString	test/gtest/gtest-all.cc	/^bool UnitTestOptions::PatternMatchesString(const char *pattern,$/;"	f	class:testing::internal::UnitTestOptions
Pet	python_bindings/pybind11/tests/local_bindings.h	/^    Pet(std::string name) : name_(name) {}$/;"	f	class:pets::Pet
Pet	python_bindings/pybind11/tests/local_bindings.h	/^class Pet {$/;"	c	namespace:pets
Policy	include/taco/storage/array.h	/^  enum Policy {UserOwns, Free, Delete};$/;"	g	class:taco::Array
PosRelNode	include/taco/index_notation/provenance_graph.h	/^struct PosRelNode : public IndexVarRelNode {$/;"	s	namespace:taco
PosRelNode	src/index_notation/provenance_graph.cpp	/^PosRelNode::PosRelNode(IndexVar i, IndexVar ipos, const Access& access)$/;"	f	class:taco::PosRelNode
PostFlagParsingInit	test/gtest/gtest-all.cc	/^void UnitTestImpl::PostFlagParsingInit() {$/;"	f	class:testing::internal::UnitTestImpl
Precedence	include/taco/index_notation/index_notation_printer.h	/^  enum class Precedence {$/;"	c	class:taco::IndexNotationPrinter
Precedence	include/taco/index_notation/iteration_algebra_printer.h	/^  enum class Precedence {$/;"	c	class:taco::IterationAlgebraPrinter
Precedence	include/taco/ir/ir_printer.h	/^  enum Precedence {$/;"	g	class:taco::ir::IRPrinter
Precompute	include/taco/index_notation/transformations.h	/^class Precompute : public TransformationInterface {$/;"	c	namespace:taco
Precompute	src/index_notation/transformations.cpp	/^Precompute::Precompute() : content(nullptr) {$/;"	f	class:taco::Precompute
Precompute	src/index_notation/transformations.cpp	/^Precompute::Precompute(IndexExpr expr, IndexVar i, IndexVar iw,$/;"	f	class:taco::Precompute
PrecomputeRelNode	include/taco/index_notation/provenance_graph.h	/^struct PrecomputeRelNode : public IndexVarRelNode {$/;"	s	namespace:taco
PrecomputeRelNode	src/index_notation/provenance_graph.cpp	/^PrecomputeRelNode::PrecomputeRelNode(taco::IndexVar parentVar, taco::IndexVar precomputeVar)$/;"	f	class:taco::PrecomputeRelNode
PreconditionTest	test/tests-transformation.cpp	/^  PreconditionTest(Transformation transformation, IndexStmt invalidStmt)$/;"	f	struct:test::PreconditionTest
PreconditionTest	test/tests-transformation.cpp	/^struct PreconditionTest {$/;"	s	namespace:test	file:
PrettyUnitTestResultPrinter	test/gtest/gtest-all.cc	/^  PrettyUnitTestResultPrinter() {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrettyUnitTestResultPrinter	test/gtest/gtest-all.cc	/^class PrettyUnitTestResultPrinter : public TestEventListener {$/;"	c	namespace:testing::internal	file:
Print	include/taco/ir/ir.h	/^  Print,$/;"	m	class:taco::ir::IRNodeType
Print	include/taco/ir/ir.h	/^struct Print : public StmtNode<Print> {$/;"	s	namespace:taco::ir
Print	test/gtest/gtest.h	/^  static void Print(char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	test/gtest/gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
Print	test/gtest/gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	test/gtest/gtest.h	/^  static void Print(const char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	test/gtest/gtest.h	/^  static void Print(const wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	test/gtest/gtest.h	/^  static void Print(wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
PrintAsCharLiteralTo	test/gtest/gtest-all.cc	/^static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsStringLiteralTo	test/gtest/gtest-all.cc	/^static CharFormat PrintAsStringLiteralTo(char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsStringLiteralTo	test/gtest/gtest-all.cc	/^static CharFormat PrintAsStringLiteralTo(wchar_t c, ostream* os) {$/;"	f	namespace:testing::internal
PrintByteSegmentInObjectTo	test/gtest/gtest-all.cc	/^void PrintByteSegmentInObjectTo(const unsigned char* obj_bytes, size_t start,$/;"	f	namespace:testing::__anon7
PrintBytesInObjectTo	test/gtest/gtest-all.cc	/^void PrintBytesInObjectTo(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::internal2
PrintBytesInObjectToImpl	test/gtest/gtest-all.cc	/^void PrintBytesInObjectToImpl(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::__anon7
PrintCharAndCodeTo	test/gtest/gtest-all.cc	/^void PrintCharAndCodeTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintCharsAsStringTo	test/gtest/gtest-all.cc	/^static void PrintCharsAsStringTo($/;"	f	namespace:testing::internal
PrintColorEncoded	test/gtest/gtest-all.cc	/^static void PrintColorEncoded(const char* str) {$/;"	f	namespace:testing::internal
PrintFailedTests	test/gtest/gtest-all.cc	/^void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintFullTestCommentIfPresent	test/gtest/gtest-all.cc	/^void PrintFullTestCommentIfPresent(const TestInfo& test_info) {$/;"	f	namespace:testing::internal
PrintOnOneLine	test/gtest/gtest-all.cc	/^static void PrintOnOneLine(const char* str, int max_length) {$/;"	f	namespace:testing::internal
PrintPrefixTo	test/gtest/gtest.h	/^  static void PrintPrefixTo(const Tuple& t, ::std::ostream* os) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintPrefixTo	test/gtest/gtest.h	/^  static void PrintPrefixTo(const Tuple&, ::std::ostream*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintRawArrayTo	test/gtest/gtest.h	/^void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintStringTo	test/gtest/gtest-all.cc	/^void PrintStringTo(const ::std::string& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintStringTo	test/gtest/gtest-all.cc	/^void PrintStringTo(const ::string& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTestName	test/gtest/gtest-all.cc	/^  static void PrintTestName(const char * test_case, const char * test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintTestPartResult	test/gtest/gtest-all.cc	/^static void PrintTestPartResult(const TestPartResult& test_part_result) {$/;"	f	namespace:testing::internal
PrintTestPartResultToString	test/gtest/gtest-all.cc	/^static std::string PrintTestPartResultToString($/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest-all.cc	/^void PrintTo(const char* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest-all.cc	/^void PrintTo(const wchar_t* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest-all.cc	/^void PrintTo(signed char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest-all.cc	/^void PrintTo(unsigned char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest-all.cc	/^void PrintTo(wchar_t wc, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(bool x, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(const ::std::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(const ::std::tr1::tuple<>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(const ::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(const ::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(const signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(const unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^inline void PrintTo(wchar_t* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo($/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>& t,$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8>& t,$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7>& t,$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6>& t,$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5>& t,$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const ::std::tuple<Types...>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	test/gtest/gtest.h	/^void PrintTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintToString	test/gtest/gtest.h	/^::std::string PrintToString(const T& value) {$/;"	f	namespace:testing
PrintTupleTo	test/gtest/gtest.h	/^void PrintTupleTo(const Tuple& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintValue	test/gtest/gtest.h	/^  static void PrintValue(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal2::TypeWithoutFormatter
PrintWideStringTo	test/gtest/gtest-all.cc	/^void PrintWideStringTo(const ::std::wstring& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintWideStringTo	test/gtest/gtest-all.cc	/^void PrintWideStringTo(const ::wstring& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintXmlTestCase	test/gtest/gtest-all.cc	/^void XmlUnitTestResultPrinter::PrintXmlTestCase(std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
PrintXmlUnitTest	test/gtest/gtest-all.cc	/^void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
Printable	include/taco/util/printable.h	/^class Printable {$/;"	c	namespace:taco::util
Property	include/taco/format.h	/^  enum Property {$/;"	g	class:taco::ModeFormat
Property	include/taco/index_notation/properties.h	/^class Property : public util::IntrusivePtr<const PropertyPtr> {$/;"	c	namespace:taco
Property	src/index_notation/properties.cpp	/^Property::Property() : util::IntrusivePtr<const PropertyPtr>(nullptr) {$/;"	f	class:taco::Property
Property	src/index_notation/properties.cpp	/^Property::Property(const PropertyPtr* p) : util::IntrusivePtr<const PropertyPtr>(p) {$/;"	f	class:taco::Property
PropertyPtr	include/taco/index_notation/property_pointers.h	/^struct PropertyPtr : public util::Manageable<PropertyPtr>,$/;"	s	namespace:taco
PropertyPtr	src/index_notation/property_pointers.cpp	/^PropertyPtr::PropertyPtr() {$/;"	f	class:taco::PropertyPtr
ProvenanceGraph	include/taco/index_notation/provenance_graph.h	/^  ProvenanceGraph() {}$/;"	f	class:taco::ProvenanceGraph
ProvenanceGraph	include/taco/index_notation/provenance_graph.h	/^class ProvenanceGraph {$/;"	c	namespace:taco
ProvenanceGraph	src/index_notation/provenance_graph.cpp	/^ProvenanceGraph::ProvenanceGraph(IndexStmt concreteStmt) {$/;"	f	class:taco::ProvenanceGraph
Ptr	include/taco/index_notation/properties.h	/^  typedef AnnihilatorPtr Ptr;$/;"	t	class:taco::Annihilator
Ptr	include/taco/index_notation/properties.h	/^  typedef AssociativePtr Ptr;$/;"	t	class:taco::Associative
Ptr	include/taco/index_notation/properties.h	/^  typedef CommutativePtr Ptr;$/;"	t	class:taco::Commutative
Ptr	include/taco/index_notation/properties.h	/^  typedef IdentityPtr Ptr;$/;"	t	class:taco::Identity
Ptr	include/taco/storage/typed_index.h	/^  typedef TypedIndexPtr Ptr;$/;"	t	class:taco::TypedIndexRef
Ptr	include/taco/storage/typed_index.h	/^  typedef TypedIndexPtr Ptr;$/;"	t	class:taco::TypedIndexVal
Ptr	include/taco/storage/typed_value.h	/^  typedef TypedComponentPtr Ptr;$/;"	t	class:taco::TypedComponentRef
Ptr	include/taco/storage/typed_value.h	/^  typedef TypedComponentPtr Ptr;$/;"	t	class:taco::TypedComponentVal
PyA_Repeat	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class PyA_Repeat : public A_Repeat {$/;"	c	file:
PyA_Tpl	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class PyA_Tpl : public Base {$/;"	c	file:
PyArrayDescr_Check_	python_bindings/pybind11/include/pybind11/numpy.h	/^    bool PyArrayDescr_Check_(PyObject *obj) const {$/;"	f	struct:npy_api
PyArrayDescr_Proxy	python_bindings/pybind11/include/pybind11/numpy.h	/^struct PyArrayDescr_Proxy {$/;"	s
PyArrayDescr_Type_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyTypeObject *PyArrayDescr_Type_;$/;"	m	struct:npy_api
PyArray_Check_	python_bindings/pybind11/include/pybind11/numpy.h	/^    bool PyArray_Check_(PyObject *obj) const {$/;"	f	struct:npy_api
PyArray_CopyInto_	python_bindings/pybind11/include/pybind11/numpy.h	/^    int (*PyArray_CopyInto_)(PyObject *, PyObject *);$/;"	m	struct:npy_api
PyArray_DescrConverter_	python_bindings/pybind11/include/pybind11/numpy.h	/^    int (*PyArray_DescrConverter_) (PyObject *, PyObject **);$/;"	m	struct:npy_api
PyArray_DescrFromScalar_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromScalar_)(PyObject *);$/;"	m	struct:npy_api
PyArray_DescrFromType_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromType_)(int);$/;"	m	struct:npy_api
PyArray_DescrNewFromType_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrNewFromType_)(int);$/;"	m	struct:npy_api
PyArray_Dims	python_bindings/pybind11/include/pybind11/numpy.h	/^    } PyArray_Dims;$/;"	t	struct:npy_api	typeref:struct:npy_api::__anon11
PyArray_EquivTypes_	python_bindings/pybind11/include/pybind11/numpy.h	/^    bool (*PyArray_EquivTypes_) (PyObject *, PyObject *);$/;"	m	struct:npy_api
PyArray_FromAny_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_FromAny_) (PyObject *, PyObject *, int, int, int, PyObject *);$/;"	m	struct:npy_api
PyArray_GetArrayParamsFromObject_	python_bindings/pybind11/include/pybind11/numpy.h	/^    int (*PyArray_GetArrayParamsFromObject_)(PyObject *, PyObject *, unsigned char, PyObject **, int *,$/;"	m	struct:npy_api
PyArray_GetNDArrayCFeatureVersion_	python_bindings/pybind11/include/pybind11/numpy.h	/^    unsigned int (*PyArray_GetNDArrayCFeatureVersion_)();$/;"	m	struct:npy_api
PyArray_NewCopy_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewCopy_)(PyObject *, int);$/;"	m	struct:npy_api
PyArray_NewFromDescr_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewFromDescr_)$/;"	m	struct:npy_api
PyArray_Proxy	python_bindings/pybind11/include/pybind11/numpy.h	/^struct PyArray_Proxy {$/;"	s
PyArray_Resize_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject* (*PyArray_Resize_)(PyObject*, PyArray_Dims*, int, int);$/;"	m	struct:npy_api
PyArray_SetBaseObject_	python_bindings/pybind11/include/pybind11/numpy.h	/^    int (*PyArray_SetBaseObject_)(PyObject *, PyObject *);$/;"	m	struct:npy_api
PyArray_Squeeze_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *(*PyArray_Squeeze_)(PyObject *);$/;"	m	struct:npy_api
PyArray_Type_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyTypeObject *PyArray_Type_;$/;"	m	struct:npy_api
PyB_Repeat	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class PyB_Repeat : public B_Repeat {$/;"	c	file:
PyB_Tpl	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class PyB_Tpl : public PyA_Tpl<Base> {$/;"	c	file:
PyC_Repeat	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class PyC_Repeat : public C_Repeat {$/;"	c	file:
PyClass1	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class PyClass1(m.DispatchIssue):$/;"	c	function:test_dispatch_issue
PyClass2	python_bindings/pybind11/tests/test_virtual_functions.py	/^    class PyClass2(m.DispatchIssue):$/;"	c	function:test_dispatch_issue
PyD_Repeat	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class PyD_Repeat : public D_Repeat {$/;"	c	file:
PyDateTime_DELTA_GET_DAYS	python_bindings/pybind11/include/pybind11/chrono.h	/^#define PyDateTime_DELTA_GET_DAYS(/;"	d
PyDateTime_DELTA_GET_MICROSECONDS	python_bindings/pybind11/include/pybind11/chrono.h	/^#define PyDateTime_DELTA_GET_MICROSECONDS(/;"	d
PyDateTime_DELTA_GET_SECONDS	python_bindings/pybind11/include/pybind11/chrono.h	/^#define PyDateTime_DELTA_GET_SECONDS(/;"	d
PyDog	python_bindings/pybind11/tests/test_class.py	/^    class PyDog(m.Dog):$/;"	c	function:test_class_refcount
PyEllipsis_Check	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline bool PyEllipsis_Check(PyObject *o) { return o == Py_Ellipsis; }$/;"	f
PyExampleVirt	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^class PyExampleVirt : public ExampleVirt {$/;"	c	file:
PyFinalChild	python_bindings/pybind11/tests/test_class.py	/^        class PyFinalChild(m.IsFinal):$/;"	c	function:test_final
PyIndexExprNode	python_bindings/src/pyIndexNotation.cpp	/^class PyIndexExprNode : public IndexExprNode{$/;"	c	namespace:taco::pythonBindings	file:
PyInit_cross_module_gil_utils	python_bindings/pybind11/tests/cross_module_gil_utils.cpp	/^PyObject* PyInit_cross_module_gil_utils()$/;"	f
PyIterable_Check	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline bool PyIterable_Check(PyObject *obj) {$/;"	f
PyNonFinalFinalChild	python_bindings/pybind11/tests/test_class.py	/^        class PyNonFinalFinalChild(m.IsNonFinalFinal):$/;"	c	function:test_non_final_final
PyNone_Check	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline bool PyNone_Check(PyObject *o) { return o == Py_None; }$/;"	f
PyStaticMethod_Check	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline bool PyStaticMethod_Check(PyObject *o) { return o->ob_type == &PyStaticMethod_Type; }$/;"	f
PyTF6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    PyTF6(PyTF6 &&f) : TestFactory6(std::move(f)) { print_move_created(this); }$/;"	f	class:PyTF6
PyTF6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    PyTF6(TestFactory6 &&base) : TestFactory6(std::move(base)) { alias = true; print_created(this, "move", value); }$/;"	f	class:PyTF6
PyTF6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    PyTF6(const PyTF6 &f) : TestFactory6(f) { print_copy_created(this); }$/;"	f	class:PyTF6
PyTF6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    PyTF6(int i) : TestFactory6(i) { alias = true; print_created(this, i); }$/;"	f	class:PyTF6
PyTF6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    PyTF6(std::string s) : TestFactory6((int) s.size()) { alias = true; print_created(this, s); }$/;"	f	class:PyTF6
PyTF6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class PyTF6 : public TestFactory6 {$/;"	c	file:
PyTF7	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    PyTF7(PyTF7 &&f) : TestFactory7(std::move(f)) { print_move_created(this); }$/;"	f	class:PyTF7
PyTF7	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    PyTF7(const PyTF7 &f) : TestFactory7(f) { print_copy_created(this); }$/;"	f	class:PyTF7
PyTF7	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    PyTF7(int i) : TestFactory7(i) { alias = true; print_created(this, i); }$/;"	f	class:PyTF7
PyTF7	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class PyTF7 : public TestFactory7 {$/;"	c	file:
PyTensorIter	python_bindings/src/pyTensor.cpp	/^  PyTensorIter(Tensor<T> &tensor) : end(tensor.end()), it(tensor.begin()) {$/;"	f	class:taco::pythonBindings::PyTensorIter
PyTensorIter	python_bindings/src/pyTensor.cpp	/^class PyTensorIter {$/;"	c	namespace:taco::pythonBindings	file:
PyUnicode_Check_Permissive	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline bool PyUnicode_Check_Permissive(PyObject *o) { return PyUnicode_Check(o) || PYBIND11_BYTES_CHECK(o); }$/;"	f
PyVirtClass	python_bindings/pybind11/tests/test_gil_scoped.cpp	/^class PyVirtClass : public VirtClass {$/;"	c	file:
PyVoidArrType_Type_	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyTypeObject *PyVoidArrType_Type_;$/;"	m	struct:npy_api
PyVoidScalarObject_Proxy	python_bindings/pybind11/include/pybind11/numpy.h	/^struct PyVoidScalarObject_Proxy {$/;"	s
Pybind11Extension	python_bindings/pybind11/pybind11/setup_helpers.py	/^class Pybind11Extension(_Extension):$/;"	c
PythFactory7	python_bindings/pybind11/tests/test_factory_constructors.py	/^    class PythFactory7(TestFactory7):$/;"	c	function:test_init_factory_dual
Python	python_bindings/pybind11/tests/test_class.py	/^    class Python(m.Pet):$/;"	c	function:test_inheritance_init
Python	python_bindings/pybind11/tests/test_pickling.py	/^    import cPickle as pickle  # Use cPickle on Python 2.7$/;"	i
PythonAlreadySetInDestructor	python_bindings/pybind11/tests/test_exceptions.cpp	/^    PythonAlreadySetInDestructor(const py::str &s) : s(s) {}$/;"	f	struct:PythonAlreadySetInDestructor
PythonAlreadySetInDestructor	python_bindings/pybind11/tests/test_exceptions.cpp	/^struct PythonAlreadySetInDestructor {$/;"	s	file:
PythonCallInDestructor	python_bindings/pybind11/tests/test_exceptions.cpp	/^    PythonCallInDestructor(const py::dict &d) : d(d) {}$/;"	f	struct:PythonCallInDestructor
PythonCallInDestructor	python_bindings/pybind11/tests/test_exceptions.cpp	/^struct PythonCallInDestructor {$/;"	s	file:
PythonDerivedDynamicClass	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^    class PythonDerivedDynamicClass(m.DynamicClass):$/;"	c	function:test_dynamic_attributes
RE	test/gtest/gtest.h	/^  RE(const ::std::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	test/gtest/gtest.h	/^  RE(const ::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	test/gtest/gtest.h	/^  RE(const RE& other) { Init(other.pattern()); }$/;"	f	class:std::tr1::RE
RE	test/gtest/gtest.h	/^  RE(const char* regex) { Init(regex); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	test/gtest/gtest.h	/^class GTEST_API_ RE {$/;"	c	namespace:std::tr1
REDUCTION	include/taco/index_notation/index_notation_printer.h	/^    REDUCTION = 2,$/;"	m	class:taco::IndexNotationPrinter::Precedence
REGISTER_TYPED_TEST_CASE_P	test/gtest/gtest.h	/^# define REGISTER_TYPED_TEST_CASE_P(/;"	d
REM	include/taco/ir/ir_printer.h	/^    REM = 5,$/;"	e	enum:taco::ir::IRPrinter::Precedence
RETURNED	test/gtest/gtest-all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
RM	build/Makefile	/^RM = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake -E rm -f$/;"	m
RM	build/apps/Makefile	/^RM = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake -E rm -f$/;"	m
RM	build/apps/tensor_times_vector/Makefile	/^RM = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake -E rm -f$/;"	m
RM	build/src/Makefile	/^RM = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake -E rm -f$/;"	m
RM	build/test/Makefile	/^RM = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake -E rm -f$/;"	m
RM	build/tools/Makefile	/^RM = \/opt\/homebrew\/Cellar\/cmake\/3.23.2\/bin\/cmake -E rm -f$/;"	m
RULE	include/taco/index_notation/index_notation_visitor.h	/^#define RULE(/;"	d
RUN_ALL_TESTS	test/gtest/gtest.h	/^inline int RUN_ALL_TESTS() {$/;"	f
RValueCaster	python_bindings/pybind11/tests/pybind11_tests.h	/^struct RValueCaster {};$/;"	s
RabbitHamster	python_bindings/pybind11/tests/test_class.py	/^    class RabbitHamster(m.Rabbit, m.Hamster):$/;"	c	function:test_inheritance_init
RaisingRepr	python_bindings/pybind11/tests/test_constants_and_functions.py	/^    class RaisingRepr:$/;"	c	function:test_function_record_leaks
RaisingTypeErrorOnIndex	python_bindings/pybind11/tests/test_builtin_casters.py	/^    class RaisingTypeErrorOnIndex(object):$/;"	c	function:test_int_convert
RaisingValueErrorOnIndex	python_bindings/pybind11/tests/test_builtin_casters.py	/^    class RaisingValueErrorOnIndex(object):$/;"	c	function:test_int_convert
Random	include/taco/util/fill.h	/^  Random,$/;"	m	class:taco::util::FillMethod
Random	test/gtest/gtest.h	/^  explicit Random(UInt32 seed) : state_(seed) {}$/;"	f	class:testing::internal::Random
Random	test/gtest/gtest.h	/^class GTEST_API_ Random {$/;"	c	namespace:testing::internal
Range	test/gtest/gtest.h	/^internal::ParamGenerator<T> Range(T start, T end) {$/;"	f	namespace:testing
Range	test/gtest/gtest.h	/^internal::ParamGenerator<T> Range(T start, T end, IncrementT step) {$/;"	f	namespace:testing
RangeGenerator	test/gtest/gtest.h	/^  RangeGenerator(T begin, T end, IncrementT step)$/;"	f	class:testing::internal::RangeGenerator
RangeGenerator	test/gtest/gtest.h	/^class RangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
ReactionToSharding	test/gtest/gtest-all.cc	/^  enum ReactionToSharding {$/;"	g	class:testing::internal::UnitTestImpl	file:
Read	test/gtest/gtest.h	/^inline int Read(int fd, void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
ReadAndInterpretStatusByte	test/gtest/gtest-all.cc	/^void DeathTestImpl::ReadAndInterpretStatusByte() {$/;"	f	class:testing::internal::DeathTestImpl
ReadEntireFile	test/gtest/gtest-all.cc	/^std::string CapturedStream::ReadEntireFile(FILE* file) {$/;"	f	class:testing::internal::CapturedStream
RecordProperty	test/gtest/gtest-all.cc	/^  static void RecordProperty(TestResult* test_result,$/;"	f	class:testing::internal::TestResultAccessor
RecordProperty	test/gtest/gtest-all.cc	/^void Test::RecordProperty(const std::string& key, const std::string& value) {$/;"	f	class:testing::Test
RecordProperty	test/gtest/gtest-all.cc	/^void Test::RecordProperty(const std::string& key, int value) {$/;"	f	class:testing::Test
RecordProperty	test/gtest/gtest-all.cc	/^void TestResult::RecordProperty(const std::string& xml_element,$/;"	f	class:testing::TestResult
RecordProperty	test/gtest/gtest-all.cc	/^void UnitTest::RecordProperty(const std::string& key,$/;"	f	class:testing::UnitTest
RecordProperty	test/gtest/gtest-all.cc	/^void UnitTestImpl::RecordProperty(const TestProperty& test_property) {$/;"	f	class:testing::internal::UnitTestImpl
Reduction	include/taco/index_notation/index_notation.h	/^class Reduction : public IndexExpr {$/;"	c	namespace:taco
Reduction	src/index_notation/index_notation.cpp	/^Reduction::Reduction(IndexExpr op, IndexVar var, IndexExpr expr)$/;"	f	class:taco::Reduction
Reduction	src/index_notation/index_notation.cpp	/^Reduction::Reduction(const ReductionNode* n) : IndexExpr(n) {$/;"	f	class:taco::Reduction
ReductionNode	include/taco/index_notation/index_notation_nodes.h	/^struct ReductionNode : public IndexExprNode {$/;"	s	namespace:taco
ReductionNode	src/index_notation/index_notation_nodes.cpp	/^ReductionNode::ReductionNode(IndexExpr op, IndexVar var, IndexExpr a)$/;"	f	class:taco::ReductionNode
Ref	include/taco/storage/typed_index.h	/^  typedef TypedIndexRef Ref;$/;"	t	class:taco::TypedIndexPtr
Ref	include/taco/storage/typed_index.h	/^  typedef TypedIndexRef Ref;$/;"	t	class:taco::TypedIndexVal
Ref	include/taco/storage/typed_value.h	/^  typedef TypedComponentRef Ref;$/;"	t	class:taco::TypedComponentPtr
Ref	include/taco/storage/typed_value.h	/^  typedef TypedComponentRef Ref;$/;"	t	class:taco::TypedComponentVal
RefQualified	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^struct RefQualified {$/;"	s	file:
Region	include/taco/index_notation/iteration_algebra.h	/^class Region: public IterationAlgebra {$/;"	c	namespace:taco
Region	src/index_notation/iteration_algebra.cpp	/^Region::Region() : IterationAlgebra(new RegionNode) {}$/;"	f	class:taco::Region
Region	src/index_notation/iteration_algebra.cpp	/^Region::Region(IndexExpr expr) : IterationAlgebra(expr) {}$/;"	f	class:taco::Region
Region	src/index_notation/iteration_algebra.cpp	/^Region::Region(const taco::RegionNode *n) : IterationAlgebra(n) {}$/;"	f	class:taco::Region
RegionNode	include/taco/index_notation/iteration_algebra.h	/^  RegionNode() : IterationAlgebraNode() {}$/;"	f	struct:taco::RegionNode
RegionNode	include/taco/index_notation/iteration_algebra.h	/^  RegionNode(IndexExpr expr) : IterationAlgebraNode(), expr_(expr) {}$/;"	f	struct:taco::RegionNode
RegionNode	include/taco/index_notation/iteration_algebra.h	/^struct RegionNode: public IterationAlgebraNode {$/;"	s	namespace:taco
Register	test/gtest/gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	test/gtest/gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTestCase
Register	test/gtest/gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	test/gtest/gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTestCase
RegisterParameterizedTests	test/gtest/gtest-all.cc	/^void UnitTestImpl::RegisterParameterizedTests() {$/;"	f	class:testing::internal::UnitTestImpl
RegisterTests	test/gtest/gtest.h	/^  virtual void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
RegisterTests	test/gtest/gtest.h	/^  void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
RegisteredDerived	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^class RegisteredDerived : public UnregisteredBase {$/;"	c	file:
ReinterpretBits	test/gtest/gtest.h	/^  static RawType ReinterpretBits(const Bits bits) {$/;"	f	class:testing::internal::FloatingPoint
RelationToSourceCopy	test/gtest/gtest.h	/^struct RelationToSourceCopy {};$/;"	s	namespace:testing::internal
RelationToSourceReference	test/gtest/gtest.h	/^struct RelationToSourceReference {};$/;"	s	namespace:testing::internal
Release	test/gtest/gtest-all.cc	/^TestEventListener* TestEventListeners::Release(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Release	test/gtest/gtest-all.cc	/^TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
Rem	include/taco/ir/ir.h	/^  Rem,$/;"	m	class:taco::ir::IRNodeType
Rem	include/taco/ir/ir.h	/^struct Rem : public ExprNode<Rem> {$/;"	s	namespace:taco::ir
RemoveConst	test/gtest/gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	test/gtest/gtest.h	/^struct RemoveConst<T[N]> {$/;"	s	namespace:testing::internal
RemoveConst	test/gtest/gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	test/gtest/gtest.h	/^struct RemoveConst<const T[N]> {$/;"	s	namespace:testing::internal
RemoveDirectoryName	test/gtest/gtest-all.cc	/^FilePath FilePath::RemoveDirectoryName() const {$/;"	f	class:testing::internal::FilePath
RemoveExtension	test/gtest/gtest-all.cc	/^FilePath FilePath::RemoveExtension(const char* extension) const {$/;"	f	class:testing::internal::FilePath
RemoveFileName	test/gtest/gtest-all.cc	/^FilePath FilePath::RemoveFileName() const {$/;"	f	class:testing::internal::FilePath
RemoveInvalidXmlCharacters	test/gtest/gtest-all.cc	/^std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
RemoveReference	test/gtest/gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveReference	test/gtest/gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveTrailingPathSeparator	test/gtest/gtest-all.cc	/^FilePath FilePath::RemoveTrailingPathSeparator() const {$/;"	f	class:testing::internal::FilePath
Reorder	include/taco/index_notation/transformations.h	/^class Reorder : public TransformationInterface {$/;"	c	namespace:taco
Reorder	src/index_notation/transformations.cpp	/^Reorder::Reorder(IndexVar i, IndexVar j) : content(new Content) {$/;"	f	class:taco::Reorder
Reorder	src/index_notation/transformations.cpp	/^Reorder::Reorder(std::vector<taco::IndexVar> replacePattern) : content(new Content) {$/;"	f	class:taco::Reorder
ReplaceIndexVars	src/index_notation/index_notation_rewriter.cpp	/^  ReplaceIndexVars(const std::map<IndexVar,IndexVar>& substitutions)$/;"	f	struct:taco::ReplaceIndexVars
ReplaceIndexVars	src/index_notation/index_notation_rewriter.cpp	/^struct ReplaceIndexVars : public IndexNotationRewriter {$/;"	s	namespace:taco	file:
ReplaceReductionExpr	src/index_notation/transformations.cpp	/^  ReplaceReductionExpr(const std::map<Access,Access>& substitutions)$/;"	f	struct:taco::ReplaceReductionExpr
ReplaceReductionExpr	src/index_notation/transformations.cpp	/^struct ReplaceReductionExpr : public IndexNotationRewriter {$/;"	s	namespace:taco	file:
ReplaceRewriter	src/index_notation/index_notation_rewriter.cpp	/^  ReplaceRewriter(const std::map<IndexExpr,IndexExpr>& exprSubstitutions,$/;"	f	struct:taco::ReplaceRewriter
ReplaceRewriter	src/index_notation/index_notation_rewriter.cpp	/^struct ReplaceRewriter : public IndexNotationRewriter {$/;"	s	namespace:taco	file:
ReplaceTensorVars	src/index_notation/index_notation_rewriter.cpp	/^  ReplaceTensorVars(const std::map<TensorVar,TensorVar>& substitutions)$/;"	f	struct:taco::ReplaceTensorVars
ReplaceTensorVars	src/index_notation/index_notation_rewriter.cpp	/^struct ReplaceTensorVars : public IndexNotationRewriter {$/;"	s	namespace:taco	file:
ReportFailureInUnknownLocation	test/gtest/gtest-all.cc	/^void ReportFailureInUnknownLocation(TestPartResult::Type result_type,$/;"	f	namespace:testing::internal
ReportInvalidTestCaseType	test/gtest/gtest-all.cc	/^void ReportInvalidTestCaseType(const char* test_case_name,$/;"	f	namespace:testing::internal
ReportTestPartResult	test/gtest/gtest-all.cc	/^void DefaultGlobalTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
ReportTestPartResult	test/gtest/gtest-all.cc	/^void DefaultPerThreadTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
ReportTestPartResult	test/gtest/gtest-all.cc	/^void HasNewFatalFailureHelper::ReportTestPartResult($/;"	f	class:testing::internal::HasNewFatalFailureHelper
ReportTestPartResult	test/gtest/gtest-all.cc	/^void ScopedFakeTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::ScopedFakeTestPartResultReporter
Reseed	test/gtest/gtest.h	/^  void Reseed(UInt32 seed) { state_ = seed; }$/;"	f	class:testing::internal::Random
Reset	test/gtest/gtest-all.cc	/^void AutoHandle::Reset() {$/;"	f	class:testing::internal::AutoHandle
Reset	test/gtest/gtest-all.cc	/^void AutoHandle::Reset(HANDLE handle) {$/;"	f	class:testing::internal::AutoHandle
Return	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...) const) {$/;"	f	class:class_
Return	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...)) {$/;"	f	class:class_
Return	python_bindings/pybind11/include/pybind11/pybind11.h	/^auto method_adaptor(Return (Class::*pmf)(Args...) const) -> Return (Derived::*)(Args...) const {$/;"	f
Return	python_bindings/pybind11/include/pybind11/pybind11.h	/^auto method_adaptor(Return (Class::*pmf)(Args...)) -> Return (Derived::*)(Args...) {$/;"	f
ReturnSentinel	test/gtest/gtest.h	/^    explicit ReturnSentinel(DeathTest* test) : test_(test) { }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
ReturnSentinel	test/gtest/gtest.h	/^  class ReturnSentinel {$/;"	c	class:testing::internal::DeathTest
ReverseConstIterable	include/taco/util/collections.h	/^  ReverseConstIterable(const Collection &c) : c(c) {}$/;"	f	class:taco::util::ReverseConstIterable
ReverseConstIterable	include/taco/util/collections.h	/^class ReverseConstIterable {$/;"	c	namespace:taco::util
ReverseIterable	include/taco/util/collections.h	/^  ReverseIterable(Collection &c) : c(c) {}$/;"	f	class:taco::util::ReverseIterable
ReverseIterable	include/taco/util/collections.h	/^class ReverseIterable {$/;"	c	namespace:taco::util
RightShift	test/tests-lower.cpp	/^struct RightShift{$/;"	s	namespace:taco::test	file:
RmDir	test/gtest/gtest.h	/^inline int RmDir(const char* dir) { return _rmdir(dir); }$/;"	f	namespace:std::tr1::posix
Run	test/gtest/gtest-all.cc	/^int UnitTest::Run() {$/;"	f	class:testing::UnitTest
Run	test/gtest/gtest-all.cc	/^void Test::Run() {$/;"	f	class:testing::Test
Run	test/gtest/gtest-all.cc	/^void TestCase::Run() {$/;"	f	class:testing::TestCase
Run	test/gtest/gtest-all.cc	/^void TestInfo::Run() {$/;"	f	class:testing::TestInfo
Run	test/gtest/gtest.h	/^    virtual void Run() {$/;"	f	class:std::tr1::ThreadWithParam::RunnableImpl
Run	test/gtest/gtest.h	/^  virtual void Run() {$/;"	f	class:std::tr1::ThreadWithParam
RunAllTests	test/gtest/gtest-all.cc	/^bool UnitTestImpl::RunAllTests() {$/;"	f	class:testing::internal::UnitTestImpl
RunSetUpTestCase	test/gtest/gtest.h	/^  void RunSetUpTestCase() { (*set_up_tc_)(); }$/;"	f	class:testing::TestCase
RunTearDownTestCase	test/gtest/gtest.h	/^  void RunTearDownTestCase() { (*tear_down_tc_)(); }$/;"	f	class:testing::TestCase
Runnable	test/gtest/gtest.h	/^  class Runnable {$/;"	c	class:std::tr1::ThreadWithParamBase
RunnableImpl	test/gtest/gtest.h	/^    RunnableImpl(UserThreadFunc* func, T param)$/;"	f	class:std::tr1::ThreadWithParam::RunnableImpl
RunnableImpl	test/gtest/gtest.h	/^  class RunnableImpl : public Runnable {$/;"	c	class:std::tr1::ThreadWithParam
Runtime	include/taco/ir/ir.h	/^enum class LoopKind {Serial, Static, Dynamic, Runtime, Vectorized, Static_Chunked};$/;"	m	class:taco::ir::LoopKind
SCOPED_TRACE	test/gtest/gtest.h	/^#define SCOPED_TRACE(/;"	d
SDist	python_bindings/pybind11/setup.py	/^class SDist(setuptools.command.sdist.sdist):$/;"	c
SET_TEST_VALS	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^#define SET_TEST_VALS(/;"	d	file:
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/apps/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/apps/tensor_times_vector/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/test/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/tools/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SINGLETON	include/taco/util/singleton.h	/^#define SINGLETON(/;"	d
SKIP_TZ_ENV_ON_WIN	python_bindings/pybind11/tests/test_chrono.py	/^SKIP_TZ_ENV_ON_WIN = pytest.mark.skipif($/;"	v
SOURCEDIR	python_bindings/Makefile	/^SOURCEDIR     = source$/;"	m
SPHINXBUILD	python_bindings/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXBUILD	python_bindings/pybind11/docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXOPTS	python_bindings/Makefile	/^SPHINXOPTS    =$/;"	m
SPHINXOPTS	python_bindings/pybind11/docs/Makefile	/^SPHINXOPTS    =$/;"	m
SPLIT	include/taco/index_notation/provenance_graph.h	/^enum IndexVarRelType {UNDEFINED, SPLIT, DIVIDE, POS, FUSE, BOUND, PRECOMPUTE};$/;"	e	enum:taco::IndexVarRelType
SRC_UTIL_ENV_H_	include/taco/util/env.h	/^#define SRC_UTIL_ENV_H_$/;"	d
STRINGIFY	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	include/taco/util/strings.h	/^#define STRINGIFY(/;"	d
STRINGIFY	test/test.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SUB	include/taco/index_notation/index_notation_printer.h	/^    SUB = 6,$/;"	m	class:taco::IndexNotationPrinter::Precedence
SUB	include/taco/ir/ir_printer.h	/^    SUB = 6,$/;"	e	enum:taco::ir::IRPrinter::Precedence
SUBSTITUTE_EXPR	src/index_notation/index_notation_rewriter.cpp	/^#define SUBSTITUTE_EXPR /;"	d	file:
SUBSTITUTE_STMT	src/index_notation/index_notation_rewriter.cpp	/^#define SUBSTITUTE_STMT /;"	d	file:
SUCCEED	test/gtest/gtest.h	/^# define SUCCEED(/;"	d
SanitizedString	python_bindings/pybind11/tests/conftest.py	/^class SanitizedString(object):$/;"	c
ScalarAccess	include/taco/tensor.h	/^  ScalarAccess(TensorBase * tensor, const std::vector<int>& indices)$/;"	f	struct:taco::ScalarAccess
ScalarAccess	include/taco/tensor.h	/^struct ScalarAccess {$/;"	s	namespace:taco
ScalarTensorTest	test/tests-tensor_types.cpp	/^TYPED_TEST_CASE_P(ScalarTensorTest);$/;"	v
ScalarTensorTest	test/tests-tensor_types.cpp	/^template <typename T> class ScalarTensorTest : public ::testing::Test {};$/;"	c	file:
ScalarValueTensorTest	test/tests-tensor_types.cpp	/^TYPED_TEST_CASE_P(ScalarValueTensorTest);$/;"	v
ScalarValueTensorTest	test/tests-tensor_types.cpp	/^template <typename T> class ScalarValueTensorTest : public ::testing::Test {};$/;"	c	file:
Schedule	include/taco/index_notation/schedule.h	/^class Schedule {$/;"	c	namespace:taco
Schedule	src/index_notation/schedule.cpp	/^Schedule::Schedule() : content(new Content) {$/;"	f	class:taco::Schedule
ScheduleParser	src/parser/schedule_parser.cpp	/^vector<vector<string>> ScheduleParser(const string argValue) {$/;"	f	namespace:taco::parser
Scope	include/taco/ir/ir.h	/^  Scope,$/;"	m	class:taco::ir::IRNodeType
Scope	include/taco/ir/ir.h	/^struct Scope : public StmtNode<Scope> {$/;"	s	namespace:taco::ir
ScopedFakeTestPartResultReporter	test/gtest/gtest-all.cc	/^ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter($/;"	f	class:testing::ScopedFakeTestPartResultReporter
ScopedFakeTestPartResultReporter	test/gtest/gtest-all.cc	/^class GTEST_API_ ScopedFakeTestPartResultReporter$/;"	c	namespace:testing	file:
ScopedMap	include/taco/util/scopedmap.h	/^  ScopedMap() {$/;"	f	class:taco::util::ScopedMap
ScopedMap	include/taco/util/scopedmap.h	/^class ScopedMap {$/;"	c	namespace:taco::util
ScopedPrematureExitFile	test/gtest/gtest-all.cc	/^  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)$/;"	f	class:testing::internal::ScopedPrematureExitFile
ScopedPrematureExitFile	test/gtest/gtest-all.cc	/^class ScopedPrematureExitFile {$/;"	c	namespace:testing::internal	file:
ScopedSet	include/taco/util/scopedset.h	/^  ScopedSet() {$/;"	f	class:taco::util::ScopedSet
ScopedSet	include/taco/util/scopedset.h	/^class ScopedSet {$/;"	c	namespace:taco::util
ScopedTrace	test/gtest/gtest.h	/^class GTEST_API_ ScopedTrace {$/;"	c	namespace:testing::internal
Send	test/gtest/gtest-all.cc	/^    virtual void Send(const string& message) {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
SendLn	test/gtest/gtest-all.cc	/^    void SendLn(const string& message) {$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
SendLn	test/gtest/gtest-all.cc	/^  void SendLn(const string& message) { socket_writer_->SendLn(message); }$/;"	f	class:testing::internal::StreamingListener	file:
Sequence	include/taco/index_notation/index_notation.h	/^class Sequence : public IndexStmt {$/;"	c	namespace:taco
Sequence	src/index_notation/index_notation.cpp	/^Sequence::Sequence(IndexStmt definition, IndexStmt mutation)$/;"	f	class:taco::Sequence
Sequence	src/index_notation/index_notation.cpp	/^Sequence::Sequence(const SequenceNode* n) :IndexStmt(n) {$/;"	f	class:taco::Sequence
SequenceLike	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^    class SequenceLike:$/;"	c	function:test_sequence_length
SequenceNode	include/taco/index_notation/index_notation_nodes.h	/^  SequenceNode(IndexStmt definition, IndexStmt mutation)$/;"	f	struct:taco::SequenceNode
SequenceNode	include/taco/index_notation/index_notation_nodes.h	/^struct SequenceNode : public IndexStmtNode {$/;"	s	namespace:taco
Serial	include/taco/ir/ir.h	/^enum class LoopKind {Serial, Static, Dynamic, Runtime, Vectorized, Static_Chunked};$/;"	m	class:taco::ir::LoopKind
Set	test/gtest/gtest.h	/^  void Set(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
SetDefaultResultPrinter	test/gtest/gtest-all.cc	/^void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetDefaultXmlGenerator	test/gtest/gtest-all.cc	/^void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetGlobalTestPartResultReporter	test/gtest/gtest-all.cc	/^void UnitTestImpl::SetGlobalTestPartResultReporter($/;"	f	class:testing::internal::UnitTestImpl
SetInjectableArgvs	test/gtest/gtest-all.cc	/^void SetInjectableArgvs(const ::std::vector<testing::internal::string>* argvs) {$/;"	f	namespace:testing::internal
SetParam	test/gtest/gtest.h	/^  static void SetParam(const ParamType* parameter) {$/;"	f	class:testing::WithParamInterface
SetTestPartResultReporterForCurrentThread	test/gtest/gtest-all.cc	/^void UnitTestImpl::SetTestPartResultReporterForCurrentThread($/;"	f	class:testing::internal::UnitTestImpl
SetUp	test/gtest/gtest-all.cc	/^void Test::SetUp() {$/;"	f	class:testing::Test
SetUp	test/gtest/gtest.h	/^  virtual void SetUp() {}$/;"	f	class:testing::Environment
SetUpEnvironment	test/gtest/gtest-all.cc	/^static void SetUpEnvironment(Environment* env) { env->SetUp(); }$/;"	f	namespace:testing::internal
SetUpTestCase	test/gtest/gtest.h	/^  static void SetUpTestCase() {}$/;"	f	class:testing::Test
SetUpTestCaseFunc	test/gtest/gtest.h	/^  typedef internal::SetUpTestCaseFunc SetUpTestCaseFunc;$/;"	t	class:testing::Test
SetUpTestCaseFunc	test/gtest/gtest.h	/^typedef void (*SetUpTestCaseFunc)();$/;"	t	namespace:testing::internal
SetValue	test/gtest/gtest.h	/^  void SetValue(const std::string& new_value) {$/;"	f	class:testing::TestProperty
Setup	test/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Environment
Setup	test/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Test
Setup_should_be_spelled_SetUp	test/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Environment
Setup_should_be_spelled_SetUp	test/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Test
Shape	include/taco/type.h	/^class Shape {$/;"	c	namespace:taco
Shape	src/type.cpp	/^Shape::Shape() {$/;"	f	class:taco::Shape
Shape	src/type.cpp	/^Shape::Shape(initializer_list<Dimension> dimensions) : dimensions(dimensions) {$/;"	f	class:taco::Shape
Shape	src/type.cpp	/^Shape::Shape(std::vector<Dimension> dimensions)  : dimensions(dimensions) {$/;"	f	class:taco::Shape
ShouldRunTest	test/gtest/gtest.h	/^  static bool ShouldRunTest(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
ShouldRunTestCase	test/gtest/gtest-all.cc	/^static bool ShouldRunTestCase(const TestCase* test_case) {$/;"	f	namespace:testing::internal
ShouldRunTestOnShard	test/gtest/gtest-all.cc	/^bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {$/;"	f	namespace:testing::internal
ShouldShard	test/gtest/gtest-all.cc	/^bool ShouldShard(const char* total_shards_env,$/;"	f	namespace:testing::internal
ShouldUseColor	test/gtest/gtest-all.cc	/^bool ShouldUseColor(bool stdout_is_tty) {$/;"	f	namespace:testing::internal
ShowWideCString	test/gtest/gtest-all.cc	/^std::string String::ShowWideCString(const wchar_t * wide_c_str) {$/;"	f	class:testing::internal::String
Shuffle	test/gtest/gtest-all.cc	/^inline void Shuffle(internal::Random* random, std::vector<E>* v) {$/;"	f	namespace:testing::internal
ShuffleRange	test/gtest/gtest-all.cc	/^void ShuffleRange(internal::Random* random, int begin, int end,$/;"	f	namespace:testing::internal
ShuffleTests	test/gtest/gtest-all.cc	/^void TestCase::ShuffleTests(internal::Random* random) {$/;"	f	class:testing::TestCase
ShuffleTests	test/gtest/gtest-all.cc	/^void UnitTestImpl::ShuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
SignAndMagnitudeToBiased	test/gtest/gtest.h	/^  static Bits SignAndMagnitudeToBiased(const Bits &sam) {$/;"	f	class:testing::internal::FloatingPoint
SimpleStruct	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct SimpleStruct {$/;"	s	file:
SimpleStructReordered	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct SimpleStructReordered {$/;"	s	file:
SingleFailureChecker	test/gtest/gtest-all.cc	/^SingleFailureChecker:: SingleFailureChecker($/;"	f	class:testing::internal::SingleFailureChecker
SingleFailureChecker	test/gtest/gtest-all.cc	/^class GTEST_API_ SingleFailureChecker {$/;"	c	namespace:testing::internal	file:
Singleton	include/taco/format.h	/^  static ModeFormat Singleton;   \/\/\/ alias for singleton$/;"	m	class:taco::ModeFormat
Singleton	src/format.cpp	/^const ModeFormat Singleton = ModeFormat::Singleton;$/;"	m	namespace:taco	file:
SingletonModeFormat	include/taco/lower/mode_format_singleton.h	/^class SingletonModeFormat : public ModeFormatImpl {$/;"	c	namespace:taco
SingletonModeFormat	src/lower/mode_format_singleton.cpp	/^SingletonModeFormat::SingletonModeFormat() : $/;"	f	class:taco::SingletonModeFormat
SingletonModeFormat	src/lower/mode_format_singleton.cpp	/^SingletonModeFormat::SingletonModeFormat(bool isFull, bool isOrdered,$/;"	f	class:taco::SingletonModeFormat
Sizeof	include/taco/ir/ir.h	/^  Sizeof,$/;"	m	class:taco::ir::IRNodeType
Sizeof	include/taco/ir/ir.h	/^struct Sizeof : public ExprNode<Sizeof> {$/;"	s	namespace:taco::ir
SkipComma	test/gtest/gtest.h	/^inline const char* SkipComma(const char* str) {$/;"	f	namespace:testing::internal
SkipPrefix	test/gtest/gtest-all.cc	/^bool SkipPrefix(const char* prefix, const char** pstr) {$/;"	f	namespace:testing::internal
SkipSpaces	test/gtest/gtest-all.cc	/^static const char* SkipSpaces(const char* str) {$/;"	f	namespace:testing::internal
SleepMilliseconds	test/gtest/gtest-all.cc	/^void SleepMilliseconds(int n) {$/;"	f	namespace:testing::internal
SleepMilliseconds	test/gtest/gtest.h	/^inline void SleepMilliseconds(int n) {$/;"	f	namespace:std::tr1
SlicingH	include/taco/util/fill.h	/^  SlicingH,$/;"	m	class:taco::util::FillMethod
SlicingV	include/taco/util/fill.h	/^  SlicingV,$/;"	m	class:taco::util::FillMethod
SocketWriter	test/gtest/gtest-all.cc	/^    SocketWriter(const string& host, const string& port)$/;"	f	class:testing::internal::StreamingListener::SocketWriter
SocketWriter	test/gtest/gtest-all.cc	/^  class SocketWriter : public AbstractSocketWriter {$/;"	c	class:testing::internal::StreamingListener	file:
Sort	include/taco/ir/ir.h	/^  Sort,$/;"	m	class:taco::ir::IRNodeType
Sort	include/taco/ir/ir.h	/^struct Sort : public StmtNode<Sort> {$/;"	s	namespace:taco::ir
Sparse	include/taco/format.h	/^  static ModeFormat Sparse;      \/\/\/ alias for compressed$/;"	m	class:taco::ModeFormat
Sparse	include/taco/util/fill.h	/^  Sparse,$/;"	m	class:taco::util::FillMethod
Sparse	src/format.cpp	/^ModeFormat ModeFormat::Sparse = ModeFormat::Compressed;$/;"	m	class:taco::ModeFormat	file:
Sparse	src/format.cpp	/^const ModeFormat Sparse = ModeFormat::Compressed;$/;"	m	namespace:taco	file:
Sparse	test/tests-storage.cpp	/^const auto Sparse = taco::ModeFormat::Sparse;$/;"	v
SpecificFloat	test/tests-type.cpp	/^typedef ::testing::Types<uint8_t, uint16_t, uint32_t, uint64_t> SpecificFloat;$/;"	t	file:
SpecificInts	test/tests-type.cpp	/^typedef ::testing::Types<int8_t, int16_t, int32_t, int64_t> SpecificInts;$/;"	t	file:
SplitRelNode	include/taco/index_notation/provenance_graph.h	/^struct SplitRelNode : public IndexVarRelNode {$/;"	s	namespace:taco
SplitRelNode	src/index_notation/provenance_graph.cpp	/^SplitRelNode::SplitRelNode(IndexVar parentVar, IndexVar outerVar, IndexVar innerVar, size_t splitFactor)$/;"	f	class:taco::SplitRelNode
SplitString	test/gtest/gtest-all.cc	/^static void SplitString(const ::std::string& str, char delimiter,$/;"	f	namespace:testing::internal
Sqrt	include/taco/index_notation/index_notation.h	/^class Sqrt : public IndexExpr {$/;"	c	namespace:taco
Sqrt	include/taco/ir/ir.h	/^  Sqrt,$/;"	m	class:taco::ir::IRNodeType
Sqrt	include/taco/ir/ir.h	/^struct Sqrt : public ExprNode<Sqrt> {$/;"	s	namespace:taco::ir
Sqrt	src/index_notation/index_notation.cpp	/^Sqrt::Sqrt(IndexExpr a) : Sqrt(new SqrtNode(a)) {$/;"	f	class:taco::Sqrt
Sqrt	src/index_notation/index_notation.cpp	/^Sqrt::Sqrt(const SqrtNode* n) : IndexExpr(n) {$/;"	f	class:taco::Sqrt
SqrtNode	include/taco/index_notation/index_notation_nodes.h	/^  SqrtNode(IndexExpr operand) : UnaryExprNode(operand) {}$/;"	f	struct:taco::SqrtNode
SqrtNode	include/taco/index_notation/index_notation_nodes.h	/^struct SqrtNode : public UnaryExprNode {$/;"	s	namespace:taco
StackGrowsDown	test/gtest/gtest-all.cc	/^bool StackGrowsDown() {$/;"	f	namespace:testing::internal
StackLowerThanAddress	test/gtest/gtest-all.cc	/^void StackLowerThanAddress(const void* ptr, bool* result) {$/;"	f	namespace:testing::internal
Start	test/gtest/gtest-all.cc	/^  void Start() { SendLn("gtest_streaming_protocol_version=1.0"); }$/;"	f	class:testing::internal::StreamingListener	file:
StartWatcherThreadFor	test/gtest/gtest-all.cc	/^  static void StartWatcherThreadFor(DWORD thread_id) {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl	file:
Stat	test/gtest/gtest.h	/^inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }$/;"	f	namespace:std::tr1::posix
StatStruct	test/gtest/gtest.h	/^typedef struct _stat StatStruct;$/;"	t	namespace:std::tr1::posix	typeref:struct:std::tr1::posix::_stat
Static	include/taco/ir/ir.h	/^enum class LoopKind {Serial, Static, Dynamic, Runtime, Vectorized, Static_Chunked};$/;"	m	class:taco::ir::LoopKind
Static	include/taco/tensor.h	/^  Static, Dynamic$/;"	m	class:taco::ParallelSchedule
StaticAssertTypeEq	test/gtest/gtest.h	/^bool StaticAssertTypeEq() {$/;"	f	namespace:testing
StaticConstructorSelector	test/gtest/gtest.h	/^  enum StaticConstructorSelector { kStaticMutex = 0 };$/;"	g	class:std::tr1::Mutex
Stmt	include/taco/ir/ir.h	/^  Stmt() : IRHandle() {}$/;"	f	class:taco::ir::Stmt
Stmt	include/taco/ir/ir.h	/^  Stmt(const BaseStmtNode* stmt) : IRHandle(stmt) {}$/;"	f	class:taco::ir::Stmt
Stmt	include/taco/ir/ir.h	/^class Stmt : public IRHandle {$/;"	c	namespace:taco::ir
StmtNode	include/taco/ir/ir.h	/^struct StmtNode : public BaseStmtNode {$/;"	s	namespace:taco::ir
Store	include/taco/ir/ir.h	/^  Store,$/;"	m	class:taco::ir::IRNodeType
Store	include/taco/ir/ir.h	/^struct Store : public StmtNode<Store> {$/;"	s	namespace:taco::ir
StrCaseCmp	test/gtest/gtest.h	/^inline int StrCaseCmp(const char* s1, const char* s2) {$/;"	f	namespace:std::tr1::posix
StrDup	test/gtest/gtest.h	/^inline char* StrDup(const char* src) { return _strdup(src); }$/;"	f	namespace:std::tr1::posix
StrDup	test/gtest/gtest.h	/^inline char* StrDup(const char* src) { return strdup(src); }$/;"	f	namespace:std::tr1::posix
StrError	test/gtest/gtest.h	/^inline const char* StrError(int errnum) { return strerror(errnum); }$/;"	f	namespace:std::tr1::posix
StrIssue	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    StrIssue(int i) : val{i} {}$/;"	f	struct:StrIssue
StrIssue	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^struct StrIssue {$/;"	s	file:
StrNCpy	test/gtest/gtest.h	/^inline const char* StrNCpy(char* dest, const char* src, size_t n) {$/;"	f	namespace:std::tr1::posix
StreamHelper	test/gtest/gtest.h	/^  inline void StreamHelper(internal::false_type \/*is_pointer*\/,$/;"	f	class:testing::Message
StreamHelper	test/gtest/gtest.h	/^  inline void StreamHelper(internal::true_type \/*is_pointer*\/, T* pointer) {$/;"	f	class:testing::Message
StreamWideCharsToMessage	test/gtest/gtest-all.cc	/^static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,$/;"	f	namespace:testing::internal
StreamableToString	test/gtest/gtest.h	/^std::string StreamableToString(const T& streamable) {$/;"	f	namespace:testing::internal
StreamingListener	test/gtest/gtest-all.cc	/^  StreamingListener(const string& host, const string& port)$/;"	f	class:testing::internal::StreamingListener
StreamingListener	test/gtest/gtest-all.cc	/^  explicit StreamingListener(AbstractSocketWriter* socket_writer)$/;"	f	class:testing::internal::StreamingListener
StreamingListener	test/gtest/gtest-all.cc	/^class StreamingListener : public EmptyTestEventListener {$/;"	c	namespace:testing::internal	file:
String	test/gtest/gtest.h	/^class GTEST_API_ String {$/;"	c	namespace:testing::internal
StringFromGTestEnv	test/gtest/gtest-all.cc	/^const char* StringFromGTestEnv(const char* flag, const char* default_value) {$/;"	f	namespace:testing::internal
StringIO	python_bindings/pybind11/tests/test_iostream.py	/^        from StringIO import StringIO$/;"	i
StringIO	python_bindings/pybind11/tests/test_iostream.py	/^        from cStringIO import StringIO$/;"	i
StringIO	python_bindings/pybind11/tests/test_iostream.py	/^    from io import StringIO$/;"	i
StringStreamToString	test/gtest/gtest-all.cc	/^std::string StringStreamToString(::std::stringstream* ss) {$/;"	f	namespace:testing::internal
StringStruct	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct StringStruct {$/;"	s	file:
Strings	test/gtest/gtest.h	/^typedef ::std::vector<string> Strings;$/;"	t	namespace:testing::internal
Sub	include/taco/index_notation/index_notation.h	/^class Sub : public IndexExpr {$/;"	c	namespace:taco
Sub	include/taco/ir/ir.h	/^  Sub,$/;"	m	class:taco::ir::IRNodeType
Sub	include/taco/ir/ir.h	/^struct Sub : public ExprNode<Sub> {$/;"	s	namespace:taco::ir
Sub	src/index_notation/index_notation.cpp	/^Sub::Sub() : Sub(new SubNode) {$/;"	f	class:taco::Sub
Sub	src/index_notation/index_notation.cpp	/^Sub::Sub(IndexExpr a, IndexExpr b) : Sub(new SubNode(a, b)) {$/;"	f	class:taco::Sub
Sub	src/index_notation/index_notation.cpp	/^Sub::Sub(const SubNode* n) : IndexExpr(n) {$/;"	f	class:taco::Sub
SubAliased	python_bindings/pybind11/tests/test_class.py	/^    class SubAliased(m.AliasedHasOpNewDelSize):$/;"	c	function:test_operator_new_delete
SubExprVisitor	src/lower/expr_tools.cpp	/^  SubExprVisitor(const vector<IndexVar>& vars) {$/;"	f	class:taco::SubExprVisitor
SubExprVisitor	src/lower/expr_tools.cpp	/^class SubExprVisitor : public IndexExprVisitorStrict {$/;"	c	namespace:taco	file:
SubNode	include/taco/index_notation/index_notation_nodes.h	/^  SubNode() : BinaryExprNode() {}$/;"	f	struct:taco::SubNode
SubNode	include/taco/index_notation/index_notation_nodes.h	/^  SubNode(IndexExpr a, IndexExpr b) : BinaryExprNode(a, b) {}$/;"	f	struct:taco::SubNode
SubNode	include/taco/index_notation/index_notation_nodes.h	/^struct SubNode : public BinaryExprNode {$/;"	s	namespace:taco
SubRegionDef	test/op_factory.h	/^struct SubRegionDef {$/;"	s	namespace:taco
SubTestObject	python_bindings/pybind11/tests/test_pytypes.py	/^    class SubTestObject:$/;"	c	function:test_accessors
SuchThat	include/taco/index_notation/index_notation.h	/^class SuchThat : public IndexStmt {$/;"	c	namespace:taco
SuchThat	src/index_notation/index_notation.cpp	/^SuchThat::SuchThat(IndexStmt stmt, std::vector<IndexVarRel> predicate)$/;"	f	class:taco::SuchThat
SuchThat	src/index_notation/index_notation.cpp	/^SuchThat::SuchThat(const SuchThatNode* n) : IndexStmt(n) {$/;"	f	class:taco::SuchThat
SuchThatNode	include/taco/index_notation/index_notation_nodes.h	/^  SuchThatNode(IndexStmt stmt, std::vector<IndexVarRel> predicate) : stmt(stmt), predicate(predicate) {}$/;"	f	struct:taco::SuchThatNode
SuchThatNode	include/taco/index_notation/index_notation_nodes.h	/^struct SuchThatNode : public IndexStmtNode {$/;"	s	namespace:taco
SumOverTestCaseList	test/gtest/gtest-all.cc	/^static int SumOverTestCaseList(const std::vector<TestCase*>& case_list,$/;"	f	namespace:testing::internal
SuppressEventForwarding	test/gtest/gtest-all.cc	/^void TestEventListeners::SuppressEventForwarding() {$/;"	f	class:testing::TestEventListeners
SuppressTestEventsIfInSubprocess	test/gtest/gtest-all.cc	/^void UnitTestImpl::SuppressTestEventsIfInSubprocess() {$/;"	f	class:testing::internal::UnitTestImpl
Switch	include/taco/ir/ir.h	/^  Switch,$/;"	m	class:taco::ir::IRNodeType
Switch	include/taco/ir/ir.h	/^struct Switch : public StmtNode<Switch> {$/;"	s	namespace:taco::ir
Syntax	python_bindings/pybind11/tools/make_changelog.py	/^from rich.syntax import Syntax$/;"	i
T	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def T(self):$/;"	m	class:tensor
T	test/gtest/gtest.h	/^  static void Print(const T (&a)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalPrinter
T	test/gtest/gtest.h	/^  static void Print(const T (&value)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalTersePrinter
T	test/gtest/gtest.h	/^inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {$/;"	m	namespace:testing::internal
T	test/gtest/gtest.h	/^inline void CopyArray(const T(&from)[N], U(*to)[N]) {$/;"	m	namespace:testing::internal
T	test/gtest/gtest.h	/^internal::ParamGenerator<T> ValuesIn(const T (&array)[N]);$/;"	m	namespace:testing
TACO_AVAILABLE_EXPRS_H	src/lower/expr_tools.h	/^#define TACO_AVAILABLE_EXPRS_H$/;"	d
TACO_BACKEND_CUDA_H	src/codegen/codegen_cuda.h	/^#define TACO_BACKEND_CUDA_H$/;"	d
TACO_BACKEND_C_H	src/codegen/codegen_c.h	/^#define TACO_BACKEND_C_H$/;"	d
TACO_CODEGEN_H	src/codegen/codegen.h	/^#define TACO_CODEGEN_H$/;"	d
TACO_COMPONENT_H	include/taco/component.h	/^#define TACO_COMPONENT_H$/;"	d
TACO_COORDINATE_H	include/taco/coordinate.h	/^#define TACO_COORDINATE_H$/;"	d
TACO_DATATYPES_H	python_bindings/include/pyDatatypes.h	/^#define TACO_DATATYPES_H$/;"	d
TACO_EINSUM_PARSER_H	include/taco/parser/einsum_parser.h	/^#define TACO_EINSUM_PARSER_H$/;"	d
TACO_ERROR_CHECKS_H	src/error/error_checks.h	/^#define TACO_ERROR_CHECKS_H$/;"	d
TACO_ERROR_H	include/taco/error.h	/^#define TACO_ERROR_H$/;"	d
TACO_ERROR_MESSAGES_H	include/taco/error/error_messages.h	/^#define TACO_ERROR_MESSAGES_H$/;"	d
TACO_EXPR_FACTORY_H	test/expr_factory.h	/^#define TACO_EXPR_FACTORY_H$/;"	d
TACO_FILE_IO_MTX_H	include/taco/storage/file_io_mtx.h	/^#define TACO_FILE_IO_MTX_H$/;"	d
TACO_FILE_IO_RB_H	include/taco/storage/file_io_rb.h	/^#define TACO_FILE_IO_RB_H$/;"	d
TACO_FILE_IO_TNS_H	include/taco/storage/file_io_tns.h	/^#define TACO_FILE_IO_TNS_H$/;"	d
TACO_FORMAT_H	include/taco/format.h	/^#define TACO_FORMAT_H$/;"	d
TACO_FUNCTIONAL_H	include/taco/util/functions.h	/^#define TACO_FUNCTIONAL_H$/;"	d
TACO_INDEX_NOTATION_H	include/taco/index_notation/index_notation.h	/^#define TACO_INDEX_NOTATION_H$/;"	d
TACO_INDEX_NOTATION_NODES_ABSTRACT_H	include/taco/index_notation/index_notation_nodes_abstract.h	/^#define TACO_INDEX_NOTATION_NODES_ABSTRACT_H$/;"	d
TACO_INDEX_NOTATION_NODES_H	include/taco/index_notation/index_notation_nodes.h	/^#define TACO_INDEX_NOTATION_NODES_H$/;"	d
TACO_INDEX_NOTATION_PRINTER_H	include/taco/index_notation/index_notation_printer.h	/^#define TACO_INDEX_NOTATION_PRINTER_H$/;"	d
TACO_INDEX_NOTATION_REWRITER_H	include/taco/index_notation/index_notation_rewriter.h	/^#define TACO_INDEX_NOTATION_REWRITER_H$/;"	d
TACO_INDEX_NOTATION_VISITOR_H	include/taco/index_notation/index_notation_visitor.h	/^#define TACO_INDEX_NOTATION_VISITOR_H$/;"	d
TACO_INTRINSIC_H	include/taco/index_notation/intrinsic.h	/^#define TACO_INTRINSIC_H$/;"	d
TACO_IR_CODEGEN_H	src/ir/ir_generators.h	/^#define TACO_IR_CODEGEN_H$/;"	d
TACO_IR_H	include/taco/ir/ir.h	/^#define TACO_IR_H$/;"	d
TACO_IR_PRINTER_H	include/taco/ir/ir_printer.h	/^#define TACO_IR_PRINTER_H$/;"	d
TACO_IR_REWRITER_H	include/taco/ir/ir_rewriter.h	/^#define TACO_IR_REWRITER_H$/;"	d
TACO_IR_SIMPLIFY_H	include/taco/ir/simplify.h	/^#define TACO_IR_SIMPLIFY_H$/;"	d
TACO_IR_TAGS_H	include/taco/ir_tags.h	/^#define TACO_IR_TAGS_H$/;"	d
TACO_IR_VERIFIER_H	include/taco/ir/ir_verifier.h	/^#define TACO_IR_VERIFIER_H$/;"	d
TACO_IR_VISITOR_H	include/taco/ir/ir_visitor.h	/^#define TACO_IR_VISITOR_H$/;"	d
TACO_ITERATION_ALGEBRA_H	include/taco/index_notation/iteration_algebra.h	/^#define TACO_ITERATION_ALGEBRA_H$/;"	d
TACO_ITERATION_ALGEBRA_PRINTER_H	include/taco/index_notation/iteration_algebra_printer.h	/^#define TACO_ITERATION_ALGEBRA_PRINTER_H$/;"	d
TACO_ITERATION_FOREST_H	src/lower/iteration_forest.h	/^#define TACO_ITERATION_FOREST_H$/;"	d
TACO_ITERATION_GRAPH_H	src/lower/iteration_graph.h	/^#define TACO_ITERATION_GRAPH_H$/;"	d
TACO_KERNEL_H	include/taco/index_notation/kernel.h	/^#define TACO_KERNEL_H$/;"	d
TACO_LEXER_H	include/taco/parser/lexer.h	/^#define TACO_LEXER_H$/;"	d
TACO_LOWERER_IMPL_H	include/taco/lower/lowerer_impl.h	/^#define TACO_LOWERER_IMPL_H$/;"	d
TACO_LOWER_H	include/taco/lower/lower.h	/^#define TACO_LOWER_H$/;"	d
TACO_MERGE_LATTICE_H	include/taco/lower/merge_lattice.h	/^#define TACO_MERGE_LATTICE_H$/;"	d
TACO_MODE_ACCESS_H	src/lower/mode_access.h	/^#define TACO_MODE_ACCESS_H$/;"	d
TACO_MODE_FORMAT_COMPRESSED_H	include/taco/lower/mode_format_compressed.h	/^#define TACO_MODE_FORMAT_COMPRESSED_H$/;"	d
TACO_MODE_FORMAT_DENSE_H	include/taco/lower/mode_format_dense.h	/^#define TACO_MODE_FORMAT_DENSE_H$/;"	d
TACO_MODE_FORMAT_IMPL_H	include/taco/lower/mode_format_impl.h	/^#define TACO_MODE_FORMAT_IMPL_H$/;"	d
TACO_MODE_FORMAT_SINGLETON_H	include/taco/lower/mode_format_singleton.h	/^#define TACO_MODE_FORMAT_SINGLETON_H$/;"	d
TACO_MODE_H	include/taco/lower/mode.h	/^#define TACO_MODE_H$/;"	d
TACO_MODULE_H	include/taco/codegen/module.h	/^#define TACO_MODULE_H$/;"	d
TACO_OPS_H	include/taco/index_notation/tensor_operator.h	/^#define TACO_OPS_H$/;"	d
TACO_OP_FACTORY_H	test/op_factory.h	/^#define TACO_OP_FACTORY_H$/;"	d
TACO_PARSER_H	include/taco/parser/parser.h	/^#define TACO_PARSER_H$/;"	d
TACO_PROPERTIES_H	include/taco/index_notation/properties.h	/^#define TACO_PROPERTIES_H$/;"	d
TACO_PROPERTY_POINTERS_H	include/taco/index_notation/property_pointers.h	/^#define TACO_PROPERTY_POINTERS_H$/;"	d
TACO_PROVENANCE_GRAPH_H	include/taco/index_notation/provenance_graph.h	/^#define TACO_PROVENANCE_GRAPH_H$/;"	d
TACO_PYFORMAT_H	python_bindings/include/pyFormat.h	/^#define TACO_PYFORMAT_H$/;"	d
TACO_PYINDEXNOTATION_H	python_bindings/include/pyIndexNotation.h	/^#define TACO_PYINDEXNOTATION_H$/;"	d
TACO_PYPARSERS_H	python_bindings/include/pyParsers.h	/^#define TACO_PYPARSERS_H$/;"	d
TACO_PYTENSORIO_H	python_bindings/include/pyTensorIO.h	/^#define TACO_PYTENSORIO_H$/;"	d
TACO_PY_EINSUM_H	python_bindings/include/pyeinsum.h	/^#define TACO_PY_EINSUM_H$/;"	d
TACO_PY_TENSOR_H	python_bindings/include/pyTensor.h	/^#define TACO_PY_TENSOR_H$/;"	d
TACO_SCHEDULE_H	include/taco/index_notation/schedule.h	/^#define TACO_SCHEDULE_H$/;"	d
TACO_SCHEDULE_PARSER_H	include/taco/parser/schedule_parser.h	/^#define TACO_SCHEDULE_PARSER_H$/;"	d
TACO_STORAGE_ARRAY_H	include/taco/storage/array.h	/^#define TACO_STORAGE_ARRAY_H$/;"	d
TACO_STORAGE_COORDINATE_H	include/taco/storage/coordinate.h	/^#define TACO_STORAGE_COORDINATE_H$/;"	d
TACO_STORAGE_INDEX_H	include/taco/storage/index.h	/^#define TACO_STORAGE_INDEX_H$/;"	d
TACO_STORAGE_ITERATOR_H	include/taco/lower/iterator.h	/^#define TACO_STORAGE_ITERATOR_H$/;"	d
TACO_STORAGE_PACK_H	include/taco/storage/pack.h	/^#define TACO_STORAGE_PACK_H$/;"	d
TACO_STORAGE_STORAGE_H	include/taco/storage/storage.h	/^#define TACO_STORAGE_STORAGE_H$/;"	d
TACO_STORAGE_TYPED_INDEX_H	include/taco/storage/typed_index.h	/^#define TACO_STORAGE_TYPED_INDEX_H$/;"	d
TACO_STORAGE_TYPED_VALUE_H	include/taco/storage/typed_value.h	/^#define TACO_STORAGE_TYPED_VALUE_H$/;"	d
TACO_STORAGE_TYPED_VECTOR_H	include/taco/storage/typed_vector.h	/^#define TACO_STORAGE_TYPED_VECTOR_H$/;"	d
TACO_TACO_H	include/taco.h	/^#define TACO_TACO_H$/;"	d
TACO_TARGET_H	include/taco/target.h	/^#define TACO_TARGET_H$/;"	d
TACO_TENSOR_H	include/taco/tensor.h	/^#define TACO_TENSOR_H$/;"	d
TACO_TENSOR_PATH_H	src/lower/tensor_path.h	/^#define TACO_TENSOR_PATH_H$/;"	d
TACO_TENSOR_T_DEFINED	include/taco/taco_tensor_t.h	/^#define TACO_TENSOR_T_DEFINED$/;"	d
TACO_TEST_TENSORS_H	test/test_tensors.h	/^#define TACO_TEST_TENSORS_H$/;"	d
TACO_TIME_REPEAT	include/taco/util/timers.h	/^#define TACO_TIME_REPEAT(/;"	d
TACO_TRANSFORMATIONS_H	include/taco/index_notation/transformations.h	/^#define TACO_TRANSFORMATIONS_H$/;"	d
TACO_TYPE_H	include/taco/type.h	/^#define TACO_TYPE_H$/;"	d
TACO_UTIL_BENCHMARK_H	include/taco/util/timers.h	/^#define TACO_UTIL_BENCHMARK_H$/;"	d
TACO_UTIL_COLLECTIONS_H	include/taco/util/collections.h	/^#define TACO_UTIL_COLLECTIONS_H$/;"	d
TACO_UTIL_COMPARABLE_H	include/taco/util/comparable.h	/^#define TACO_UTIL_COMPARABLE_H$/;"	d
TACO_UTIL_FILES_H	include/taco/util/files.h	/^#define TACO_UTIL_FILES_H$/;"	d
TACO_UTIL_FILL_H	include/taco/util/fill.h	/^#define TACO_UTIL_FILL_H$/;"	d
TACO_UTIL_INTRUSIVE_PTR_H	include/taco/util/intrusive_ptr.h	/^#define TACO_UTIL_INTRUSIVE_PTR_H$/;"	d
TACO_UTIL_NAME_GENERATOR_H	include/taco/util/name_generator.h	/^#define TACO_UTIL_NAME_GENERATOR_H$/;"	d
TACO_UTIL_PRINTABLE_H	include/taco/util/printable.h	/^#define TACO_UTIL_PRINTABLE_H$/;"	d
TACO_UTIL_SCOPEDMAP_H	include/taco/util/scopedmap.h	/^#define TACO_UTIL_SCOPEDMAP_H$/;"	d
TACO_UTIL_SCOPEDSET_H	include/taco/util/scopedset.h	/^#define TACO_UTIL_SCOPEDSET_H$/;"	d
TACO_UTIL_STRINGS_H	include/taco/util/strings.h	/^#define TACO_UTIL_STRINGS_H$/;"	d
TACO_UTIL_UNCOPYABLE_H	include/taco/util/uncopyable.h	/^#define TACO_UTIL_UNCOPYABLE_H$/;"	d
TACO_UTIL_VARIADIC_H	include/taco/util/variadic.h	/^#define TACO_UTIL_VARIADIC_H$/;"	d
TEST	test/gtest/gtest.h	/^# define TEST(/;"	d
TEST	test/test-blas.cpp	/^TEST(blasTest, simpleBlasCall) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, Complement) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, DeMorganNestedComplements) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, Intersect) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, Union) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, UnionComplement) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, comparatorComplement) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, comparatorIntersect) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, comparatorMix) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, comparatorRegion) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, comparatorUnion) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, deMorganComplement) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, deMorganIntersect) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, deMorganRegion) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, deMorganUnion) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, flipIntersectToUnion) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, flipUnionToIntersect) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, hiddenIntersect) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, hiddenUnion) {$/;"	f
TEST	test/test-iteration_algebra.cpp	/^TEST(iteration_algebra, region) {$/;"	f
TEST	test/test_properties.cpp	/^TEST(properties, annihilator) {$/;"	f
TEST	test/test_properties.cpp	/^TEST(properties, associative) {$/;"	f
TEST	test/test_properties.cpp	/^TEST(properties, commutative) {$/;"	f
TEST	test/test_properties.cpp	/^TEST(properties, findProperty) {$/;"	f
TEST	test/test_properties.cpp	/^TEST(properties, identity) {$/;"	f
TEST	test/test_properties.cpp	/^TEST(properties, property_conversion) {$/;"	f
TEST	test/tests-copyprop.cpp	/^TEST(expr, simplify_copy) {$/;"	f
TEST	test/tests-copyprop.cpp	/^TEST(expr, simplify_copy_before_update) {$/;"	f
TEST	test/tests-copyprop.cpp	/^TEST(expr, simplify_dont_copy_loop_dependent_var) {$/;"	f
TEST	test/tests-error.cpp	/^TEST(error, assemble_without_compile) {$/;"	f
TEST	test/tests-error.cpp	/^TEST(error, compile_tensor_name_collision) {$/;"	f
TEST	test/tests-error.cpp	/^TEST(error, compile_without_expr) {$/;"	f
TEST	test/tests-error.cpp	/^TEST(error, compute_without_compile) {$/;"	f
TEST	test/tests-error.cpp	/^TEST(error, expr_dimension_mismatch_freevar) {$/;"	f
TEST	test/tests-error.cpp	/^TEST(error, expr_dimension_mismatch_sumvar) {$/;"	f
TEST	test/tests-expr-reduction.cpp	/^TEST(expr, reduction0) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, DISABLED_accumulate) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, indexVarMix) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, indexVarSimple) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, redefine) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, repeated_operand) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, scalarops) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, simplify_add) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, simplify_addmul) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, simplify_elmul) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, simplify_muladd) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, simplify_neg) {$/;"	f
TEST	test/tests-expr.cpp	/^TEST(expr, sub) {$/;"	f
TEST	test/tests-format-mm-permute.cpp	/^TEST(format, DISABLED_mm_permute_formats) {$/;"	f
TEST	test/tests-format.cpp	/^TEST(format, dense) {$/;"	f
TEST	test/tests-format.cpp	/^TEST(format, sparse) {$/;"	f
TEST	test/tests-index.cpp	/^TEST(index, makeCSR) {$/;"	f
TEST	test/tests-index.cpp	/^TEST(index, size) {$/;"	f
TEST	test/tests-index_notation.cpp	/^TEST(notation, funcIsomorphic) {$/;"	f
TEST	test/tests-index_notation.cpp	/^TEST(notation, generatePackCOOStmt) {$/;"	f
TEST	test/tests-index_notation.cpp	/^TEST(notation, isConcreteNotation) {$/;"	f
TEST	test/tests-index_notation.cpp	/^TEST(notation, isEinsumNotation) {$/;"	f
TEST	test/tests-index_notation.cpp	/^TEST(notation, isReductionNotation) {$/;"	f
TEST	test/tests-index_notation.cpp	/^TEST(notation, isomorphic) {$/;"	f
TEST	test/tests-index_notation.cpp	/^TEST(notation, makeReductionNotation) {$/;"	f
TEST	test/tests-indexexpr.cpp	/^TEST(indexexpr, access) {$/;"	f
TEST	test/tests-indexexpr.cpp	/^TEST(indexexpr, add) {$/;"	f
TEST	test/tests-indexexpr.cpp	/^TEST(indexexpr, div) {$/;"	f
TEST	test/tests-indexexpr.cpp	/^TEST(indexexpr, indexvar) {$/;"	f
TEST	test/tests-indexexpr.cpp	/^TEST(indexexpr, literal) {$/;"	f
TEST	test/tests-indexexpr.cpp	/^TEST(indexexpr, mul) {$/;"	f
TEST	test/tests-indexexpr.cpp	/^TEST(indexexpr, neg) {$/;"	f
TEST	test/tests-indexexpr.cpp	/^TEST(indexexpr, sub) {$/;"	f
TEST	test/tests-indexstmt.cpp	/^TEST(indexstmt, assignment) {$/;"	f
TEST	test/tests-indexstmt.cpp	/^TEST(indexstmt, forall) {$/;"	f
TEST	test/tests-indexstmt.cpp	/^TEST(indexstmt, multi) {$/;"	f
TEST	test/tests-indexstmt.cpp	/^TEST(indexstmt, sequence) {$/;"	f
TEST	test/tests-indexstmt.cpp	/^TEST(indexstmt, spmm) {$/;"	f
TEST	test/tests-indexstmt.cpp	/^TEST(indexstmt, where) {$/;"	f
TEST	test/tests-io.cpp	/^TEST(io, mtx) {$/;"	f
TEST	test/tests-io.cpp	/^TEST(io, mtxsymmetric) {$/;"	f
TEST	test/tests-io.cpp	/^TEST(io, tensor) {$/;"	f
TEST	test/tests-io.cpp	/^TEST(io, tns) {$/;"	f
TEST	test/tests-io.cpp	/^TEST(io, ttxdense) {$/;"	f
TEST	test/tests-io.cpp	/^TEST(io, ttxsparse) {$/;"	f
TEST	test/tests-merge_lattice.cpp	/^TEST(merge_lattice, dense_tile) {$/;"	f	namespace:tests
TEST	test/tests-merge_lattice.cpp	/^TEST(merge_lattice, pos) {$/;"	f	namespace:tests
TEST	test/tests-merge_lattice.cpp	/^TEST(merge_lattice, pos_mul_sparse) {$/;"	f	namespace:tests
TEST	test/tests-merge_lattice.cpp	/^TEST(merge_lattice, split) {$/;"	f	namespace:tests
TEST	test/tests-merge_lattice.cpp	/^TEST(merge_lattice, split_pos_sparse) {$/;"	f	namespace:tests
TEST	test/tests-merge_lattice.cpp	/^TEST(merge_lattice, split_sparse) {$/;"	f	namespace:tests
TEST	test/tests-qcd.cpp	/^TEST(DISABLED_qcd, mul3) {$/;"	f
TEST	test/tests-qcd.cpp	/^TEST(qcd, mul0) {$/;"	f
TEST	test/tests-qcd.cpp	/^TEST(qcd, mul1) {$/;"	f
TEST	test/tests-qcd.cpp	/^TEST(qcd, mul2) {$/;"	f
TEST	test/tests-schedule-parser.cpp	/^TEST(schedule_parser, error_reporting) {$/;"	f
TEST	test/tests-schedule-parser.cpp	/^TEST(schedule_parser, normal_operation) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(generate_evaluation_files, DISABLED_cpu) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(generate_evaluation_files, DISABLED_gpu) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(generate_figures, DISABLED_cpu) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, DISABLED_bfsPullScheduled) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, example_spmvCPU_splitpos) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, indexVarSplit) {  $/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, mttkrpCPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, mttkrpGPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, sddmmCPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, sddmmGPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, spmmCPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, spmmDCSRGPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, spmmGPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, spmvCPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, spmvGPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, test_spmvCPU_temp) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, test_sptvCPU_temp) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, ttmCPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, ttmGPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, ttvCPU) {$/;"	f
TEST	test/tests-scheduling-eval.cpp	/^TEST(scheduling_eval, ttvGPU) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, dense_pos_error) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, divide) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, forallReplace) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, fuseDenseLoops) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, lowerDenseMatrixMul) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, lowerSparseAddSparse) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, lowerSparseCopy) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, lowerSparseMatrixMul) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, lowerSparseMulDense) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, lowerSparseMulSparse) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, multilevel_tiling) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, parallelizeAtomicReduction) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, parallelizeTemporaryReduction) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, pos_mul_dense) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, pos_mul_dense_split) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, pos_mul_sparse) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, pos_noop) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, pos_tile_coord_and_pos) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, pos_var_not_in_access) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, pos_wrong_access) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, splitEquality) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, splitIndexStmt) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling, spmv_warp_per_row) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling_eval_test, indexVarReorder) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling_eval_test, indexVarSplit) {$/;"	f
TEST	test/tests-scheduling.cpp	/^TEST(scheduling_eval_test, spmv_fuse) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, automatic_pack_before_const_iteration) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, automatic_pack_before_iteration) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, cache) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, computation_dependency_modification) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, double_scalar) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, double_vector) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, duplicates) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, duplicates_scalar) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, explicit_compiler_methods) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, get_value) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, hidden_compiler_methods) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, hidden_pack) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, iterate) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, iterate_empty) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, non_zero_fill) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, old_dependency_modification) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, operator_parens_insertion) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, recompile) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, scalar_type_correct) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, set_from_components) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, skip_recompile) {$/;"	f
TEST	test/tests-tensor.cpp	/^TEST(tensor, transpose) {$/;"	f
TEST	test/tests-tensor_types.cpp	/^TEST(DISABLED_tensor_types, complex_mul_scalar) {$/;"	f
TEST	test/tests-tensor_types.cpp	/^TEST(DISABLED_tensor_types, coordinate_types) {$/;"	f
TEST	test/tests-tensor_types.cpp	/^TEST(tensor_types, complex_accumulate) {$/;"	f
TEST	test/tests-tensor_types.cpp	/^TEST(tensor_types, complex_add) {$/;"	f
TEST	test/tests-tensor_types.cpp	/^TEST(tensor_types, complex_available_expr) {$/;"	f
TEST	test/tests-tensor_types.cpp	/^TEST(tensor_types, complex_mul_complex) {$/;"	f
TEST	test/tests-tensor_types.cpp	/^TEST(tensor_types, float_double_promotion) {$/;"	f
TEST	test/tests-tensor_types.cpp	/^TEST(tensor_types, int_float_promotion) {$/;"	f
TEST	test/tests-transformation.cpp	/^TEST(schedule, workspace_spmspm) {$/;"	f	namespace:test
TEST	test/tests-transpose.cpp	/^TEST(DISABLED_lower, transpose) {$/;"	f
TEST	test/tests-transpose.cpp	/^TEST(DISABLED_lower, transpose2) {$/;"	f
TEST	test/tests-transpose.cpp	/^TEST(DISABLED_lower, transpose3) {$/;"	f
TEST	test/tests-transpose.cpp	/^TEST(lower, denseIterationTranspose) {$/;"	f
TEST	test/tests-type.cpp	/^TEST(type, Dimension) {$/;"	f
TEST	test/tests-type.cpp	/^TEST(type, Shape) {$/;"	f
TEST	test/tests-type.cpp	/^TEST(type, TensorType) {$/;"	f
TEST	test/tests-type.cpp	/^TEST(type, equality) {$/;"	f
TEST	test/tests-windowing.cpp	/^TEST(windowing, boundsChecks) {$/;"	f
TEST	test/tests-windowing.cpp	/^TEST(windowing, lhsIndexSet) {$/;"	f
TEST	test/tests-windowing.cpp	/^TEST(windowing, mixIndexing) {$/;"	f
TEST	test/tests-windowing.cpp	/^TEST(windowing, sliceMultipleWays) {$/;"	f
TEST	test/tests-windowing.cpp	/^TEST(windowing, transformations) {$/;"	f
TEST	test/tests-workspaces.cpp	/^TEST(workspaces, tile_denseMatMul) {$/;"	f
TEST	test/tests-workspaces.cpp	/^TEST(workspaces, tile_vecElemMul_NoTail) {$/;"	f
TEST	test/tests-workspaces.cpp	/^TEST(workspaces, tile_vecElemMul_Tail1) {$/;"	f
TEST	test/tests-workspaces.cpp	/^TEST(workspaces, tile_vecElemMul_Tail2) {$/;"	f
TEST_DID_NOT_DIE	test/gtest/gtest.h	/^    TEST_DID_NOT_DIE$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_ENCOUNTERED_RETURN_STATEMENT	test/gtest/gtest.h	/^    TEST_ENCOUNTERED_RETURN_STATEMENT,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_F	test/gtest/gtest.h	/^#define TEST_F(/;"	d
TEST_H	test/test.h	/^#define TEST_H$/;"	d
TEST_P	test/gtest/gtest.h	/^# define TEST_P(/;"	d
TEST_P	test/tests-api.cpp	/^TEST_P(apiget, api) {$/;"	f
TEST_P	test/tests-api.cpp	/^TEST_P(apiset, api) {$/;"	f
TEST_P	test/tests-api.cpp	/^TEST_P(apitns, api) {$/;"	f
TEST_P	test/tests-api.cpp	/^TEST_P(apiwmtx, api) {$/;"	f
TEST_P	test/tests-api.cpp	/^TEST_P(apiwrb, api) {$/;"	f
TEST_P	test/tests-expr_storage.cpp	/^TEST_P(expr, storage) {$/;"	f	namespace:expr_storage_tests
TEST_P	test/tests-format.cpp	/^TEST_P(format, pack) {$/;"	f
TEST_P	test/tests-index_notation.cpp	/^TEST_P(concrete, notation) {$/;"	f
TEST_P	test/tests-lower.cpp	/^TEST_P(lower, compile) {$/;"	f	namespace:taco::test
TEST_P	test/tests-merge_lattice.cpp	/^TEST_P(merge_lattice, test) {$/;"	f	namespace:tests
TEST_P	test/tests-parafac.cpp	/^TEST_P(parafac, eval) {$/;"	f
TEST_P	test/tests-storage.cpp	/^TEST_P(storage, pack) {$/;"	f
TEST_P	test/tests-storage_alloc.cpp	/^TEST_P(alloc, storage) {$/;"	f	namespace:storage_alloc_tests
TEST_P	test/tests-transformation.cpp	/^TEST_P(apply, transformations) {$/;"	f	namespace:test
TEST_P	test/tests-transformation.cpp	/^TEST_P(insertTemporaries, test) {$/;"	f	namespace:test
TEST_P	test/tests-transformation.cpp	/^TEST_P(precondition, transformations) {$/;"	f	namespace:test
TEST_P	test/tests-transformation.cpp	/^TEST_P(reorderLoopsTopologically, test) {$/;"	f	namespace:test
TEST_P	test/tests-windowing.cpp	/^TEST_P(assignment, windowing) {$/;"	f
TEST_P	test/tests-windowing.cpp	/^TEST_P(basic, windowing){$/;"	f
TEST_P	test/tests-windowing.cpp	/^TEST_P(cuda, windowing) {$/;"	f
TEST_P	test/tests-windowing.cpp	/^TEST_P(indexSetMatrices, windowing) {$/;"	f
TEST_P	test/tests-windowing.cpp	/^TEST_P(indexSetVectors, windowing) {$/;"	f
TEST_P	test/tests-windowing.cpp	/^TEST_P(matrixMultiply, windowing) {$/;"	f
TEST_P	test/tests-windowing.cpp	/^TEST_P(slicedOutput, windowing) {$/;"	f
TEST_P	test/tests-windowing.cpp	/^TEST_P(stride, windowing) {$/;"	f
TEST_P	test/tests-windowing.cpp	/^TEST_P(workspace, windowing) {$/;"	f
TEST_STMT	test/tests-lower.cpp	/^#define TEST_STMT(/;"	d	file:
TEST_SUBMODULE	python_bindings/pybind11/tests/pybind11_tests.h	/^#define TEST_SUBMODULE(/;"	d
TEST_SUBMODULE	python_bindings/pybind11/tests/test_async.cpp	/^TEST_SUBMODULE(async_module, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_buffers.cpp	/^TEST_SUBMODULE(buffers, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^TEST_SUBMODULE(builtin_casters, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_call_policies.cpp	/^TEST_SUBMODULE(call_policies, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_callbacks.cpp	/^TEST_SUBMODULE(callbacks, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_chrono.cpp	/^TEST_SUBMODULE(chrono, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_class.cpp	/^TEST_SUBMODULE(class_, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^TEST_SUBMODULE(constants_and_functions, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_copy_move.cpp	/^TEST_SUBMODULE(copy_move_policies, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^TEST_SUBMODULE(custom_type_casters, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_docstring_options.cpp	/^TEST_SUBMODULE(docstring_options, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_eigen.cpp	/^TEST_SUBMODULE(eigen, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_enum.cpp	/^TEST_SUBMODULE(enums, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_eval.cpp	/^TEST_SUBMODULE(eval_, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_exceptions.cpp	/^TEST_SUBMODULE(exceptions, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^TEST_SUBMODULE(factory_constructors, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_gil_scoped.cpp	/^TEST_SUBMODULE(gil_scoped, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_iostream.cpp	/^TEST_SUBMODULE(iostream, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_kwargs_and_defaults.cpp	/^TEST_SUBMODULE(kwargs_and_defaults, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_local_bindings.cpp	/^TEST_SUBMODULE(local_bindings, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^TEST_SUBMODULE(methods_and_attributes, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_modules.cpp	/^TEST_SUBMODULE(modules, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^TEST_SUBMODULE(multiple_inheritance, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_numpy_array.cpp	/^TEST_SUBMODULE(numpy_array, sm) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^TEST_SUBMODULE(numpy_dtypes, m) {$/;"	f	class:E1	file:
TEST_SUBMODULE	python_bindings/pybind11/tests/test_numpy_vectorize.cpp	/^TEST_SUBMODULE(numpy_vectorize, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_opaque_types.cpp	/^TEST_SUBMODULE(opaque_types, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^TEST_SUBMODULE(operators, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_pickling.cpp	/^TEST_SUBMODULE(pickling, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_pytypes.cpp	/^TEST_SUBMODULE(pytypes, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_sequences_and_iterators.cpp	/^TEST_SUBMODULE(sequences_and_iterators, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^TEST_SUBMODULE(smart_ptr, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_stl.cpp	/^TEST_SUBMODULE(stl, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_stl_binders.cpp	/^TEST_SUBMODULE(stl_binders, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^TEST_SUBMODULE(tagbased_polymorphic, m) {$/;"	f	struct:Animal
TEST_SUBMODULE	python_bindings/pybind11/tests/test_union.cpp	/^TEST_SUBMODULE(union_, m) {$/;"	f
TEST_SUBMODULE	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^TEST_SUBMODULE(virtual_functions, m) {$/;"	f
TEST_THREW_EXCEPTION	test/gtest/gtest.h	/^    TEST_THREW_EXCEPTION,$/;"	e	enum:testing::internal::DeathTest::AbortReason
THREW	test/gtest/gtest-all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
TOOL_BENCHMARK_REPEAT	tools/taco.cpp	/^#define TOOL_BENCHMARK_REPEAT(/;"	d	file:
TOOL_BENCHMARK_TIMER	tools/taco.cpp	/^#define TOOL_BENCHMARK_TIMER(/;"	d	file:
TOP	include/taco/index_notation/index_notation_printer.h	/^    TOP = 20$/;"	m	class:taco::IndexNotationPrinter::Precedence
TOP	include/taco/index_notation/iteration_algebra_printer.h	/^    TOP = 20$/;"	m	class:taco::IterationAlgebraPrinter::Precedence
TOP	include/taco/ir/ir_printer.h	/^    TOP = 20$/;"	e	enum:taco::ir::IRPrinter::Precedence
TO_STRING	include/taco/util/strings.h	/^#define TO_STRING(/;"	d
TYPED_TEST	test/gtest/gtest.h	/^# define TYPED_TEST(/;"	d
TYPED_TEST_CASE	test/gtest/gtest.h	/^# define TYPED_TEST_CASE(/;"	d
TYPED_TEST_CASE_P	test/gtest/gtest.h	/^# define TYPED_TEST_CASE_P(/;"	d
TYPED_TEST_P	test/gtest/gtest.h	/^# define TYPED_TEST_P(/;"	d
TYPED_TEST_P	test/tests-tensor_types.cpp	/^TYPED_TEST_P(AddTensorTest, types) {$/;"	f
TYPED_TEST_P	test/tests-tensor_types.cpp	/^TYPED_TEST_P(IterateTensorTest, types) {$/;"	f
TYPED_TEST_P	test/tests-tensor_types.cpp	/^TYPED_TEST_P(MulTensorTest, types) {$/;"	f
TYPED_TEST_P	test/tests-tensor_types.cpp	/^TYPED_TEST_P(ScalarTensorTest, types) {$/;"	f
TYPED_TEST_P	test/tests-tensor_types.cpp	/^TYPED_TEST_P(ScalarValueTensorTest, types) {$/;"	f
TYPED_TEST_P	test/tests-tensor_types.cpp	/^TYPED_TEST_P(VectorTensorTest, types) {$/;"	f
TYPED_TEST_P	test/tests-type.cpp	/^TYPED_TEST_P(FloatTest, types) {$/;"	f
TYPED_TEST_P	test/tests-type.cpp	/^TYPED_TEST_P(IntTest, types) {$/;"	f
TYPED_TEST_P	test/tests-type.cpp	/^TYPED_TEST_P(UIntTest, types) {$/;"	f
TacoException	include/taco/error.h	/^class TacoException : public std::exception{$/;"	c	namespace:taco
TacoException	src/error.cpp	/^TacoException::TacoException(std::string msg) : message(msg) {}$/;"	f	class:taco::TacoException
Tail	test/gtest/gtest.h	/^      T14> Tail;$/;"	t	struct:testing::internal::Templates14
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Templates27
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Templates26
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Templates25
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Templates24
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Templates23
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Templates22
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Templates21
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Templates20
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Templates19
Tail	test/gtest/gtest.h	/^      T15, T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Templates18
Tail	test/gtest/gtest.h	/^      T15, T16, T17> Tail;$/;"	t	struct:testing::internal::Templates17
Tail	test/gtest/gtest.h	/^      T15, T16> Tail;$/;"	t	struct:testing::internal::Templates16
Tail	test/gtest/gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Templates15
Tail	test/gtest/gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Types15
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> Tail;$/;"	t	struct:testing::internal::Types28
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Types27
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Types26
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Types25
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Types24
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Types23
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Types22
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Types21
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Types20
Tail	test/gtest/gtest.h	/^      T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Types19
Tail	test/gtest/gtest.h	/^      T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Types18
Tail	test/gtest/gtest.h	/^      T16, T17> Tail;$/;"	t	struct:testing::internal::Types17
Tail	test/gtest/gtest.h	/^      T16> Tail;$/;"	t	struct:testing::internal::Types16
Tail	test/gtest/gtest.h	/^      T28> Tail;$/;"	t	struct:testing::internal::Templates28
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Templates41
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Templates40
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Templates39
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Templates38
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Templates37
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Templates36
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Templates35
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Templates34
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Templates33
Tail	test/gtest/gtest.h	/^      T29, T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Templates32
Tail	test/gtest/gtest.h	/^      T29, T30, T31> Tail;$/;"	t	struct:testing::internal::Templates31
Tail	test/gtest/gtest.h	/^      T29, T30> Tail;$/;"	t	struct:testing::internal::Templates30
Tail	test/gtest/gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Templates29
Tail	test/gtest/gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Types29
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> Tail;$/;"	t	struct:testing::internal::Types42
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Types41
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Types40
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Types39
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Types38
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Types37
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Types36
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Types35
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Types34
Tail	test/gtest/gtest.h	/^      T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Types33
Tail	test/gtest/gtest.h	/^      T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Types32
Tail	test/gtest/gtest.h	/^      T30, T31> Tail;$/;"	t	struct:testing::internal::Types31
Tail	test/gtest/gtest.h	/^      T30> Tail;$/;"	t	struct:testing::internal::Types30
Tail	test/gtest/gtest.h	/^      T42> Tail;$/;"	t	struct:testing::internal::Templates42
Tail	test/gtest/gtest.h	/^      T43, T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Templates50
Tail	test/gtest/gtest.h	/^      T43, T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Templates49
Tail	test/gtest/gtest.h	/^      T43, T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Templates48
Tail	test/gtest/gtest.h	/^      T43, T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Templates47
Tail	test/gtest/gtest.h	/^      T43, T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Templates46
Tail	test/gtest/gtest.h	/^      T43, T44, T45> Tail;$/;"	t	struct:testing::internal::Templates45
Tail	test/gtest/gtest.h	/^      T43, T44> Tail;$/;"	t	struct:testing::internal::Templates44
Tail	test/gtest/gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Templates43
Tail	test/gtest/gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Types43
Tail	test/gtest/gtest.h	/^      T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Types50
Tail	test/gtest/gtest.h	/^      T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Types49
Tail	test/gtest/gtest.h	/^      T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Types48
Tail	test/gtest/gtest.h	/^      T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Types47
Tail	test/gtest/gtest.h	/^      T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Types46
Tail	test/gtest/gtest.h	/^      T44, T45> Tail;$/;"	t	struct:testing::internal::Types45
Tail	test/gtest/gtest.h	/^      T44> Tail;$/;"	t	struct:testing::internal::Types44
Tail	test/gtest/gtest.h	/^  typedef Templates0 Tail;$/;"	t	struct:testing::internal::Templates1
Tail	test/gtest/gtest.h	/^  typedef Templates10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Templates11
Tail	test/gtest/gtest.h	/^  typedef Templates11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Templates12
Tail	test/gtest/gtest.h	/^  typedef Templates12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Templates13
Tail	test/gtest/gtest.h	/^  typedef Templates1<T2> Tail;$/;"	t	struct:testing::internal::Templates2
Tail	test/gtest/gtest.h	/^  typedef Templates2<T2, T3> Tail;$/;"	t	struct:testing::internal::Templates3
Tail	test/gtest/gtest.h	/^  typedef Templates3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Templates4
Tail	test/gtest/gtest.h	/^  typedef Templates4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Templates5
Tail	test/gtest/gtest.h	/^  typedef Templates5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Templates6
Tail	test/gtest/gtest.h	/^  typedef Templates6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Templates7
Tail	test/gtest/gtest.h	/^  typedef Templates7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Templates8
Tail	test/gtest/gtest.h	/^  typedef Templates8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Templates9
Tail	test/gtest/gtest.h	/^  typedef Templates9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Templates10
Tail	test/gtest/gtest.h	/^  typedef Types0 Tail;$/;"	t	struct:testing::internal::Types1
Tail	test/gtest/gtest.h	/^  typedef Types10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Types11
Tail	test/gtest/gtest.h	/^  typedef Types11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Types12
Tail	test/gtest/gtest.h	/^  typedef Types12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Types13
Tail	test/gtest/gtest.h	/^  typedef Types13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tail;$/;"	t	struct:testing::internal::Types14
Tail	test/gtest/gtest.h	/^  typedef Types1<T2> Tail;$/;"	t	struct:testing::internal::Types2
Tail	test/gtest/gtest.h	/^  typedef Types2<T2, T3> Tail;$/;"	t	struct:testing::internal::Types3
Tail	test/gtest/gtest.h	/^  typedef Types3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Types4
Tail	test/gtest/gtest.h	/^  typedef Types4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Types5
Tail	test/gtest/gtest.h	/^  typedef Types5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Types6
Tail	test/gtest/gtest.h	/^  typedef Types6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Types7
Tail	test/gtest/gtest.h	/^  typedef Types7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Types8
Tail	test/gtest/gtest.h	/^  typedef Types8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Types9
Tail	test/gtest/gtest.h	/^  typedef Types9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Types10
Target	include/taco/target.h	/^  Target(Arch a, OS o) : arch(a), os(o) { $/;"	f	struct:taco::Target
Target	include/taco/target.h	/^struct Target {$/;"	s	namespace:taco
Target	src/target.cpp	/^Target::Target(const std::string &s) {$/;"	f	class:taco::Target
TearDown	test/gtest/gtest-all.cc	/^void Test::TearDown() {$/;"	f	class:testing::Test
TearDown	test/gtest/gtest.h	/^  virtual void TearDown() {}$/;"	f	class:testing::Environment
TearDownEnvironment	test/gtest/gtest-all.cc	/^static void TearDownEnvironment(Environment* env) { env->TearDown(); }$/;"	f	namespace:testing::internal
TearDownTestCase	test/gtest/gtest.h	/^  static void TearDownTestCase() {}$/;"	f	class:testing::Test
TearDownTestCaseFunc	test/gtest/gtest.h	/^  typedef internal::TearDownTestCaseFunc TearDownTestCaseFunc;$/;"	t	class:testing::Test
TearDownTestCaseFunc	test/gtest/gtest.h	/^typedef void (*TearDownTestCaseFunc)();$/;"	t	namespace:testing::internal
TemplateSel	test/gtest/gtest.h	/^struct TemplateSel {$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates {$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, NoneT,$/;"	s	namespace:testing::internal
Templates	test/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing::internal
Templates0	test/gtest/gtest.h	/^struct Templates0 {};$/;"	s	namespace:testing::internal
Templates1	test/gtest/gtest.h	/^struct Templates1 {$/;"	s	namespace:testing::internal
Templates10	test/gtest/gtest.h	/^struct Templates10 {$/;"	s	namespace:testing::internal
Templates11	test/gtest/gtest.h	/^struct Templates11 {$/;"	s	namespace:testing::internal
Templates12	test/gtest/gtest.h	/^struct Templates12 {$/;"	s	namespace:testing::internal
Templates13	test/gtest/gtest.h	/^struct Templates13 {$/;"	s	namespace:testing::internal
Templates14	test/gtest/gtest.h	/^struct Templates14 {$/;"	s	namespace:testing::internal
Templates15	test/gtest/gtest.h	/^struct Templates15 {$/;"	s	namespace:testing::internal
Templates16	test/gtest/gtest.h	/^struct Templates16 {$/;"	s	namespace:testing::internal
Templates17	test/gtest/gtest.h	/^struct Templates17 {$/;"	s	namespace:testing::internal
Templates18	test/gtest/gtest.h	/^struct Templates18 {$/;"	s	namespace:testing::internal
Templates19	test/gtest/gtest.h	/^struct Templates19 {$/;"	s	namespace:testing::internal
Templates2	test/gtest/gtest.h	/^struct Templates2 {$/;"	s	namespace:testing::internal
Templates20	test/gtest/gtest.h	/^struct Templates20 {$/;"	s	namespace:testing::internal
Templates21	test/gtest/gtest.h	/^struct Templates21 {$/;"	s	namespace:testing::internal
Templates22	test/gtest/gtest.h	/^struct Templates22 {$/;"	s	namespace:testing::internal
Templates23	test/gtest/gtest.h	/^struct Templates23 {$/;"	s	namespace:testing::internal
Templates24	test/gtest/gtest.h	/^struct Templates24 {$/;"	s	namespace:testing::internal
Templates25	test/gtest/gtest.h	/^struct Templates25 {$/;"	s	namespace:testing::internal
Templates26	test/gtest/gtest.h	/^struct Templates26 {$/;"	s	namespace:testing::internal
Templates27	test/gtest/gtest.h	/^struct Templates27 {$/;"	s	namespace:testing::internal
Templates28	test/gtest/gtest.h	/^struct Templates28 {$/;"	s	namespace:testing::internal
Templates29	test/gtest/gtest.h	/^struct Templates29 {$/;"	s	namespace:testing::internal
Templates3	test/gtest/gtest.h	/^struct Templates3 {$/;"	s	namespace:testing::internal
Templates30	test/gtest/gtest.h	/^struct Templates30 {$/;"	s	namespace:testing::internal
Templates31	test/gtest/gtest.h	/^struct Templates31 {$/;"	s	namespace:testing::internal
Templates32	test/gtest/gtest.h	/^struct Templates32 {$/;"	s	namespace:testing::internal
Templates33	test/gtest/gtest.h	/^struct Templates33 {$/;"	s	namespace:testing::internal
Templates34	test/gtest/gtest.h	/^struct Templates34 {$/;"	s	namespace:testing::internal
Templates35	test/gtest/gtest.h	/^struct Templates35 {$/;"	s	namespace:testing::internal
Templates36	test/gtest/gtest.h	/^struct Templates36 {$/;"	s	namespace:testing::internal
Templates37	test/gtest/gtest.h	/^struct Templates37 {$/;"	s	namespace:testing::internal
Templates38	test/gtest/gtest.h	/^struct Templates38 {$/;"	s	namespace:testing::internal
Templates39	test/gtest/gtest.h	/^struct Templates39 {$/;"	s	namespace:testing::internal
Templates4	test/gtest/gtest.h	/^struct Templates4 {$/;"	s	namespace:testing::internal
Templates40	test/gtest/gtest.h	/^struct Templates40 {$/;"	s	namespace:testing::internal
Templates41	test/gtest/gtest.h	/^struct Templates41 {$/;"	s	namespace:testing::internal
Templates42	test/gtest/gtest.h	/^struct Templates42 {$/;"	s	namespace:testing::internal
Templates43	test/gtest/gtest.h	/^struct Templates43 {$/;"	s	namespace:testing::internal
Templates44	test/gtest/gtest.h	/^struct Templates44 {$/;"	s	namespace:testing::internal
Templates45	test/gtest/gtest.h	/^struct Templates45 {$/;"	s	namespace:testing::internal
Templates46	test/gtest/gtest.h	/^struct Templates46 {$/;"	s	namespace:testing::internal
Templates47	test/gtest/gtest.h	/^struct Templates47 {$/;"	s	namespace:testing::internal
Templates48	test/gtest/gtest.h	/^struct Templates48 {$/;"	s	namespace:testing::internal
Templates49	test/gtest/gtest.h	/^struct Templates49 {$/;"	s	namespace:testing::internal
Templates5	test/gtest/gtest.h	/^struct Templates5 {$/;"	s	namespace:testing::internal
Templates50	test/gtest/gtest.h	/^struct Templates50 {$/;"	s	namespace:testing::internal
Templates6	test/gtest/gtest.h	/^struct Templates6 {$/;"	s	namespace:testing::internal
Templates7	test/gtest/gtest.h	/^struct Templates7 {$/;"	s	namespace:testing::internal
Templates8	test/gtest/gtest.h	/^struct Templates8 {$/;"	s	namespace:testing::internal
Templates9	test/gtest/gtest.h	/^struct Templates9 {$/;"	s	namespace:testing::internal
Temporary	include/taco/error.h	/^  enum Kind { User, Internal, Temporary };$/;"	e	enum:taco::ErrorReport::Kind
Temporary	include/taco/ir_tags.h	/^  IgnoreRaces, NoRaces, Atomics, Temporary, ParallelReduction$/;"	m	class:taco::OutputRaceStrategy
TemporaryArrays	include/taco/lower/lowerer_impl.h	/^  struct TemporaryArrays {$/;"	s	class:taco::LowererImpl
TemporaryDirectory	python_bindings/pybind11/setup.py	/^def TemporaryDirectory():  # noqa: N802$/;"	f
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor() : TensorBase(type<CType>()) {}$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor(CType value) : TensorBase(value) {}$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor(const TensorBase& tensor) : TensorBase(tensor) {$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor(std::string name) : TensorBase(name, type<CType>()) {}$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor(std::string name, std::vector<int> dimensions, CType fill)$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor(std::string name, std::vector<int> dimensions, Format format,$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor(std::string name, std::vector<int> dimensions,$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor(std::vector<int> dimensions, CType fill)$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor(std::vector<int> dimensions, Format format, CType fill)$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^Tensor<CType>::Tensor(std::vector<int> dimensions, ModeFormat modeType, CType fill)$/;"	f	class:taco::Tensor
Tensor	include/taco/tensor.h	/^class Tensor : public TensorBase {$/;"	c	namespace:taco
TensorBase	include/taco/tensor.h	/^TensorBase::TensorBase(CType val) : TensorBase(type<CType>()) {$/;"	f	class:taco::TensorBase
TensorBase	include/taco/tensor.h	/^class TensorBase {$/;"	c	namespace:taco
TensorBase	src/tensor.cpp	/^TensorBase::TensorBase() : TensorBase(Float()) {$/;"	f	class:taco::TensorBase
TensorBase	src/tensor.cpp	/^TensorBase::TensorBase(Datatype ctype)$/;"	f	class:taco::TensorBase
TensorBase	src/tensor.cpp	/^TensorBase::TensorBase(Datatype ctype, std::vector<int> dimensions, Literal fill)$/;"	f	class:taco::TensorBase
TensorBase	src/tensor.cpp	/^TensorBase::TensorBase(Datatype ctype, vector<int> dimensions, $/;"	f	class:taco::TensorBase
TensorBase	src/tensor.cpp	/^TensorBase::TensorBase(Datatype ctype, vector<int> dimensions, Format format, Literal fill)$/;"	f	class:taco::TensorBase
TensorBase	src/tensor.cpp	/^TensorBase::TensorBase(std::string name, Datatype ctype)$/;"	f	class:taco::TensorBase
TensorBase	src/tensor.cpp	/^TensorBase::TensorBase(std::string name, Datatype ctype, $/;"	f	class:taco::TensorBase
TensorBase	src/tensor.cpp	/^TensorBase::TensorBase(std::string name, Datatype ctype, std::vector<int> dimensions, Literal fill)$/;"	f	class:taco::TensorBase
TensorBase	src/tensor.cpp	/^TensorBase::TensorBase(string name, Datatype ctype, vector<int> dimensions,$/;"	f	class:taco::TensorBase
TensorData	test/test_tensors.h	/^  TensorData(const std::vector<int>& dimensions) :$/;"	f	struct:taco::test::TensorData
TensorData	test/test_tensors.h	/^  TensorData(const std::vector<int>& dimensions,$/;"	f	struct:taco::test::TensorData
TensorData	test/test_tensors.h	/^struct TensorData {$/;"	s	namespace:taco::test
TensorPath	src/lower/tensor_path.cpp	/^TensorPath::TensorPath() : content(nullptr) {$/;"	f	class:taco::TensorPath
TensorPath	src/lower/tensor_path.cpp	/^TensorPath::TensorPath(const vector<IndexVar>& vars, const Access& access)$/;"	f	class:taco::TensorPath
TensorPath	src/lower/tensor_path.h	/^class TensorPath : public util::Comparable<TensorPath> {$/;"	c	namespace:taco
TensorPathStep	src/lower/tensor_path.cpp	/^TensorPathStep::TensorPathStep() : step(-1) {$/;"	f	class:taco::TensorPathStep
TensorPathStep	src/lower/tensor_path.cpp	/^TensorPathStep::TensorPathStep(const TensorPath& path, int step)$/;"	f	class:taco::TensorPathStep
TensorPathStep	src/lower/tensor_path.h	/^class TensorPathStep : public util::Comparable<TensorPathStep> {$/;"	c	namespace:taco
TensorProperty	include/taco/ir/ir.h	/^enum class TensorProperty {$/;"	c	namespace:taco::ir
TensorSquaredNormFactory	test/expr_factory.h	/^struct TensorSquaredNormFactory : public ExprFactory {$/;"	s	namespace:taco::test
TensorStorage	include/taco/storage/storage.h	/^class TensorStorage {$/;"	c	namespace:taco
TensorStorage	src/storage/storage.cpp	/^TensorStorage::TensorStorage(Datatype componentType, const vector<int>& dimensions,$/;"	f	class:taco::TensorStorage
TensorVar	include/taco/index_notation/index_notation.h	/^class TensorVar : public util::Comparable<TensorVar> {$/;"	c	namespace:taco
TensorVar	src/index_notation/index_notation.cpp	/^TensorVar::TensorVar() : content(nullptr) {$/;"	f	class:taco::TensorVar
TensorVar	src/index_notation/index_notation.cpp	/^TensorVar::TensorVar(const Type& type, const Format& format, const Literal& fill)$/;"	f	class:taco::TensorVar
TensorVar	src/index_notation/index_notation.cpp	/^TensorVar::TensorVar(const Type& type, const Literal& fill)$/;"	f	class:taco::TensorVar
TensorVar	src/index_notation/index_notation.cpp	/^TensorVar::TensorVar(const int& id, const string& name, const Type& type, const Format& format, const Literal& fill)$/;"	f	class:taco::TensorVar
TensorVar	src/index_notation/index_notation.cpp	/^TensorVar::TensorVar(const std::string& name, const Type& type, const Literal& fill)$/;"	f	class:taco::TensorVar
TensorVar	src/index_notation/index_notation.cpp	/^TensorVar::TensorVar(const string& name, const Type& type, const Format& format, const Literal& fill)$/;"	f	class:taco::TensorVar
Tensors	test/expr_factory.cpp	/^typedef std::vector<Tensor<double>> Tensors;$/;"	t	namespace:taco::test	file:
TersePrintPrefixToStrings	test/gtest/gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple& t, Strings* strings) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
TersePrintPrefixToStrings	test/gtest/gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple&, Strings*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
Test	test/gtest/gtest-all.cc	/^Test::Test()$/;"	f	class:testing::Test
Test	test/gtest/gtest.h	/^class GTEST_API_ Test {$/;"	c	namespace:testing
Test	test/tests-lower.cpp	/^  Test(IndexStmt stmt, const vector<TestCase>& testCases)$/;"	f	struct:taco::test::Test
Test	test/tests-lower.cpp	/^struct Test {$/;"	s	namespace:taco::test	file:
Test	test/tests-merge_lattice.cpp	/^  Test(Forall forall, taco::MergeLattice expected)$/;"	f	struct:tests::Test
Test	test/tests-merge_lattice.cpp	/^struct Test {$/;"	s	namespace:tests	file:
TestCase	test/gtest/gtest-all.cc	/^TestCase::TestCase(const char* a_name, const char* a_type_param,$/;"	f	class:testing::TestCase
TestCase	test/gtest/gtest.h	/^class GTEST_API_ TestCase {$/;"	c	namespace:testing
TestCase	test/tests-lower.cpp	/^  TestCase(const map<TensorVar, vector<pair<vector<int>,double>>>& inputs,$/;"	f	struct:taco::test::TestCase
TestCase	test/tests-lower.cpp	/^struct TestCase {$/;"	s	namespace:taco::test	file:
TestCaseFailed	test/gtest/gtest-all.cc	/^static bool TestCaseFailed(const TestCase* test_case) {$/;"	f	namespace:testing::internal
TestCaseInfoContainer	test/gtest/gtest.h	/^  typedef ::std::vector<ParameterizedTestCaseInfoBase*> TestCaseInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseRegistry
TestCaseNameIs	test/gtest/gtest-all.cc	/^  explicit TestCaseNameIs(const std::string& name)$/;"	f	class:testing::internal::TestCaseNameIs
TestCaseNameIs	test/gtest/gtest-all.cc	/^class TestCaseNameIs {$/;"	c	namespace:testing::internal	file:
TestCasePassed	test/gtest/gtest-all.cc	/^static bool TestCasePassed(const TestCase* test_case) {$/;"	f	namespace:testing::internal
TestData	test/tests-expr_storage.cpp	/^  TestData(Tensor<double> tensor, const vector<IndexVar> indexVars,$/;"	f	struct:expr_storage_tests::TestData
TestData	test/tests-expr_storage.cpp	/^struct TestData {$/;"	s	namespace:expr_storage_tests	file:
TestData	test/tests-format.cpp	/^                   std::vector<int>> TestData;$/;"	t	file:
TestData	test/tests-parafac.cpp	/^                   Format, TensorData<double>> TestData; $/;"	t	file:
TestData	test/tests-storage.cpp	/^  TestData(Tensor<double> tensor,$/;"	f	struct:TestData
TestData	test/tests-storage.cpp	/^struct TestData {$/;"	s	file:
TestData	test/tests-storage_alloc.cpp	/^  TestData(Tensor<double> tensor, size_t allocSize, bool assembleWhileCompute,$/;"	f	struct:storage_alloc_tests::TestData
TestData	test/tests-storage_alloc.cpp	/^struct TestData {$/;"	s	namespace:storage_alloc_tests	file:
TestDataTypeMethods	python_bindings/unit_tests.py	/^class TestDataTypeMethods(unittest.TestCase):$/;"	c
TestDisabled	test/gtest/gtest.h	/^  static bool TestDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestEventListener	test/gtest/gtest.h	/^class TestEventListener {$/;"	c	namespace:testing
TestEventListeners	test/gtest/gtest-all.cc	/^TestEventListeners::TestEventListeners()$/;"	f	class:testing::TestEventListeners
TestEventListeners	test/gtest/gtest.h	/^class GTEST_API_ TestEventListeners {$/;"	c	namespace:testing
TestEventRepeater	test/gtest/gtest-all.cc	/^  TestEventRepeater() : forwarding_enabled_(true) {}$/;"	f	class:testing::internal::TestEventRepeater
TestEventRepeater	test/gtest/gtest-all.cc	/^class TestEventRepeater : public TestEventListener {$/;"	c	namespace:testing::internal	file:
TestFactory1	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory1() : value("(empty)") { print_default_created(this); }$/;"	f	class:TestFactory1	file:
TestFactory1	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory1(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory1	file:
TestFactory1	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory1(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory1	file:
TestFactory1	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class TestFactory1 {$/;"	c	file:
TestFactory2	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory2() : value("(empty2)") { print_default_created(this); }$/;"	f	class:TestFactory2	file:
TestFactory2	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory2(TestFactory2 &&m) { value = std::move(m.value); print_move_created(this); }$/;"	f	class:TestFactory2
TestFactory2	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory2(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory2	file:
TestFactory2	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory2(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory2	file:
TestFactory2	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class TestFactory2 {$/;"	c	file:
TestFactory3	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory3() : value("(empty3)") { print_default_created(this); }$/;"	f	class:TestFactory3
TestFactory3	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory3(TestFactory3 &&m) { value = std::move(m.value); print_move_created(this); }$/;"	f	class:TestFactory3
TestFactory3	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory3(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory3
TestFactory3	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory3(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory3
TestFactory3	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class TestFactory3 {$/;"	c	file:
TestFactory4	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory4() : TestFactory3() { print_default_created(this); }$/;"	f	class:TestFactory4
TestFactory4	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory4(int v) : TestFactory3(v) { print_created(this, v); }$/;"	f	class:TestFactory4
TestFactory4	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class TestFactory4 : public TestFactory3 {$/;"	c	file:
TestFactory5	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory5(int i) : TestFactory3(i) { print_created(this, i); }$/;"	f	class:TestFactory5
TestFactory5	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class TestFactory5 : public TestFactory3 {$/;"	c	file:
TestFactory6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory6(TestFactory6 &&f) { print_move_created(this); value = f.value; alias = f.alias; }$/;"	f	class:TestFactory6
TestFactory6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory6(const TestFactory6 &f) { print_copy_created(this); value = f.value; alias = f.alias; }$/;"	f	class:TestFactory6
TestFactory6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory6(int i) : value{i} { print_created(this, i); }$/;"	f	class:TestFactory6
TestFactory6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class TestFactory6 {$/;"	c	file:
TestFactory7	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory7(TestFactory7 &&f) { print_move_created(this); value = f.value; alias = f.alias; }$/;"	f	class:TestFactory7
TestFactory7	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory7(const TestFactory7 &f) { print_copy_created(this); value = f.value; alias = f.alias; }$/;"	f	class:TestFactory7
TestFactory7	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory7(int i) : value{i} { print_created(this, i); }$/;"	f	class:TestFactory7
TestFactory7	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class TestFactory7 {$/;"	c	file:
TestFactory7	python_bindings/pybind11/tests/test_factory_constructors.py	/^    from pybind11_tests.factory_constructors import TestFactory7$/;"	i
TestFactoryBase	test/gtest/gtest.h	/^  TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
TestFactoryBase	test/gtest/gtest.h	/^class TestFactoryBase {$/;"	c	namespace:testing::internal
TestFactoryHelper	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^class TestFactoryHelper {$/;"	c	file:
TestFactoryImpl	test/gtest/gtest.h	/^class TestFactoryImpl : public TestFactoryBase {$/;"	c	namespace:testing::internal
TestFailed	test/gtest/gtest.h	/^  static bool TestFailed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestFormatMethods	python_bindings/unit_tests.py	/^class TestFormatMethods(unittest.TestCase):$/;"	c
TestIO	python_bindings/unit_tests.py	/^class TestIO(unittest.TestCase):$/;"	c
TestIndexFuncs	python_bindings/unit_tests.py	/^class TestIndexFuncs(unittest.TestCase):$/;"	c
TestInfo	test/gtest/gtest-all.cc	/^TestInfo::TestInfo(const std::string& a_test_case_name,$/;"	f	class:testing::TestInfo
TestInfo	test/gtest/gtest.h	/^    TestInfo(const char* a_test_case_base_name,$/;"	f	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
TestInfo	test/gtest/gtest.h	/^  struct TestInfo {$/;"	s	class:testing::internal::ParameterizedTestCaseInfo
TestInfo	test/gtest/gtest.h	/^class GTEST_API_ TestInfo {$/;"	c	namespace:testing
TestInfoContainer	test/gtest/gtest.h	/^  typedef ::std::vector<linked_ptr<TestInfo> > TestInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
TestMetaFactory	test/gtest/gtest.h	/^  TestMetaFactory() {}$/;"	f	class:testing::internal::TestMetaFactory
TestMetaFactory	test/gtest/gtest.h	/^class TestMetaFactory$/;"	c	namespace:testing::internal
TestMetaFactoryBase	test/gtest/gtest.h	/^class TestMetaFactoryBase {$/;"	c	namespace:testing::internal
TestNameIs	test/gtest/gtest-all.cc	/^  explicit TestNameIs(const char* name)$/;"	f	class:testing::__anon4::TestNameIs
TestNameIs	test/gtest/gtest-all.cc	/^class TestNameIs {$/;"	c	namespace:testing::__anon4	file:
TestObject	python_bindings/pybind11/tests/test_pytypes.py	/^    class TestObject:$/;"	c	function:test_accessors
TestPartFatallyFailed	test/gtest/gtest-all.cc	/^static bool TestPartFatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartNonfatallyFailed	test/gtest/gtest-all.cc	/^static bool TestPartNonfatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartResult	test/gtest/gtest.h	/^  TestPartResult(Type a_type,$/;"	f	class:testing::TestPartResult
TestPartResult	test/gtest/gtest.h	/^class GTEST_API_ TestPartResult {$/;"	c	namespace:testing
TestPartResultArray	test/gtest/gtest.h	/^  TestPartResultArray() {}$/;"	f	class:testing::TestPartResultArray
TestPartResultArray	test/gtest/gtest.h	/^class GTEST_API_ TestPartResultArray {$/;"	c	namespace:testing
TestPartResultReporterInterface	test/gtest/gtest.h	/^class TestPartResultReporterInterface {$/;"	c	namespace:testing
TestPassed	test/gtest/gtest.h	/^  static bool TestPassed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestPropRVP	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^struct TestPropRVP {$/;"	s	file:
TestProperties	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^struct TestProperties {$/;"	s	file:
TestPropertiesAsXmlAttributes	test/gtest/gtest-all.cc	/^std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
TestPropertiesOverride	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^struct TestPropertiesOverride : TestProperties {$/;"	s	file:
TestProperty	test/gtest/gtest.h	/^  TestProperty(const std::string& a_key, const std::string& a_value) :$/;"	f	class:testing::TestProperty
TestProperty	test/gtest/gtest.h	/^class TestProperty {$/;"	c	namespace:testing
TestPropertyKeyIs	test/gtest/gtest-all.cc	/^  explicit TestPropertyKeyIs(const std::string& key) : key_(key) {}$/;"	f	class:testing::internal::TestPropertyKeyIs
TestPropertyKeyIs	test/gtest/gtest-all.cc	/^class TestPropertyKeyIs {$/;"	c	namespace:testing::internal	file:
TestReportable	test/gtest/gtest.h	/^  static bool TestReportable(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestReportableDisabled	test/gtest/gtest.h	/^  static bool TestReportableDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestResult	test/gtest/gtest-all.cc	/^TestResult::TestResult()$/;"	f	class:testing::TestResult
TestResult	test/gtest/gtest.h	/^class GTEST_API_ TestResult {$/;"	c	namespace:testing
TestResultAccessor	test/gtest/gtest-all.cc	/^class TestResultAccessor {$/;"	c	namespace:testing::internal	file:
TestRole	test/gtest/gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	g	class:testing::internal::DeathTest
TestSchedulingCommands	python_bindings/unit_tests.py	/^class TestSchedulingCommands(unittest.TestCase):$/;"	c
TestTensorCreation	python_bindings/unit_tests.py	/^class TestTensorCreation(unittest.TestCase):$/;"	c
TestThread	python_bindings/pybind11/tests/test_iostream.cpp	/^    TestThread() : t_{nullptr}, stop_{false} {$/;"	f	struct:TestThread
TestThread	python_bindings/pybind11/tests/test_iostream.cpp	/^struct TestThread {$/;"	s	file:
TestWithParam	test/gtest/gtest.h	/^class TestWithParam : public Test, public WithParamInterface<T> {$/;"	c	namespace:testing
Thread	python_bindings/pybind11/tests/test_callbacks.py	/^from threading import Thread$/;"	i
ThreadFuncWithCLinkage	test/gtest/gtest.h	/^extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {$/;"	f	namespace:std::tr1
ThreadIdAndHandle	test/gtest/gtest-all.cc	/^  typedef std::pair<DWORD, HANDLE> ThreadIdAndHandle;$/;"	t	class:testing::internal::ThreadLocalRegistryImpl	file:
ThreadIdToThreadLocals	test/gtest/gtest-all.cc	/^  typedef std::map<DWORD, ThreadLocalValues> ThreadIdToThreadLocals;$/;"	t	class:testing::internal::ThreadLocalRegistryImpl	file:
ThreadLocal	test/gtest/gtest.h	/^  ThreadLocal() : default_() {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	test/gtest/gtest.h	/^  ThreadLocal() : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	test/gtest/gtest.h	/^  ThreadLocal() : value_() {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	test/gtest/gtest.h	/^  explicit ThreadLocal(const T& value) : default_(value) {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	test/gtest/gtest.h	/^  explicit ThreadLocal(const T& value) : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	test/gtest/gtest.h	/^  explicit ThreadLocal(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	test/gtest/gtest.h	/^class ThreadLocal : public ThreadLocalBase {$/;"	c	namespace:std::tr1
ThreadLocal	test/gtest/gtest.h	/^class ThreadLocal {$/;"	c	namespace:std::tr1
ThreadLocalBase	test/gtest/gtest.h	/^  ThreadLocalBase() {}$/;"	f	class:std::tr1::ThreadLocalBase
ThreadLocalBase	test/gtest/gtest.h	/^class ThreadLocalBase {$/;"	c	namespace:std::tr1
ThreadLocalRegistry	test/gtest/gtest.h	/^class GTEST_API_ ThreadLocalRegistry {$/;"	c	namespace:std::tr1
ThreadLocalRegistryImpl	test/gtest/gtest-all.cc	/^class ThreadLocalRegistryImpl {$/;"	c	namespace:testing::internal	file:
ThreadLocalValueHolderBase	test/gtest/gtest.h	/^class ThreadLocalValueHolderBase {$/;"	c	namespace:std::tr1
ThreadLocalValues	test/gtest/gtest-all.cc	/^                   linked_ptr<ThreadLocalValueHolderBase> > ThreadLocalValues;$/;"	t	class:testing::internal::ThreadLocalRegistryImpl	file:
ThreadMain	test/gtest/gtest-all.cc	/^  static DWORD WINAPI ThreadMain(void* ptr) {$/;"	f	class:testing::internal::__anon6::ThreadWithParamSupport	file:
ThreadMainParam	test/gtest/gtest-all.cc	/^    ThreadMainParam(Runnable* runnable, Notification* thread_can_start)$/;"	f	struct:testing::internal::__anon6::ThreadWithParamSupport::ThreadMainParam
ThreadMainParam	test/gtest/gtest-all.cc	/^  struct ThreadMainParam {$/;"	s	class:testing::internal::__anon6::ThreadWithParamSupport	file:
ThreadPool	python_bindings/pybind11/pybind11/setup_helpers.py	/^                from multiprocessing.pool import ThreadPool$/;"	i
ThreadSafeLazyInit	test/gtest/gtest-all.cc	/^void Mutex::ThreadSafeLazyInit() {$/;"	f	class:testing::internal::Mutex
ThreadWithParam	test/gtest/gtest.h	/^  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)$/;"	f	class:std::tr1::ThreadWithParam
ThreadWithParam	test/gtest/gtest.h	/^class ThreadWithParam : public ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamBase	test/gtest/gtest-all.cc	/^ThreadWithParamBase::ThreadWithParamBase(Runnable *runnable,$/;"	f	class:testing::internal::ThreadWithParamBase
ThreadWithParamBase	test/gtest/gtest.h	/^class GTEST_API_ ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamBase	test/gtest/gtest.h	/^class ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamSupport	test/gtest/gtest-all.cc	/^class ThreadWithParamSupport : public ThreadWithParamBase {$/;"	c	namespace:testing::internal::__anon6	file:
TimeInMillis	test/gtest/gtest.h	/^typedef TypeWithSize<8>::Int TimeInMillis;  \/\/ Represents time in milliseconds.$/;"	t	namespace:std::tr1
TimeInMillis	test/gtest/gtest.h	/^typedef internal::TimeInMillis TimeInMillis;$/;"	t	namespace:testing
TimePoint	include/taco/util/timers.h	/^typedef std::chrono::time_point<std::chrono::steady_clock> TimePoint;$/;"	t	namespace:taco::util
TimeResults	include/taco/util/timers.h	/^struct TimeResults {$/;"	s	namespace:taco::util
Timer	include/taco/util/timers.h	/^class Timer {$/;"	c	namespace:taco::util
ToLower	test/gtest/gtest.h	/^inline char ToLower(char ch) {$/;"	f	namespace:std::tr1
ToUpper	test/gtest/gtest.h	/^inline char ToUpper(char ch) {$/;"	f	namespace:std::tr1
Token	include/taco/parser/lexer.h	/^enum class Token {$/;"	c	namespace:taco::parser
TplCtorClass	python_bindings/pybind11/tests/test_stl.cpp	/^    template <typename T> TplCtorClass(const T &) { }$/;"	f	struct:TplCtorClass
TplCtorClass	python_bindings/pybind11/tests/test_stl.cpp	/^struct TplCtorClass {$/;"	s	file:
TraceInfo	test/gtest/gtest-all.cc	/^struct TraceInfo {$/;"	s	namespace:testing::internal	file:
Transformation	include/taco/index_notation/transformations.h	/^class Transformation {$/;"	c	namespace:taco
Transformation	src/index_notation/transformations.cpp	/^Transformation::Transformation(AddSuchThatPredicates addsuchthatpredicates)$/;"	f	class:taco::Transformation
Transformation	src/index_notation/transformations.cpp	/^Transformation::Transformation(ForAllReplace forallreplace)$/;"	f	class:taco::Transformation
Transformation	src/index_notation/transformations.cpp	/^Transformation::Transformation(Parallelize parallelize)$/;"	f	class:taco::Transformation
Transformation	src/index_notation/transformations.cpp	/^Transformation::Transformation(Precompute precompute)$/;"	f	class:taco::Transformation
Transformation	src/index_notation/transformations.cpp	/^Transformation::Transformation(Reorder reorder)$/;"	f	class:taco::Transformation
TransformationInterface	include/taco/index_notation/transformations.h	/^class TransformationInterface {$/;"	c	namespace:taco
TransformationTest	test/tests-transformation.cpp	/^  TransformationTest(Transformation transformation, IndexStmt stmt,$/;"	f	struct:test::TransformationTest
TransformationTest	test/tests-transformation.cpp	/^struct TransformationTest {$/;"	s	namespace:test	file:
Tuple	test/gtest/gtest.h	/^  typedef ::std::tuple<Types...> Tuple;$/;"	t	struct:testing::internal::TuplePolicy
Tuple	test/gtest/gtest.h	/^  typedef TupleT Tuple;$/;"	t	struct:testing::internal::TuplePolicy
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 0, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 1, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 2, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 3, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 4, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 5, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 6, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 7, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 8, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	test/gtest/gtest.h	/^struct TupleElement<true, 9, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TuplePolicy	test/gtest/gtest.h	/^struct TuplePolicy {$/;"	s	namespace:testing::internal
TuplePolicy	test/gtest/gtest.h	/^struct TuplePolicy< ::std::tuple<Types...> > {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	test/gtest/gtest.h	/^struct TuplePrefixPrinter {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	test/gtest/gtest.h	/^struct TuplePrefixPrinter<0> {$/;"	s	namespace:testing::internal
Type	include/taco/type.h	/^class Type {$/;"	c	namespace:taco
Type	src/type.cpp	/^Type::Type() : dtype(type<double>()) {$/;"	f	class:taco::Type
Type	src/type.cpp	/^Type::Type(Datatype dtype, Shape shape) : dtype(dtype), shape(shape) {$/;"	f	class:taco::Type
Type	test/gtest/gtest.h	/^  enum Type {$/;"	g	class:testing::TestPartResult
TypeId	test/gtest/gtest.h	/^typedef const void* TypeId;$/;"	t	namespace:testing::internal
TypeIdHelper	test/gtest/gtest.h	/^class TypeIdHelper {$/;"	c	namespace:testing::internal
TypeKind	test/gtest/gtest.h	/^enum TypeKind {$/;"	g	namespace:testing::internal2
TypeList	test/gtest/gtest.h	/^struct TypeList {$/;"	s	namespace:testing::internal
TypeList	test/gtest/gtest.h	/^struct TypeList<Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing::internal
TypeParameterizedTest	test/gtest/gtest.h	/^class TypeParameterizedTest {$/;"	c	namespace:testing::internal
TypeParameterizedTest	test/gtest/gtest.h	/^class TypeParameterizedTest<Fixture, TestSel, Types0> {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	test/gtest/gtest.h	/^class TypeParameterizedTestCase {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	test/gtest/gtest.h	/^class TypeParameterizedTestCase<Fixture, Templates0, Types> {$/;"	c	namespace:testing::internal
TypeWithSize	test/gtest/gtest.h	/^class TypeWithSize {$/;"	c	namespace:std::tr1
TypeWithSize	test/gtest/gtest.h	/^class TypeWithSize<4> {$/;"	c	namespace:std::tr1
TypeWithSize	test/gtest/gtest.h	/^class TypeWithSize<8> {$/;"	c	namespace:std::tr1
TypeWithoutFormatter	test/gtest/gtest.h	/^class TypeWithoutFormatter {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	test/gtest/gtest.h	/^class TypeWithoutFormatter<T, kConvertibleToInteger> {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	test/gtest/gtest.h	/^class TypeWithoutFormatter<T, kProtobuf> {$/;"	c	namespace:testing::internal2
TypedComponent	include/taco/storage/typed_value.h	/^class TypedComponent {$/;"	c	namespace:taco
TypedComponentPtr	include/taco/storage/typed_value.h	/^class TypedComponentPtr {$/;"	c	namespace:taco
TypedComponentPtr	src/storage/typed_value.cpp	/^TypedComponentPtr::TypedComponentPtr() : ptr(nullptr) {}$/;"	f	class:taco::TypedComponentPtr
TypedComponentPtr	src/storage/typed_value.cpp	/^TypedComponentPtr::TypedComponentPtr(Datatype type, void *ptr) : type(type), ptr(ptr) {$/;"	f	class:taco::TypedComponentPtr
TypedComponentRef	include/taco/storage/typed_value.h	/^  TypedComponentRef(Datatype t, T *ptr) : ptr(reinterpret_cast<ComponentTypeUnion *>(ptr)) {$/;"	f	class:taco::TypedComponentRef
TypedComponentRef	include/taco/storage/typed_value.h	/^class TypedComponentRef: public TypedComponent {$/;"	c	namespace:taco
TypedComponentVal	include/taco/storage/typed_value.h	/^  TypedComponentVal(Datatype t, T *ptr) {$/;"	f	class:taco::TypedComponentVal
TypedComponentVal	include/taco/storage/typed_value.h	/^class TypedComponentVal: public TypedComponent {$/;"	c	namespace:taco
TypedComponentVal	src/storage/typed_value.cpp	/^TypedComponentVal::TypedComponentVal() {$/;"	f	class:taco::TypedComponentVal
TypedComponentVal	src/storage/typed_value.cpp	/^TypedComponentVal::TypedComponentVal(Datatype t) {$/;"	f	class:taco::TypedComponentVal
TypedComponentVal	src/storage/typed_value.cpp	/^TypedComponentVal::TypedComponentVal(Datatype t, int constant) {$/;"	f	class:taco::TypedComponentVal
TypedComponentVal	src/storage/typed_value.cpp	/^TypedComponentVal::TypedComponentVal(TypedComponentRef ref) : val(ref.get()) {$/;"	f	class:taco::TypedComponentVal
TypedIndex	include/taco/storage/typed_index.h	/^class TypedIndex {$/;"	c	namespace:taco
TypedIndexPtr	include/taco/storage/typed_index.h	/^class TypedIndexPtr {$/;"	c	namespace:taco
TypedIndexPtr	src/storage/typed_index.cpp	/^TypedIndexPtr::TypedIndexPtr (Datatype type, void *ptr) : type(type), ptr(ptr) {$/;"	f	class:taco::TypedIndexPtr
TypedIndexPtr	src/storage/typed_index.cpp	/^TypedIndexPtr::TypedIndexPtr() : ptr(nullptr) {}$/;"	f	class:taco::TypedIndexPtr
TypedIndexRef	include/taco/storage/typed_index.h	/^  TypedIndexRef(Datatype t, T *ptr) : ptr(reinterpret_cast<IndexTypeUnion *>(ptr)) {$/;"	f	class:taco::TypedIndexRef
TypedIndexRef	include/taco/storage/typed_index.h	/^class TypedIndexRef: public TypedIndex {$/;"	c	namespace:taco
TypedIndexVal	include/taco/storage/typed_index.h	/^  TypedIndexVal(Datatype t, T *ptr) {$/;"	f	class:taco::TypedIndexVal
TypedIndexVal	include/taco/storage/typed_index.h	/^  TypedIndexVal(Datatype t, int constant) {$/;"	f	class:taco::TypedIndexVal
TypedIndexVal	include/taco/storage/typed_index.h	/^class TypedIndexVal: public TypedIndex {$/;"	c	namespace:taco
TypedIndexVal	src/storage/typed_index.cpp	/^TypedIndexVal::TypedIndexVal() {$/;"	f	class:taco::TypedIndexVal
TypedIndexVal	src/storage/typed_index.cpp	/^TypedIndexVal::TypedIndexVal(Datatype t) {$/;"	f	class:taco::TypedIndexVal
TypedIndexVal	src/storage/typed_index.cpp	/^TypedIndexVal::TypedIndexVal(TypedIndexRef ref) : val(ref.get()) {$/;"	f	class:taco::TypedIndexVal
TypedTestCasePState	test/gtest/gtest.h	/^  TypedTestCasePState() : registered_(false) {}$/;"	f	class:testing::internal::TypedTestCasePState
TypedTestCasePState	test/gtest/gtest.h	/^class GTEST_API_ TypedTestCasePState {$/;"	c	namespace:testing::internal
TypedVector	include/taco/storage/typed_vector.h	/^  TypedVector() : type(Datatype::Undefined) {$/;"	f	class:taco::TypedVector
TypedVector	include/taco/storage/typed_vector.h	/^  TypedVector(Datatype type) : type(type) {$/;"	f	class:taco::TypedVector
TypedVector	include/taco/storage/typed_vector.h	/^  TypedVector(Datatype type, size_t size) : type(type) {$/;"	f	class:taco::TypedVector
TypedVector	include/taco/storage/typed_vector.h	/^class TypedVector {$/;"	c	namespace:taco
Types	test/gtest/gtest.h	/^struct Types {$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, internal::None, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, internal::None, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, internal::None, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, internal::None, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, T3, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, T2, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<T1, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	test/gtest/gtest.h	/^struct Types<internal::None, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types0	test/gtest/gtest.h	/^struct Types0 {};$/;"	s	namespace:testing::internal
Types1	test/gtest/gtest.h	/^struct Types1 {$/;"	s	namespace:testing::internal
Types10	test/gtest/gtest.h	/^struct Types10 {$/;"	s	namespace:testing::internal
Types11	test/gtest/gtest.h	/^struct Types11 {$/;"	s	namespace:testing::internal
Types12	test/gtest/gtest.h	/^struct Types12 {$/;"	s	namespace:testing::internal
Types13	test/gtest/gtest.h	/^struct Types13 {$/;"	s	namespace:testing::internal
Types14	test/gtest/gtest.h	/^struct Types14 {$/;"	s	namespace:testing::internal
Types15	test/gtest/gtest.h	/^struct Types15 {$/;"	s	namespace:testing::internal
Types16	test/gtest/gtest.h	/^struct Types16 {$/;"	s	namespace:testing::internal
Types17	test/gtest/gtest.h	/^struct Types17 {$/;"	s	namespace:testing::internal
Types18	test/gtest/gtest.h	/^struct Types18 {$/;"	s	namespace:testing::internal
Types19	test/gtest/gtest.h	/^struct Types19 {$/;"	s	namespace:testing::internal
Types2	test/gtest/gtest.h	/^struct Types2 {$/;"	s	namespace:testing::internal
Types20	test/gtest/gtest.h	/^struct Types20 {$/;"	s	namespace:testing::internal
Types21	test/gtest/gtest.h	/^struct Types21 {$/;"	s	namespace:testing::internal
Types22	test/gtest/gtest.h	/^struct Types22 {$/;"	s	namespace:testing::internal
Types23	test/gtest/gtest.h	/^struct Types23 {$/;"	s	namespace:testing::internal
Types24	test/gtest/gtest.h	/^struct Types24 {$/;"	s	namespace:testing::internal
Types25	test/gtest/gtest.h	/^struct Types25 {$/;"	s	namespace:testing::internal
Types26	test/gtest/gtest.h	/^struct Types26 {$/;"	s	namespace:testing::internal
Types27	test/gtest/gtest.h	/^struct Types27 {$/;"	s	namespace:testing::internal
Types28	test/gtest/gtest.h	/^struct Types28 {$/;"	s	namespace:testing::internal
Types29	test/gtest/gtest.h	/^struct Types29 {$/;"	s	namespace:testing::internal
Types3	test/gtest/gtest.h	/^struct Types3 {$/;"	s	namespace:testing::internal
Types30	test/gtest/gtest.h	/^struct Types30 {$/;"	s	namespace:testing::internal
Types31	test/gtest/gtest.h	/^struct Types31 {$/;"	s	namespace:testing::internal
Types32	test/gtest/gtest.h	/^struct Types32 {$/;"	s	namespace:testing::internal
Types33	test/gtest/gtest.h	/^struct Types33 {$/;"	s	namespace:testing::internal
Types34	test/gtest/gtest.h	/^struct Types34 {$/;"	s	namespace:testing::internal
Types35	test/gtest/gtest.h	/^struct Types35 {$/;"	s	namespace:testing::internal
Types36	test/gtest/gtest.h	/^struct Types36 {$/;"	s	namespace:testing::internal
Types37	test/gtest/gtest.h	/^struct Types37 {$/;"	s	namespace:testing::internal
Types38	test/gtest/gtest.h	/^struct Types38 {$/;"	s	namespace:testing::internal
Types39	test/gtest/gtest.h	/^struct Types39 {$/;"	s	namespace:testing::internal
Types4	test/gtest/gtest.h	/^struct Types4 {$/;"	s	namespace:testing::internal
Types40	test/gtest/gtest.h	/^struct Types40 {$/;"	s	namespace:testing::internal
Types41	test/gtest/gtest.h	/^struct Types41 {$/;"	s	namespace:testing::internal
Types42	test/gtest/gtest.h	/^struct Types42 {$/;"	s	namespace:testing::internal
Types43	test/gtest/gtest.h	/^struct Types43 {$/;"	s	namespace:testing::internal
Types44	test/gtest/gtest.h	/^struct Types44 {$/;"	s	namespace:testing::internal
Types45	test/gtest/gtest.h	/^struct Types45 {$/;"	s	namespace:testing::internal
Types46	test/gtest/gtest.h	/^struct Types46 {$/;"	s	namespace:testing::internal
Types47	test/gtest/gtest.h	/^struct Types47 {$/;"	s	namespace:testing::internal
Types48	test/gtest/gtest.h	/^struct Types48 {$/;"	s	namespace:testing::internal
Types49	test/gtest/gtest.h	/^struct Types49 {$/;"	s	namespace:testing::internal
Types5	test/gtest/gtest.h	/^struct Types5 {$/;"	s	namespace:testing::internal
Types50	test/gtest/gtest.h	/^struct Types50 {$/;"	s	namespace:testing::internal
Types6	test/gtest/gtest.h	/^struct Types6 {$/;"	s	namespace:testing::internal
Types7	test/gtest/gtest.h	/^struct Types7 {$/;"	s	namespace:testing::internal
Types8	test/gtest/gtest.h	/^struct Types8 {$/;"	s	namespace:testing::internal
Types9	test/gtest/gtest.h	/^struct Types9 {$/;"	s	namespace:testing::internal
UInt	src/type.cpp	/^Datatype UInt(int bits) {$/;"	f	namespace:taco
UInt	test/gtest/gtest.h	/^  typedef unsigned __int64 UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	test/gtest/gtest.h	/^  typedef unsigned int UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	test/gtest/gtest.h	/^  typedef void UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt128	include/taco/type.h	/^    UInt128,$/;"	e	enum:taco::Datatype::Kind
UInt128	src/type.cpp	/^Datatype UInt128 = Datatype(Datatype::Int128);$/;"	m	namespace:taco	file:
UInt16	include/taco/type.h	/^    UInt16,$/;"	e	enum:taco::Datatype::Kind
UInt16	src/type.cpp	/^Datatype UInt16  = Datatype(Datatype::UInt16);$/;"	m	namespace:taco	file:
UInt32	include/taco/type.h	/^    UInt32,$/;"	e	enum:taco::Datatype::Kind
UInt32	src/type.cpp	/^Datatype UInt32  = Datatype(Datatype::UInt32);$/;"	m	namespace:taco	file:
UInt32	test/gtest/gtest.h	/^typedef TypeWithSize<4>::UInt UInt32;$/;"	t	namespace:std::tr1
UInt64	include/taco/type.h	/^    UInt64,$/;"	e	enum:taco::Datatype::Kind
UInt64	src/type.cpp	/^Datatype UInt64  = Datatype(Datatype::UInt64);$/;"	m	namespace:taco	file:
UInt64	test/gtest/gtest.h	/^typedef TypeWithSize<8>::UInt UInt64;$/;"	t	namespace:std::tr1
UInt8	include/taco/type.h	/^    UInt8,$/;"	e	enum:taco::Datatype::Kind
UInt8	src/type.cpp	/^Datatype UInt8   = Datatype(Datatype::UInt8);$/;"	m	namespace:taco	file:
UIntTest	test/tests-type.cpp	/^TYPED_TEST_CASE_P(UIntTest);$/;"	v
UIntTest	test/tests-type.cpp	/^template <typename T> class UIntTest : public ::testing::Test {};$/;"	c	file:
UNDEFINED	include/taco/index_notation/provenance_graph.h	/^enum IndexVarRelType {UNDEFINED, SPLIT, DIVIDE, POS, FUSE, BOUND, PRECOMPUTE};$/;"	e	enum:taco::IndexVarRelType
UNION	include/taco/index_notation/iteration_algebra_printer.h	/^    UNION = 5,$/;"	m	class:taco::IterationAlgebraPrinter::Precedence
UNIQUE	include/taco/format.h	/^    FULL, NOT_FULL, ORDERED, NOT_ORDERED, UNIQUE, NOT_UNIQUE, BRANCHLESS,$/;"	e	enum:taco::ModeFormat::Property
UTF_N	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr size_t UTF_N = 8 * sizeof(CharT);$/;"	m	struct:string_caster
UnaryExprNode	include/taco/index_notation/index_notation_nodes.h	/^  UnaryExprNode(IndexExpr a) : IndexExprNode(a.getDataType()), a(a) {}$/;"	f	struct:taco::UnaryExprNode
UnaryExprNode	include/taco/index_notation/index_notation_nodes.h	/^struct UnaryExprNode : public IndexExprNode {$/;"	s	namespace:taco
UnboundStruct	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^struct UnboundStruct { };$/;"	s	file:
Uncopyable	include/taco/util/uncopyable.h	/^class Uncopyable {$/;"	c	namespace:taco::util
Undefined	include/taco/type.h	/^    Undefined  \/\/\/ Undefined type$/;"	e	enum:taco::Datatype::Kind
Unhashable	python_bindings/pybind11/tests/test_pytypes.py	/^    class Unhashable(object):$/;"	c	function:test_hash
Uniform	include/taco/util/fill.h	/^  Uniform,$/;"	m	class:taco::util::FillMethod
Union	include/taco/index_notation/iteration_algebra.h	/^class Union: public IterationAlgebra {$/;"	c	namespace:taco
Union	src/index_notation/iteration_algebra.cpp	/^Union::Union(IterationAlgebra a, IterationAlgebra b) : Union(new UnionNode(a, b)) {}$/;"	f	class:taco::Union
Union	src/index_notation/iteration_algebra.cpp	/^Union::Union(const IterationAlgebraNode* n) : IterationAlgebra(n) {}$/;"	f	class:taco::Union
UnionNode	include/taco/index_notation/iteration_algebra.h	/^  UnionNode(IterationAlgebra a, IterationAlgebra b) : BinaryIterationAlgebraNode(a, b) {}$/;"	f	struct:taco::UnionNode
UnionNode	include/taco/index_notation/iteration_algebra.h	/^struct UnionNode: public BinaryIterationAlgebraNode {$/;"	s	namespace:taco
UnitTest	test/gtest/gtest-all.cc	/^UnitTest::UnitTest() {$/;"	f	class:testing::UnitTest
UnitTest	test/gtest/gtest.h	/^class GTEST_API_ UnitTest {$/;"	c	namespace:testing
UnitTestImpl	test/gtest/gtest-all.cc	/^class GTEST_API_ UnitTestImpl {$/;"	c	namespace:testing::internal	file:
UnitTestOptions	test/gtest/gtest-all.cc	/^class GTEST_API_ UnitTestOptions {$/;"	c	namespace:testing::internal	file:
UniversalPrint	test/gtest/gtest.h	/^void UniversalPrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	test/gtest/gtest-all.cc	/^void UniversalPrintArray(const char* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	test/gtest/gtest-all.cc	/^void UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	test/gtest/gtest.h	/^void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintCharArray	test/gtest/gtest-all.cc	/^static void UniversalPrintCharArray($/;"	f	namespace:testing::internal
UniversalPrinter	test/gtest/gtest.h	/^class UniversalPrinter {$/;"	c	namespace:testing::internal
UniversalPrinter	test/gtest/gtest.h	/^class UniversalPrinter<T&> {$/;"	c	namespace:testing::internal
UniversalPrinter	test/gtest/gtest.h	/^class UniversalPrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrint	test/gtest/gtest.h	/^void UniversalTersePrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrintTupleFieldsToStrings	test/gtest/gtest.h	/^Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {$/;"	f	namespace:testing::internal
UniversalTersePrinter	test/gtest/gtest.h	/^class UniversalTersePrinter {$/;"	c	namespace:testing::internal
UniversalTersePrinter	test/gtest/gtest.h	/^class UniversalTersePrinter<T&> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	test/gtest/gtest.h	/^class UniversalTersePrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	test/gtest/gtest.h	/^class UniversalTersePrinter<char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	test/gtest/gtest.h	/^class UniversalTersePrinter<const char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	test/gtest/gtest.h	/^class UniversalTersePrinter<const wchar_t*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	test/gtest/gtest.h	/^class UniversalTersePrinter<wchar_t*> {$/;"	c	namespace:testing::internal
Unknown	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^        Unknown = 0,$/;"	m	class:Animal::Kind	file:
Unlock	test/gtest/gtest-all.cc	/^void Mutex::Unlock() {$/;"	f	class:testing::internal::Mutex
Unlock	test/gtest/gtest.h	/^  void Unlock() {$/;"	f	class:std::tr1::MutexBase
Unlock	test/gtest/gtest.h	/^  void Unlock() {}$/;"	f	class:std::tr1::Mutex
Unordered	python_bindings/pybind11/tests/conftest.py	/^class Unordered(Output):$/;"	c
UnregisteredBase	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^class UnregisteredBase {$/;"	c	file:
UnregisteredType	python_bindings/pybind11/tests/pybind11_tests.h	/^struct UnregisteredType { };$/;"	s
UnshuffleTests	test/gtest/gtest-all.cc	/^void TestCase::UnshuffleTests() {$/;"	f	class:testing::TestCase
UnshuffleTests	test/gtest/gtest-all.cc	/^void UnitTestImpl::UnshuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
UrlEncode	test/gtest/gtest-all.cc	/^string StreamingListener::UrlEncode(const char* str) {$/;"	f	class:testing::internal::StreamingListener
Use	python_bindings/pybind11/tests/test_pickling.py	/^    import cPickle as pickle  # Use cPickle on Python 2.7$/;"	i
User	include/taco/error.h	/^  enum Kind { User, Internal, Temporary };$/;"	e	enum:taco::ErrorReport::Kind
UserOwns	include/taco/storage/array.h	/^  enum Policy {UserOwns, Free, Delete};$/;"	e	enum:taco::Array::Policy
UserThreadFunc	test/gtest/gtest.h	/^  typedef void UserThreadFunc(T);$/;"	t	class:std::tr1::ThreadWithParam
UserType	python_bindings/pybind11/tests/pybind11_tests.h	/^    UserType(int i) : i(i) { }$/;"	f	class:UserType
UserType	python_bindings/pybind11/tests/pybind11_tests.h	/^class UserType {$/;"	c
UserType	python_bindings/pybind11/tests/test_builtin_casters.py	/^from pybind11_tests import UserType, IncType$/;"	i
UserType	python_bindings/pybind11/tests/test_class.py	/^from pybind11_tests import UserType, ConstructorStats$/;"	i
UserType	python_bindings/pybind11/tests/test_opaque_types.py	/^from pybind11_tests import ConstructorStats, UserType$/;"	i
UserType	python_bindings/pybind11/tests/test_stl.py	/^from pybind11_tests import UserType$/;"	i
Utf16ToAnsi	test/gtest/gtest-all.cc	/^const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {$/;"	f	class:testing::internal::String
VERSION_REGEX	python_bindings/pybind11/setup.py	/^VERSION_REGEX = re.compile($/;"	v
Val	include/taco/storage/typed_index.h	/^  typedef TypedIndexVal Val;$/;"	t	class:taco::TypedIndexPtr
Val	include/taco/storage/typed_index.h	/^  typedef TypedIndexVal Val;$/;"	t	class:taco::TypedIndexRef
Val	include/taco/storage/typed_value.h	/^  typedef TypedComponentVal Val;$/;"	t	class:taco::TypedComponentPtr
Val	include/taco/storage/typed_value.h	/^  typedef TypedComponentVal Val;$/;"	t	class:taco::TypedComponentRef
ValidateRegex	test/gtest/gtest-all.cc	/^bool ValidateRegex(const char* regex) {$/;"	f	namespace:testing::internal
ValidateTestProperty	test/gtest/gtest-all.cc	/^bool TestResult::ValidateTestProperty(const std::string& xml_element,$/;"	f	class:testing::TestResult
ValidateTestPropertyName	test/gtest/gtest-all.cc	/^bool ValidateTestPropertyName(const std::string& property_name,$/;"	f	namespace:testing
ValueArray1	test/gtest/gtest.h	/^  explicit ValueArray1(T1 v1) : v1_(v1) {}$/;"	f	class:testing::internal::ValueArray1
ValueArray1	test/gtest/gtest.h	/^class ValueArray1 {$/;"	c	namespace:testing::internal
ValueArray10	test/gtest/gtest.h	/^  ValueArray10(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray10
ValueArray10	test/gtest/gtest.h	/^class ValueArray10 {$/;"	c	namespace:testing::internal
ValueArray11	test/gtest/gtest.h	/^  ValueArray11(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray11
ValueArray11	test/gtest/gtest.h	/^class ValueArray11 {$/;"	c	namespace:testing::internal
ValueArray12	test/gtest/gtest.h	/^  ValueArray12(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray12
ValueArray12	test/gtest/gtest.h	/^class ValueArray12 {$/;"	c	namespace:testing::internal
ValueArray13	test/gtest/gtest.h	/^  ValueArray13(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray13
ValueArray13	test/gtest/gtest.h	/^class ValueArray13 {$/;"	c	namespace:testing::internal
ValueArray14	test/gtest/gtest.h	/^  ValueArray14(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray14
ValueArray14	test/gtest/gtest.h	/^class ValueArray14 {$/;"	c	namespace:testing::internal
ValueArray15	test/gtest/gtest.h	/^  ValueArray15(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray15
ValueArray15	test/gtest/gtest.h	/^class ValueArray15 {$/;"	c	namespace:testing::internal
ValueArray16	test/gtest/gtest.h	/^  ValueArray16(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray16
ValueArray16	test/gtest/gtest.h	/^class ValueArray16 {$/;"	c	namespace:testing::internal
ValueArray17	test/gtest/gtest.h	/^  ValueArray17(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray17
ValueArray17	test/gtest/gtest.h	/^class ValueArray17 {$/;"	c	namespace:testing::internal
ValueArray18	test/gtest/gtest.h	/^  ValueArray18(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray18
ValueArray18	test/gtest/gtest.h	/^class ValueArray18 {$/;"	c	namespace:testing::internal
ValueArray19	test/gtest/gtest.h	/^  ValueArray19(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray19
ValueArray19	test/gtest/gtest.h	/^class ValueArray19 {$/;"	c	namespace:testing::internal
ValueArray2	test/gtest/gtest.h	/^  ValueArray2(T1 v1, T2 v2) : v1_(v1), v2_(v2) {}$/;"	f	class:testing::internal::ValueArray2
ValueArray2	test/gtest/gtest.h	/^class ValueArray2 {$/;"	c	namespace:testing::internal
ValueArray20	test/gtest/gtest.h	/^  ValueArray20(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray20
ValueArray20	test/gtest/gtest.h	/^class ValueArray20 {$/;"	c	namespace:testing::internal
ValueArray21	test/gtest/gtest.h	/^  ValueArray21(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray21
ValueArray21	test/gtest/gtest.h	/^class ValueArray21 {$/;"	c	namespace:testing::internal
ValueArray22	test/gtest/gtest.h	/^  ValueArray22(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray22
ValueArray22	test/gtest/gtest.h	/^class ValueArray22 {$/;"	c	namespace:testing::internal
ValueArray23	test/gtest/gtest.h	/^  ValueArray23(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray23
ValueArray23	test/gtest/gtest.h	/^class ValueArray23 {$/;"	c	namespace:testing::internal
ValueArray24	test/gtest/gtest.h	/^  ValueArray24(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray24
ValueArray24	test/gtest/gtest.h	/^class ValueArray24 {$/;"	c	namespace:testing::internal
ValueArray25	test/gtest/gtest.h	/^  ValueArray25(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray25
ValueArray25	test/gtest/gtest.h	/^class ValueArray25 {$/;"	c	namespace:testing::internal
ValueArray26	test/gtest/gtest.h	/^  ValueArray26(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray26
ValueArray26	test/gtest/gtest.h	/^class ValueArray26 {$/;"	c	namespace:testing::internal
ValueArray27	test/gtest/gtest.h	/^  ValueArray27(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray27
ValueArray27	test/gtest/gtest.h	/^class ValueArray27 {$/;"	c	namespace:testing::internal
ValueArray28	test/gtest/gtest.h	/^  ValueArray28(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray28
ValueArray28	test/gtest/gtest.h	/^class ValueArray28 {$/;"	c	namespace:testing::internal
ValueArray29	test/gtest/gtest.h	/^  ValueArray29(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray29
ValueArray29	test/gtest/gtest.h	/^class ValueArray29 {$/;"	c	namespace:testing::internal
ValueArray3	test/gtest/gtest.h	/^  ValueArray3(T1 v1, T2 v2, T3 v3) : v1_(v1), v2_(v2), v3_(v3) {}$/;"	f	class:testing::internal::ValueArray3
ValueArray3	test/gtest/gtest.h	/^class ValueArray3 {$/;"	c	namespace:testing::internal
ValueArray30	test/gtest/gtest.h	/^  ValueArray30(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray30
ValueArray30	test/gtest/gtest.h	/^class ValueArray30 {$/;"	c	namespace:testing::internal
ValueArray31	test/gtest/gtest.h	/^  ValueArray31(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray31
ValueArray31	test/gtest/gtest.h	/^class ValueArray31 {$/;"	c	namespace:testing::internal
ValueArray32	test/gtest/gtest.h	/^  ValueArray32(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray32
ValueArray32	test/gtest/gtest.h	/^class ValueArray32 {$/;"	c	namespace:testing::internal
ValueArray33	test/gtest/gtest.h	/^  ValueArray33(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray33
ValueArray33	test/gtest/gtest.h	/^class ValueArray33 {$/;"	c	namespace:testing::internal
ValueArray34	test/gtest/gtest.h	/^  ValueArray34(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray34
ValueArray34	test/gtest/gtest.h	/^class ValueArray34 {$/;"	c	namespace:testing::internal
ValueArray35	test/gtest/gtest.h	/^  ValueArray35(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray35
ValueArray35	test/gtest/gtest.h	/^class ValueArray35 {$/;"	c	namespace:testing::internal
ValueArray36	test/gtest/gtest.h	/^  ValueArray36(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray36
ValueArray36	test/gtest/gtest.h	/^class ValueArray36 {$/;"	c	namespace:testing::internal
ValueArray37	test/gtest/gtest.h	/^  ValueArray37(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray37
ValueArray37	test/gtest/gtest.h	/^class ValueArray37 {$/;"	c	namespace:testing::internal
ValueArray38	test/gtest/gtest.h	/^  ValueArray38(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray38
ValueArray38	test/gtest/gtest.h	/^class ValueArray38 {$/;"	c	namespace:testing::internal
ValueArray39	test/gtest/gtest.h	/^  ValueArray39(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray39
ValueArray39	test/gtest/gtest.h	/^class ValueArray39 {$/;"	c	namespace:testing::internal
ValueArray4	test/gtest/gtest.h	/^  ValueArray4(T1 v1, T2 v2, T3 v3, T4 v4) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray4
ValueArray4	test/gtest/gtest.h	/^class ValueArray4 {$/;"	c	namespace:testing::internal
ValueArray40	test/gtest/gtest.h	/^  ValueArray40(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray40
ValueArray40	test/gtest/gtest.h	/^class ValueArray40 {$/;"	c	namespace:testing::internal
ValueArray41	test/gtest/gtest.h	/^  ValueArray41(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray41
ValueArray41	test/gtest/gtest.h	/^class ValueArray41 {$/;"	c	namespace:testing::internal
ValueArray42	test/gtest/gtest.h	/^  ValueArray42(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray42
ValueArray42	test/gtest/gtest.h	/^class ValueArray42 {$/;"	c	namespace:testing::internal
ValueArray43	test/gtest/gtest.h	/^  ValueArray43(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray43
ValueArray43	test/gtest/gtest.h	/^class ValueArray43 {$/;"	c	namespace:testing::internal
ValueArray44	test/gtest/gtest.h	/^  ValueArray44(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray44
ValueArray44	test/gtest/gtest.h	/^class ValueArray44 {$/;"	c	namespace:testing::internal
ValueArray45	test/gtest/gtest.h	/^  ValueArray45(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray45
ValueArray45	test/gtest/gtest.h	/^class ValueArray45 {$/;"	c	namespace:testing::internal
ValueArray46	test/gtest/gtest.h	/^  ValueArray46(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray46
ValueArray46	test/gtest/gtest.h	/^class ValueArray46 {$/;"	c	namespace:testing::internal
ValueArray47	test/gtest/gtest.h	/^  ValueArray47(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray47
ValueArray47	test/gtest/gtest.h	/^class ValueArray47 {$/;"	c	namespace:testing::internal
ValueArray48	test/gtest/gtest.h	/^  ValueArray48(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray48
ValueArray48	test/gtest/gtest.h	/^class ValueArray48 {$/;"	c	namespace:testing::internal
ValueArray49	test/gtest/gtest.h	/^  ValueArray49(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray49
ValueArray49	test/gtest/gtest.h	/^class ValueArray49 {$/;"	c	namespace:testing::internal
ValueArray5	test/gtest/gtest.h	/^  ValueArray5(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray5
ValueArray5	test/gtest/gtest.h	/^class ValueArray5 {$/;"	c	namespace:testing::internal
ValueArray50	test/gtest/gtest.h	/^  ValueArray50(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray50
ValueArray50	test/gtest/gtest.h	/^class ValueArray50 {$/;"	c	namespace:testing::internal
ValueArray6	test/gtest/gtest.h	/^  ValueArray6(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6) : v1_(v1), v2_(v2),$/;"	f	class:testing::internal::ValueArray6
ValueArray6	test/gtest/gtest.h	/^class ValueArray6 {$/;"	c	namespace:testing::internal
ValueArray7	test/gtest/gtest.h	/^  ValueArray7(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7) : v1_(v1),$/;"	f	class:testing::internal::ValueArray7
ValueArray7	test/gtest/gtest.h	/^class ValueArray7 {$/;"	c	namespace:testing::internal
ValueArray8	test/gtest/gtest.h	/^  ValueArray8(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	class:testing::internal::ValueArray8
ValueArray8	test/gtest/gtest.h	/^class ValueArray8 {$/;"	c	namespace:testing::internal
ValueArray9	test/gtest/gtest.h	/^  ValueArray9(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	class:testing::internal::ValueArray9
ValueArray9	test/gtest/gtest.h	/^class ValueArray9 {$/;"	c	namespace:testing::internal
ValueHolder	test/gtest/gtest.h	/^    explicit ValueHolder(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
ValueHolder	test/gtest/gtest.h	/^  class ValueHolder : public ThreadLocalValueHolderBase {$/;"	c	class:std::tr1::ThreadLocal
Values	include/taco/ir/ir.h	/^  Values,$/;"	m	class:taco::ir::TensorProperty
Values	test/gtest/gtest.h	/^    T11> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T12> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T13> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Values(T1 v1,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16, T17, T18> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16, T17> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15, T16> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14, T15> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T14> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T26> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T27> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T28> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Values(T1 v1,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31, T32, T33> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31, T32> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30, T31> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29, T30> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T29> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T41> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T42> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T43> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T44, T45, T46, T47, T48, T49, T50> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T44, T45, T46, T47, T48, T49> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T44, T45, T46, T47, T48> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T44, T45, T46, T47> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T44, T45, T46> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T44, T45> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^    T44> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Values(T1 v1,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray1<T1> Values(T1 v1) {$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray2<T1, T2> Values(T1 v1, T2 v2) {$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray3<T1, T2, T3> Values(T1 v1, T2 v2, T3 v3) {$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray4<T1, T2, T3, T4> Values(T1 v1, T2 v2, T3 v3, T4 v4) {$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray5<T1, T2, T3, T4, T5> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray6<T1, T2, T3, T4, T5, T6> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray7<T1, T2, T3, T4, T5, T6, T7> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray8<T1, T2, T3, T4, T5, T6, T7, T8> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	test/gtest/gtest.h	/^internal::ValueArray9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
ValuesIn	test/gtest/gtest.h	/^ValuesIn(ForwardIterator begin, ForwardIterator end) {$/;"	f	namespace:testing
ValuesIn	test/gtest/gtest.h	/^internal::ParamGenerator<typename Container::value_type> ValuesIn($/;"	f	namespace:testing
ValuesInIteratorRangeGenerator	test/gtest/gtest.h	/^  ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
ValuesInIteratorRangeGenerator	test/gtest/gtest.h	/^class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
Vanilla	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^struct Vanilla {$/;"	s	file:
VanillaStaticMix1	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix1 : Vanilla, WithStatic1, WithStatic2 {$/;"	s	file:
VanillaStaticMix2	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix2 : WithStatic1, Vanilla, WithStatic2 {$/;"	s	file:
Var	include/taco/ir/ir.h	/^  Var,$/;"	m	class:taco::ir::IRNodeType
Var	include/taco/ir/ir.h	/^struct Var : public ExprNode<Var> {$/;"	s	namespace:taco::ir
VarAssign	include/taco/ir/ir.h	/^  VarAssign,$/;"	m	class:taco::ir::IRNodeType
VarDecl	include/taco/ir/ir.h	/^  VarDecl,$/;"	m	class:taco::ir::IRNodeType
VarDecl	include/taco/ir/ir.h	/^struct VarDecl : public StmtNode<VarDecl> {$/;"	s	namespace:taco::ir
Vector2	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2(Vector2 &&v) : x(v.x), y(v.y) { print_move_created(this); v.x = v.y = 0; }$/;"	f	class:Vector2
Vector2	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2(const Vector2 &v) : x(v.x), y(v.y) { print_copy_created(this); }$/;"	f	class:Vector2
Vector2	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2(float x, float y) : x(x), y(y) { print_created(this, toString()); }$/;"	f	class:Vector2
Vector2	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^class Vector2 {$/;"	c	file:
VectorElwiseSqrtFactory	test/expr_factory.h	/^struct VectorElwiseSqrtFactory : public ExprFactory {$/;"	s	namespace:taco::test
VectorTensorTest	test/tests-tensor_types.cpp	/^TYPED_TEST_CASE_P(VectorTensorTest);$/;"	v
VectorTensorTest	test/tests-tensor_types.cpp	/^template <typename T> class VectorTensorTest : public ::testing::Test {};$/;"	c	file:
Vectorized	include/taco/ir/ir.h	/^enum class LoopKind {Serial, Static, Dynamic, Runtime, Vectorized, Static_Chunked};$/;"	m	class:taco::ir::LoopKind
VerifyRegisteredTestNames	test/gtest/gtest-all.cc	/^const char* TypedTestCasePState::VerifyRegisteredTestNames($/;"	f	class:testing::internal::TypedTestCasePState
VirtClass	python_bindings/pybind11/tests/test_gil_scoped.cpp	/^class VirtClass  {$/;"	c	file:
Visitor	src/lower/lowerer_impl.cpp	/^  Visitor(LowererImpl* impl) : impl(impl) {}$/;"	f	class:taco::LowererImpl::Visitor
Visitor	src/lower/lowerer_impl.cpp	/^class LowererImpl::Visitor : public IndexNotationVisitorStrict {$/;"	c	class:taco::LowererImpl	file:
WARP_SIZE	test/tests-scheduling-eval.cpp	/^int WARP_SIZE = 32;$/;"	v
WIN	python_bindings/pybind11/pybind11/setup_helpers.py	/^WIN = sys.platform.startswith("win32")$/;"	v
WIN	python_bindings/pybind11/tests/env.py	/^WIN = sys.platform.startswith("win32") or sys.platform.startswith("cygwin")$/;"	v
Wait	test/gtest/gtest-all.cc	/^int ForkingDeathTest::Wait() {$/;"	f	class:testing::internal::ForkingDeathTest
Wait	test/gtest/gtest-all.cc	/^int WindowsDeathTest::Wait() {$/;"	f	class:testing::internal::WindowsDeathTest
WaitForNotification	test/gtest/gtest-all.cc	/^void Notification::WaitForNotification() {$/;"	f	class:testing::internal::Notification
WaitForNotification	test/gtest/gtest.h	/^  void WaitForNotification() {$/;"	f	class:std::tr1::Notification
WatcherThreadFunc	test/gtest/gtest-all.cc	/^  static DWORD WINAPI WatcherThreadFunc(LPVOID param) {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl	file:
Where	include/taco/index_notation/index_notation.h	/^class Where : public IndexStmt {$/;"	c	namespace:taco
Where	src/index_notation/index_notation.cpp	/^Where::Where(IndexStmt consumer, IndexStmt producer)$/;"	f	class:taco::Where
Where	src/index_notation/index_notation.cpp	/^Where::Where(const WhereNode* n) : IndexStmt(n) {$/;"	f	class:taco::Where
WhereNode	include/taco/index_notation/index_notation_nodes.h	/^  WhereNode(IndexStmt consumer, IndexStmt producer)$/;"	f	struct:taco::WhereNode
WhereNode	include/taco/index_notation/index_notation_nodes.h	/^struct WhereNode : public IndexStmtNode {$/;"	s	namespace:taco
While	include/taco/ir/ir.h	/^  While,$/;"	m	class:taco::ir::IRNodeType
While	include/taco/ir/ir.h	/^struct While : public StmtNode<While> {$/;"	s	namespace:taco::ir
WideCStringEquals	test/gtest/gtest-all.cc	/^bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {$/;"	f	class:testing::internal::String
WideStringToUtf8	test/gtest/gtest-all.cc	/^std::string WideStringToUtf8(const wchar_t* str, int num_chars) {$/;"	f	namespace:testing::internal
Widget	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^    Widget(std::string message) : message(message) { }$/;"	f	class:Widget
Widget	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^class Widget {$/;"	c	file:
Widget	python_bindings/pybind11/tests/test_embed/test_interpreter.py	/^from widget_module import Widget$/;"	i
Window	src/lower/iterator.cpp	/^    Window(ir::Expr _lo, ir::Expr _hi, ir::Expr _stride, ir::Expr _windowVar) :$/;"	f	struct:taco::Iterator::Content::Window
Window	src/lower/iterator.cpp	/^  struct Window {$/;"	s	struct:taco::Iterator::Content	file:
WindowedIndexVar	include/taco/index_notation/index_notation.h	/^class WindowedIndexVar : public util::Comparable<WindowedIndexVar>, public IndexVarInterface {$/;"	c	namespace:taco
WindowedIndexVar	src/index_notation/index_notation.cpp	/^WindowedIndexVar::WindowedIndexVar(IndexVar base, int lo, int hi, int stride) : content( new Content){$/;"	f	class:taco::WindowedIndexVar
Windows	include/taco/target.h	/^  enum OS {OSUnknown=0, Linux, MacOS, Windows} os;$/;"	e	enum:taco::Target::OS
WindowsDeathTest	test/gtest/gtest-all.cc	/^  WindowsDeathTest(const char* a_statement,$/;"	f	class:testing::internal::WindowsDeathTest
WindowsDeathTest	test/gtest/gtest-all.cc	/^class WindowsDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
WithParamInterface	test/gtest/gtest.h	/^class WithParamInterface {$/;"	c	namespace:testing
WithStatic1	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^struct WithStatic1 {$/;"	s	file:
WithStatic2	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^struct WithStatic2 {$/;"	s	file:
Write	test/gtest/gtest.h	/^inline int Write(int fd, const void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
WriteToShardStatusFileIfNeeded	test/gtest/gtest-all.cc	/^void WriteToShardStatusFileIfNeeded() {$/;"	f	namespace:testing::internal
X86	include/taco/target.h	/^  enum Arch {C99=0, X86} arch;$/;"	e	enum:taco::Target::Arch
XmlUnitTestResultPrinter	test/gtest/gtest-all.cc	/^XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
XmlUnitTestResultPrinter	test/gtest/gtest-all.cc	/^class XmlUnitTestResultPrinter : public EmptyTestEventListener {$/;"	c	namespace:testing::internal	file:
Yield	include/taco/index_notation/index_notation.h	/^class Yield : public IndexStmt {$/;"	c	namespace:taco
Yield	include/taco/ir/ir.h	/^  Yield,$/;"	m	class:taco::ir::IRNodeType
Yield	include/taco/ir/ir.h	/^struct Yield : public StmtNode<Yield> {$/;"	s	namespace:taco::ir
Yield	src/index_notation/index_notation.cpp	/^Yield::Yield(const YieldNode* n) : IndexStmt(n) {$/;"	f	class:taco::Yield
Yield	src/index_notation/index_notation.cpp	/^Yield::Yield(const std::vector<IndexVar>& indexVars, IndexExpr expr)$/;"	f	class:taco::Yield
YieldNode	include/taco/index_notation/index_notation_nodes.h	/^  YieldNode(const std::vector<IndexVar>& indexVars, IndexExpr expr)$/;"	f	struct:taco::YieldNode
YieldNode	include/taco/index_notation/index_notation_nodes.h	/^struct YieldNode : public IndexStmtNode {$/;"	s	namespace:taco
ZEROLESS	include/taco/format.h	/^    NOT_BRANCHLESS, COMPACT, NOT_COMPACT, ZEROLESS, NOT_ZEROLESS$/;"	e	enum:taco::ModeFormat::Property
Zero	src/index_notation/index_notation.cpp	/^  Zero(const set<Access>& zeroed) : zeroed(zeroed) {}$/;"	f	struct:taco::Zero
Zero	src/index_notation/index_notation.cpp	/^struct Zero : public IndexNotationRewriterStrict {$/;"	s	namespace:taco	file:
ZipConstIterable	include/taco/util/collections.h	/^  ZipConstIterable(const C1 &c1, const C2 &c2) : c1(c1), c2(c2) {}$/;"	f	class:taco::util::ZipConstIterable
ZipConstIterable	include/taco/util/collections.h	/^class ZipConstIterable {$/;"	c	namespace:taco::util
ZipConstIterator	include/taco/util/collections.h	/^    ZipConstIterator(const ZipConstIterator& zit)$/;"	f	class:taco::util::ZipConstIterable::ZipConstIterator
ZipConstIterator	include/taco/util/collections.h	/^    ZipConstIterator(const_iterator1 c1it, const_iterator2 c2it)$/;"	f	class:taco::util::ZipConstIterable::ZipConstIterator
ZipConstIterator	include/taco/util/collections.h	/^  class ZipConstIterator {$/;"	c	class:taco::util::ZipConstIterable
_	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr descr<0> _(char const(&)[1]) { return {}; }$/;"	f
_	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr descr<N - 1> _(char const(&text)[N]) { return descr<N - 1>(text); }$/;"	f
_	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, T2> _(const T1 &, const T2 &d) { return d; }$/;"	f
_	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, descr<N2 - 1>> _(char const(&)[N1], char const(&text2)[N2]) {$/;"	f
_	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, T1> _(const T1 &d, const T2 &) { return d; }$/;"	f
_	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, descr<N1 - 1>> _(char const(&text1)[N1], char const(&)[N2]) {$/;"	f
_	python_bindings/pybind11/include/pybind11/detail/descr.h	/^template <typename Type> constexpr descr<1, Type> _() { return {'%'}; }$/;"	f
_DEBUG	python_bindings/pybind11/include/pybind11/detail/common.h	/^#    define _DEBUG$/;"	d
_DEBUG	python_bindings/pybind11/include/pybind11/detail/common.h	/^#    undef _DEBUG$/;"	d
_Extension	python_bindings/pybind11/pybind11/setup_helpers.py	/^    from distutils.extension import Extension as _Extension$/;"	i
_Extension	python_bindings/pybind11/pybind11/setup_helpers.py	/^    from setuptools import Extension as _Extension$/;"	i
_HAS_EXCEPTIONS	test/gtest/gtest.h	/^#   define _HAS_EXCEPTIONS /;"	d
_Py_atomic_address	python_bindings/pybind11/include/pybind11/detail/common.h	/^    struct _Py_atomic_address { void *value; };$/;"	s
_USE_MATH_DEFINES	test/tests-tensor_types.cpp	/^#define _USE_MATH_DEFINES$/;"	d	file:
__OBJECT_H	python_bindings/pybind11/tests/object.h	/^#define __OBJECT_H$/;"	d
__abs__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __abs__(self):$/;"	m	class:tensor	file:
__add__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __add__(self, other):$/;"	m	class:tensor	file:
__all__	python_bindings/pybind11/pybind11/__init__.py	/^__all__ = ($/;"	v
__array__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __array__(self):$/;"	m	class:tensor	file:
__bool__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __bool__(self):$/;"	m	class:test_bool_caster.A	file:
__call__	python_bindings/pybind11/tests/conftest.py	/^    def __call__(self, thing):$/;"	m	class:SanitizedString	file:
__contains__	python_bindings/pybind11/tests/conftest.py	/^    def __contains__(self, item):$/;"	m	class:Capture	file:
__enter__	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def __enter__(self):$/;"	m	class:ParallelCompile	file:
__enter__	python_bindings/pybind11/tests/conftest.py	/^    def __enter__(self):$/;"	m	class:Capture	file:
__eq__	python_bindings/pybind11/tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Capture	file:
__eq__	python_bindings/pybind11/tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Output	file:
__eq__	python_bindings/pybind11/tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:SanitizedString	file:
__eq__	python_bindings/pybind11/tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Unordered	file:
__eq__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __eq__(self, other):$/;"	m	class:tensor	file:
__exit__	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def __exit__(self, *args):$/;"	m	class:ParallelCompile	file:
__exit__	python_bindings/pybind11/tests/conftest.py	/^    def __exit__(self, *args):$/;"	m	class:Capture	file:
__float__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __float__(self):$/;"	m	class:test_int_convert.Float	file:
__floordiv__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __floordiv__(self, other):$/;"	m	class:tensor	file:
__ge__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __ge__(self, other):$/;"	m	class:tensor	file:
__getitem__	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^        def __getitem__(self, i):$/;"	m	class:test_sequence_length.SequenceLike	file:
__getitem__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __getitem__(self, index):$/;"	m	class:tensor	file:
__gt__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __gt__(self, other):$/;"	m	class:tensor	file:
__has_include	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
__hash__	python_bindings/pybind11/tests/test_pytypes.py	/^        __hash__ = None$/;"	v	class:test_hash.Unhashable
__hash__	python_bindings/pybind11/tests/test_pytypes.py	/^        def __hash__(self):$/;"	m	class:test_hash.Hashable	file:
__index__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.Index	file:
__index__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.IntAndIndex	file:
__index__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.RaisingTypeErrorOnIndex	file:
__index__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.RaisingValueErrorOnIndex	file:
__init__	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Pybind11Extension
__init__	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def __init__(self, envvar=None, default=0, max=0, needs_recompile=no_recompile):$/;"	m	class:ParallelCompile
__init__	python_bindings/pybind11/tests/conftest.py	/^    def __init__(self, capfd):$/;"	m	class:Capture
__init__	python_bindings/pybind11/tests/conftest.py	/^    def __init__(self, sanitizer):$/;"	m	class:SanitizedString
__init__	python_bindings/pybind11/tests/conftest.py	/^    def __init__(self, string):$/;"	m	class:Output
__init__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __init__(self, x):$/;"	m	class:test_bool_caster.A
__init__	python_bindings/pybind11/tests/test_call_policies.py	/^        def __init__(self):$/;"	m	class:test_alive_gc_multi_derived.Derived
__init__	python_bindings/pybind11/tests/test_callbacks.py	/^        def __init__(self, value):$/;"	m	class:test_async_callbacks.Item
__init__	python_bindings/pybind11/tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_bind_protected_functions.C
__init__	python_bindings/pybind11/tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_inheritance_init.Python
__init__	python_bindings/pybind11/tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_inheritance_init.RabbitHamster
__init__	python_bindings/pybind11/tests/test_embed/test_interpreter.py	/^    def __init__(self, message):$/;"	m	class:DerivedWidget
__init__	python_bindings/pybind11/tests/test_factory_constructors.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance.MITest
__init__	python_bindings/pybind11/tests/test_factory_constructors.py	/^        def __init__(self, *args):$/;"	m	class:test_init_factory_alias.MyTest
__init__	python_bindings/pybind11/tests/test_factory_constructors.py	/^        def __init__(self, bad):$/;"	m	class:test_invalid_self.BrokenTF1
__init__	python_bindings/pybind11/tests/test_factory_constructors.py	/^        def __init__(self, bad):$/;"	m	class:test_invalid_self.BrokenTF6
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany117
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany14
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany19
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany58
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany916
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix1.Base1
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix2.Base2
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI6
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI7
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8b
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix1.MITypePy
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix2.MITypePy
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI1
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI2
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI3
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI4
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI5
__init__	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_virtbase.MITypePy
__init__	python_bindings/pybind11/tests/test_pytypes.py	/^        def __init__(self, value):$/;"	m	class:test_hash.Hashable
__init__	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization1.B
__init__	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization2.B2
__init__	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt
__init__	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt2
__init__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __init__(self, arg1=None, fmt=_cm.compressed, dtype=_cm.float32, name=None):$/;"	m	class:tensor
__int__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.Int	file:
__int__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.IntAndIndex	file:
__int__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.RaisingTypeErrorOnIndex	file:
__int__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.RaisingValueErrorOnIndex	file:
__iter__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __iter__(self):$/;"	m	class:tensor	file:
__le__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __le__(self, other):$/;"	m	class:tensor	file:
__len__	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^        def __len__(self):$/;"	m	class:test_sequence_length.SequenceLike	file:
__lt__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __lt__(self, other):$/;"	m	class:tensor	file:
__mul__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __mul__(self, other):$/;"	m	class:tensor	file:
__ne__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __ne__(self, other):$/;"	m	class:tensor	file:
__neg__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __neg__(self):$/;"	m	class:tensor	file:
__nonzero__	python_bindings/pybind11/tests/test_builtin_casters.py	/^        def __nonzero__(self):$/;"	m	class:test_bool_caster.A	file:
__pow__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __pow__(self, power, modulo=None):$/;"	m	class:tensor	file:
__radd__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __radd__(self, other):$/;"	m	class:tensor	file:
__repr__	python_bindings/pybind11/tests/test_constants_and_functions.py	/^        def __repr__(self):$/;"	m	class:test_function_record_leaks.RaisingRepr	file:
__repr__	python_bindings/pybind11/tests/test_exceptions.py	/^        def __repr__(self):$/;"	m	class:test_invalid_repr.MyRepr	file:
__repr__	python_bindings/pybind11/tests/test_pytypes.py	/^        def __repr__(self):$/;"	m	class:test_str.A	file:
__repr__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __repr__(self):$/;"	m	class:tensor	file:
__rfloordiv__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __rfloordiv__(self, other):$/;"	m	class:tensor	file:
__rmul__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __rmul__(self, other):$/;"	m	class:tensor	file:
__rsub__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __rsub__(self, other):$/;"	m	class:tensor	file:
__rtruediv__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __rtruediv__(self, other):$/;"	m	class:tensor	file:
__self	python_bindings/pybind11/include/pybind11/operators.h	/^inline self_t __self() { return self; }$/;"	f
__setitem__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __setitem__(self, key, value):$/;"	m	class:tensor	file:
__slots__	python_bindings/pybind11/pybind11/setup_helpers.py	/^    __slots__ = ("envvar", "default", "max", "_old", "needs_recompile")$/;"	v	class:ParallelCompile
__str__	python_bindings/pybind11/tests/conftest.py	/^    def __str__(self):$/;"	m	class:Capture	file:
__str__	python_bindings/pybind11/tests/conftest.py	/^    def __str__(self):$/;"	m	class:Output	file:
__str__	python_bindings/pybind11/tests/test_pytypes.py	/^        def __str__(self):$/;"	m	class:test_str.A	file:
__sub__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __sub__(self, other):$/;"	m	class:tensor	file:
__truediv__	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def __truediv__(self, other):$/;"	m	class:tensor	file:
__version__	python_bindings/pybind11/pybind11/__init__.py	/^from ._version import version_info, __version__$/;"	i
__version__	python_bindings/pybind11/pybind11/_version.py	/^__version__ = "2.6.2"$/;"	v
_a	python_bindings/pybind11/include/pybind11/cast.h	/^constexpr arg operator"" _a(const char *name, size_t) { return arg(name); }$/;"	f	namespace:literals
_access	include/taco/tensor.h	/^std::vector<std::shared_ptr<IndexVarInterface>> Tensor<CType>::_access() {$/;"	f	class:taco::Tensor
_access	include/taco/tensor.h	/^std::vector<std::shared_ptr<IndexVarInterface>> Tensor<CType>::_access(const First& first, const Rest&... rest) {$/;"	f	class:taco::Tensor
_access_wrapper	include/taco/tensor.h	/^Access Tensor<CType>::_access_wrapper(const Args&... args) {$/;"	f	class:taco::Tensor
_add_cflags	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def _add_cflags(self, flags):$/;"	m	class:Pybind11Extension
_add_ldflags	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def _add_ldflags(self, flags):$/;"	m	class:Pybind11Extension
_as_list	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _as_list(x):$/;"	f
_build_ext	python_bindings/pybind11/pybind11/setup_helpers.py	/^    from distutils.command.build_ext import build_ext as _build_ext$/;"	i
_build_ext	python_bindings/pybind11/pybind11/setup_helpers.py	/^    from setuptools.command.build_ext import build_ext as _build_ext$/;"	i
_cm	python_bindings/pytaco/pytensor/taco_tensor.py	/^from ..core import core_modules as _cm$/;"	i
_cm	python_bindings/pytaco/pytensor/tensorIO.py	/^from ..core import core_modules as _cm$/;"	i
_compute_bin_elt_wise_op	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _compute_bin_elt_wise_op(op, t1, t2, out_format, dtype=None):$/;"	f
_compute_elt_wise_out_shape	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _compute_elt_wise_out_shape(shape1, shape2):$/;"	f
_compute_unary_elt_eise_op	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _compute_unary_elt_eise_op(op, t1, out_format, dtype=None):$/;"	f
_dot_output_shape	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _dot_output_shape(shape1, shape2):$/;"	f
_dtype_error	python_bindings/pytaco/pytensor/taco_tensor.py	/^_dtype_error = "Invalid datatype. Must be bool, float32\/64, (u)int8, (u)int16, (u)int32 or (u)int64"$/;"	v
_dtype_from_pep3118	python_bindings/pybind11/include/pybind11/numpy.h	/^    static object _dtype_from_pep3118() {$/;"	f
_dtype_to_tensor	python_bindings/pytaco/pytensor/taco_tensor.py	/^_dtype_to_tensor = {_cm.bool:    _cm.TensorBool,$/;"	v
_fromCppTensor	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def _fromCppTensor(cls, cppTensor):$/;"	m	class:tensor
_from_matrix	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _from_matrix(inp_mat, copy, csr):$/;"	f
_from_x	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def _from_x(cls, x, dtype):$/;"	m	class:tensor
_get_indices_for_operands	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _get_indices_for_operands(result_indices, order1, order2):$/;"	f
_hexadecimal	python_bindings/pybind11/tests/conftest.py	/^_hexadecimal = re.compile(r"0x[0-9a-fA-F]+")$/;"	v
_instances	python_bindings/pybind11/tests/constructor_stats.h	/^    std::unordered_map<void*, int> _instances; \/\/ Need a map rather than set because members can shared address with parents$/;"	m	class:ConstructorStats
_is_broadcastable	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _is_broadcastable(shape1, shape2):$/;"	f
_last_tensor_type	test/tests-format-mm-permute.cpp	/^    _last_tensor_type$/;"	e	enum:tensor_type	file:
_long_marker	python_bindings/pybind11/tests/conftest.py	/^_long_marker = re.compile(r"([0-9])L")$/;"	v
_make_explanation	python_bindings/pybind11/tests/conftest.py	/^def _make_explanation(a, b):$/;"	f
_matrix_out_shape	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _matrix_out_shape(shape1, shape2):$/;"	f
_python_to_cpp_to_python	python_bindings/pybind11/tests/test_gil_scoped.py	/^def _python_to_cpp_to_python():$/;"	f
_python_to_cpp_to_python_from_threads	python_bindings/pybind11/tests/test_gil_scoped.py	/^def _python_to_cpp_to_python_from_threads(num_threads, parallel=False):$/;"	f
_remove_elts_at_index	python_bindings/pytaco/pytensor/taco_tensor.py	/^def _remove_elts_at_index(inp, elts_to_remove):$/;"	f
_run_in_process	python_bindings/pybind11/tests/test_gil_scoped.py	/^def _run_in_process(target, *args, **kwargs):$/;"	f
_s	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline str operator"" _s(const char *s, size_t size) { return {s, size}; }$/;"	f	namespace:literals
_sanitize_docstring	python_bindings/pybind11/tests/conftest.py	/^def _sanitize_docstring(thing):$/;"	f
_sanitize_general	python_bindings/pybind11/tests/conftest.py	/^def _sanitize_general(s):$/;"	f
_sanitize_message	python_bindings/pybind11/tests/conftest.py	/^def _sanitize_message(thing):$/;"	f
_single_compile	python_bindings/pybind11/pybind11/setup_helpers.py	/^            def _single_compile(obj):$/;"	f	function:ParallelCompile.function.compile_function
_split_and_sort	python_bindings/pybind11/tests/conftest.py	/^def _split_and_sort(s):$/;"	f
_strip_and_dedent	python_bindings/pybind11/tests/conftest.py	/^def _strip_and_dedent(s):$/;"	f
_sync	python_bindings/pybind11/include/pybind11/iostream.h	/^    int _sync() {$/;"	f	class:pythonbuf
_to_int	python_bindings/pybind11/pybind11/_version.py	/^def _to_int(s):$/;"	f
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Add;$/;"	m	struct:taco::ir::Add
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Allocate;$/;"	m	struct:taco::ir::Allocate
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::And;$/;"	m	struct:taco::ir::And
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::BinOp;$/;"	m	struct:taco::ir::BinOp
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::BitAnd;$/;"	m	struct:taco::ir::BitAnd
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::BitOr;$/;"	m	struct:taco::ir::BitOr
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::BlankLine;$/;"	m	struct:taco::ir::BlankLine
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Block;$/;"	m	struct:taco::ir::Block
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Break;$/;"	m	struct:taco::ir::Break
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Call;$/;"	m	struct:taco::ir::Call
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Case;$/;"	m	struct:taco::ir::Case
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Cast;$/;"	m	struct:taco::ir::Cast
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Comment;$/;"	m	struct:taco::ir::Comment
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Continue;$/;"	m	struct:taco::ir::Continue
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Div;$/;"	m	struct:taco::ir::Div
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Eq;$/;"	m	struct:taco::ir::Eq
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::For;$/;"	m	struct:taco::ir::For
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Free;$/;"	m	struct:taco::ir::Free
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Function;$/;"	m	struct:taco::ir::Function
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::GetProperty;$/;"	m	struct:taco::ir::GetProperty
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Gt;$/;"	m	struct:taco::ir::Gt
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Gte;$/;"	m	struct:taco::ir::Gte
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::IfThenElse;$/;"	m	struct:taco::ir::IfThenElse
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Literal;$/;"	m	struct:taco::ir::Literal
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Load;$/;"	m	struct:taco::ir::Load
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Lt;$/;"	m	struct:taco::ir::Lt
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Lte;$/;"	m	struct:taco::ir::Lte
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Malloc;$/;"	m	struct:taco::ir::Malloc
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Max;$/;"	m	struct:taco::ir::Max
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Min;$/;"	m	struct:taco::ir::Min
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Mul;$/;"	m	struct:taco::ir::Mul
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Neg;$/;"	m	struct:taco::ir::Neg
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Neq;$/;"	m	struct:taco::ir::Neq
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Or;$/;"	m	struct:taco::ir::Or
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Print;$/;"	m	struct:taco::ir::Print
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Rem;$/;"	m	struct:taco::ir::Rem
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Scope;$/;"	m	struct:taco::ir::Scope
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Sizeof;$/;"	m	struct:taco::ir::Sizeof
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Sort;$/;"	m	struct:taco::ir::Sort
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Sqrt;$/;"	m	struct:taco::ir::Sqrt
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Store;$/;"	m	struct:taco::ir::Store
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Sub;$/;"	m	struct:taco::ir::Sub
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Switch;$/;"	m	struct:taco::ir::Switch
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Var;$/;"	m	struct:taco::ir::Var
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::VarAssign;$/;"	m	struct:taco::ir::Assign
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::VarDecl;$/;"	m	struct:taco::ir::VarDecl
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::While;$/;"	m	struct:taco::ir::While
_type_info	include/taco/ir/ir.h	/^  static const IRNodeType _type_info = IRNodeType::Yield;$/;"	m	struct:taco::ir::Yield
_unicode_marker	python_bindings/pybind11/tests/conftest.py	/^_unicode_marker = re.compile(r"u(\\'[^\\']*\\')")$/;"	v
_values	python_bindings/pybind11/tests/constructor_stats.h	/^    std::list<std::string> _values; \/\/ Used to track values (e.g. of value constructors)$/;"	m	class:ConstructorStats
a	include/taco/index_notation/index_notation_nodes.h	/^  IndexExpr a;$/;"	m	struct:taco::BinaryExprNode
a	include/taco/index_notation/index_notation_nodes.h	/^  IndexExpr a;$/;"	m	struct:taco::CastNode
a	include/taco/index_notation/index_notation_nodes.h	/^  IndexExpr a;$/;"	m	struct:taco::ReductionNode
a	include/taco/index_notation/index_notation_nodes.h	/^  IndexExpr a;$/;"	m	struct:taco::UnaryExprNode
a	include/taco/index_notation/iteration_algebra.h	/^  IterationAlgebra a;$/;"	m	struct:taco::BinaryIterationAlgebraNode
a	include/taco/index_notation/iteration_algebra.h	/^  IterationAlgebra a;$/;"	m	struct:taco::ComplementNode
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Add
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::And
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::BinOp
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::BitAnd
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::BitOr
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Cast
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Div
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Eq
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Gt
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Gte
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Lt
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Lte
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Mul
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Neg
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Neq
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Or
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Rem
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Sqrt
a	include/taco/ir/ir.h	/^  Expr a;$/;"	m	struct:taco::ir::Sub
a	python_bindings/pybind11/tests/test_class.py	/^        a = m.HasOpNewDel()$/;"	v	class:test_operator_new_delete.SubAliased
a	python_bindings/pybind11/tests/test_eigen.cpp	/^    Eigen::Matrix4d a = Eigen::Matrix4d::Zero();$/;"	m	struct:CustomOperatorNew	file:
a	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    PartialStruct a;$/;"	m	struct:PartialNestedStruct	file:
a	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    char a[3];$/;"	m	struct:StringStruct	file:
a	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    char a[3][4];$/;"	m	struct:ArrayStruct	file:
a	python_bindings/pybind11/tests/test_stl_binders.cpp	/^    int a;$/;"	m	class:El	file:
a	python_bindings/pybind11/tests/test_virtual_functions.py	/^        a = m.A()$/;"	v	class:test_alias_delay_initialization1.B
a2	python_bindings/pybind11/tests/test_virtual_functions.py	/^        a2 = m.A2()$/;"	v	class:test_alias_delay_initialization2.B2
a3	python_bindings/pybind11/tests/test_virtual_functions.py	/^        a3 = m.A2(1)$/;"	v	class:test_alias_delay_initialization2.B2
abs	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^std::string abs(const Vector2&) {$/;"	f
abs	src/index_notation/index_notation.cpp	/^IndexExpr abs(IndexExpr a) {$/;"	f	namespace:taco
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::AccessNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::AddNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::CallIntrinsicNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::CallNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::CastNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::DivNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::IndexVarNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::LiteralNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::MulNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::NegNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::ReductionNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::SqrtNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexExprVisitorStrict* v) const {$/;"	f	struct:taco::SubNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexStmtVisitorStrict* v) const {$/;"	f	struct:taco::AssignmentNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexStmtVisitorStrict* v) const {$/;"	f	struct:taco::ForallNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexStmtVisitorStrict* v) const {$/;"	f	struct:taco::MultiNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexStmtVisitorStrict* v) const {$/;"	f	struct:taco::SequenceNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexStmtVisitorStrict* v) const {$/;"	f	struct:taco::SuchThatNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexStmtVisitorStrict* v) const {$/;"	f	struct:taco::WhereNode
accept	include/taco/index_notation/index_notation_nodes.h	/^  void accept(IndexStmtVisitorStrict* v) const {$/;"	f	struct:taco::YieldNode
accept	include/taco/ir/ir.h	/^  void accept(IRVisitorStrict *v) const {$/;"	f	struct:taco::ir::IRHandle
accept	src/index_notation/index_notation.cpp	/^void IndexExpr::accept(IndexExprVisitorStrict *v) const {$/;"	f	class:taco::IndexExpr
accept	src/index_notation/index_notation.cpp	/^void IndexStmt::accept(IndexStmtVisitorStrict *v) const {$/;"	f	class:taco::IndexStmt
accept	src/index_notation/iteration_algebra.cpp	/^void ComplementNode::accept(IterationAlgebraVisitorStrict *v) const {$/;"	f	class:taco::ComplementNode
accept	src/index_notation/iteration_algebra.cpp	/^void IntersectNode::accept(IterationAlgebraVisitorStrict *v) const {$/;"	f	class:taco::IntersectNode
accept	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebra::accept(IterationAlgebraVisitorStrict *v) const {$/;"	f	class:taco::IterationAlgebra
accept	src/index_notation/iteration_algebra.cpp	/^void RegionNode::accept(IterationAlgebraVisitorStrict *v) const {$/;"	f	class:taco::RegionNode
accept	src/index_notation/iteration_algebra.cpp	/^void UnionNode::accept(IterationAlgebraVisitorStrict *v) const {$/;"	f	class:taco::UnionNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Add>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<And>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<BinOp>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<BitAnd>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<BitOr>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Call>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Cast>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Div>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Eq>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<GetProperty>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Gt>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Gte>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Literal>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Load>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Lt>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Lte>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Malloc>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Max>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Min>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Mul>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Neg>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Neq>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Or>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Rem>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Sizeof>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Sqrt>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Sub>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void ExprNode<Var>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::ExprNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Allocate>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Assign>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<BlankLine>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Block>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Break>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Case>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Comment>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Continue>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<For>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Free>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Function>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<IfThenElse>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Print>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Scope>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Sort>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Store>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Switch>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<VarDecl>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<While>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
accept	src/ir/ir.cpp	/^template<> void StmtNode<Yield>::accept(IRVisitorStrict *v)$/;"	f	class:taco::ir::StmtNode
acceptJoin	src/index_notation/index_notation_printer.cpp	/^static inline void acceptJoin(IndexNotationPrinter* printer, $/;"	f	namespace:taco
acceptJoin	src/ir/ir_printer.cpp	/^static inline void acceptJoin(IRPrinter* printer, ostream& stream,$/;"	f	namespace:taco::ir
access	src/index_notation/provenance_graph.cpp	/^  Access access;$/;"	m	struct:taco::PosRelNode::Content	file:
access	src/lower/mode_access.h	/^  Access access;$/;"	m	class:taco::ModeAccess
access	src/lower/tensor_path.cpp	/^  Access access;$/;"	m	struct:taco::TensorPath::Content	file:
accessGetter	python_bindings/src/pyTensor.cpp	/^static inline Access accessGetter(Tensor<CType>& tensor, idxVar& var) {$/;"	f	namespace:taco::pythonBindings
accessNodesToPaths	src/lower/iteration_graph.cpp	/^  map<IndexExpr,TensorPath> accessNodesToPaths;$/;"	m	struct:taco::IterationGraph::Content	file:
accessibleIterators	include/taco/lower/lowerer_impl.h	/^  util::ScopedSet<Iterator> accessibleIterators;$/;"	m	class:taco::LowererImpl
accessor	python_bindings/pybind11/include/pybind11/pytypes.h	/^    accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) { }$/;"	f	class:accessor
accessor	python_bindings/pybind11/include/pybind11/pytypes.h	/^class accessor : public object_api<accessor<Policy>> {$/;"	c
accessor_policies	python_bindings/pybind11/include/pybind11/pytypes.h	/^namespace accessor_policies {$/;"	n
acos	src/index_notation/index_notation.cpp	/^IndexExpr acos(IndexExpr a) {$/;"	f	namespace:taco
acosh	src/index_notation/index_notation.cpp	/^IndexExpr acosh(IndexExpr a) {$/;"	f	namespace:taco
acquire	include/taco/ir/ir.h	/^  friend void acquire(const IRNode* node) {$/;"	f	struct:taco::ir::IRNode
acquire	include/taco/util/intrusive_ptr.h	/^  friend void acquire(const Data *data) { ++data->ref; }$/;"	f	class:taco::util::Manageable
active	python_bindings/pybind11/include/pybind11/pybind11.h	/^    bool active = true;$/;"	m	class:gil_scoped_acquire
active	python_bindings/pybind11/include/pybind11/pybind11.h	/^    bool active = true;$/;"	m	class:gil_scoped_release
actual	test/test.h	/^  IndexStmt actual;$/;"	m	struct:taco::test::NotationTest
ad_hoc_test_result	test/gtest/gtest-all.cc	/^  const TestResult* ad_hoc_test_result() const { return &ad_hoc_test_result_; }$/;"	f	class:testing::internal::UnitTestImpl
ad_hoc_test_result	test/gtest/gtest-all.cc	/^const TestResult& UnitTest::ad_hoc_test_result() const {$/;"	f	class:testing::UnitTest
ad_hoc_test_result	test/gtest/gtest.h	/^  const TestResult& ad_hoc_test_result() const { return ad_hoc_test_result_; }$/;"	f	class:testing::TestCase
ad_hoc_test_result_	test/gtest/gtest-all.cc	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::internal::UnitTestImpl	file:
ad_hoc_test_result_	test/gtest/gtest.h	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::TestCase
add	include/taco/parser/lexer.h	/^  add,$/;"	m	class:taco::parser::Token
add	python_bindings/pybind11/include/pybind11/pytypes.h	/^    template <typename T> bool add(T &&val) const {$/;"	f	class:set
add	src/index_notation/index_notation.cpp	/^  void add(const vector<IndexVar>& vars) {$/;"	f	struct:taco::GetIndexVars
add	src/storage/typed_index.cpp	/^void TypedIndex::add(IndexTypeUnion& result, const IndexTypeUnion& a, const IndexTypeUnion& b) const {$/;"	f	class:taco::TypedIndex
add	src/storage/typed_value.cpp	/^void TypedComponent::add(ComponentTypeUnion& result, const ComponentTypeUnion& a, const ComponentTypeUnion& b) const {$/;"	f	class:taco::TypedComponent
add1	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add1(ExampleMandA other) { value += other.value; }         \/\/ passing by value$/;"	f	class:ExampleMandA
add10	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add10(const int *other) { value += *other; }               \/\/ passing by const pointer$/;"	f	class:ExampleMandA
add2	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add2(ExampleMandA &other) { value += other.value; }        \/\/ passing by reference$/;"	f	class:ExampleMandA
add3	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add3(const ExampleMandA &other) { value += other.value; }  \/\/ passing by const reference$/;"	f	class:ExampleMandA
add4	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add4(ExampleMandA *other) { value += other->value; }       \/\/ passing by pointer$/;"	f	class:ExampleMandA
add5	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add5(const ExampleMandA *other) { value += other->value; } \/\/ passing by const pointer$/;"	f	class:ExampleMandA
add6	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add6(int other) { value += other; }                        \/\/ passing by value$/;"	f	class:ExampleMandA
add7	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add7(int &other) { value += other; }                       \/\/ passing by reference$/;"	f	class:ExampleMandA
add8	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add8(const int &other) { value += other; }                 \/\/ passing by const reference$/;"	f	class:ExampleMandA
add9	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void add9(int *other) { value += *other; }                      \/\/ passing by pointer$/;"	f	class:ExampleMandA
addAssign	src/ir/ir_generators.cpp	/^Stmt addAssign(Expr a, Expr val, bool use_atomics, ParallelUnit atomic_parallel_unit) {$/;"	f	namespace:taco::ir
addDependentTensor	src/tensor.cpp	/^void TensorBase::addDependentTensor(TensorBase& tensor) {$/;"	f	class:taco::TensorBase
addDimensionError	src/error/error_checks.cpp	/^static string addDimensionError(const IndexVar& var,$/;"	f	namespace:taco::error
addEdges	src/error/error_checks.cpp	/^static void addEdges(vector<IndexVar> indexVars, vector<int> modeOrdering,$/;"	f	namespace:taco::error
addFunction	src/codegen/module.cpp	/^void Module::addFunction(Stmt func) {$/;"	f	class:taco::ir::Module
addHelpers	python_bindings/src/pytaco.cpp	/^void addHelpers(py::module &m) {$/;"	f
addIndexExprOps	python_bindings/src/pyIndexNotation.cpp	/^static void addIndexExprOps(PyClass &class_instance){$/;"	f	namespace:taco::pythonBindings
addInt	src/storage/typed_index.cpp	/^void TypedIndex::addInt(IndexTypeUnion& result, const IndexTypeUnion& a, const int b) const {$/;"	f	class:taco::TypedIndex
addInt	src/storage/typed_value.cpp	/^void TypedComponent::addInt(ComponentTypeUnion& result, const ComponentTypeUnion& a, const int b) const {$/;"	f	class:taco::TypedComponent
addPrecompute	src/index_notation/schedule.cpp	/^void Schedule::addPrecompute(Precompute workspace) {$/;"	f	class:taco::Schedule
addRelativeBoundsToMap	src/index_notation/provenance_graph.cpp	/^void ProvenanceGraph::addRelativeBoundsToMap(IndexVar indexVar, std::set<IndexVar> alreadyDefined, std::map<IndexVar, std::vector<ir::Expr>> &bounds, std::map<IndexVar, ir::Expr> variableExprs, Iterators iterators) const {$/;"	f	class:taco::ProvenanceGraph
addVar	src/lower/mode.cpp	/^void Mode::addVar(std::string varName, ir::Expr var) {$/;"	f	class:taco::Mode
add_base	python_bindings/pybind11/include/pybind11/attr.h	/^    PYBIND11_NOINLINE void add_base(const std::type_info &base, void *(*caster)(void *)) {$/;"	f	struct:type_record
add_base	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static void add_base(detail::type_record &) { }$/;"	f	class:class_
add_base	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static void add_base(detail::type_record &rec) {$/;"	f	class:class_
add_class_method	python_bindings/pybind11/include/pybind11/pybind11.h	/^inline void add_class_method(object& cls, const char *name_, const cpp_function &cf) {$/;"	f
add_object	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void add_object(const char *name, handle obj, bool overwrite = false) {$/;"	f	class:module_
add_ostream_redirect	python_bindings/pybind11/include/pybind11/iostream.h	/^inline class_<detail::OstreamRedirect> add_ostream_redirect(module_ m, std::string name = "ostream_redirect") {$/;"	f
add_patient	python_bindings/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE static void add_patient(handle h) {$/;"	f	class:loader_life_support
add_patient	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline void add_patient(PyObject *nurse, PyObject *patient) {$/;"	f
adjust_matrix	python_bindings/pybind11/tests/test_eigen.cpp	/^template <typename MatrixArgType> Eigen::MatrixXd adjust_matrix(MatrixArgType m) {$/;"	f
advance	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void advance() {$/;"	f	class:iterator
advance	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void advance(ssize_t n) { index += n; }$/;"	f	class:sequence_slow_readwrite
advance	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void advance(ssize_t n) { ptr += n; }$/;"	f	class:sequence_fast_readonly
advance	python_bindings/src/pyTensor.cpp	/^  py::tuple advance() {$/;"	f	class:taco::pythonBindings::PyTensorIter
alg	include/taco/index_notation/iteration_algebra.h	/^  IterationAlgebra alg;$/;"	m	class:taco::IterationAlgebraRewriterStrict
algEqual	src/index_notation/iteration_algebra.cpp	/^bool algEqual(const IterationAlgebra& a, const IterationAlgebra& b) {$/;"	f	namespace:taco
algStructureEqual	src/index_notation/iteration_algebra.cpp	/^bool algStructureEqual(const IterationAlgebra& a, const IterationAlgebra& b) {$/;"	f	namespace:taco
algebraFunc	include/taco/index_notation/tensor_operator.h	/^  FuncAlgebraGenerator algebraFunc;$/;"	m	class:taco::Func
algebraString	src/index_notation/iteration_algebra.cpp	/^const std::string IntersectNode::algebraString() const {$/;"	f	class:taco::IntersectNode
algebraString	src/index_notation/iteration_algebra.cpp	/^const std::string UnionNode::algebraString() const {$/;"	f	class:taco::UnionNode
alias	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    bool alias = false;$/;"	m	class:TestFactory6	file:
alias	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    bool alias = false;$/;"	m	class:TestFactory7	file:
alias_constructor	python_bindings/pybind11/include/pybind11/detail/init.h	/^template <typename... Args> struct alias_constructor {$/;"	s
alias_factory	python_bindings/pybind11/include/pybind11/detail/init.h	/^    remove_reference_t<AFunc> alias_factory;$/;"	m	struct:factory
alignment	python_bindings/pybind11/include/pybind11/numpy.h	/^    int alignment;$/;"	m	struct:PyArrayDescr_Proxy
alive	python_bindings/pybind11/tests/constructor_stats.h	/^    int alive() {$/;"	f	class:ConstructorStats
all	include/taco/util/collections.h	/^bool all(const C& collection, T test) {$/;"	f	namespace:taco::util
all	python_bindings/pybind11/tools/make_changelog.py	/^import ghapi.all$/;"	i
allForFreeLoopsBeforeAllReductionLoops	src/index_notation/index_notation.cpp	/^bool allForFreeLoopsBeforeAllReductionLoops(IndexStmt stmt) {$/;"	f	namespace:taco
all_files	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^all_files = src_files | py_files$/;"	v
all_type_info	python_bindings/pybind11/include/pybind11/cast.h	/^    values_and_holders(instance *inst) : inst{inst}, tinfo(all_type_info(Py_TYPE(inst))) {}$/;"	f	struct:values_and_holders
all_type_info	python_bindings/pybind11/include/pybind11/cast.h	/^inline const std::vector<detail::type_info *> &all_type_info(PyTypeObject *type) {$/;"	f
all_type_info_get_cache	python_bindings/pybind11/include/pybind11/pybind11.h	/^inline std::pair<decltype(internals::registered_types_py)::iterator, bool> all_type_info_get_cache(PyTypeObject *type) {$/;"	f
all_type_info_populate	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline void all_type_info_populate(PyTypeObject *t, std::vector<type_info *> &bases) {$/;"	f
allclose	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def allclose(a_list, b_list, rel_tol=1e-05, abs_tol=0.0):$/;"	f
alloc	test/tests-storage_alloc.cpp	/^struct alloc : public TestWithParam<TestData> {};$/;"	s	namespace:storage_alloc_tests	file:
allocSize	include/taco/lower/mode_format_compressed.h	/^  const long long allocSize;$/;"	m	class:taco::CompressedModeFormat
allocSize	include/taco/lower/mode_format_singleton.h	/^  const long long allocSize;$/;"	m	class:taco::SingletonModeFormat
allocSize	include/taco/tensor.h	/^  size_t             allocSize;$/;"	m	struct:taco::TensorBase::Content
alloc_mem	src/taco_tensor_t.cpp	/^void * alloc_mem(size_t size) {$/;"	f
allocate_layout	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline void instance::allocate_layout() {$/;"	f	class:instance
also_run_disabled_tests_	test/gtest/gtest-all.cc	/^  bool also_run_disabled_tests_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
alwaysMatch	include/taco/ir/ir.h	/^  bool alwaysMatch;$/;"	m	struct:taco::ir::Case
always_construct_holder	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T, bool Value = false> struct always_construct_holder { static constexpr bool value = Value; };$/;"	s
and	python_bindings/pybind11/docs/conf.py	/^if not on_rtd:  # only import and set the theme if we're building docs locally$/;"	i
annihilates	src/index_notation/properties.cpp	/^IndexExpr Annihilator::annihilates(const std::vector<IndexExpr>& exprs) const {$/;"	f	class:taco::Annihilator
annihilator	src/index_notation/properties.cpp	/^const Literal& Annihilator::annihilator() const {$/;"	f	class:taco::Annihilator
annihilator	src/index_notation/property_pointers.cpp	/^  Literal annihilator;$/;"	m	struct:taco::AnnihilatorPtr::Content	file:
annihilator	src/index_notation/property_pointers.cpp	/^const Literal& AnnihilatorPtr::annihilator() const {$/;"	f	class:taco::AnnihilatorPtr
annotateConcreteNotation	src/index_notation/index_notation.cpp	/^void annotateConcreteNotation(IndexStmt stmt, std::vector<IndexExpr> AcceleratedExpressions){$/;"	f	namespace:taco
answer	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^class NoneTester { public: int answer = 42; };$/;"	m	class:NoneTester	file:
any	include/taco/util/collections.h	/^bool any(const C& collection, T test) {$/;"	f	namespace:taco::util
anyModeIteratorIsLeaf	src/lower/merge_lattice.cpp	/^bool MergeLattice::anyModeIteratorIsLeaf() const {$/;"	f	class:taco::MergeLattice
any_container	python_bindings/pybind11/include/pybind11/detail/common.h	/^    any_container(It first, It last) : v(first, last) { }$/;"	f	class:overload_cast_impl::any_container
any_container	python_bindings/pybind11/include/pybind11/detail/common.h	/^    any_container(const Container &c) : any_container(std::begin(c), std::end(c)) { }$/;"	f	class:overload_cast_impl::any_container
any_container	python_bindings/pybind11/include/pybind11/detail/common.h	/^    any_container(const std::initializer_list<TIn> &c) : any_container(c.begin(), c.end()) { }$/;"	f	class:overload_cast_impl::any_container
any_container	python_bindings/pybind11/include/pybind11/detail/common.h	/^    any_container(std::vector<T> &&v) : v(std::move(v)) { }$/;"	f	class:overload_cast_impl::any_container
any_container	python_bindings/pybind11/include/pybind11/detail/common.h	/^class any_container {$/;"	c	struct:overload_cast_impl
api	python_bindings/pybind11/tools/make_changelog.py	/^api = ghapi.all.GhApi(owner="pybind", repo="pybind11")$/;"	v
apiget	test/tests-api.cpp	/^struct apiget : public TestWithParam<APIMatrixStorageTestData> {};$/;"	s	file:
apiset	test/tests-api.cpp	/^struct apiset : public TestWithParam<APIMatrixStorageTestData> {};$/;"	s	file:
apitns	test/tests-api.cpp	/^struct apitns : public TestWithParam<APIFileTestData> {};$/;"	s	file:
apiwmtx	test/tests-api.cpp	/^struct apiwmtx : public TestWithParam<APIFileTestData> {};$/;"	s	file:
apiwrb	test/tests-api.cpp	/^struct apiwrb : public TestWithParam<APIFileTestData> {};$/;"	s	file:
append	include/taco/ir/ir.h	/^  void append(Stmt stmt) { contents.push_back(stmt); }$/;"	f	struct:taco::ir::Block
append	include/taco/util/collections.h	/^void append(std::vector<V>& vector, const C& container) {$/;"	f	namespace:taco::util
append	include/taco/util/collections.h	/^void append(std::vector<V>& vector, const std::initializer_list<V>& container) {$/;"	f	namespace:taco::util
append	python_bindings/pybind11/include/pybind11/pytypes.h	/^    template <typename T> void append(T &&val) const {$/;"	f	class:list
appendCoordinate	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::appendCoordinate(vector<Iterator> appenders, Expr coord) {$/;"	f	class:taco::LowererImpl
append_extents	python_bindings/pybind11/include/pybind11/numpy.h	/^    static void append_extents(list& \/* shape *\/) { }$/;"	f	struct:array_info_scalar
append_extents	python_bindings/pybind11/include/pybind11/numpy.h	/^    static void append_extents(list& shape) {$/;"	f	struct:array_info
apply	python_bindings/pytaco/pytensor/taco_tensor.py	/^def apply(func_name, arg_list, output_zero_specifier):$/;"	f
apply	src/index_notation/transformations.cpp	/^IndexStmt AddSuchThatPredicates::apply(IndexStmt stmt, string* reason) const {$/;"	f	class:taco::AddSuchThatPredicates
apply	src/index_notation/transformations.cpp	/^IndexStmt ForAllReplace::apply(IndexStmt stmt, string* reason) const {$/;"	f	class:taco::ForAllReplace
apply	src/index_notation/transformations.cpp	/^IndexStmt Parallelize::apply(IndexStmt stmt, std::string* reason) const {$/;"	f	class:taco::Parallelize
apply	src/index_notation/transformations.cpp	/^IndexStmt Precompute::apply(IndexStmt stmt, std::string* reason) const {$/;"	f	class:taco::Precompute
apply	src/index_notation/transformations.cpp	/^IndexStmt Reorder::apply(IndexStmt stmt, string* reason) const {$/;"	f	class:taco::Reorder
apply	src/index_notation/transformations.cpp	/^IndexStmt Transformation::apply(IndexStmt stmt, string* reason) const {$/;"	f	class:taco::Transformation
apply	test/tests-transformation.cpp	/^struct apply : public TestWithParam<TransformationTest> {};$/;"	s	namespace:test	file:
applyDemorgan	src/index_notation/iteration_algebra.cpp	/^IterationAlgebra applyDemorgan(IterationAlgebra alg) {$/;"	f	namespace:taco
arch	include/taco/target.h	/^  enum Arch {C99=0, X86} arch;$/;"	m	struct:taco::Target	typeref:enum:taco::Target::Arch
archMap	src/target.cpp	/^map<string, Target::Arch> archMap = {{"c99", Target::C99},$/;"	m	namespace:taco::__anon19	file:
areSame	include/taco/util/variadic.h	/^struct areSame : std::true_type {};$/;"	s	namespace:taco::util
areSame	include/taco/util/variadic.h	/^struct areSame<T1, T2, TN...>$/;"	s	namespace:taco::util
arg	python_bindings/pybind11/include/pybind11/cast.h	/^    constexpr explicit arg(const char *name = nullptr) : name(name), flag_noconvert(false), flag_none(true) { }$/;"	f	struct:arg
arg	python_bindings/pybind11/include/pybind11/cast.h	/^struct arg {$/;"	s
arg	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^class ArgInspector1 { public: std::string arg = "(default arg inspector 1)"; };$/;"	m	class:ArgInspector1	file:
arg	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^class ArgInspector2 { public: std::string arg = "(default arg inspector 2)"; };$/;"	m	class:ArgInspector2	file:
arg_v	python_bindings/pybind11/include/pybind11/cast.h	/^    arg_v(arg &&base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v
arg_v	python_bindings/pybind11/include/pybind11/cast.h	/^    arg_v(const arg &base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v
arg_v	python_bindings/pybind11/include/pybind11/cast.h	/^    arg_v(const char *name, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v
arg_v	python_bindings/pybind11/include/pybind11/cast.h	/^struct arg_v : arg {$/;"	s
argparse	python_bindings/pybind11/pybind11/__main__.py	/^import argparse$/;"	i
args	include/taco/index_notation/index_notation_nodes.h	/^  std::vector<IndexExpr> args;$/;"	m	struct:taco::CallIntrinsicNode
args	include/taco/index_notation/index_notation_nodes.h	/^  std::vector<IndexExpr> args;$/;"	m	struct:taco::CallNode
args	include/taco/ir/ir.h	/^  std::vector<Expr> args;$/;"	m	struct:taco::ir::Call
args	include/taco/ir/ir.h	/^  std::vector<Expr> args;$/;"	m	struct:taco::ir::Sort
args	python_bindings/pybind11/include/pybind11/attr.h	/^    std::vector<argument_record> args;$/;"	m	struct:function_record
args	python_bindings/pybind11/include/pybind11/cast.h	/^    std::vector<handle> args;$/;"	m	struct:function_call
args	python_bindings/pybind11/include/pybind11/pytypes.h	/^class args : public tuple { PYBIND11_OBJECT_DEFAULT(args, tuple, PyTuple_Check) };$/;"	c
args_	test/gtest/gtest-all.cc	/^  std::vector<char*> args_;$/;"	m	class:testing::internal::Arguments	file:
args_any_are_buffer	python_bindings/pybind11/include/pybind11/stl_bind.h	/^constexpr bool args_any_are_buffer() {$/;"	f
args_are_all_keyword_or_ds	python_bindings/pybind11/include/pybind11/pytypes.h	/^constexpr bool args_are_all_keyword_or_ds()$/;"	f
args_convert	python_bindings/pybind11/include/pybind11/cast.h	/^    std::vector<bool> args_convert;$/;"	m	struct:function_call
args_kwargs_are_last	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr bool args_kwargs_are_last = kwargs_pos >= - 1 && args_pos >= kwargs_pos - 1;$/;"	m	class:argument_loader
args_pos	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr auto args_pos = constexpr_first<argument_is_args, Args...>() - (int) sizeof...(Args),$/;"	m	class:argument_loader
args_proxy	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit args_proxy(handle h) : handle(h) { }$/;"	f	class:args_proxy
args_proxy	python_bindings/pybind11/include/pybind11/pytypes.h	/^class args_proxy : public handle {$/;"	c
args_ref	python_bindings/pybind11/include/pybind11/cast.h	/^    object args_ref, kwargs_ref;$/;"	m	struct:function_call
argument_loader	python_bindings/pybind11/include/pybind11/cast.h	/^class argument_loader {$/;"	c
argument_record	python_bindings/pybind11/include/pybind11/attr.h	/^    argument_record(const char *name, const char *descr, handle value, bool convert, bool none)$/;"	f	struct:argument_record
argument_record	python_bindings/pybind11/include/pybind11/attr.h	/^struct argument_record {$/;"	s
argv	test/gtest/gtest-all.cc	/^  char* const* argv;  \/\/ Command-line arguments for the child's call to exec$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
arithmetic	python_bindings/pybind11/include/pybind11/attr.h	/^struct arithmetic { };$/;"	s
arr	include/taco/ir/ir.h	/^  Expr arr;$/;"	m	struct:taco::ir::Load
arr	include/taco/ir/ir.h	/^  Expr arr;$/;"	m	struct:taco::ir::Store
arr	python_bindings/pybind11/tests/test_numpy_array.py	/^def arr():$/;"	f
array_	test/gtest/gtest.h	/^  const Element* array_;$/;"	m	class:testing::internal::NativeArray
array_	test/gtest/gtest.h	/^  std::vector<TestPartResult> array_;$/;"	m	class:testing::TestPartResultArray
array_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename ArrayType, typename Value, bool Resizable, size_t Size = 0> struct array_caster {$/;"	s
array_copy_but_one	python_bindings/pybind11/tests/test_eigen.py	/^def array_copy_but_one(a, r, c, v):$/;"	f
array_descriptor_proxy	python_bindings/pybind11/include/pybind11/numpy.h	/^inline PyArrayDescr_Proxy* array_descriptor_proxy(PyObject* ptr) {$/;"	f
array_descriptor_proxy	python_bindings/pybind11/include/pybind11/numpy.h	/^inline const PyArrayDescr_Proxy* array_descriptor_proxy(const PyObject* ptr) {$/;"	f
array_info	python_bindings/pybind11/include/pybind11/numpy.h	/^template <size_t N> struct array_info<char[N]> : array_info_scalar<char[N]> { };$/;"	s
array_info	python_bindings/pybind11/include/pybind11/numpy.h	/^template <size_t N> struct array_info<std::array<char, N>> : array_info_scalar<std::array<char, N>> { };$/;"	s
array_info	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename T, size_t N> struct array_info<T[N]> : array_info<std::array<T, N>> { };$/;"	s
array_info	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename T, size_t N> struct array_info<std::array<T, N>> {$/;"	s
array_info	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename T> struct array_info : array_info_scalar<T> { };$/;"	s
array_info_scalar	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename T> struct array_info_scalar {$/;"	s
array_proxy	python_bindings/pybind11/include/pybind11/numpy.h	/^inline PyArray_Proxy* array_proxy(void* ptr) {$/;"	f
array_proxy	python_bindings/pybind11/include/pybind11/numpy.h	/^inline const PyArray_Proxy* array_proxy(const void* ptr) {$/;"	f
arrays	src/lower/mode.cpp	/^  vector<ir::Expr> arrays;$/;"	m	struct:taco::ModePack::Content	file:
arrow_proxy	python_bindings/pybind11/include/pybind11/pytypes.h	/^    arrow_proxy(T &&value) : value(std::move(value)) { }$/;"	f	struct:arrow_proxy
arrow_proxy	python_bindings/pybind11/include/pybind11/pytypes.h	/^struct arrow_proxy {$/;"	s
as	include/taco/ir/ir.h	/^  template <typename T> const T *as() const {$/;"	f	struct:taco::ir::IRHandle
asNpDtype	python_bindings/src/pyDatatypes.cpp	/^py::object asNpDtype(const taco::Datatype &dtype){$/;"	f	namespace:taco::pythonBindings
as_tensor	python_bindings/pytaco/pytensor/taco_tensor.py	/^def as_tensor(obj, copy=True):$/;"	f
as_type	python_bindings/pytaco/pytensor/taco_tensor.py	/^def as_type(t, type):$/;"	f
as_unsigned	python_bindings/pybind11/include/pybind11/pytypes.h	/^Unsigned as_unsigned(PyObject *o) {$/;"	f
asin	src/index_notation/index_notation.cpp	/^IndexExpr asin(IndexExpr a) {$/;"	f	namespace:taco
asinh	src/index_notation/index_notation.cpp	/^IndexExpr asinh(IndexExpr a) {$/;"	f	namespace:taco
assemble	include/taco/index_notation/kernel.h	/^  template <typename... Args> bool assemble(const Args&... args) const {$/;"	f	class:taco::Kernel
assemble	include/taco/lower/lowerer_impl.h	/^  bool assemble;$/;"	m	class:taco::LowererImpl
assemble	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def assemble(self):$/;"	m	class:tensor
assemble	src/index_notation/kernel.cpp	/^bool Kernel::assemble(const vector<TensorStorage>& args) const {$/;"	f	class:taco::Kernel
assemble	src/tensor.cpp	/^void TensorBase::assemble() {$/;"	f	class:taco::TensorBase
assembleFunc	include/taco/tensor.h	/^  ir::Stmt           assembleFunc;$/;"	m	struct:taco::TensorBase::Content
assembleFunction	include/taco/index_notation/kernel.h	/^  void* assembleFunction;$/;"	m	class:taco::Kernel
assembleWhileCompute	include/taco/tensor.h	/^  bool               assembleWhileCompute;$/;"	m	struct:taco::TensorBase::Content
assembleWhileCompute	test/tests-storage_alloc.cpp	/^  bool           assembleWhileCompute;$/;"	m	struct:storage_alloc_tests::TestData	file:
assemble_without_compile	src/error/error_messages.cpp	/^const std::string assemble_without_compile =$/;"	m	namespace:taco::error	file:
assert_equal	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def assert_equal(actual, expected_data, expected_dtype):$/;"	f
assert_equal_ref	python_bindings/pybind11/tests/test_eigen.py	/^def assert_equal_ref(mat):$/;"	f
assert_keeps_alive	python_bindings/pybind11/tests/test_eigen.py	/^def assert_keeps_alive(cl, method, *args):$/;"	f
assert_references	python_bindings/pybind11/tests/test_numpy_array.py	/^    def assert_references(a, b, base=None):$/;"	f	function:test_wrap
assert_sparse_equal_ref	python_bindings/pybind11/tests/test_eigen.py	/^def assert_sparse_equal_ref(sparse_mat):$/;"	f
assert_string_vector_vectors_equal	test/tests-schedule-parser.cpp	/^void assert_string_vector_vectors_equal(vector<vector<string>> a, vector<vector<string>> b) {$/;"	f
assert_string_vectors_equal	test/tests-schedule-parser.cpp	/^void assert_string_vectors_equal(vector<string> a, vector<string> b) {$/;"	f
assign_both	python_bindings/pybind11/tests/test_eigen.py	/^def assign_both(a1, a2, r, c, v):$/;"	f
assignment	include/taco/tensor.h	/^  Assignment         assignment;$/;"	m	struct:taco::TensorBase::Content
assignment	test/tests-windowing.cpp	/^struct assignment : public TestWithParam<ModeFormat> {};$/;"	s	file:
asyncio	python_bindings/pybind11/tests/test_async.py	/^asyncio = pytest.importorskip("asyncio")$/;"	v
at	include/taco/tensor.h	/^CType Tensor<CType>::at(const std::vector<int>& coordinate) {$/;"	f	class:taco::Tensor
at	include/taco/tensor.h	/^CType TensorBase::at(const std::vector<int>& coordinate) {$/;"	f	class:taco::TensorBase
atLeastDoubleSizeIfFull	src/ir/ir_generators.cpp	/^Stmt atLeastDoubleSizeIfFull(Expr a, Expr size, Expr needed) {$/;"	f	namespace:taco::ir
at_t	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> py::ssize_t at_t(const arr_t& a, Ix... idx) { return a.at(idx...); }$/;"	f
atan	src/index_notation/index_notation.cpp	/^IndexExpr atan(IndexExpr a) {$/;"	f	namespace:taco
atan2	src/index_notation/index_notation.cpp	/^IndexExpr atan2(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
atanh	src/index_notation/index_notation.cpp	/^IndexExpr atanh(IndexExpr a) {$/;"	f	namespace:taco
atomicParallelUnit	include/taco/lower/lowerer_impl.h	/^  ParallelUnit atomicParallelUnit;$/;"	m	class:taco::LowererImpl
atomic_parallel_unit	include/taco/ir/ir.h	/^  ParallelUnit atomic_parallel_unit;$/;"	m	struct:taco::ir::Assign
atomic_parallel_unit	include/taco/ir/ir.h	/^  ParallelUnit atomic_parallel_unit;$/;"	m	struct:taco::ir::Store
attr	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename D> obj_attr_accessor object_api<D>::attr(handle key) const {$/;"	f	class:object_api
attr	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename D> str_attr_accessor object_api<D>::attr(const char *key) const {$/;"	f	class:object_api
attr_char	python_bindings/pybind11/tests/test_pytypes.py	/^        attr_char = 2$/;"	v	class:test_accessors.SubTestObject
attr_obj	python_bindings/pybind11/tests/test_pytypes.py	/^        attr_obj = 1$/;"	v	class:test_accessors.SubTestObject
author	python_bindings/pybind11/docs/conf.py	/^author = "Wenzel Jakob"$/;"	v
author	python_bindings/source/conf.py	/^author = 'MIT COMMIT GROUP'$/;"	v
auto_cpp_level	python_bindings/pybind11/pybind11/setup_helpers.py	/^def auto_cpp_level(compiler):$/;"	f
automatic	python_bindings/pybind11/include/pybind11/detail/common.h	/^    automatic = 0,$/;"	m	class:return_value_policy
automatic_reference	python_bindings/pybind11/include/pybind11/detail/common.h	/^    automatic_reference,$/;"	m	class:return_value_policy
autosummary_generate	python_bindings/source/conf.py	/^autosummary_generate = True$/;"	v
auxiliaries	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template <typename T, typename T2> py::handle auxiliaries(T &&r, T2 &&r2) {$/;"	f
b	include/taco/index_notation/index_notation_nodes.h	/^  IndexExpr b;$/;"	m	struct:taco::BinaryExprNode
b	include/taco/index_notation/iteration_algebra.h	/^  IterationAlgebra b;$/;"	m	struct:taco::BinaryIterationAlgebraNode
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Add
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::And
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::BinOp
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::BitAnd
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::BitOr
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Div
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Eq
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Gt
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Gte
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Lt
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Lte
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Mul
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Neq
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Or
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Rem
b	include/taco/ir/ir.h	/^  Expr b;$/;"	m	struct:taco::ir::Sub
b	python_bindings/pybind11/tests/test_class.py	/^        b = m.HasOpNewDelSize()$/;"	v	class:test_operator_new_delete.SubAliased
b	python_bindings/pybind11/tests/test_eigen.cpp	/^    Eigen::Matrix4d b = Eigen::Matrix4d::Identity();$/;"	m	struct:CustomOperatorNew	file:
b	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    int32_t b[2];$/;"	m	struct:ArrayStruct	file:
b	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    std::array<char, 3> b;$/;"	m	struct:StringStruct	file:
b	python_bindings/pybind11/tests/test_virtual_functions.py	/^        b = B()$/;"	v	class:test_alias_delay_initialization1.B
b2	python_bindings/pybind11/tests/test_virtual_functions.py	/^        b2 = B2()$/;"	v	class:test_alias_delay_initialization2.B2
bAlg	src/index_notation/iteration_algebra.cpp	/^  IterationAlgebra bAlg;$/;"	m	struct:taco::AlgComparer	file:
bExpr	src/index_notation/index_notation.cpp	/^  IndexExpr bExpr;$/;"	m	struct:taco::Equals	file:
bExpr	src/index_notation/index_notation.cpp	/^  IndexExpr bExpr;$/;"	m	struct:taco::Isomorphic	file:
bStmt	src/index_notation/index_notation.cpp	/^  IndexStmt bStmt;$/;"	m	struct:taco::Equals	file:
bStmt	src/index_notation/index_notation.cpp	/^  IndexStmt bStmt;$/;"	m	struct:taco::Isomorphic	file:
bad_next_call	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^    def bad_next_call():$/;"	f	function:test_python_iterator_in_cpp
bar	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def bar(self):$/;"	m	class:test_multiple_inheritance_mix2.Base2
bark	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    std::string bark() const { return Dog::bark() + " and runs in circles"; }$/;"	f	struct:Animal::Chihuahua
bark	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    std::string bark() const { return name_of_kind(kind) + " " + name + " goes " + sound; }$/;"	f	struct:Animal::Dog
base	include/taco/index_notation/index_notation.h	/^  IndexVar base;$/;"	m	struct:taco::IndexSetVar::Content
base	include/taco/index_notation/index_notation.h	/^  IndexVar base;$/;"	m	struct:taco::WindowedIndexVar::Content
base	python_bindings/pybind11/include/pybind11/attr.h	/^    base() { } \/\/ NOLINT(modernize-use-equals-default): breaks MSVC 2015 when adding an attribute$/;"	f	struct:base
base	python_bindings/pybind11/include/pybind11/attr.h	/^template <typename T> struct base {$/;"	s
base	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyArray_Proxy
base	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyVoidScalarObject_Proxy
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
base_	test/gtest/gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
bases	python_bindings/pybind11/include/pybind11/attr.h	/^    list bases;$/;"	m	struct:type_record
basic	test/tests-windowing.cpp	/^struct basic : public TestWithParam<std::tuple<int, ModeFormat, ModeFormat, ModeFormat>> {};$/;"	s	file:
basic_attr	python_bindings/pybind11/tests/test_pytypes.py	/^        basic_attr = 1$/;"	v	class:test_accessors.TestObject
basic_manipulator	test/gtest/gtest.h	/^      ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {$/;"	f	class:testing::AssertionResult
begin	include/taco/storage/typed_vector.h	/^  const_iterator begin() const {$/;"	f	class:taco::TypedVector
begin	include/taco/storage/typed_vector.h	/^  iterator begin() {$/;"	f	class:taco::TypedVector
begin	include/taco/tensor.h	/^    const_iterator<T, CType> begin() const {$/;"	f	class:taco::TensorBase::iterator_wrapper
begin	include/taco/tensor.h	/^TensorBase::const_iterator<int,CType> Tensor<CType>::begin() const {$/;"	f	class:taco::Tensor
begin	include/taco/tensor.h	/^TensorBase::const_iterator<int,CType> Tensor<CType>::begin() {$/;"	f	class:taco::Tensor
begin	include/taco/util/collections.h	/^  ZipConstIterator begin() const {$/;"	f	class:taco::util::ZipConstIterable
begin	include/taco/util/collections.h	/^  const_iterator begin() const {return c.begin()==c.end()?c.end():++c.begin();}$/;"	f	class:taco::util::ExcludeFirstConstIterable
begin	include/taco/util/collections.h	/^  const_reverse_iterator begin() const {return c.rbegin();}$/;"	f	class:taco::util::ReverseConstIterable
begin	include/taco/util/collections.h	/^  iterator begin() {return (c.begin() == c.end() ? c.end() : ++c.begin());}$/;"	f	class:taco::util::ExcludeFirstIterable
begin	include/taco/util/collections.h	/^  reverse_iterator begin() {return c.rbegin();}$/;"	f	class:taco::util::ReverseIterable
begin	include/taco/util/timers.h	/^  TimePoint begin;$/;"	m	class:taco::util::LapTimer
begin	include/taco/util/timers.h	/^  TimePoint begin;$/;"	m	class:taco::util::Timer
begin	python_bindings/pybind11/include/pybind11/cast.h	/^    iterator begin() { return iterator(inst, &tinfo); }$/;"	f	struct:values_and_holders
begin	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::dict_iterator begin() const { return {*this, 0}; }$/;"	f	class:dict
begin	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::list_iterator begin() const { return {*this, 0}; }$/;"	f	class:list
begin	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::sequence_iterator begin() const { return {*this, 0}; }$/;"	f	class:sequence
begin	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::tuple_iterator begin() const { return {*this, 0}; }$/;"	f	class:tuple
begin	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename D> iterator object_api<D>::begin() const { return iter(derived()); }$/;"	f	class:object_api
begin	src/type.cpp	/^std::vector<Dimension>::const_iterator Shape::begin() const {$/;"	f	class:taco::Shape
begin	test/gtest/gtest.h	/^  const_iterator begin() const { return array_; }$/;"	f	class:testing::internal::NativeArray
begin	test/gtest/gtest.h	/^  iterator begin() const { return iterator(impl_->Begin()); }$/;"	f	class:testing::internal::ParamGenerator
begin10_	test/gtest/gtest.h	/^    const typename ParamGenerator<T10>::iterator begin10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin7_	test/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin7_	test/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin7_	test/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin7_	test/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin8_	test/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin8_	test/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin8_	test/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin9_	test/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin9_	test/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
beginTyped	include/taco/tensor.h	/^TensorBase::const_iterator<T,CType> Tensor<CType>::beginTyped() const {$/;"	f	class:taco::Tensor
beginTyped	include/taco/tensor.h	/^TensorBase::const_iterator<T,CType> Tensor<CType>::beginTyped() {$/;"	f	class:taco::Tensor
beginVar	src/lower/iterator.cpp	/^  ir::Expr beginVar;$/;"	m	struct:taco::Iterator::Content	file:
begin_	test/gtest/gtest.h	/^  const T begin_;$/;"	m	class:testing::internal::RangeGenerator
begin_end	python_bindings/pybind11/tests/test_pytypes.py	/^        begin_end = [1, 2, 3]$/;"	v	class:test_accessors.TestObject
binaryCheck	src/index_notation/iteration_algebra.cpp	/^  bool binaryCheck(const T* anode, IterationAlgebra b) {$/;"	f	struct:taco::AlgComparer
binaryEquals	src/index_notation/index_notation.cpp	/^  bool binaryEquals(const T* anode, IndexExpr b) {$/;"	f	struct:taco::Equals
binaryIsomorphic	src/index_notation/index_notation.cpp	/^  bool binaryIsomorphic(const T* anode, IndexExpr b) {$/;"	f	struct:taco::Isomorphic
binarySubExpr	src/lower/expr_tools.cpp	/^  IndexExpr binarySubExpr(const T* op) {$/;"	f	class:taco::SubExprVisitor	file:
binaryVisit	src/index_notation/iteration_algebra.cpp	/^  IterationAlgebra binaryVisit(Node n) {$/;"	f	class:taco::DeMorganApplier	file:
bind_ConstructorStats	python_bindings/pybind11/tests/pybind11_tests.cpp	/^void bind_ConstructorStats(py::module_ &m) {$/;"	f
bind_local	python_bindings/pybind11/tests/local_bindings.h	/^py::class_<T> bind_local(Args && ...args) {$/;"	f
bind_map	python_bindings/pybind11/include/pybind11/stl_bind.h	/^class_<Map, holder_type> bind_map(handle scope, const std::string &name, Args&&... args) {$/;"	f
bind_vector	python_bindings/pybind11/include/pybind11/stl_bind.h	/^class_<Vector, holder_type> bind_vector(handle scope, std::string const &name, Args&&... args) {$/;"	f
bits	test/gtest/gtest.h	/^  const Bits &bits() const { return u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
bits_	test/gtest/gtest.h	/^    Bits bits_;      \/\/ The bits that represent the number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
blanks	include/taco/ir/ir.h	/^  static Stmt blanks(const Stmts&... stmts) {$/;"	f	struct:taco::ir::Block
blanks	src/ir/ir.cpp	/^Stmt Block::blanks(std::vector<Stmt> stmts) {$/;"	f	class:taco::ir::Block
blockDimension	include/taco/util/fill.h	/^const int blockDimension=4;$/;"	m	namespace:taco::util
blockFillMethod	include/taco/util/fill.h	/^const FillMethod blockFillMethod=FillMethod::FEM;$/;"	m	namespace:taco::util
blockFors	src/codegen/codegen_cuda.cpp	/^  vector<Stmt> blockFors;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
blockIDVars	src/codegen/codegen_cuda.cpp	/^  vector<pair<string, Expr>> blockIDVars;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
blue	src/codegen/codegen_cuda.cpp	/^const std::string blue="\\033[38;5;67m";$/;"	m	namespace:taco::ir::__anon17	file:
blue	src/ir/ir_printer.cpp	/^const std::string blue="\\033[38;5;67m";$/;"	m	namespace:taco::ir	file:
body	include/taco/ir/ir.h	/^  Stmt body;$/;"	m	struct:taco::ir::Function
body	src/lower/mode_format_impl.cpp	/^  Stmt body;$/;"	m	struct:taco::ModeFunction::Content	file:
boolValue	include/taco/type.h	/^  bool boolValue;$/;"	m	union:taco::ComponentTypeUnion
bool_	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool_() : object(Py_False, borrowed_t{}) { }$/;"	f	class:bool_
bool_	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool_(bool value) : object(value ? Py_True : Py_False, borrowed_t{}) { }$/;"	f	class:bool_
bool_	python_bindings/pybind11/include/pybind11/pytypes.h	/^class bool_ : public object {$/;"	c
bool_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:PartialStruct	file:
bool_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:SimpleStruct	file:
bool_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:SimpleStructReordered	file:
bool_constant	test/gtest/gtest.h	/^struct bool_constant {$/;"	s	namespace:std::tr1
borrowed_t	python_bindings/pybind11/include/pybind11/pytypes.h	/^    struct borrowed_t { };$/;"	s	class:object
bound	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::bound(IndexVar i, IndexVar i1, size_t bound, BoundType bound_type) const {$/;"	f	class:taco::IndexStmt
bound	src/index_notation/provenance_graph.cpp	/^  size_t bound;$/;"	m	struct:taco::BoundRelNode::Content	file:
boundType	src/index_notation/provenance_graph.cpp	/^  BoundType boundType;$/;"	m	struct:taco::BoundRelNode::Content	file:
boundVar	src/index_notation/provenance_graph.cpp	/^  IndexVar boundVar;$/;"	m	struct:taco::BoundRelNode::Content	file:
break_on_failure_	test/gtest/gtest-all.cc	/^  bool break_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
breathe_default_project	python_bindings/pybind11/docs/conf.py	/^breathe_default_project = "pybind11"$/;"	v
breathe_domain_by_extension	python_bindings/pybind11/docs/conf.py	/^breathe_domain_by_extension = {"h": "cpp"}$/;"	v
breathe_projects	python_bindings/pybind11/docs/conf.py	/^breathe_projects = {"pybind11": ".build\/doxygenxml\/"}$/;"	v
bufCapacityCopyName	src/codegen/codegen.cpp	/^const std::string bufCapacityCopyName = "__bufcapcopy__";$/;"	m	namespace:taco::ir	file:
bufCapacityName	src/codegen/codegen.cpp	/^const std::string bufCapacityName = "__bufcap__";$/;"	m	namespace:taco::ir	file:
bufSizeName	src/codegen/codegen.cpp	/^const std::string bufSizeName = "__bufsize__";$/;"	m	namespace:taco::ir	file:
buf_size	python_bindings/pybind11/include/pybind11/iostream.h	/^    const size_t buf_size;$/;"	m	class:pythonbuf
buffer	python_bindings/pybind11/include/pybind11/iostream.h	/^    detail::pythonbuf buffer;$/;"	m	class:scoped_ostream_redirect
buffer	python_bindings/pybind11/include/pybind11/pytypes.h	/^class buffer : public object {$/;"	c
bufferCapacity	include/taco/tensor.h	/^    const int                      bufferCapacity;$/;"	m	class:taco::TensorBase::const_iterator
bufferPos	include/taco/tensor.h	/^    int                            bufferPos;$/;"	m	class:taco::TensorBase::const_iterator
bufferSize	include/taco/tensor.h	/^    int                            bufferSize;$/;"	m	class:taco::TensorBase::const_iterator
buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(T *ptr, detail::any_container<ssize_t> shape_in, detail::any_container<ssize_t> strides_in, bool readonly=false)$/;"	f	struct:buffer_info
buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(T *ptr, ssize_t size, bool readonly=false)$/;"	f	struct:buffer_info
buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(buffer_info &&other) {$/;"	f	struct:buffer_info
buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(const T *ptr, ssize_t size, bool readonly=true)$/;"	f	struct:buffer_info
buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(private_ctr_tag, void *ptr, ssize_t itemsize, const std::string &format, ssize_t ndim,$/;"	f	struct:buffer_info
buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(void *ptr, ssize_t itemsize, const std::string &format, ssize_t ndim,$/;"	f	struct:buffer_info
buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    buffer_info(void *ptr, ssize_t itemsize, const std::string &format, ssize_t size, bool readonly=false)$/;"	f	struct:buffer_info
buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    explicit buffer_info(Py_buffer *view, bool ownview = true)$/;"	f	struct:buffer_info
buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^struct buffer_info {$/;"	s
buffer_protocol	python_bindings/pybind11/include/pybind11/attr.h	/^    bool buffer_protocol : 1;$/;"	m	struct:type_record
buffer_protocol	python_bindings/pybind11/include/pybind11/attr.h	/^struct buffer_protocol { };$/;"	s
build	src/lower/merge_lattice.cpp	/^  MergeLattice build(IndexExpr expr) {$/;"	f	class:taco::MergeLatticeBuilder
build	src/lower/merge_lattice.cpp	/^  MergeLattice build(IndexStmt stmt) {$/;"	f	class:taco::MergeLatticeBuilder
build	src/lower/merge_lattice.cpp	/^  MergeLattice build(IterationAlgebra alg) {$/;"	f	class:taco::MergeLatticeBuilder
buildResult	src/parser/einsum_parser.cpp	/^void EinsumParser::buildResult(std::vector<std::string> subs){$/;"	f	class:taco::parser::EinsumParser
build_ext	python_bindings/pybind11/pybind11/setup_helpers.py	/^class build_ext(_build_ext):  # noqa: N801$/;"	c
build_extensions	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def build_extensions(self):$/;"	m	class:build_ext
builtin_exception	python_bindings/pybind11/include/pybind11/detail/common.h	/^class builtin_exception : public std::runtime_error {$/;"	c
byte_offset_unsafe	python_bindings/pybind11/include/pybind11/numpy.h	/^ssize_t byte_offset_unsafe(const Strides &strides, ssize_t i, Ix... index) {$/;"	f
byte_offset_unsafe	python_bindings/pybind11/include/pybind11/numpy.h	/^template <ssize_t Dim = 0, typename Strides> ssize_t byte_offset_unsafe(const Strides &) { return 0; }$/;"	f
byteorder	python_bindings/pybind11/include/pybind11/numpy.h	/^    char byteorder;$/;"	m	struct:PyArrayDescr_Proxy
byteorder	python_bindings/pybind11/tests/test_numpy_array.py	/^    from sys import byteorder$/;"	i
byteorder	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^    from sys import byteorder$/;"	i
bytes	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bytes(const char *c = "")$/;"	f	class:bytes
bytes	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bytes(const char *c, size_t n)$/;"	f	class:bytes
bytes	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bytes(const std::string &s) : bytes(s.data(), s.size()) { }$/;"	f	class:bytes
bytes	python_bindings/pybind11/include/pybind11/pytypes.h	/^class bytes : public object {$/;"	c
bytes	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline bytes::bytes(const pybind11::str &s) {$/;"	f	class:bytes
c	include/taco/util/collections.h	/^  Collection &c;$/;"	m	class:taco::util::ExcludeFirstIterable
c	include/taco/util/collections.h	/^  Collection &c;$/;"	m	class:taco::util::ReverseIterable
c	include/taco/util/collections.h	/^  const Collection &c;$/;"	m	class:taco::util::ExcludeFirstConstIterable
c	include/taco/util/collections.h	/^  const Collection &c;$/;"	m	class:taco::util::ReverseConstIterable
c	python_bindings/pybind11/include/pybind11/complex.h	/^    static constexpr const char c = format_descriptor<T>::c;$/;"	m	struct:format_descriptor
c	python_bindings/pybind11/include/pybind11/detail/common.h	/^    static constexpr const char c = "?bBhHiIqQfdg"[detail::is_fmt_numeric<T>::index];$/;"	m	struct:format_descriptor
c	python_bindings/pybind11/tests/test_class.py	/^        c = m.AliasedHasOpNewDelSize()$/;"	v	class:test_operator_new_delete.SubAliased
c	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    std::array<uint8_t, 3> c;$/;"	m	struct:ArrayStruct	file:
c1	include/taco/util/collections.h	/^  const C1 &c1;$/;"	m	class:taco::util::ZipConstIterable
c1it	include/taco/util/collections.h	/^    const_iterator1 c1it;$/;"	m	class:taco::util::ZipConstIterable::ZipConstIterator
c2	include/taco/util/collections.h	/^  const C2 &c2;$/;"	m	class:taco::util::ZipConstIterable
c2	python_bindings/pybind11/tests/test_class.py	/^        c2 = SubAliased()$/;"	v	class:test_operator_new_delete.SubAliased
c2it	include/taco/util/collections.h	/^    const_iterator2 c2it;$/;"	m	class:taco::util::ZipConstIterable::ZipConstIterator
cHeaders	src/codegen/codegen_c.cpp	/^const string cHeaders =$/;"	m	namespace:taco::ir::__anon18	file:
cHeaders	src/codegen/codegen_cuda.cpp	/^const string cHeaders =$/;"	m	namespace:taco::ir::__anon17	file:
cPickle	python_bindings/pybind11/tests/test_pickling.py	/^    import cPickle as pickle  # Use cPickle on Python 2.7$/;"	i
c_str	python_bindings/pybind11/include/pybind11/detail/internals.h	/^const char *c_str(Args &&...args) {$/;"	f
c_str	test/gtest/gtest.h	/^  const char* c_str() const { return pathname_.c_str(); }$/;"	f	class:testing::internal::FilePath
c_strides	python_bindings/pybind11/include/pybind11/buffer_info.h	/^inline std::vector<ssize_t> c_strides(const std::vector<ssize_t> &shape, ssize_t itemsize) {$/;"	f
cache	python_bindings/pybind11/include/pybind11/pytypes.h	/^    mutable object cache;$/;"	m	class:accessor
cacheComputeKernel	src/tensor.cpp	/^void TensorBase::cacheComputeKernel(const IndexStmt stmt,$/;"	f	class:taco::TensorBase
cachedtmpdir	src/util/env.cpp	/^std::string cachedtmpdir = "";$/;"	m	namespace:taco::util	file:
cachedtmpdirCleanup	src/util/env.cpp	/^void cachedtmpdirCleanup(void) {$/;"	f	namespace:taco::util
callFuncPacked	include/taco/codegen/module.h	/^  int callFuncPacked(std::string name, std::vector<void*> args) {$/;"	f	class:taco::ir::Module
callFuncPacked	include/taco/codegen/module.h	/^  int callFuncPacked(std::string name, void** args) {$/;"	f	class:taco::ir::Module
callFuncPackedRaw	include/taco/codegen/module.h	/^  int callFuncPackedRaw(std::string name, std::vector<void*> args) {$/;"	f	class:taco::ir::Module
callFuncPackedRaw	src/codegen/module.cpp	/^int Module::callFuncPackedRaw(std::string name, void** args) {$/;"	f	class:taco::ir::Module
call_guard	python_bindings/pybind11/include/pybind11/attr.h	/^struct call_guard<T, Ts...> {$/;"	s
call_guard	python_bindings/pybind11/include/pybind11/attr.h	/^struct call_guard<T> {$/;"	s
call_guard	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct call_guard<> { using type = detail::void_type; };$/;"	s
call_operator_delete	python_bindings/pybind11/include/pybind11/pybind11.h	/^inline void call_operator_delete(void *p, size_t s, size_t a) {$/;"	f
call_operator_delete	python_bindings/pybind11/include/pybind11/pybind11.h	/^void call_operator_delete(T *p, size_t s, size_t) { T::operator delete(p, s); }$/;"	f
call_operator_delete	python_bindings/pybind11/include/pybind11/pybind11.h	/^void call_operator_delete(T *p, size_t, size_t) { T::operator delete(p); }$/;"	f
caller_frame_	test/gtest/gtest-all.cc	/^  void* caller_frame_;$/;"	m	class:testing::internal::OsStackTraceGetter	file:
canAccelerateDenseTemp	src/lower/lowerer_impl.cpp	/^bool LowererImpl::canAccelerateDenseTemp(Where where) {$/;"	f	class:taco::LowererImpl
canonicalPropertyVar	src/codegen/codegen_c.cpp	/^  map<tuple<Expr, TensorProperty, int, int>, string> canonicalPropertyVar;$/;"	m	class:taco::ir::CodeGen_C::FindVars	file:
canonicalPropertyVar	src/codegen/codegen_cuda.cpp	/^  map<tuple<Expr, TensorProperty, int, int>, string> canonicalPropertyVar;$/;"	m	class:taco::ir::CodeGen_CUDA::FindVars	file:
cant_convert	python_bindings/pybind11/tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_bool_caster
cant_convert	python_bindings/pybind11/tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_int_convert
cant_convert	python_bindings/pybind11/tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_numpy_bool
capacityVars	include/taco/lower/lowerer_impl.h	/^  std::map<ir::Expr, ir::Expr> capacityVars;$/;"	m	class:taco::LowererImpl
capsule	python_bindings/pybind11/include/pybind11/pytypes.h	/^    capsule(PyObject *ptr, bool is_borrowed) : object(is_borrowed ? object(ptr, borrowed_t{}) : object(ptr, stolen_t{})) { }$/;"	f	class:capsule
capsule	python_bindings/pybind11/include/pybind11/pytypes.h	/^    capsule(const void *value, void (*destruct)(PyObject *))$/;"	f	class:capsule
capsule	python_bindings/pybind11/include/pybind11/pytypes.h	/^    capsule(const void *value, void (*destructor)(void *)) {$/;"	f	class:capsule
capsule	python_bindings/pybind11/include/pybind11/pytypes.h	/^    capsule(void (*destructor)()) {$/;"	f	class:capsule
capsule	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit capsule(const void *value, const char *name = nullptr, void (*destructor)(PyObject *) = nullptr)$/;"	f	class:capsule
capsule	python_bindings/pybind11/include/pybind11/pytypes.h	/^class capsule : public object {$/;"	c
capture	python_bindings/pybind11/tests/conftest.py	/^def capture(capsys):$/;"	f
capture	test/gtest/gtest.h	/^  void capture(T* ptr) {$/;"	f	class:testing::internal::linked_ptr
captureNextLocatePos	include/taco/lower/lowerer_impl.h	/^  bool captureNextLocatePos = false;$/;"	m	class:taco::LowererImpl
capturedLocatePos	include/taco/lower/lowerer_impl.h	/^  ir::Stmt capturedLocatePos; \/\/ used for whereConsumer when want to replicate same locating$/;"	m	class:taco::LowererImpl
cases	include/taco/ir/ir.h	/^  std::vector<std::pair<Expr,Stmt>> cases;$/;"	m	struct:taco::ir::Switch
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE static handle cast(const void *_src, return_value_policy policy, handle parent,$/;"	f	class:type_caster_generic
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(CharT src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	class:tuple_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(T *src, return_value_policy policy, handle parent) {$/;"	f	class:tuple_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(T, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:void_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(bool src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(const CharT *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(const StringType &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:string_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(const handle &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:pyobject_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(const holder_type &src, return_value_policy, handle) {$/;"	f	struct:copyable_holder_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(const itype &src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(const itype *src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(const std::reference_wrapper<type> &src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(const void *ptr, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(holder_type &&src, return_value_policy, handle) {$/;"	f	struct:move_only_holder_caster
cast	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast(itype &&src, return_value_policy, handle parent) {$/;"	f	class:type_caster_base
cast	python_bindings/pybind11/include/pybind11/cast.h	/^T cast(const handle &handle) { return T(reinterpret_borrow<object>(handle)); }$/;"	f
cast	python_bindings/pybind11/include/pybind11/cast.h	/^T cast(const handle &handle) {$/;"	f
cast	python_bindings/pybind11/include/pybind11/cast.h	/^object cast(T &&value, return_value_policy policy = return_value_policy::automatic_reference,$/;"	f
cast	python_bindings/pybind11/include/pybind11/cast.h	/^template <> inline void handle::cast() const { return; }$/;"	f	class:handle
cast	python_bindings/pybind11/include/pybind11/cast.h	/^template <> inline void object::cast() && { return; }$/;"	f	class:object
cast	python_bindings/pybind11/include/pybind11/cast.h	/^template <> inline void object::cast() const & { return; }$/;"	f	class:object
cast	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> T handle::cast() const { return pybind11::cast<T>(*this); }$/;"	f	class:handle
cast	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> T object::cast() && { return pybind11::cast<T>(std::move(*this)); }$/;"	f	class:object
cast	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> T object::cast() const & { return pybind11::cast<T>(*this); }$/;"	f	class:object
cast	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> detail::enable_if_t<detail::move_always<T>::value, T> cast(object &&object) {$/;"	f
cast	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> detail::enable_if_t<detail::move_if_unreferenced<T>::value, T> cast(object &&object) {$/;"	f
cast	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> detail::enable_if_t<detail::move_never<T>::value, T> cast(object &&object) {$/;"	f
cast	python_bindings/pybind11/include/pybind11/chrono.h	/^    static handle cast(const std::chrono::time_point<std::chrono::system_clock, Duration> &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster
cast	python_bindings/pybind11/include/pybind11/chrono.h	/^    static handle cast(const type &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:duration_caster
cast	python_bindings/pybind11/include/pybind11/complex.h	/^    static handle cast(const std::complex<T> &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster
cast	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast(Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast(Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast(Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast(const MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:eigen_map_caster
cast	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) { return cast(*src, policy, parent); }$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/functional.h	/^    static handle cast(Func &&f_, return_value_policy policy, handle \/* parent *\/) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/include/pybind11/pytypes.h	/^    template <typename T> T cast() const { return get_cache().template cast<T>(); }$/;"	f	class:accessor
cast	python_bindings/pybind11/include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:array_caster
cast	python_bindings/pybind11/include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:list_caster
cast	python_bindings/pybind11/include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:map_caster
cast	python_bindings/pybind11/include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:set_caster
cast	python_bindings/pybind11/include/pybind11/stl.h	/^    static handle cast(T_ &&src, return_value_policy policy, handle parent) {$/;"	f	struct:optional_caster
cast	python_bindings/pybind11/include/pybind11/stl.h	/^    static handle cast(Variant &&src, return_value_policy policy, handle parent) {$/;"	f	struct:variant_caster
cast	python_bindings/pybind11/tests/pybind11_tests.h	/^    static handle cast(RValueCaster &&, return_value_policy, handle) { return py::str("rvalue").release(); }$/;"	f	class:type_caster
cast	python_bindings/pybind11/tests/pybind11_tests.h	/^    static handle cast(const RValueCaster &, return_value_policy, handle) { return py::str("lvalue").release(); }$/;"	f	class:type_caster
cast	python_bindings/pybind11/tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt &m, return_value_policy r, handle p) { return pybind11::cast(m.value, r, p); }$/;"	f	struct:type_caster
cast	python_bindings/pybind11/tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	python_bindings/pybind11/tests/test_copy_move.cpp	/^    static handle cast(const MoveOnlyInt &m, return_value_policy r, handle p) { return pybind11::cast(m.value, r, p); }$/;"	f	struct:type_caster
cast	python_bindings/pybind11/tests/test_copy_move.cpp	/^    static handle cast(const MoveOrCopyInt &m, return_value_policy r, handle p) { return pybind11::cast(m.value, r, p); }$/;"	f	struct:type_caster
cast	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgAlwaysConverts &, return_value_policy, handle) {$/;"	f	struct:pybind11::detail::type_caster
cast	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgInspector1 &src, return_value_policy, handle) {$/;"	f	struct:pybind11::detail::type_caster
cast	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgInspector2 &src, return_value_policy, handle) {$/;"	f	struct:pybind11::detail::type_caster
cast	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    static handle cast(const DestructionTester &, return_value_policy, handle) {$/;"	f	struct:pybind11::detail::type_caster
cast_holder	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast_holder(const itype *src, const void *holder) {$/;"	f	class:type_caster_base
cast_impl	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle cast_impl(T &&src, return_value_policy policy, handle parent, index_sequence<Is...>) {$/;"	f	class:tuple_caster
cast_impl	python_bindings/pybind11/include/pybind11/eigen.h	/^    static handle cast_impl(CType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast_op	python_bindings/pybind11/include/pybind11/cast.h	/^cast_op(make_caster<T> &&caster) {$/;"	f
cast_op	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> typename make_caster<T>::template cast_op_type<T> cast_op(make_caster<T> &caster) {$/;"	f
cast_ref	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> enable_if_t<!cast_is_temporary_value_reference<T>::value, T> cast_ref(object &&, override_unused &) {$/;"	f
cast_ref	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> enable_if_t<cast_is_temporary_value_reference<T>::value, T> cast_ref(object &&o, make_caster<T> &caster) {$/;"	f
cast_safe	python_bindings/pybind11/include/pybind11/cast.h	/^template <> inline void cast_safe<void>(object &&) {}$/;"	f
cast_safe	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> enable_if_t<!cast_is_temporary_value_reference<T>::value, T> cast_safe(object &&o) {$/;"	f
cast_safe	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> enable_if_t<cast_is_temporary_value_reference<T>::value, T> cast_safe(object &&) {$/;"	f
catch_exceptions	test/gtest/gtest-all.cc	/^  bool catch_exceptions() const { return catch_exceptions_; }$/;"	f	class:testing::internal::UnitTestImpl
catch_exceptions_	test/gtest/gtest-all.cc	/^      catch_exceptions_(false) {$/;"	f	namespace:testing::internal
catch_exceptions_	test/gtest/gtest-all.cc	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
catch_exceptions_	test/gtest/gtest-all.cc	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::UnitTestImpl	file:
cbrt	src/index_notation/index_notation.cpp	/^IndexExpr cbrt(IndexExpr a) {$/;"	f	namespace:taco
ccompiler	python_bindings/pybind11/pybind11/setup_helpers.py	/^import distutils.ccompiler$/;"	i
cdbl	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    std::complex<double> cdbl;$/;"	m	struct:ComplexStruct	file:
cflt	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    std::complex<float> cflt;$/;"	m	struct:ComplexStruct	file:
change	python_bindings/pybind11/tools/libsize.py	/^        change = libsize - oldsize$/;"	v
changelog	python_bindings/pybind11/tools/make_changelog.py	/^    changelog = ENTRY.findall(issue.body)$/;"	v
charVector	include/taco/storage/typed_vector.h	/^  std::vector<char> charVector;$/;"	m	class:taco::TypedVector
check	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool check() const { return m_ptr != nullptr; }$/;"	f	class:handle
check	src/index_notation/index_notation.cpp	/^  bool check(IndexExpr a, IndexExpr b) {$/;"	f	struct:taco::Equals
check	src/index_notation/index_notation.cpp	/^  bool check(IndexExpr a, IndexExpr b) {$/;"	f	struct:taco::Isomorphic
check	src/index_notation/index_notation.cpp	/^  bool check(IndexStmt a, IndexStmt b) {$/;"	f	struct:taco::Equals
check	src/index_notation/index_notation.cpp	/^  bool check(IndexStmt a, IndexStmt b) {$/;"	f	struct:taco::Isomorphic
check	src/index_notation/index_notation.cpp	/^  bool check(IndexVar a, IndexVar b) {$/;"	f	struct:taco::Isomorphic
check	src/index_notation/index_notation.cpp	/^  bool check(TensorVar a, TensorVar b) {$/;"	f	struct:taco::Isomorphic
check	src/index_notation/index_notation.cpp	/^static void check(Assignment assignment) {$/;"	f	namespace:taco
checkBounds	python_bindings/src/pyTensor.cpp	/^static void checkBounds(const std::vector<int>& dims, const std::vector<int>& indices){$/;"	f	namespace:taco::pythonBindings
checkForAlloc	src/codegen/codegen.cpp	/^bool CodeGen::checkForAlloc(const Function *func) {$/;"	f	class:taco::ir::CodeGen
checkIndexExprs	src/index_notation/iteration_algebra.cpp	/^  bool checkIndexExprs;$/;"	m	struct:taco::AlgComparer	file:
checkIterationAlg	src/index_notation/index_notation.cpp	/^static bool checkIterationAlg(const CallNode* anode, const CallNode* bnode) {$/;"	f	namespace:taco
checkRegionDefinitions	src/index_notation/index_notation.cpp	/^static bool checkRegionDefinitions(const CallNode* anode, const CallNode* bnode) {$/;"	f	namespace:taco
checkThatNoneAreExhausted	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::checkThatNoneAreExhausted(std::vector<Iterator> iterators)$/;"	f	class:taco::LowererImpl
check_flags	python_bindings/pybind11/include/pybind11/numpy.h	/^inline bool check_flags(const void* ptr, int flag) {$/;"	f
check_holder_compat	python_bindings/pybind11/include/pybind11/cast.h	/^    void check_holder_compat() {$/;"	f	struct:copyable_holder_caster
check_holder_compat	python_bindings/pybind11/include/pybind11/cast.h	/^    void check_holder_compat() {}$/;"	f	class:type_caster_generic
check_self	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^    def check_self(self):$/;"	f	function:test_static_cls
check_vals	python_bindings/unit_tests.py	/^    def check_vals(self, tensor_list, expected_shape, expected_order, expected_format):$/;"	m	class:TestTensorCreation
child	src/lower/iterator.cpp	/^  std::weak_ptr<Content> child;   \/\/ (Non-reference counted) pointer to child iterator$/;"	m	struct:taco::Iterator::Content	file:
childRelMap	include/taco/index_notation/provenance_graph.h	/^  std::map<IndexVar, IndexVarRel> childRelMap;$/;"	m	class:taco::ProvenanceGraph
child_handle_	test/gtest/gtest-all.cc	/^  AutoHandle child_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
child_pid_	test/gtest/gtest-all.cc	/^  pid_t child_pid_;$/;"	m	class:testing::internal::ForkingDeathTest	file:
children	src/lower/iteration_forest.h	/^  std::map<IndexVar, std::vector<IndexVar>> children;$/;"	m	class:taco::IterationForest
childrenMap	include/taco/index_notation/provenance_graph.h	/^  std::map<IndexVar, std::vector<IndexVar>> childrenMap;$/;"	m	class:taco::ProvenanceGraph
chunksIterated	include/taco/tensor.h	/^    int64_t                        chunksIterated;$/;"	m	class:taco::TensorBase::const_iterator
class_	python_bindings/pybind11/include/pybind11/attr.h	/^struct is_method { handle class_; is_method(const handle &c) : class_(c) { } };$/;"	m	struct:is_method
class_	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_(handle scope, const char *name, const Extra &... extra) {$/;"	f	class:class_
class_	python_bindings/pybind11/include/pybind11/pybind11.h	/^class class_ : public detail::generic_type {$/;"	c
class_factory	python_bindings/pybind11/include/pybind11/detail/init.h	/^    remove_reference_t<CFunc> class_factory;$/;"	m	struct:factory
class_factory	python_bindings/pybind11/include/pybind11/detail/init.h	/^    remove_reference_t<Func> class_factory;$/;"	m	struct:factory
clauses	include/taco/ir/ir.h	/^  std::vector<std::pair<Expr,Stmt>> clauses;$/;"	m	struct:taco::ir::Case
clean_type_id	python_bindings/pybind11/include/pybind11/detail/typeid.h	/^PYBIND11_NOINLINE inline void clean_type_id(std::string &name) {$/;"	f
clean_up	python_bindings/pybind11/docs/conf.py	/^def clean_up(app, exception):$/;"	f
clear	include/taco/ir/ir.h	/^  bool clear; \/\/ Whether to use calloc to allocate this memory.$/;"	m	struct:taco::ir::Allocate
clear	include/taco/storage/typed_vector.h	/^  void clear() {$/;"	f	class:taco::TypedVector
clear	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void clear() const { PyDict_Clear(ptr()); }$/;"	f	class:dict
clear	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void clear() const { PySet_Clear(m_ptr); }$/;"	f	class:set
clear	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void clear() {}$/;"	f	class:error_already_set
clearPrecomputes	src/index_notation/schedule.cpp	/^void Schedule::clearPrecomputes() {$/;"	f	class:taco::Schedule
clear_cache	include/taco/util/timers.h	/^  double clear_cache() {$/;"	f	class:taco::util::Timer
clear_instance	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline void clear_instance(PyObject *self) {$/;"	f
clear_patients	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline void clear_patients(PyObject *self) {$/;"	f
clone_	test/gtest/gtest.h	/^  void (NativeArray::*clone_)(const Element*, size_t);$/;"	m	class:testing::internal::NativeArray
close_fd	test/gtest/gtest-all.cc	/^  int close_fd;       \/\/ File descriptor to close; the read end of a pipe$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
cm	python_bindings/pybind11/tests/test_exceptions.py	/^import pybind11_cross_module_tests as cm$/;"	i
cm	python_bindings/pybind11/tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	i
cm	python_bindings/pybind11/tests/test_stl.py	/^    import pybind11_cross_module_tests as cm$/;"	i
cm	python_bindings/pybind11/tests/test_stl_binders.py	/^    import pybind11_cross_module_tests as cm$/;"	i
cmake_files	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^cmake_files = {$/;"	v
code	python_bindings/pybind11/docs/conf.py	/^    code = compile(f.read(), "..\/pybind11\/_version.py", "exec")$/;"	v
code	python_bindings/pybind11/setup.py	/^    code = compile(f.read(), "pybind11\/_version.py", "exec")$/;"	v
codeGen	src/codegen/codegen_c.cpp	/^  CodeGen_C *codeGen;$/;"	m	class:taco::ir::CodeGen_C::FindVars	file:
codeGen	src/codegen/codegen_cuda.cpp	/^  CodeGen_CUDA *codeGen;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
codeGen	src/codegen/codegen_cuda.cpp	/^  CodeGen_CUDA *codeGen;$/;"	m	class:taco::ir::CodeGen_CUDA::FindVars	file:
codeGenType	src/codegen/codegen.h	/^  CodeGenType codeGenType;$/;"	m	class:taco::ir::CodeGen
codeToIncIteratorVars	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::codeToIncIteratorVars(Expr coordinate, IndexVar coordinateVar, vector<Iterator> iterators, vector<Iterator> mergers) {$/;"	f	class:taco::LowererImpl
codeToInitializeDenseAcceleratorArrays	src/lower/lowerer_impl.cpp	/^vector<Stmt> LowererImpl::codeToInitializeDenseAcceleratorArrays(Where where) {$/;"	f	class:taco::LowererImpl
codeToInitializeIteratorVar	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::codeToInitializeIteratorVar(Iterator iterator, vector<Iterator> iterators, vector<Iterator> rangers, vector<Iterator> mergers, Expr coordinate, IndexVar coordinateVar) {$/;"	f	class:taco::LowererImpl
codeToInitializeIteratorVars	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::codeToInitializeIteratorVars(vector<Iterator> iterators, vector<Iterator> rangers, vector<Iterator> mergers, Expr coordinate, IndexVar coordinateVar) {$/;"	f	class:taco::LowererImpl
codeToInitializeTemporary	src/lower/lowerer_impl.cpp	/^vector<Stmt> LowererImpl::codeToInitializeTemporary(Where where) {$/;"	f	class:taco::LowererImpl
codeToLoadCoordinatesFromPosIterators	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::codeToLoadCoordinatesFromPosIterators(vector<Iterator> iterators, bool declVars) {$/;"	f	class:taco::LowererImpl
codeToRecoverDerivedIndexVar	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::codeToRecoverDerivedIndexVar(IndexVar underived, IndexVar indexVar, bool emitVarDecl) {$/;"	f	class:taco::LowererImpl
collect_ignore	python_bindings/pybind11/tests/conftest.py	/^collect_ignore = []$/;"	v
color	include/taco/ir/ir_printer.h	/^  bool color;$/;"	m	class:taco::ir::IRPrinter
color_	test/gtest/gtest-all.cc	/^  std::string color_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
cols	python_bindings/pybind11/include/pybind11/eigen.h	/^        cols = Type::ColsAtCompileTime,$/;"	m	struct:EigenProps
cols	python_bindings/pybind11/include/pybind11/eigen.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable
combine	include/taco/util/collections.h	/^std::vector<V> combine(const std::vector<V>& a, const std::vector<V>& b) {$/;"	f	namespace:taco::util
combine	include/taco/util/collections.h	/^std::vector<V> combine(const std::vector<V>& a, const std::vector<V>& b,$/;"	f	namespace:taco::util
combineParentBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> FuseRelNode::combineParentBounds(std::vector<ir::Expr> outerParentBound, std::vector<ir::Expr> innerParentBound) const {$/;"	f	class:taco::FuseRelNode
comma	include/taco/parser/lexer.h	/^  comma,$/;"	m	class:taco::parser::Token
command	python_bindings/pybind11/setup.py	/^import setuptools.command.sdist$/;"	i
commentString	src/ir/ir_printer.cpp	/^std::string IRPrinter::commentString(std::string comment) {$/;"	f	class:taco::ir::IRPrinter
compare	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    static bool compare(const buffer_info& b) {$/;"	f	struct:compare_buffer_info
compare	src/index_notation/iteration_algebra.cpp	/^  bool compare(const IterationAlgebra& a, const IterationAlgebra& b) {$/;"	f	struct:taco::AlgComparer
compare	src/index_notation/transformations.cpp	/^static bool compare(std::vector<IndexVar> vars1, std::vector<IndexVar> vars2) {$/;"	f	namespace:taco
compare	src/ir/ir.cpp	/^template <typename T> bool compare(const Literal* literal, double val) {$/;"	f	namespace:taco::ir
compare	src/lower/merge_lattice.cpp	/^static bool compare(const vector<Iterator>& a, const vector<Iterator>& b) {$/;"	f	namespace:taco
compare	test/test_tensors.h	/^  bool compare(const Tensor<T>&tensor) const {$/;"	f	struct:taco::test::TensorData
compareToResolvedCoordinate	include/taco/lower/lowerer_impl.h	/^  std::vector<ir::Expr> compareToResolvedCoordinate(const std::vector<Iterator>& iters, ir::Expr resolvedCoordinate,$/;"	f	class:taco::LowererImpl
compare_buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^template <typename T, typename SFINAE = void> struct compare_buffer_info {$/;"	s
compare_buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^template <typename T> struct compare_buffer_info<T, detail::enable_if_t<std::is_integral<T>::value>> {$/;"	s
compile	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def compile(self):$/;"	m	class:tensor
compile	src/codegen/codegen_c.cpp	/^void CodeGen_C::compile(Stmt stmt, bool isFirst) {$/;"	f	class:taco::ir::CodeGen_C
compile	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::compile(Stmt stmt, bool isFirst) {$/;"	f	class:taco::ir::CodeGen_CUDA
compile	src/codegen/module.cpp	/^string Module::compile() {$/;"	f	class:taco::ir::Module
compile	src/index_notation/kernel.cpp	/^Kernel compile(IndexStmt stmt) {$/;"	f	namespace:taco
compile	src/tensor.cpp	/^void TensorBase::compile() {$/;"	f	class:taco::TensorBase
compile	src/tensor.cpp	/^void TensorBase::compile(taco::IndexStmt stmt, bool assembleWhileCompute) {$/;"	f	class:taco::TensorBase
compileSource	src/tensor.cpp	/^void TensorBase::compileSource(std::string source) {$/;"	f	class:taco::TensorBase
compileToSource	src/codegen/module.cpp	/^void Module::compileToSource(string path, string prefix) {$/;"	f	class:taco::ir::Module
compileToStaticLibrary	src/codegen/module.cpp	/^void Module::compileToStaticLibrary(string path, string prefix) {$/;"	f	class:taco::ir::Module
compile_function	python_bindings/pybind11/pybind11/setup_helpers.py	/^        def compile_function($/;"	f	function:ParallelCompile.function
compile_tensor_name_collision	src/error/error_messages.cpp	/^const std::string compile_tensor_name_collision =$/;"	m	namespace:taco::error	file:
compile_without_expr	src/error/error_messages.cpp	/^const std::string compile_without_expr =$/;"	m	namespace:taco::error	file:
compiler	include/taco/target.h	/^  std::string compiler = "cc";$/;"	m	struct:taco::Target
compiler_env	include/taco/target.h	/^  std::string compiler_env = "TACO_CC";$/;"	m	struct:taco::Target
complex128Value	include/taco/type.h	/^  std::complex<double> complex128Value;$/;"	m	union:taco::ComponentTypeUnion
complex64Value	include/taco/type.h	/^  std::complex<float> complex64Value;$/;"	m	union:taco::ComponentTypeUnion
complex_scalar	include/taco/parser/lexer.h	/^  complex_scalar,$/;"	m	class:taco::parser::Token
componentType	src/storage/storage.cpp	/^  Datatype      componentType;$/;"	m	struct:taco::TensorStorage::Content	file:
compoundStore	src/ir/ir_generators.cpp	/^Stmt compoundStore(Expr a, Expr i, Expr val, bool use_atomics, ParallelUnit atomic_parallel_unit) {$/;"	f	namespace:taco::ir
compressed	include/taco/format.h	/^  static ModeFormat compressed;  \/\/\/ e.g., second mode in CSR$/;"	m	class:taco::ModeFormat
compressed	src/format.cpp	/^ModeFormat ModeFormat::compressed = ModeFormat::Compressed;$/;"	m	class:taco::ModeFormat	file:
compressed	src/format.cpp	/^const ModeFormat compressed = ModeFormat::Compressed;$/;"	m	namespace:taco	file:
compute	include/taco/index_notation/kernel.h	/^  template <typename... Args> bool compute(const Args&... args) const {$/;"	f	class:taco::Kernel
compute	include/taco/lower/lowerer_impl.h	/^  bool compute;$/;"	m	class:taco::LowererImpl
compute	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool compute(size_t length, size_t *start, size_t *stop, size_t *step,$/;"	f	class:slice
compute	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool compute(ssize_t length, ssize_t *start, ssize_t *stop, ssize_t *step,$/;"	f	class:slice
compute	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def compute(self):$/;"	m	class:tensor
compute	src/index_notation/kernel.cpp	/^bool Kernel::compute(const vector<TensorStorage>& args) const {$/;"	f	class:taco::Kernel
compute	src/lower/mode_format_impl.cpp	/^ir::Stmt ModeFunction::compute() const {$/;"	f	class:taco::ModeFunction
compute	src/tensor.cpp	/^void TensorBase::compute() {$/;"	f	class:taco::TensorBase
computeBoundsForUnderivedAncestors	src/index_notation/provenance_graph.cpp	/^void ProvenanceGraph::computeBoundsForUnderivedAncestors(IndexVar indexVar, std::map<IndexVar, std::vector<ir::Expr>> relativeBounds, std::map<IndexVar, std::vector<ir::Expr>> &computedBounds) const {$/;"	f	class:taco::ProvenanceGraph
computeFunc	include/taco/tensor.h	/^  ir::Stmt           computeFunc;$/;"	m	struct:taco::TensorBase::Content
computeFunction	include/taco/index_notation/kernel.h	/^  void* computeFunction;$/;"	m	class:taco::Kernel
computeKernels	include/taco/tensor.h	/^  static KernelsCache computeKernels;$/;"	m	class:taco::TensorBase
computeKernels	src/tensor.cpp	/^TensorBase::KernelsCache TensorBase::computeKernels;$/;"	m	class:taco::TensorBase	file:
computeKernelsMutex	include/taco/tensor.h	/^  static std::mutex computeKernelsMutex;$/;"	m	class:taco::TensorBase
computeKernelsMutex	src/tensor.cpp	/^std::mutex TensorBase::computeKernelsMutex;$/;"	m	class:taco::TensorBase	file:
computeOffset	include/taco/util/variadic.h	/^int computeOffset(const seq<> &dims,$/;"	f	namespace:taco::util
computeOffset	include/taco/util/variadic.h	/^int computeOffset(const seq<dimensions...> &dims, int i) {$/;"	f	namespace:taco::util
computeOffset	include/taco/util/variadic.h	/^int computeOffset(seq<> dims, const std::vector<size_t>& indices) {$/;"	f	namespace:taco::util
computeOffset	include/taco/util/variadic.h	/^int computeOffset(seq<dimensions...> dims, const std::vector<size_t>& indices) {$/;"	f	namespace:taco::util
computeOffset	include/taco/util/variadic.h	/^int computeOffset(seq<dimensions...> dims, int index, Indices... rest) {$/;"	f	namespace:taco::util
computeOffset	include/taco/util/variadic.h	/^int computeOffset(seq<dimensions...> dims,$/;"	f	namespace:taco::util
computeProduct	include/taco/util/variadic.h	/^int computeProduct(seq<values...> seq) {$/;"	f	namespace:taco::util
computeRelativeBound	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> BoundRelNode::computeRelativeBound(std::set<IndexVar> definedVars, std::map<IndexVar, std::vector<ir::Expr>> computedBounds, std::map<IndexVar, ir::Expr> variableExprs, Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::BoundRelNode
computeRelativeBound	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> DivideRelNode::computeRelativeBound(std::set<IndexVar> definedVars, std::map<IndexVar, std::vector<ir::Expr>> computedBounds, std::map<IndexVar, ir::Expr> variableExprs, Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::DivideRelNode
computeRelativeBound	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> FuseRelNode::computeRelativeBound(std::set<IndexVar> definedVars, std::map<IndexVar, std::vector<ir::Expr>> computedBounds, std::map<IndexVar, ir::Expr> variableExprs, Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::FuseRelNode
computeRelativeBound	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> IndexVarRelNode::computeRelativeBound(std::set<IndexVar> definedVars, std::map<IndexVar, std::vector<ir::Expr>> computedBounds, std::map<IndexVar, ir::Expr> variableExprs, Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::IndexVarRelNode
computeRelativeBound	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> PosRelNode::computeRelativeBound(std::set<IndexVar> definedVars, std::map<IndexVar, std::vector<ir::Expr>> computedBounds, std::map<IndexVar, ir::Expr> variableExprs, Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::PosRelNode
computeRelativeBound	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> PrecomputeRelNode::computeRelativeBound(std::set<IndexVar> definedVars, std::map<IndexVar, std::vector<ir::Expr>> computedBounds, std::map<IndexVar, ir::Expr> variableExprs, Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::PrecomputeRelNode
computeRelativeBound	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> SplitRelNode::computeRelativeBound(std::set<IndexVar> definedVars, std::map<IndexVar, std::vector<ir::Expr>> computedBounds, std::map<IndexVar, ir::Expr> variableExprs, Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::SplitRelNode
compute_without_compile	src/error/error_messages.cpp	/^const std::string compute_without_compile =$/;"	m	namespace:taco::error	file:
concat	python_bindings/pybind11/include/pybind11/detail/descr.h	/^    -> decltype(std::declval<descr<N + 2, Ts...>>() + concat(args...)) {$/;"	f
concat	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr descr<0> concat() { return {}; }$/;"	f
concat	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr descr<N, Ts...> concat(const descr<N, Ts...> &descr) { return descr; }$/;"	f
concrete	test/tests-index_notation.cpp	/^  IndexStmt concrete;$/;"	m	struct:ConcreteTest	file:
concrete	test/tests-index_notation.cpp	/^struct concrete : public TestWithParam<ConcreteTest> {};$/;"	s	file:
concretize	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::concretize() const {$/;"	f	class:taco::IndexStmt
cond	include/taco/ir/ir.h	/^  Expr cond;$/;"	m	struct:taco::ir::IfThenElse
cond	include/taco/ir/ir.h	/^  Expr cond;$/;"	m	struct:taco::ir::While
condition	include/taco/error.h	/^  bool condition;$/;"	m	struct:taco::ErrorReport
conditionString	include/taco/error.h	/^  const char *conditionString;$/;"	m	struct:taco::ErrorReport
conformable	python_bindings/pybind11/include/pybind11/eigen.h	/^    bool conformable = false;$/;"	m	struct:EigenConformable
conformable	python_bindings/pybind11/include/pybind11/eigen.h	/^    static EigenConformable<row_major> conformable(const array &a) {$/;"	f	struct:EigenProps
conjunction	src/ir/ir_generators.cpp	/^Expr conjunction(std::vector<Expr> exprs) {$/;"	f	namespace:taco::ir
const	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
constRefQualified	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int constRefQualified(int other) const & { return value + other; }$/;"	f	struct:RefQualified
const_	python_bindings/pybind11/include/pybind11/detail/common.h	/^static constexpr auto const_ = std::true_type{};$/;"	m	struct:overload_cast_impl
const_iterator	include/taco/storage/typed_vector.h	/^    const_iterator(pointer ptr, Datatype type) : ptr_(ptr), type(type) { }$/;"	f	class:taco::TypedVector::const_iterator
const_iterator	include/taco/storage/typed_vector.h	/^  class const_iterator$/;"	c	class:taco::TypedVector
const_iterator	include/taco/tensor.h	/^    const_iterator(const TensorBase* tensor, bool isEnd = false) :$/;"	f	class:taco::TensorBase::const_iterator
const_iterator	include/taco/tensor.h	/^  class const_iterator {$/;"	c	class:taco::TensorBase
const_iterator	include/taco/util/collections.h	/^  typedef typename Collection::const_iterator const_iterator;$/;"	t	class:taco::util::ExcludeFirstConstIterable
const_iterator	test/gtest/gtest.h	/^  typedef const Element* const_iterator;$/;"	t	class:testing::internal::NativeArray
const_iterator1	include/taco/util/collections.h	/^    typedef typename C1::const_iterator const_iterator1;$/;"	t	class:taco::util::ZipConstIterable::ZipConstIterator
const_iterator2	include/taco/util/collections.h	/^    typedef typename C2::const_iterator const_iterator2;$/;"	t	class:taco::util::ZipConstIterable::ZipConstIterator
const_reverse_iterator	include/taco/util/collections.h	/^  typedef typename Collection::const_reverse_iterator const_reverse_iterator;$/;"	t	class:taco::util::ReverseConstIterable
constants	python_bindings/pybind11/include/pybind11/numpy.h	/^    enum constants {$/;"	g	struct:npy_api
constexpr_first	python_bindings/pybind11/include/pybind11/detail/common.h	/^constexpr int constexpr_first() { return constexpr_impl::first(0, Predicate<Ts>::value...); }$/;"	f
constexpr_last	python_bindings/pybind11/include/pybind11/detail/common.h	/^constexpr int constexpr_last() { return constexpr_impl::last(0, -1, Predicate<Ts>::value...); }$/;"	f
constexpr_sum	python_bindings/pybind11/include/pybind11/detail/common.h	/^constexpr size_t constexpr_sum() { return 0; }$/;"	f
constexpr_sum	python_bindings/pybind11/include/pybind11/detail/common.h	/^constexpr size_t constexpr_sum(T n, Ts... ns) { return size_t{n} + constexpr_sum(ns...); }$/;"	f
constexpr_sum	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename... Ts> constexpr size_t constexpr_sum(Ts... ns) { return (0 + ... + size_t{ns}); }$/;"	f
construct	python_bindings/pybind11/include/pybind11/detail/init.h	/^void construct(...) {$/;"	f
construct	python_bindings/pybind11/include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Alias<Class> &&result, bool) {$/;"	f
construct	python_bindings/pybind11/include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Alias<Class> *alias_ptr, bool) {$/;"	f
construct	python_bindings/pybind11/include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Cpp<Class> &&result, bool need_alias) {$/;"	f
construct	python_bindings/pybind11/include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Cpp<Class> *ptr, bool need_alias) {$/;"	f
construct	python_bindings/pybind11/include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Holder<Class> holder, bool need_alias) {$/;"	f
construct1	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    static TestFactory1 *construct1() { return new TestFactory1(); }$/;"	f	class:TestFactoryHelper
construct1	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    static std::unique_ptr<TestFactory1> construct1(int a) { return std::unique_ptr<TestFactory1>(new TestFactory1(a)); }$/;"	f	class:TestFactoryHelper
construct1_string	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    static TestFactory1 *construct1_string(std::string a) { return new TestFactory1(a); }$/;"	f	class:TestFactoryHelper
construct2	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    static TestFactory2 *construct2() { return new TestFactory2(); }$/;"	f	class:TestFactoryHelper
construct2	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    static TestFactory2 construct2(std::string a) { return TestFactory2(a); }$/;"	f	class:TestFactoryHelper
construct2	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    static std::unique_ptr<TestFactory2> construct2(int a) { return std::unique_ptr<TestFactory2>(new TestFactory2(a)); }$/;"	f	class:TestFactoryHelper
construct3	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    static TestFactory3 *construct3() { return new TestFactory3(); }$/;"	f	class:TestFactoryHelper
construct3	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    static std::shared_ptr<TestFactory3> construct3(int a) { return std::shared_ptr<TestFactory3>(new TestFactory3(a)); }$/;"	f	class:TestFactoryHelper
constructAnnihilatorAlg	src/index_notation/tensor_operator.cpp	/^IterationAlgebra Func::constructAnnihilatorAlg(const std::vector<IndexExpr> &args, taco::Annihilator annihilator) {$/;"	f	class:taco::Func
constructCheckForAccessZero	src/lower/lowerer_impl.cpp	/^ir::Expr LowererImpl::constructCheckForAccessZero(Access access) {$/;"	f	class:taco::LowererImpl
constructDefaultAlgebra	src/index_notation/tensor_operator.cpp	/^IterationAlgebra Func::constructDefaultAlgebra(const std::vector<IndexExpr>& exprs) {$/;"	f	class:taco::Func
constructIdentityAlg	src/index_notation/tensor_operator.cpp	/^IterationAlgebra Func::constructIdentityAlg(const std::vector<IndexExpr> &args, taco::Identity identity) {$/;"	f	class:taco::Func
constructInnerLoopCasePreamble	src/lower/lowerer_impl.cpp	/^std::vector<ir::Stmt> LowererImpl::constructInnerLoopCasePreamble(ir::Expr coordinate, IndexVar coordinateVar,$/;"	f	class:taco::LowererImpl
construct_alias_from_cpp	python_bindings/pybind11/include/pybind11/detail/init.h	/^[[noreturn]] void construct_alias_from_cpp(std::false_type \/*!is_alias_constructible*\/,$/;"	f
construct_alias_from_cpp	python_bindings/pybind11/include/pybind11/detail/init.h	/^void construct_alias_from_cpp(std::true_type \/*is_alias_constructible*\/,$/;"	f
construct_or_initialize	python_bindings/pybind11/include/pybind11/detail/init.h	/^inline Class *construct_or_initialize(Args &&...args) { return new Class(std::forward<Args>(args)...); }$/;"	f
construct_or_initialize	python_bindings/pybind11/include/pybind11/detail/init.h	/^inline Class *construct_or_initialize(Args &&...args) { return new Class{std::forward<Args>(args)...}; }$/;"	f
constructor	python_bindings/pybind11/include/pybind11/detail/init.h	/^struct constructor {$/;"	s
consume	src/parser/parser.cpp	/^void Parser::consume(Token expected) {$/;"	f	class:taco::parser::Parser
consume_str	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void consume_str(std::string&&) {}$/;"	f	class:ExampleMandA
consumer	include/taco/index_notation/index_notation_nodes.h	/^  IndexStmt consumer;$/;"	m	struct:taco::WhereNode
container_	test/gtest/gtest.h	/^  const ContainerType container_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator
container_traits	python_bindings/pybind11/include/pybind11/stl_bind.h	/^template <typename T>  struct container_traits {$/;"	s
contains	include/taco/util/collections.h	/^bool contains(const C &container, const V &value) {$/;"	f	namespace:taco::util
contains	include/taco/util/collections.h	/^bool contains(const std::map<K,V> &container, const K &key) {$/;"	f	namespace:taco::util
contains	include/taco/util/collections.h	/^bool contains(const std::set<V> &container, const V &value) {$/;"	f	namespace:taco::util
contains	include/taco/util/collections.h	/^bool contains(const std::unordered_map<K,V> &container, const K &key) {$/;"	f	namespace:taco::util
contains	include/taco/util/collections.h	/^bool contains(const std::unordered_set<V> &container, const V &value) {$/;"	f	namespace:taco::util
contains	include/taco/util/scopedmap.h	/^  bool contains(const Key& key) {$/;"	f	class:taco::util::ScopedMap
contains	include/taco/util/scopedset.h	/^  bool contains(const Key& key) {$/;"	f	class:taco::util::ScopedSet
contains	python_bindings/pybind11/include/pybind11/pytypes.h	/^    template <typename T> bool contains(T &&key) const {$/;"	f	class:dict
contains	python_bindings/pybind11/include/pybind11/pytypes.h	/^    template <typename T> bool contains(T &&val) const {$/;"	f	class:set
contains	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename D> template <typename T> bool object_api<D>::contains(T &&item) const {$/;"	f	class:object_api
containsExpr	src/index_notation/transformations.cpp	/^static bool containsExpr(Assignment assignment, IndexExpr expr) {$/;"	f	namespace:taco
containsTranspose	src/error/error_checks.cpp	/^bool containsTranspose(const Format& resultFormat,$/;"	f	namespace:taco::error
content	include/taco/index_notation/index_notation.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::IndexSetVar
content	include/taco/index_notation/index_notation.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::IndexVar
content	include/taco/index_notation/index_notation.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::TensorVar
content	include/taco/index_notation/index_notation.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::WindowedIndexVar
content	include/taco/index_notation/index_notation_nodes.h	/^  std::shared_ptr<Content> content;$/;"	m	struct:taco::IndexVarNode
content	include/taco/index_notation/kernel.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Kernel
content	include/taco/index_notation/property_pointers.h	/^  std::shared_ptr<Content> content;$/;"	m	struct:taco::AnnihilatorPtr
content	include/taco/index_notation/property_pointers.h	/^  std::shared_ptr<Content> content;$/;"	m	struct:taco::IdentityPtr
content	include/taco/index_notation/provenance_graph.h	/^    std::shared_ptr<Content> content;$/;"	m	struct:taco::DivideRelNode
content	include/taco/index_notation/provenance_graph.h	/^  std::shared_ptr<Content> content;$/;"	m	struct:taco::BoundRelNode
content	include/taco/index_notation/provenance_graph.h	/^  std::shared_ptr<Content> content;$/;"	m	struct:taco::FuseRelNode
content	include/taco/index_notation/provenance_graph.h	/^  std::shared_ptr<Content> content;$/;"	m	struct:taco::PosRelNode
content	include/taco/index_notation/provenance_graph.h	/^  std::shared_ptr<Content> content;$/;"	m	struct:taco::PrecomputeRelNode
content	include/taco/index_notation/provenance_graph.h	/^  std::shared_ptr<Content> content;$/;"	m	struct:taco::SplitRelNode
content	include/taco/index_notation/schedule.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Schedule
content	include/taco/index_notation/transformations.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::AddSuchThatPredicates
content	include/taco/index_notation/transformations.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::ForAllReplace
content	include/taco/index_notation/transformations.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Parallelize
content	include/taco/index_notation/transformations.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Precompute
content	include/taco/index_notation/transformations.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Reorder
content	include/taco/lower/iterator.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Iterator
content	include/taco/lower/iterator.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Iterators
content	include/taco/lower/mode.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Mode
content	include/taco/lower/mode.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::ModePack
content	include/taco/lower/mode_format_impl.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::ModeFunction
content	include/taco/parser/parser.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::parser::Parser
content	include/taco/storage/array.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Array
content	include/taco/storage/index.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Index
content	include/taco/storage/index.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::ModeIndex
content	include/taco/storage/storage.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::TensorStorage
content	include/taco/tensor.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::TensorBase
content	include/taco/type.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::Dimension
content	src/lower/iteration_graph.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::IterationGraph
content	src/lower/tensor_path.h	/^  std::shared_ptr<Content> content;$/;"	m	class:taco::TensorPath
content_	include/taco/lower/merge_lattice.h	/^  std::shared_ptr<Content> content_;$/;"	m	class:taco::MergePoint
contents	include/taco/ir/ir.h	/^  Stmt contents;$/;"	m	struct:taco::ir::For
contents	include/taco/ir/ir.h	/^  Stmt contents;$/;"	m	struct:taco::ir::While
contents	include/taco/ir/ir.h	/^  std::vector<Stmt> contents;$/;"	m	struct:taco::ir::Block
contextlib	python_bindings/pybind11/pybind11/setup_helpers.py	/^import contextlib$/;"	i
contextlib	python_bindings/pybind11/setup.py	/^import contextlib$/;"	i
contextlib	python_bindings/pybind11/tests/conftest.py	/^import contextlib$/;"	i
contextlib	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^import contextlib$/;"	i
contextmanager	python_bindings/pybind11/tests/test_iostream.py	/^from contextlib import contextmanager$/;"	i
controlExpr	include/taco/ir/ir.h	/^  Expr controlExpr;$/;"	m	struct:taco::ir::Switch
convert	include/taco/tensor.h	/^static std::vector<Dimension> convert(const std::vector<int>& dimensions) {$/;"	f	namespace:taco
convert	python_bindings/pybind11/include/pybind11/attr.h	/^    bool convert : 1;  \/\/\/< True if the argument is allowed to convert when loading$/;"	m	struct:argument_record
coord	include/taco/component.h	/^  Coordinate<Order> coord;$/;"	m	class:taco::Component
coordAccess	src/lower/iterator.cpp	/^ModeFunction Iterator::coordAccess(const std::vector<ir::Expr>& coords) const {$/;"	f	class:taco::Iterator
coordBounds	src/lower/iterator.cpp	/^ModeFunction Iterator::coordBounds(const ir::Expr& parentPos) const {$/;"	f	class:taco::Iterator
coordBounds	src/lower/iterator.cpp	/^ModeFunction Iterator::coordBounds(const std::vector<ir::Expr>& coords) const {$/;"	f	class:taco::Iterator
coordBounds	src/lower/mode_format_compressed.cpp	/^ModeFunction CompressedModeFormat::coordBounds(Expr parentPos,$/;"	f	class:taco::CompressedModeFormat
coordBounds	src/lower/mode_format_impl.cpp	/^ModeFunction ModeFormatImpl::coordBounds(ir::Expr parentPos,$/;"	f	class:taco::ModeFormatImpl
coordBuffer	include/taco/tensor.h	/^      T* coordBuffer;$/;"	m	struct:taco::TensorBase::const_iterator::Context
coordIterAccess	src/lower/mode_format_impl.cpp	/^ModeFunction ModeFormatImpl::coordIterAccess(ir::Expr parentPos,$/;"	f	class:taco::ModeFormatImpl
coordIterBounds	src/lower/mode_format_impl.cpp	/^ModeFunction ModeFormatImpl::coordIterBounds(vector<Expr> coords,$/;"	f	class:taco::ModeFormatImpl
coordVar	src/lower/iterator.cpp	/^  ir::Expr coordVar;$/;"	m	struct:taco::Iterator::Content	file:
coordVars	test/tests-merge_lattice.cpp	/^static map<IndexVar, taco::ir::Expr> coordVars;$/;"	m	namespace:tests	file:
coordinate	include/taco/component.h	/^  const Coordinate<Order> coordinate() const {$/;"	f	class:taco::Component
coordinate	include/taco/component.h	/^  size_t coordinate(int mode) const {$/;"	f	class:taco::Component
coordinateBuffer	include/taco/tensor.h	/^  std::shared_ptr<std::vector<char>> coordinateBuffer;$/;"	m	struct:taco::TensorBase::Content
coordinateBufferUsed	include/taco/tensor.h	/^  size_t             coordinateBufferUsed;$/;"	m	struct:taco::TensorBase::Content
coordinateSize	include/taco/tensor.h	/^  size_t             coordinateSize;$/;"	m	struct:taco::TensorBase::Content
coordinates	include/taco/coordinate.h	/^  std::array<Type,Order> coordinates;$/;"	m	class:taco::Coordinate
coordinates	include/taco/storage/coordinate.h	/^  std::array<Type,Order> coordinates;$/;"	m	class:taco::Coordinates
coordinates	include/taco/tensor.h	/^      const T*     coordinates;$/;"	m	class:taco::TensorBase::const_iterator::Coordinates
coordinates	src/lower/lowerer_impl.cpp	/^vector<Expr> LowererImpl::coordinates(Iterator iterator) const {$/;"	f	class:taco::LowererImpl
coordinates	src/lower/lowerer_impl.cpp	/^vector<Expr> LowererImpl::coordinates(vector<Iterator> iterators)$/;"	f	class:taco::LowererImpl
coords	include/taco/ir/ir.h	/^  std::vector<Expr> coords;$/;"	m	struct:taco::ir::Yield
coordsName	src/codegen/codegen.cpp	/^const std::string coordsName = "__coords__";$/;"	m	namespace:taco::ir	file:
copy	python_bindings/pybind11/include/pybind11/detail/common.h	/^    copy,$/;"	m	class:return_value_policy
copy	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def copy(self):$/;"	m	class:tensor
copy	src/lower/mode_format_compressed.cpp	/^ModeFormat CompressedModeFormat::copy($/;"	f	class:taco::CompressedModeFormat
copy	src/lower/mode_format_dense.cpp	/^ModeFormat DenseModeFormat::copy($/;"	f	class:taco::DenseModeFormat
copy	src/lower/mode_format_singleton.cpp	/^ModeFormat SingletonModeFormat::copy($/;"	f	class:taco::SingletonModeFormat
copy	test/gtest/gtest.h	/^  template <typename U> void copy(linked_ptr<U> const* ptr) {$/;"	f	class:testing::internal::linked_ptr
copy	test/tests-merge_lattice.cpp	/^  ModeFormat copy(std::vector<ModeFormat::Property> properties) const {$/;"	f	class:tests::HashedModeFormat
copyToArray	include/taco/util/collections.h	/^T* copyToArray(const std::initializer_list<T>& initList) {$/;"	f	namespace:taco::util
copyToArray	include/taco/util/collections.h	/^T* copyToArray(const std::vector<T>& vec) {$/;"	f	namespace:taco::util
copyToVector	include/taco/util/collections.h	/^std::vector<T> copyToVector(T* ptr, size_t size) {$/;"	f	namespace:taco::util
copy_assignments	python_bindings/pybind11/tests/constructor_stats.h	/^    int copy_assignments = 0;$/;"	m	class:ConstructorStats
copy_constructions	python_bindings/pybind11/tests/constructor_stats.h	/^    int copy_constructions = 0;$/;"	m	class:ConstructorStats
copy_created	python_bindings/pybind11/tests/constructor_stats.h	/^    void copy_created(void *inst) {$/;"	f	class:ConstructorStats
copy_or_ref	python_bindings/pybind11/include/pybind11/eigen.h	/^    Array copy_or_ref;$/;"	m	struct:type_caster
copyable_holder_caster	python_bindings/pybind11/include/pybind11/cast.h	/^struct copyable_holder_caster : public type_caster_base<type> {$/;"	s
copyright	python_bindings/pybind11/docs/conf.py	/^copyright = "2017, Wenzel Jakob"$/;"	v
copyright	python_bindings/source/conf.py	/^copyright = '2019, MIT COMMIT GROUP'$/;"	v
copysign	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  undef copysign$/;"	d
correctPointTypes	src/lower/merge_lattice.cpp	/^  correctPointTypes(const vector<MergePoint>& left, const vector<MergePoint>& right,$/;"	f	class:taco::MergeLatticeBuilder	file:
correctPointTypesAfterIntersect	src/lower/merge_lattice.cpp	/^  correctPointTypesAfterIntersect(const vector<MergePoint>& left, const vector<MergePoint>& right,$/;"	f	class:taco::MergeLatticeBuilder	file:
correctPointTypesAfterUnion	src/lower/merge_lattice.cpp	/^  correctPointTypesAfterUnion(const vector<MergePoint>& left, const vector<MergePoint>& right,$/;"	f	class:taco::MergeLatticeBuilder	file:
cos	src/index_notation/index_notation.cpp	/^IndexExpr cos(IndexExpr a) {$/;"	f	namespace:taco
cosh	src/index_notation/index_notation.cpp	/^IndexExpr cosh(IndexExpr a) {$/;"	f	namespace:taco
costream	python_bindings/pybind11/include/pybind11/iostream.h	/^    std::ostream &costream;$/;"	m	class:scoped_ostream_redirect
count	include/taco/util/collections.h	/^size_t count(const std::vector<V>& vector, T test) {$/;"	f	namespace:taco::util
countYields	src/codegen/codegen.cpp	/^int CodeGen::countYields(const Function *func) {$/;"	f	class:taco::ir::CodeGen
cpp_cache_lock	python_bindings/pybind11/pybind11/setup_helpers.py	/^cpp_cache_lock = threading.Lock()$/;"	v
cpp_flag_cache	python_bindings/pybind11/pybind11/setup_helpers.py	/^cpp_flag_cache = None$/;"	v
cpp_function	python_bindings/pybind11/include/pybind11/pybind11.h	/^    cpp_function(Func &&f, const Extra&... extra) {$/;"	f	class:cpp_function
cpp_function	python_bindings/pybind11/include/pybind11/pybind11.h	/^    cpp_function(Return (*f)(Args...), const Extra&... extra) {$/;"	f	class:cpp_function
cpp_function	python_bindings/pybind11/include/pybind11/pybind11.h	/^    cpp_function(std::nullptr_t) { }$/;"	f	class:cpp_function
cpp_function	python_bindings/pybind11/include/pybind11/pybind11.h	/^class cpp_function : public function {$/;"	c
cpp_function	python_bindings/pybind11/include/pybind11/pytypes.h	/^    handle cpp_function() const {$/;"	f	class:function
cpp_version	python_bindings/pybind11/setup.py	/^cpp_version = "{MAJOR}.{MINOR}.{PATCH}".format(**matches)$/;"	v
cpptype	python_bindings/pybind11/include/pybind11/cast.h	/^    const std::type_info *cpptype = nullptr;$/;"	m	class:type_caster_generic
cpptype	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    const std::type_info *cpptype;$/;"	m	struct:type_info
createAccessIterators	src/lower/iterator.cpp	/^void Iterators::createAccessIterators(Access access, Format format, Expr tensorIR,$/;"	f	class:taco::Iterators
createCapacityVars	src/lower/lowerer_impl.cpp	/^static void createCapacityVars(const map<TensorVar, Expr>& tensorVars,$/;"	f	namespace:taco
createDenseFormat	src/index_notation/index_notation.cpp	/^static Format createDenseFormat(const Type& type) {$/;"	f	namespace:taco
createIRTensorVars	src/lower/iterator.cpp	/^static std::map<TensorVar, ir::Expr> createIRTensorVars(IndexStmt stmt)$/;"	f	namespace:taco
createReducedValueVars	src/lower/lowerer_impl.cpp	/^static void createReducedValueVars(const vector<Access>& inputAccesses,$/;"	f	namespace:taco
createVars	src/index_notation/index_notation.cpp	/^vector<ir::Expr> createVars(const vector<TensorVar>& tensorVars,$/;"	f	namespace:taco
create_2d_tensor_type	test/tests-format-mm-permute.cpp	/^static Tensor<double> create_2d_tensor_type(string name, int format) {$/;"	f	file:
create_and_destroy	python_bindings/pybind11/tests/test_factory_constructors.py	/^def create_and_destroy(*args):$/;"	f
create_extension_module	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static module_ create_extension_module(const char *name, const char *doc, module_def *def) {$/;"	f	class:module_
create_recarray	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<S, 0> create_recarray(size_t n) {$/;"	f	class:E1	file:
create_zoo	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^std::vector<std::unique_ptr<Animal>> create_zoo()$/;"	f	struct:Animal
created	python_bindings/pybind11/tests/constructor_stats.h	/^    void created(void *inst) {$/;"	f	class:ConstructorStats
critical_section_	test/gtest/gtest.h	/^  _RTL_CRITICAL_SECTION* critical_section_;$/;"	m	class:std::tr1::Mutex
critical_section_init_phase_	test/gtest/gtest.h	/^  long critical_section_init_phase_;  \/\/ NOLINT$/;"	m	class:std::tr1::Mutex
csc_matrix	python_bindings/pytaco/pytensor/taco_tensor.py	/^from scipy.sparse import csr_matrix, csc_matrix$/;"	i
csc_matrix	python_bindings/unit_tests.py	/^from scipy.sparse import csc_matrix, csr_matrix$/;"	i
csize	include/taco/taco_tensor_t.h	/^  int32_t      csize;         \/\/ component size$/;"	m	struct:taco_tensor_t
csr_matrix	python_bindings/pytaco/pytensor/taco_tensor.py	/^from scipy.sparse import csr_matrix, csc_matrix$/;"	i
csr_matrix	python_bindings/unit_tests.py	/^from scipy.sparse import csc_matrix, csr_matrix$/;"	i
ctx	include/taco/tensor.h	/^    const std::shared_ptr<Context> ctx;$/;"	m	class:taco::TensorBase::const_iterator
ctxClassName	src/codegen/codegen.cpp	/^const std::string ctxClassName = "___context___";$/;"	m	namespace:taco::ir	file:
ctxName	src/codegen/codegen.cpp	/^const std::string ctxName = "__ctx__";$/;"	m	namespace:taco::ir	file:
ctypes	python_bindings/pybind11/tests/test_buffers.py	/^import ctypes$/;"	i
cube	src/index_notation/index_notation.cpp	/^IndexExpr cube(IndexExpr a) {$/;"	f	namespace:taco
cuda	test/tests-windowing.cpp	/^struct cuda : public TestWithParam<std::tuple<ModeFormat, ModeFormat>> {};$/;"	s	file:
cuda_unified_alloc	src/cuda.cpp	/^void* cuda_unified_alloc(size_t size) {$/;"	f	namespace:taco
cuda_unified_free	src/cuda.cpp	/^void cuda_unified_free(void *ptr) {$/;"	f	namespace:taco
curVal	include/taco/tensor.h	/^    value_type                     curVal;$/;"	m	class:taco::TensorBase::const_iterator
curr	python_bindings/pybind11/include/pybind11/cast.h	/^            curr(inst \/* instance *\/,$/;"	f	struct:values_and_holders::iterator
curr	python_bindings/pybind11/include/pybind11/cast.h	/^        value_and_holder curr;$/;"	m	struct:values_and_holders::iterator
current10_	test/gtest/gtest.h	/^    typename ParamGenerator<T10>::iterator current10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	test/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	test/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current1_	test/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current1_	test/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current1_	test/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current1_	test/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current1_	test/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current1_	test/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current1_	test/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current2_	test/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current2_	test/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current2_	test/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current2_	test/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current2_	test/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current2_	test/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current2_	test/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current2_	test/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current2_	test/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current3_	test/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current3_	test/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current3_	test/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current3_	test/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current3_	test/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current3_	test/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current3_	test/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current3_	test/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current4_	test/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current4_	test/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current4_	test/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current4_	test/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current4_	test/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current4_	test/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current4_	test/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current5_	test/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current5_	test/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current5_	test/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current5_	test/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current5_	test/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current5_	test/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current6_	test/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current6_	test/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current6_	test/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current6_	test/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current6_	test/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current7_	test/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current7_	test/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current7_	test/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current7_	test/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current8_	test/gtest/gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current8_	test/gtest/gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current8_	test/gtest/gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current9_	test/gtest/gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current9_	test/gtest/gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
currentParameterSet	src/codegen/codegen_cuda.cpp	/^  set<Expr> currentParameterSet;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
currentParameters	src/codegen/codegen_cuda.cpp	/^  vector<pair<string, Expr>> currentParameters; \/\/ keep as vector so code generation is deterministic$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
currentToken	src/parser/parser.cpp	/^  Token currentToken;$/;"	m	struct:taco::parser::Parser::Content	file:
currentTokenString	src/parser/parser.cpp	/^string Parser::currentTokenString() {$/;"	f	class:taco::parser::Parser
current_test_case	test/gtest/gtest-all.cc	/^  const TestCase* current_test_case() const { return current_test_case_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_case_	test/gtest/gtest-all.cc	/^  TestCase* current_test_case_;$/;"	m	class:testing::internal::UnitTestImpl	file:
current_test_info	test/gtest/gtest-all.cc	/^  TestInfo* current_test_info() { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info	test/gtest/gtest-all.cc	/^  const TestInfo* current_test_info() const { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info_	test/gtest/gtest-all.cc	/^  TestInfo* current_test_info_;$/;"	m	class:testing::internal::UnitTestImpl	file:
current_test_result	test/gtest/gtest-all.cc	/^TestResult* UnitTestImpl::current_test_result() {$/;"	f	class:testing::internal::UnitTestImpl
current_value_	test/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current_value_	test/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current_value_	test/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current_value_	test/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current_value_	test/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current_value_	test/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current_value_	test/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current_value_	test/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current_value_	test/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
custom_unique_ptr	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    custom_unique_ptr(T* p) : impl(p) { }$/;"	f	class:custom_unique_ptr
custom_unique_ptr	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^class custom_unique_ptr {$/;"	c	file:
cxx_std	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def cxx_std(self):$/;"	m	class:Pybind11Extension
cxx_std	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def cxx_std(self, level):$/;"	m	class:Pybind11Extension
d	python_bindings/pybind11/tests/test_class.py	/^        d = m.HasOpNewDelBoth()$/;"	v	class:test_operator_new_delete.SubAliased
d	python_bindings/pybind11/tests/test_exceptions.cpp	/^    py::dict d;$/;"	m	struct:PythonCallInDestructor	file:
d	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    std::array<float, 2> d[4];$/;"	m	struct:ArrayStruct	file:
d	python_bindings/pybind11/tests/test_pytypes.py	/^        d = {"operator[object]": 1, "operator[char *]": 2}$/;"	v	class:test_accessors.TestObject
d1	test/tests-merge_lattice.cpp	/^static Access d1 = d1t(i);$/;"	m	namespace:tests	file:
d1a	test/test_tensors.cpp	/^Tensor<double> d1a(std::string name, Format format) {$/;"	f	namespace:taco::test
d1a_data	test/test_tensors.cpp	/^TensorData<double> d1a_data() {$/;"	f	namespace:taco::test
d1b	test/test_tensors.cpp	/^Tensor<double> d1b(std::string name, Format format) {$/;"	f	namespace:taco::test
d1b_data	test/test_tensors.cpp	/^TensorData<double> d1b_data() {$/;"	f	namespace:taco::test
d2	test/tests-merge_lattice.cpp	/^static Access d2 = d2t(i);$/;"	m	namespace:tests	file:
d233a	test/test_tensors.cpp	/^Tensor<double> d233a(std::string name, Format format) {$/;"	f	namespace:taco::test
d233a_data	test/test_tensors.cpp	/^TensorData<double> d233a_data() {$/;"	f	namespace:taco::test
d233b	test/test_tensors.cpp	/^Tensor<double> d233b(std::string name, Format format) {$/;"	f	namespace:taco::test
d233b_data	test/test_tensors.cpp	/^TensorData<double> d233b_data() {$/;"	f	namespace:taco::test
d233c	test/test_tensors.cpp	/^Tensor<double> d233c(std::string name, Format format) {$/;"	f	namespace:taco::test
d233c_data	test/test_tensors.cpp	/^TensorData<double> d233c_data() {$/;"	f	namespace:taco::test
d3	test/tests-merge_lattice.cpp	/^static Access d3 = d3t(i);$/;"	m	namespace:tests	file:
d32b	test/test_tensors.cpp	/^Tensor<double> d32b(std::string name, Format format) {$/;"	f	namespace:taco::test
d32b_data	test/test_tensors.cpp	/^TensorData<double> d32b_data() {$/;"	f	namespace:taco::test
d3322a	test/test_tensors.cpp	/^Tensor<double> d3322a(std::string name, Format format) {$/;"	f	namespace:taco::test
d3322a_data	test/test_tensors.cpp	/^TensorData<double> d3322a_data() {$/;"	f	namespace:taco::test
d333a	test/test_tensors.cpp	/^Tensor<double> d333a(std::string name, Format format) {$/;"	f	namespace:taco::test
d333a_data	test/test_tensors.cpp	/^TensorData<double> d333a_data() {$/;"	f	namespace:taco::test
d33a	test/test_tensors.cpp	/^Tensor<double> d33a(std::string name, Format format) {$/;"	f	namespace:taco::test
d33a	test/test_tensors.cpp	/^Tensor<double> d33a(std::string name, ModeFormat modeType) {$/;"	f	namespace:taco::test
d33a_CSC	test/test_tensors.cpp	/^Tensor<double> d33a_CSC(std::string name) {$/;"	f	namespace:taco::test
d33a_CSR	test/test_tensors.cpp	/^Tensor<double> d33a_CSR(std::string name) {$/;"	f	namespace:taco::test
d33a_data	test/test_tensors.cpp	/^TensorData<double> d33a_data() {$/;"	f	namespace:taco::test
d33at	test/test_tensors.cpp	/^Tensor<double> d33at(std::string name, Format format) {$/;"	f	namespace:taco::test
d33at_data	test/test_tensors.cpp	/^TensorData<double> d33at_data() {$/;"	f	namespace:taco::test
d33b	test/test_tensors.cpp	/^Tensor<double> d33b(std::string name, Format format) {$/;"	f	namespace:taco::test
d33b_data	test/test_tensors.cpp	/^TensorData<double> d33b_data() {$/;"	f	namespace:taco::test
d33c	test/test_tensors.cpp	/^Tensor<double> d33c(std::string name, Format format) {$/;"	f	namespace:taco::test
d33c_data	test/test_tensors.cpp	/^TensorData<double> d33c_data() {$/;"	f	namespace:taco::test
d34a	test/test_tensors.cpp	/^Tensor<double> d34a(std::string name, Format format) {$/;"	f	namespace:taco::test
d34a_data	test/test_tensors.cpp	/^TensorData<double> d34a_data() {$/;"	f	namespace:taco::test
d34b	test/test_tensors.cpp	/^Tensor<double> d34b(std::string name, Format format) {$/;"	f	namespace:taco::test
d34b_data	test/test_tensors.cpp	/^TensorData<double> d34b_data() {$/;"	f	namespace:taco::test
d35a	test/test_tensors.cpp	/^Tensor<double> d35a(std::string name, Format format) {$/;"	f	namespace:taco::test
d35a_CSC	test/test_tensors.cpp	/^Tensor<double> d35a_CSC(std::string name) {$/;"	f	namespace:taco::test
d35a_CSR	test/test_tensors.cpp	/^Tensor<double> d35a_CSR(std::string name) {$/;"	f	namespace:taco::test
d35a_data	test/test_tensors.cpp	/^TensorData<double> d35a_data() {$/;"	f	namespace:taco::test
d3a	test/test_tensors.cpp	/^Tensor<double> d3a(std::string name, Format format) {$/;"	f	namespace:taco::test
d3a_data	test/test_tensors.cpp	/^TensorData<double> d3a_data() {$/;"	f	namespace:taco::test
d3b	test/test_tensors.cpp	/^Tensor<double> d3b(std::string name, Format format) {$/;"	f	namespace:taco::test
d3b_data	test/test_tensors.cpp	/^TensorData<double> d3b_data() {$/;"	f	namespace:taco::test
d4	test/tests-merge_lattice.cpp	/^static Access d4 = d4t(i);$/;"	m	namespace:tests	file:
d44a	test/test_tensors.cpp	/^Tensor<double> d44a(std::string name, Format format) {$/;"	f	namespace:taco::test
d44a_data	test/test_tensors.cpp	/^TensorData<double> d44a_data() {$/;"	f	namespace:taco::test
d4a	test/test_tensors.cpp	/^Tensor<double> d4a(std::string name, Format format) {$/;"	f	namespace:taco::test
d4a_data	test/test_tensors.cpp	/^TensorData<double> d4a_data() {$/;"	f	namespace:taco::test
d4b	test/test_tensors.cpp	/^Tensor<double> d4b(std::string name, Format format) {$/;"	f	namespace:taco::test
d4b_data	test/test_tensors.cpp	/^TensorData<double> d4b_data() {$/;"	f	namespace:taco::test
d53a	test/test_tensors.cpp	/^Tensor<double> d53a(std::string name, Format format) {$/;"	f	namespace:taco::test
d53a_data	test/test_tensors.cpp	/^TensorData<double> d53a_data() {$/;"	f	namespace:taco::test
d55a	test/test_tensors.cpp	/^Tensor<double> d55a(std::string name, Format format) {$/;"	f	namespace:taco::test
d55a_data	test/test_tensors.cpp	/^TensorData<double> d55a_data() {$/;"	f	namespace:taco::test
d5a	test/test_tensors.cpp	/^Tensor<double> d5a(std::string name, Format format) {$/;"	f	namespace:taco::test
d5a_data	test/test_tensors.cpp	/^TensorData<double> d5a_data() {$/;"	f	namespace:taco::test
d5b	test/test_tensors.cpp	/^Tensor<double> d5b(std::string name, Format format) {$/;"	f	namespace:taco::test
d5b_data	test/test_tensors.cpp	/^TensorData<double> d5b_data() {$/;"	f	namespace:taco::test
d5c	test/test_tensors.cpp	/^Tensor<double> d5c(std::string name, Format format) {$/;"	f	namespace:taco::test
d5c_data	test/test_tensors.cpp	/^TensorData<double> d5c_data() {$/;"	f	namespace:taco::test
d5d	test/test_tensors.cpp	/^Tensor<double> d5d(std::string name, Format format) {$/;"	f	namespace:taco::test
d5d_data	test/test_tensors.cpp	/^TensorData<double> d5d_data() {$/;"	f	namespace:taco::test
d8a	test/test_tensors.cpp	/^Tensor<double> d8a(std::string name, Format format) {$/;"	f	namespace:taco::test
d8a_data	test/test_tensors.cpp	/^TensorData<double> d8a_data() {$/;"	f	namespace:taco::test
d8b	test/test_tensors.cpp	/^Tensor<double> d8b(std::string name, Format format) {$/;"	f	namespace:taco::test
d8b_data	test/test_tensors.cpp	/^TensorData<double> d8b_data() {$/;"	f	namespace:taco::test
d8c	test/test_tensors.cpp	/^Tensor<double> d8c(std::string name, Format format) {$/;"	f	namespace:taco::test
d8c_data	test/test_tensors.cpp	/^TensorData<double> d8c_data() {$/;"	f	namespace:taco::test
d8d	test/test_tensors.cpp	/^Tensor<double> d8d(std::string name, Format format) {$/;"	f	namespace:taco::test
d8d_data	test/test_tensors.cpp	/^TensorData<double> d8d_data() {$/;"	f	namespace:taco::test
dType	include/taco/storage/typed_index.h	/^  Datatype dType;$/;"	m	class:taco::TypedIndex
dType	include/taco/storage/typed_value.h	/^  Datatype dType;$/;"	m	class:taco::TypedComponent
d_buffer	python_bindings/pybind11/include/pybind11/iostream.h	/^    std::unique_ptr<char[]> d_buffer;$/;"	m	class:pythonbuf
da	test/test_tensors.cpp	/^Tensor<double> da(std::string name, Format format) {$/;"	f	namespace:taco::test
da_data	test/test_tensors.cpp	/^TensorData<double> da_data() {$/;"	f	namespace:taco::test
data	include/taco/ir/ir.h	/^  Expr data;$/;"	m	struct:taco::ir::Store
data	include/taco/storage/typed_vector.h	/^  char* data() const {$/;"	f	class:taco::TypedVector
data	python_bindings/pybind11/include/pybind11/attr.h	/^    void *data[3] = { };$/;"	m	struct:function_record
data	python_bindings/pybind11/include/pybind11/eigen.h	/^    Scalar *data(Array &a) { return a.mutable_data(); }$/;"	f	struct:type_caster
data	python_bindings/pybind11/include/pybind11/eigen.h	/^    const Scalar *data(Array &a) { return a.data(); }$/;"	f	struct:type_caster
data	python_bindings/pybind11/include/pybind11/numpy.h	/^    char *data;$/;"	m	struct:PyArray_Proxy
data	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr data(const arr& a, Ix... index) {$/;"	f
data	src/storage/array.cpp	/^  void*  data;$/;"	m	struct:taco::Array::Content	file:
dataType	include/taco/index_notation/index_notation_nodes_abstract.h	/^  Datatype dataType;$/;"	m	struct:taco::IndexExprNode
dataType	include/taco/tensor.h	/^  Datatype           dataType;$/;"	m	struct:taco::TensorBase::Content
dataTypes	src/parser/parser.cpp	/^  map<string,Datatype> dataTypes;$/;"	m	struct:taco::parser::Parser::Content	file:
data_	test/gtest/gtest.h	/^  AssertHelperData* const data_;$/;"	m	class:testing::internal::AssertHelper
data_i	python_bindings/pybind11/tests/test_numpy_array.cpp	/^static int data_i = 42;$/;"	v	file:
data_t	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr data_t(const arr_t& a, Ix... index) {$/;"	f
datetime	python_bindings/pybind11/tests/test_chrono.py	/^import datetime$/;"	i
db	test/test_tensors.cpp	/^Tensor<double> db(std::string name, Format format) {$/;"	f	namespace:taco::test
db_data	test/test_tensors.cpp	/^TensorData<double> db_data() {$/;"	f	namespace:taco::test
dealloc	python_bindings/pybind11/include/pybind11/attr.h	/^    void (*dealloc)(detail::value_and_holder &) = nullptr;$/;"	m	struct:type_record
dealloc	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    void (*dealloc)(value_and_holder &v_h);$/;"	m	struct:type_info
dealloc	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static void dealloc(detail::value_and_holder &v_h) {$/;"	f	class:class_
deallocate_layout	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline void instance::deallocate_layout() {$/;"	f	class:instance
death_test_count	test/gtest/gtest.h	/^  int death_test_count() const { return death_test_count_; }$/;"	f	class:testing::TestResult
death_test_count_	test/gtest/gtest.h	/^  int death_test_count_;$/;"	m	class:testing::TestResult
death_test_factory	test/gtest/gtest-all.cc	/^  internal::DeathTestFactory* death_test_factory() {$/;"	f	class:testing::internal::UnitTestImpl
death_test_factory_	test/gtest/gtest-all.cc	/^  internal::scoped_ptr<internal::DeathTestFactory> death_test_factory_;$/;"	m	class:testing::internal::UnitTestImpl	file:
death_test_style_	test/gtest/gtest-all.cc	/^  std::string death_test_style_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
death_test_use_fork_	test/gtest/gtest-all.cc	/^  bool death_test_use_fork_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
debug_enabled	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^    from pybind11_tests import debug_enabled$/;"	i
debug_enabled	python_bindings/pybind11/tests/test_pytypes.py	/^from pybind11_tests import debug_enabled$/;"	i
decRef	python_bindings/pybind11/tests/object.h	/^    void decRef(bool dealloc = true) const {$/;"	f	class:Object
dec_ref	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void dec_ref() {$/;"	f	class:gil_scoped_acquire
dec_ref	python_bindings/pybind11/include/pybind11/pytypes.h	/^    const handle& dec_ref() const & { Py_XDECREF(m_ptr); return *this; }$/;"	f	class:handle
declLocatePosVars	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::declLocatePosVars(vector<Iterator> locators) {$/;"	f	class:taco::LowererImpl
declareTensor	python_bindings/src/pyTensor.cpp	/^static void declareTensor(py::module &m, const std::string typestr) {$/;"	f	namespace:taco::pythonBindings
decltype	python_bindings/pybind11/include/pybind11/cast.h	/^    static auto get(const T &p) -> decltype(p.get()) { return p.get(); }$/;"	f	struct:holder_helper
decltype	python_bindings/pybind11/include/pybind11/cast.h	/^    static auto make_copy_constructor(const T *x) -> decltype(new T(*x), Constructor{}) {$/;"	f	class:type_caster_base
decltype	python_bindings/pybind11/include/pybind11/cast.h	/^    static auto make_move_constructor(const T *x) -> decltype(new T(std::move(*const_cast<T *>(x))), Constructor{}) {$/;"	f	class:type_caster_base
decltype	python_bindings/pybind11/include/pybind11/detail/common.h	/^                              -> decltype(pf) { return pf; }$/;"	f	struct:overload_cast_impl
decltype	python_bindings/pybind11/include/pybind11/detail/descr.h	/^template <size_t Size> auto constexpr _() -> decltype(int_to_str<Size \/ 10, Size % 10>::digits) {$/;"	f
declval	python_bindings/pybind11/include/pybind11/stl_bind.h	/^    template <typename T2> static std::true_type test_comparable(decltype(std::declval<const T2 &>() == std::declval<const T2 &>())*);$/;"	m	class:container_traits::std
decode_utfN	python_bindings/pybind11/include/pybind11/cast.h	/^    static handle decode_utfN(const char *buffer, ssize_t nbytes) {$/;"	f	struct:string_caster
decrement	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void decrement() { --index; }$/;"	f	class:sequence_slow_readwrite
decrement	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void decrement() { --ptr; }$/;"	f	class:sequence_fast_readonly
dedent	python_bindings/pybind11/tests/extra_setuptools/test_setuphelper.py	/^from textwrap import dedent$/;"	i
deduplicate	src/lower/merge_lattice.cpp	/^std::vector<Iterator> deduplicate(const std::vector<Iterator>& iterators) {$/;"	f	namespace:taco
deduplicateDimensionIterators	src/lower/merge_lattice.cpp	/^  deduplicateDimensionIterators(const vector<Iterator>& iterators)$/;"	f	class:taco::MergeLatticeBuilder	file:
def	python_bindings/pybind11/include/pybind11/attr.h	/^    PyMethodDef *def = nullptr;$/;"	m	struct:function_record
def	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def(const char *name_, Func&& f, const Extra&... extra) {$/;"	f	class:class_
def	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def(const detail::initimpl::alias_constructor<Args...> &init, const Extra&... extra) {$/;"	f	class:class_
def	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def(const detail::initimpl::constructor<Args...> &init, const Extra&... extra) {$/;"	f	class:class_
def	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def(const detail::op_<id, ot, L, R> &op, const Extra&... extra) {$/;"	f	class:class_
def	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def(detail::initimpl::factory<Args...> &&init, const Extra&... extra) {$/;"	f	class:class_
def	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def(detail::initimpl::pickle_factory<Args...> &&pf, const Extra &...extra) {$/;"	f	class:class_
def	python_bindings/pybind11/include/pybind11/pybind11.h	/^    module_ &def(const char *name_, Func &&f, const Extra& ... extra) {$/;"	f	class:module_
def_buffer	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_& def_buffer(Func &&func) {$/;"	f	class:class_
def_cast	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ & def_cast(const detail::op_<id, ot, L, R> &op, const Extra&... extra) {$/;"	f	class:class_
def_index_fn	python_bindings/pybind11/tests/test_numpy_array.cpp	/^#define def_index_fn(/;"	d	file:
def_property	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property(const char *name, const Getter &fget, const Setter &fset, const Extra& ...extra) {$/;"	f	class:class_
def_property	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property(const char *name, const Getter &fget, const cpp_function &fset, const Extra& ...extra) {$/;"	f	class:class_
def_property	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property(const char *name, const cpp_function &fget, const cpp_function &fset, const Extra& ...extra) {$/;"	f	class:class_
def_property_readonly	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_readonly(const char *name, const Getter &fget, const Extra& ...extra) {$/;"	f	class:class_
def_property_readonly	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_readonly(const char *name, const cpp_function &fget, const Extra& ...extra) {$/;"	f	class:class_
def_property_readonly_static	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_readonly_static(const char *name, const Getter &fget, const Extra& ...extra) {$/;"	f	class:class_
def_property_readonly_static	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_readonly_static(const char *name, const cpp_function &fget, const Extra& ...extra) {$/;"	f	class:class_
def_property_static	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_static(const char *name, const Getter &fget, const cpp_function &fset, const Extra& ...extra) {$/;"	f	class:class_
def_property_static	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_property_static(const char *name, const cpp_function &fget, const cpp_function &fset, const Extra& ...extra) {$/;"	f	class:class_
def_property_static_impl	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void def_property_static_impl(const char *name,$/;"	f	class:generic_type
def_readonly	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_readonly(const char *name, const D C::*pm, const Extra& ...extra) {$/;"	f	class:class_
def_readonly_static	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_readonly_static(const char *name, const D *pm, const Extra& ...extra) {$/;"	f	class:class_
def_readwrite	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_readwrite(const char *name, D C::*pm, const Extra&... extra) {$/;"	f	class:class_
def_readwrite_static	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class_ &def_readwrite_static(const char *name, D *pm, const Extra& ...extra) {$/;"	f	class:class_
def_static	python_bindings/pybind11/include/pybind11/pybind11.h	/^    def_static(const char *name_, Func &&f, const Extra&... extra) {$/;"	f	class:class_
def_submodule	python_bindings/pybind11/include/pybind11/pybind11.h	/^    module_ def_submodule(const char *name, const char *doc = nullptr) {$/;"	f	class:module_
defaultDimension	src/parser/parser.cpp	/^  int defaultDimension;$/;"	m	struct:taco::parser::Parser::Content	file:
defaultLowerFunc	include/taco/index_notation/index_notation_nodes.h	/^  OpImpl defaultLowerFunc;$/;"	m	struct:taco::CallNode
default_	test/gtest/gtest.h	/^  const T default_;  \/\/ The default value for each thread.$/;"	m	class:std::tr1::ThreadLocal
default_constructions	python_bindings/pybind11/tests/constructor_stats.h	/^    int default_constructions = 0;$/;"	m	class:ConstructorStats
default_created	python_bindings/pybind11/tests/constructor_stats.h	/^    void default_created(void *inst) {$/;"	f	class:ConstructorStats
default_global_test_part_result_reporter_	test/gtest/gtest-all.cc	/^          &default_global_test_part_result_reporter_),$/;"	m	namespace:testing::internal	file:
default_global_test_part_result_reporter_	test/gtest/gtest-all.cc	/^  DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
default_holder	python_bindings/pybind11/include/pybind11/attr.h	/^    bool default_holder : 1;$/;"	m	struct:type_record
default_holder	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    bool default_holder : 1;$/;"	m	struct:type_info
default_metaclass	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    PyTypeObject *default_metaclass;$/;"	m	struct:internals
default_mode	python_bindings/pytaco/pytensor/taco_tensor.py	/^default_mode = _cm.compressed$/;"	v
default_per_thread_test_part_result_reporter_	test/gtest/gtest-all.cc	/^          &default_per_thread_test_part_result_reporter_),$/;"	m	namespace:testing::internal	file:
default_per_thread_test_part_result_reporter_	test/gtest/gtest-all.cc	/^      default_per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
default_result_printer	test/gtest/gtest.h	/^  TestEventListener* default_result_printer() const {$/;"	f	class:testing::TestEventListeners
default_result_printer_	test/gtest/gtest.h	/^  TestEventListener* default_result_printer_;$/;"	m	class:testing::TestEventListeners
default_role	python_bindings/pybind11/docs/conf.py	/^default_role = "any"$/;"	v
default_xml_generator	test/gtest/gtest.h	/^  TestEventListener* default_xml_generator() const {$/;"	f	class:testing::TestEventListeners
default_xml_generator_	test/gtest/gtest.h	/^  TestEventListener* default_xml_generator_;$/;"	m	class:testing::TestEventListeners
deferred_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T, typename... \/*Us*\/> struct deferred_type { using type = T; };$/;"	s
defineAccess	python_bindings/src/pyIndexNotation.cpp	/^static void defineAccess(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineBinaryIndexExpr	python_bindings/src/pyIndexNotation.cpp	/^static void defineBinaryIndexExpr(py::module &m, const std::string& pyclassName){$/;"	f	namespace:taco::pythonBindings
defineCast	python_bindings/src/pyIndexNotation.cpp	/^static void defineCast(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineFormat	python_bindings/src/pyFormat.cpp	/^void defineFormat(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineIOFuncs	python_bindings/src/pyTensorIO.cpp	/^void defineIOFuncs(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineIndexExpr	python_bindings/src/pyIndexNotation.cpp	/^static void defineIndexExpr(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineIndexNotation	python_bindings/src/pyIndexNotation.cpp	/^void defineIndexNotation(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineIndexVar	python_bindings/src/pyIndexNotation.cpp	/^static void defineIndexVar(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineModeFormatPack	python_bindings/src/pyFormat.cpp	/^void defineModeFormatPack(py::module& m){$/;"	f	namespace:taco::pythonBindings
defineModeFormats	python_bindings/src/pyFormat.cpp	/^void defineModeFormats(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineParser	python_bindings/src/pyParsers.cpp	/^void defineParser(py::module& m) {$/;"	f	namespace:taco::pythonBindings
defineReduction	python_bindings/src/pyIndexNotation.cpp	/^static void defineReduction(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineScalarVariable	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::defineScalarVariable(TensorVar var, bool zero) {$/;"	f	class:taco::LowererImpl
defineTacoTypes	python_bindings/src/pyDatatypes.cpp	/^void defineTacoTypes(py::module &m){$/;"	f	namespace:taco::pythonBindings
defineTensor	python_bindings/src/pyTensor.cpp	/^void defineTensor(py::module &m) {$/;"	f	namespace:taco::pythonBindings
defineUnaryExpr	python_bindings/src/pyIndexNotation.cpp	/^static void defineUnaryExpr(py::module &m, const std::string& pyclassName){$/;"	f	namespace:taco::pythonBindings
defined	include/taco/util/intrusive_ptr.h	/^  bool defined() const {return ptr != nullptr;}$/;"	f	class:taco::util::IntrusivePtr
defined	src/format.cpp	/^bool ModeFormat::defined() const {$/;"	f	class:taco::ModeFormat
defined	src/index_notation/index_notation.cpp	/^bool TensorVar::defined() const {$/;"	f	class:taco::TensorVar
defined	src/index_notation/kernel.cpp	/^bool Kernel::defined() {$/;"	f	class:taco::Kernel
defined	src/index_notation/transformations.cpp	/^bool Precompute::defined() const {$/;"	f	class:taco::Precompute
defined	src/lower/iterator.cpp	/^bool Iterator::defined() const {$/;"	f	class:taco::Iterator
defined	src/lower/mode.cpp	/^bool Mode::defined() const {$/;"	f	class:taco::Mode
defined	src/lower/mode_format_impl.cpp	/^bool ModeFunction::defined() const {$/;"	f	class:taco::ModeFunction
defined	src/lower/tensor_path.cpp	/^bool TensorPath::defined() const {$/;"	f	class:taco::TensorPath
definedIndexVars	include/taco/lower/lowerer_impl.h	/^  std::set<IndexVar> definedIndexVars;$/;"	m	class:taco::LowererImpl
definedIndexVars	src/lower/merge_lattice.cpp	/^  std::set<IndexVar> definedIndexVars;$/;"	m	class:taco::MergeLatticeBuilder	file:
definedIndexVarsOrdered	include/taco/lower/lowerer_impl.h	/^  std::vector<IndexVar> definedIndexVarsOrdered;$/;"	m	class:taco::LowererImpl
definedIndices	include/taco/index_notation/index_notation_nodes.h	/^  static std::vector<int> definedIndices(std::vector<IndexExpr> args) {$/;"	f	struct:taco::CallNode
definedRegions	include/taco/index_notation/index_notation_nodes.h	/^  std::vector<int> definedRegions;$/;"	m	struct:taco::CallNode
defined_test_names_	test/gtest/gtest.h	/^  ::std::set<const char*> defined_test_names_;$/;"	m	class:testing::internal::TypedTestCasePState
definition	include/taco/index_notation/index_notation_nodes.h	/^  IndexStmt definition;$/;"	m	struct:taco::SequenceNode
deinit_taco_tensor_t	src/taco_tensor_t.cpp	/^void deinit_taco_tensor_t(taco_tensor_t* t) {$/;"	f
delattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline void delattr(handle obj, const char *name) {$/;"	f
delattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline void delattr(handle obj, handle name) {$/;"	f
dense	include/taco/format.h	/^  static ModeFormat dense;       \/\/\/ e.g., first mode in CSR$/;"	m	class:taco::ModeFormat
dense	src/format.cpp	/^ModeFormat ModeFormat::dense = ModeFormat::Dense;$/;"	m	class:taco::ModeFormat	file:
dense	src/format.cpp	/^const ModeFormat dense = ModeFormat::Dense;$/;"	m	namespace:taco	file:
dense	test/tests-merge_lattice.cpp	/^#define dense /;"	d	file:
depart	test/gtest/gtest.h	/^  void depart() {$/;"	f	class:testing::internal::linked_ptr
dependentTensors	include/taco/tensor.h	/^  std::vector<std::weak_ptr<TensorBase::Content>> dependentTensors;$/;"	m	struct:taco::TensorBase::Content
depsFromVarOrders	src/index_notation/transformations.cpp	/^depsFromVarOrders(map<string, vector<pair<IndexVar,bool>>> varOrders) {$/;"	f	namespace:taco
dereference	python_bindings/pybind11/include/pybind11/pytypes.h	/^    reference dereference() const { return *ptr; }$/;"	f	class:sequence_fast_readonly
dereference	python_bindings/pybind11/include/pybind11/pytypes.h	/^    reference dereference() const { return {key, value}; }$/;"	f	class:dict_readonly
dereference	python_bindings/pybind11/include/pybind11/pytypes.h	/^    reference dereference() const { return {obj, static_cast<size_t>(index)}; }$/;"	f	class:sequence_slow_readwrite
deregister_instance	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline bool deregister_instance(instance *self, void *valptr, const type_info *tinfo) {$/;"	f
deregister_instance_impl	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline bool deregister_instance_impl(void *ptr, instance *self) {$/;"	f
derivationPath	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> ProvenanceGraph::derivationPath(taco::IndexVar ancestor, taco::IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
deriveCoordBounds	src/index_notation/provenance_graph.cpp	/^std::map<IndexVar, std::vector<ir::Expr>> ProvenanceGraph::deriveCoordBounds(std::vector<IndexVar> derivedVarOrder, std::map<IndexVar, std::vector<ir::Expr>> underivedBounds, std::map<IndexVar, ir::Expr> variableExprs, Iterators iterators) const {$/;"	f	class:taco::ProvenanceGraph
deriveIterBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> BoundRelNode::deriveIterBounds(taco::IndexVar indexVar,$/;"	f	class:taco::BoundRelNode
deriveIterBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> DivideRelNode::deriveIterBounds(taco::IndexVar indexVar,$/;"	f	class:taco::DivideRelNode
deriveIterBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> FuseRelNode::deriveIterBounds(taco::IndexVar indexVar,$/;"	f	class:taco::FuseRelNode
deriveIterBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> IndexVarRelNode::deriveIterBounds(IndexVar indexVar, std::map<IndexVar, std::vector<ir::Expr>> parentIterBounds,$/;"	f	class:taco::IndexVarRelNode
deriveIterBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> PosRelNode::deriveIterBounds(taco::IndexVar indexVar,$/;"	f	class:taco::PosRelNode
deriveIterBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> PrecomputeRelNode::deriveIterBounds(taco::IndexVar indexVar,$/;"	f	class:taco::PrecomputeRelNode
deriveIterBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> ProvenanceGraph::deriveIterBounds(IndexVar indexVar, std::vector<IndexVar> derivedVarOrder, std::map<IndexVar, std::vector<ir::Expr>> underivedBounds,$/;"	f	class:taco::ProvenanceGraph
deriveIterBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> SplitRelNode::deriveIterBounds(taco::IndexVar indexVar,$/;"	f	class:taco::SplitRelNode
derived	python_bindings/pybind11/include/pybind11/pytypes.h	/^    const Derived &derived() const { return static_cast<const Derived &>(*this); }$/;"	f	class:object_api
derived	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^        derived = cls()$/;"	v	class:test_dynamic_attributes.PythonDerivedDynamicClass
descr	python_bindings/pybind11/include/pybind11/attr.h	/^    const char *descr; \/\/\/< Human-readable version of the argument value$/;"	m	struct:argument_record
descr	python_bindings/pybind11/include/pybind11/cast.h	/^    const char *descr;$/;"	m	struct:arg_v
descr	python_bindings/pybind11/include/pybind11/detail/descr.h	/^    constexpr descr() : text{'\\0'} { }$/;"	f	struct:descr
descr	python_bindings/pybind11/include/pybind11/detail/descr.h	/^    constexpr descr(char c, Chars... cs) : text{c, static_cast<char>(cs)..., '\\0'} { }$/;"	f	struct:descr
descr	python_bindings/pybind11/include/pybind11/detail/descr.h	/^    constexpr descr(char const (&s)[N+1]) : descr(s, make_index_sequence<N>()) { }$/;"	f	struct:descr
descr	python_bindings/pybind11/include/pybind11/detail/descr.h	/^    constexpr descr(char const (&s)[N+1], index_sequence<Is...>) : text{s[Is]..., '\\0'} { }$/;"	f	struct:descr
descr	python_bindings/pybind11/include/pybind11/detail/descr.h	/^struct descr {$/;"	s
descr	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyArrayDescr_Proxy *descr;$/;"	m	struct:PyVoidScalarObject_Proxy
descr	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *descr;$/;"	m	struct:PyArray_Proxy
descriptor	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr auto descriptor =$/;"	m	struct:EigenProps
destroyed	python_bindings/pybind11/tests/constructor_stats.h	/^    void destroyed(void *inst) {$/;"	f	class:ConstructorStats
destruct	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static void destruct(detail::function_record *rec, bool free_strings = true) {$/;"	f	class:cpp_function
detail	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^namespace pybind11 { namespace detail {$/;"	n	namespace:pybind11	file:
detail	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^namespace pybind11 { namespace detail {$/;"	n	namespace:pybind11	file:
detail_headers	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^detail_headers = {$/;"	v
deviceFunctionBlockSizes	src/codegen/codegen_cuda.h	/^  std::vector<Expr> deviceFunctionBlockSizes;$/;"	m	class:taco::ir::CodeGen_CUDA
deviceFunctionGridSizes	src/codegen/codegen_cuda.h	/^  std::vector<Expr> deviceFunctionGridSizes;$/;"	m	class:taco::ir::CodeGen_CUDA
deviceFunctionLoopDepth	src/codegen/codegen_cuda.h	/^  int deviceFunctionLoopDepth;$/;"	m	class:taco::ir::CodeGen_CUDA
deviceFunctionParameters	src/codegen/codegen_cuda.h	/^  std::vector<std::vector<std::pair<std::string, Expr>>> deviceFunctionParameters;$/;"	m	class:taco::ir::CodeGen_CUDA
deviceFunctions	src/codegen/codegen_cuda.h	/^  std::vector<Stmt> deviceFunctions; \/\/ expressions to replace to calls of device function$/;"	m	class:taco::ir::CodeGen_CUDA
dict	python_bindings/pybind11/include/pybind11/pytypes.h	/^    dict() : object(PyDict_New(), stolen_t{}) {$/;"	f	class:dict
dict	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit dict(Args &&...args) : dict(collector(std::forward<Args>(args)...).kwargs()) { }$/;"	f	class:dict
dict	python_bindings/pybind11/include/pybind11/pytypes.h	/^class dict : public object {$/;"	c
dict_readonly	python_bindings/pybind11/include/pybind11/pytypes.h	/^    dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }$/;"	f	class:dict_readonly
dict_readonly	python_bindings/pybind11/include/pybind11/pytypes.h	/^class dict_readonly {$/;"	c
difference_type	test/gtest/gtest.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:testing::internal::ParamIterator
different_resolutions	python_bindings/pybind11/tests/test_chrono.cpp	/^struct different_resolutions {$/;"	s	file:
difflib	python_bindings/pybind11/tests/conftest.py	/^import difflib$/;"	i
digits	python_bindings/pybind11/include/pybind11/detail/descr.h	/^    static constexpr auto digits = descr<sizeof...(Digits)>(('0' + Digits)...);$/;"	m	struct:int_to_str
dimensions	include/taco/lower/lowerer_impl.h	/^  std::map<IndexVar, ir::Expr> dimensions;$/;"	m	class:taco::LowererImpl
dimensions	include/taco/taco_tensor_t.h	/^  int32_t*     dimensions;    \/\/ tensor dimensions$/;"	m	struct:taco_tensor_t
dimensions	include/taco/tensor.h	/^  std::vector<int>   dimensions;$/;"	m	struct:taco::TensorBase::Content
dimensions	include/taco/type.h	/^  std::vector<Dimension> dimensions;$/;"	m	class:taco::Shape
dimensions	python_bindings/pybind11/include/pybind11/numpy.h	/^    ssize_t *dimensions;$/;"	m	struct:PyArray_Proxy
dimensions	src/storage/storage.cpp	/^  vector<int>   dimensions;$/;"	m	struct:taco::TensorStorage::Content	file:
dimensions	test/test_tensors.h	/^  std::vector<int>                           dimensions;$/;"	m	struct:taco::test::TensorData
dimensions	test/tests-lower.cpp	/^  map<TensorVar, vector<int>> dimensions;  \/\/ Shapes default to 5x5x...$/;"	m	struct:taco::test::TestCase	file:
dimensionsTypecheck	src/error/error_checks.cpp	/^std::pair<bool, string> dimensionsTypecheck(const std::vector<IndexVar>& resultVars,$/;"	f	namespace:taco::error
direct_conversions	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::vector<bool (*)(PyObject *, void *&)> *direct_conversions;$/;"	m	struct:type_info
direct_conversions	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    type_map<std::vector<bool (*)(PyObject *, void *&)>> direct_conversions;$/;"	m	struct:internals
disable_function_signatures	python_bindings/pybind11/include/pybind11/options.h	/^    options& disable_function_signatures() & { global_state().show_function_signatures = false; return *this; }$/;"	f	class:options
disable_user_defined_docstrings	python_bindings/pybind11/include/pybind11/options.h	/^    options& disable_user_defined_docstrings() & { global_state().show_user_defined_docstrings = false; return *this; }$/;"	f	class:options
disabled_test_count	test/gtest/gtest-all.cc	/^int TestCase::disabled_test_count() const {$/;"	f	class:testing::TestCase
disabled_test_count	test/gtest/gtest-all.cc	/^int UnitTest::disabled_test_count() const {$/;"	f	class:testing::UnitTest
disabled_test_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::disabled_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
disarm	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void disarm() {$/;"	f	class:gil_scoped_acquire
disarm	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void disarm() {$/;"	f	class:gil_scoped_release
disarm	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void disarm() {}$/;"	f	class:gil_scoped_acquire
disarm	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void disarm() {}$/;"	f	class:gil_scoped_release
disassoc	python_bindings/pybind11/include/pybind11/pybind11.h	/^    bool disassoc;$/;"	m	class:gil_scoped_release
discard_as_unraisable	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void discard_as_unraisable(const char *err_context) {$/;"	f	class:error_already_set
discard_as_unraisable	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void discard_as_unraisable(object err_context) {$/;"	f	class:error_already_set
dispatch	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    virtual std::string dispatch() const { return {}; };$/;"	f	struct:Base
dispatch	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass1
dispatch	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass2
dispatchRead	src/tensor.cpp	/^TensorBase dispatchRead(T& file, FileType filetype, U format, bool pack) {$/;"	f	namespace:taco
dispatchRead	src/tensor.cpp	/^TensorBase dispatchRead(std::string filename, U format, bool pack) {$/;"	f	namespace:taco
dispatchReadDense	src/storage/file_io_mtx.cpp	/^TensorBase dispatchReadDense(std::istream& stream, const T& format, bool symm) {$/;"	f	namespace:taco
dispatchReadMTX	src/storage/file_io_mtx.cpp	/^TensorBase dispatchReadMTX(std::istream& stream, const T& format, bool pack) {$/;"	f	namespace:taco
dispatchReadMTX	src/storage/file_io_mtx.cpp	/^TensorBase dispatchReadMTX(std::string filename, const T& format, bool pack) {$/;"	f	namespace:taco
dispatchReadSparse	src/storage/file_io_mtx.cpp	/^TensorBase dispatchReadSparse(std::istream& stream, const T& format, $/;"	f	namespace:taco
dispatchReadTNS	src/storage/file_io_tns.cpp	/^TensorBase dispatchReadTNS(std::istream& stream, const T& format, bool pack) {$/;"	f	namespace:taco
dispatchReadTNS	src/storage/file_io_tns.cpp	/^TensorBase dispatchReadTNS(std::string filename, const T& format, bool pack) {$/;"	f	namespace:taco
dispatchWrite	src/tensor.cpp	/^void dispatchWrite(T& file, const TensorBase& tensor, FileType filetype) {$/;"	f	namespace:taco
dispatcher	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static PyObject *dispatcher(PyObject *self, PyObject *args_in, PyObject *kwargs_in) {$/;"	f	class:cpp_function
distance_to	python_bindings/pybind11/include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_fast_readonly &b) const { return ptr - b.ptr; }$/;"	f	class:sequence_fast_readonly
distance_to	python_bindings/pybind11/include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_slow_readwrite &b) const { return index - b.index; }$/;"	f	class:sequence_slow_readwrite
distutils	python_bindings/pybind11/pybind11/setup_helpers.py	/^import distutils.ccompiler$/;"	i
distutils	python_bindings/pybind11/pybind11/setup_helpers.py	/^import distutils.errors$/;"	i
div	include/taco/parser/lexer.h	/^  div,$/;"	m	class:taco::parser::Token
divFactor	src/index_notation/provenance_graph.cpp	/^  size_t divFactor;$/;"	m	struct:taco::DivideRelNode::Content	file:
divide	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::divide(IndexVar i, IndexVar i1, IndexVar i2, size_t splitFactor) const {$/;"	f	class:taco::IndexStmt
division	python_bindings/pybind11/tests/test_pytypes.py	/^from __future__ import division$/;"	i
division	python_bindings/pybind11/tools/libsize.py	/^from __future__ import print_function, division$/;"	i
dla	test/test_tensors.cpp	/^Tensor<double> dla(std::string name, Format format) {$/;"	f	namespace:taco::test
dla_data	test/test_tensors.cpp	/^TensorData<double> dla_data() {$/;"	f	namespace:taco::test
dlab_indices	test/tests-storage_alloc.cpp	/^IndexArray dlab_indices() {$/;"	f	namespace:storage_alloc_tests
dlab_values	test/tests-storage_alloc.cpp	/^std::vector<double> dlab_values() {$/;"	f	namespace:storage_alloc_tests
dlb	test/test_tensors.cpp	/^Tensor<double> dlb(std::string name, Format format) {$/;"	f	namespace:taco::test
dlb_data	test/test_tensors.cpp	/^TensorData<double> dlb_data() {$/;"	f	namespace:taco::test
doIndent	src/ir/ir_printer.cpp	/^void IRPrinter::doIndent() {$/;"	f	class:taco::ir::IRPrinter
doIndentStream	src/codegen/codegen.cpp	/^void CodeGen::doIndentStream(stringstream &stream) {$/;"	f	class:taco::ir::CodeGen
do_nothing	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void do_nothing() const {}$/;"	f	class:UnregisteredBase
do_stderr_	python_bindings/pybind11/include/pybind11/iostream.h	/^    bool do_stderr_;$/;"	m	class:OstreamRedirect
do_stdout_	python_bindings/pybind11/include/pybind11/iostream.h	/^    bool do_stdout_;$/;"	m	class:OstreamRedirect
doc	python_bindings/pybind11/include/pybind11/attr.h	/^    char *doc = nullptr;$/;"	m	struct:function_record
doc	python_bindings/pybind11/include/pybind11/attr.h	/^    const char *doc = nullptr;$/;"	m	struct:type_record
doc	python_bindings/pybind11/include/pybind11/attr.h	/^struct doc { const char *value; doc(const char *value) : value(value) { } };$/;"	f	struct:doc
doc	python_bindings/pybind11/include/pybind11/attr.h	/^struct doc { const char *value; doc(const char *value) : value(value) { } };$/;"	s
doc	python_bindings/pybind11/include/pybind11/pytypes.h	/^str_attr_accessor object_api<D>::doc() const { return attr("__doc__"); }$/;"	f	class:object_api
doc	python_bindings/pybind11/tests/conftest.py	/^def doc():$/;"	f
dot	python_bindings/pytaco/pytensor/taco_tensor.py	/^def dot(t1, t2, out_format=default_mode, dtype=None):$/;"	f
double	python_bindings/pybind11/tests/test_callbacks.py	/^        def double(self, val):$/;"	m	class:test_bound_method_callback.MyClass
doubleLowerBound	include/taco/util/fill.h	/^const double doubleLowerBound = -10e6;$/;"	m	namespace:taco::util
doubleSizeIfFull	src/ir/ir_generators.cpp	/^Stmt doubleSizeIfFull(Expr a, Expr size, Expr needed) {$/;"	f	namespace:taco::ir
doubleUpperBound	include/taco/util/fill.h	/^const double doubleUpperBound =  10e6;$/;"	m	namespace:taco::util
dt	python_bindings/pybind11/docs/benchmark.py	/^import datetime as dt$/;"	i
dt_fmt	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def dt_fmt():$/;"	f
dtype	include/taco/type.h	/^  Datatype dtype;$/;"	m	class:taco::Type
dtype	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def dtype(self):$/;"	m	class:tensor
dtype_ptr	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject* dtype_ptr;$/;"	m	struct:numpy_type_info
dummy	test/tests-merge_lattice.cpp	/^static Forall dummy = forall(i, rd = rd + rs +$/;"	m	namespace:tests	file:
dummy1	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    uint64_t dummy1;$/;"	m	struct:PartialNestedStruct	file:
dummy2	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialNestedStruct	file:
dummy2	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialStruct	file:
dummyA	include/taco/util/timers.h	/^  double* dummyA = NULL;$/;"	m	class:taco::util::Timer
dummyB	include/taco/util/timers.h	/^  double* dummyB = NULL;$/;"	m	class:taco::util::Timer
dummySize	include/taco/util/timers.h	/^  int dummySize = 3000000;$/;"	m	class:taco::util::Timer
dummy_	test/gtest/gtest.h	/^  static bool dummy_;$/;"	m	class:testing::internal::TypeIdHelper
dummy_	test/gtest/gtest.h	/^bool TypeIdHelper<T>::dummy_ = false;$/;"	m	class:testing::internal::TypeIdHelper
dummy_function	python_bindings/pybind11/tests/test_callbacks.cpp	/^int dummy_function(int i) { return i + 1; }$/;"	f
duration_caster	python_bindings/pybind11/include/pybind11/chrono.h	/^template <typename type> class duration_caster {$/;"	c
dynamic	python_bindings/pybind11/include/pybind11/eigen.h	/^        dynamic = !fixed_rows && !fixed_cols; \/\/ Fully-dynamic size$/;"	m	struct:EigenProps
dynamic_attr	python_bindings/pybind11/include/pybind11/attr.h	/^    bool dynamic_attr : 1;$/;"	m	struct:type_record
dynamic_attr	python_bindings/pybind11/include/pybind11/attr.h	/^struct dynamic_attr { };$/;"	s
dynamic_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr bool dynamic_stride = inner_stride == Eigen::Dynamic && outer_stride == Eigen::Dynamic;$/;"	m	struct:EigenProps
e	python_bindings/pybind11/tests/test_pickling.py	/^    from pybind11_tests import enums as e$/;"	i
eigen_array_cast	python_bindings/pybind11/include/pybind11/eigen.h	/^template <typename props> handle eigen_array_cast(typename props::Type const &src, handle base = handle(), bool writeable = true) {$/;"	f
eigen_encapsulate	python_bindings/pybind11/include/pybind11/eigen.h	/^handle eigen_encapsulate(Type *src) {$/;"	f
eigen_extract_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^struct eigen_extract_stride<Eigen::Map<PlainObjectType, MapOptions, StrideType>> { using type = StrideType; };$/;"	s
eigen_extract_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^struct eigen_extract_stride<Eigen::Ref<PlainObjectType, Options, StrideType>> { using type = StrideType; };$/;"	s
eigen_extract_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^template <typename Type> struct eigen_extract_stride { using type = Type; };$/;"	s
eigen_map_caster	python_bindings/pybind11/include/pybind11/eigen.h	/^template <typename MapType> struct eigen_map_caster {$/;"	s
eigen_ref_array	python_bindings/pybind11/include/pybind11/eigen.h	/^handle eigen_ref_array(Type &src, handle parent = none()) {$/;"	f
einSumSymbolsSet	include/taco/parser/einsum_parser.h	/^  std::set<char> einSumSymbolsSet;$/;"	m	class:taco::parser::EinsumParser
einsum	python_bindings/pytaco/pytensor/taco_tensor.py	/^def einsum(expr, *operands, out_format=None, dtype=None):$/;"	f
einsumParse	python_bindings/src/pyParsers.cpp	/^static TensorBase einsumParse(std::string& expr, py::list &tensors, py::object& fmt, Datatype dtype) {$/;"	f	namespace:taco::pythonBindings
einsumPunctuation	include/taco/parser/einsum_parser.h	/^  std::string einsumPunctuation;$/;"	m	class:taco::parser::EinsumParser
einsumSymbols	include/taco/parser/einsum_parser.h	/^  std::string einsumSymbols;$/;"	m	class:taco::parser::EinsumParser
elapsed	python_bindings/pybind11/docs/benchmark.py	/^        elapsed = (n2 - n1).total_seconds()$/;"	v
elapsed_time	test/gtest/gtest-all.cc	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::internal::UnitTestImpl
elapsed_time	test/gtest/gtest-all.cc	/^internal::TimeInMillis UnitTest::elapsed_time() const {$/;"	f	class:testing::UnitTest
elapsed_time	test/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestCase
elapsed_time	test/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestResult
elapsed_time_	test/gtest/gtest-all.cc	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::internal::UnitTestImpl	file:
elapsed_time_	test/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestCase
elapsed_time_	test/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestResult
elementGetter	python_bindings/src/pyTensor.cpp	/^static inline CType elementGetter(Tensor<CType>& tensor, std::vector<int> coords) {$/;"	f	namespace:taco::pythonBindings
elementSetter	python_bindings/src/pyTensor.cpp	/^static inline void elementSetter(Tensor<CType> &tensor, std::vector<int> coords, pyType value) {$/;"	f	namespace:taco::pythonBindings
element_type	test/gtest/gtest.h	/^  typedef T element_type;$/;"	t	class:testing::internal::linked_ptr
ellipsis	python_bindings/pybind11/include/pybind11/pytypes.h	/^    ellipsis() : object(Py_Ellipsis, borrowed_t{}) { }$/;"	f	class:ellipsis
ellipsis	python_bindings/pybind11/include/pybind11/pytypes.h	/^class ellipsis : public object {$/;"	c
elmul	test/tests-transformation.cpp	/^static Assignment elmul = (a(i) = b(i) * c(i));$/;"	m	namespace:test	file:
elsize	python_bindings/pybind11/include/pybind11/numpy.h	/^    int elsize;$/;"	m	struct:PyArrayDescr_Proxy
embedded_module	python_bindings/pybind11/include/pybind11/embed.h	/^    embedded_module(const char *name, init_t init) {$/;"	f	struct:embedded_module
embedded_module	python_bindings/pybind11/include/pybind11/embed.h	/^struct embedded_module {$/;"	s
emitEarlyExit	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::emitEarlyExit(Expr reductionExpr, std::vector<Property>& properties) {$/;"	f	class:taco::LowererImpl
emitUnderivedGuards	include/taco/lower/lowerer_impl.h	/^  bool emitUnderivedGuards = true;$/;"	m	class:taco::LowererImpl
emittedTimerStartCode	src/codegen/codegen_cuda.h	/^  bool emittedTimerStartCode = false;$/;"	m	class:taco::ir::CodeGen_CUDA
emittingCoroutine	src/codegen/codegen_c.h	/^  bool emittingCoroutine;$/;"	m	class:taco::ir::CodeGen_C
emittingCoroutine	src/codegen/codegen_cuda.h	/^  bool emittingCoroutine;$/;"	m	class:taco::ir::CodeGen_CUDA
empty	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:dict
empty	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:list
empty	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:sequence
empty	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:set
empty	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:tuple
empty	python_bindings/pybind11/tests/test_copy_move.cpp	/^struct empty {$/;"	s	file:
emptyGen	test/op_factory.h	/^struct emptyGen {$/;"	s	namespace:taco
enable_buffer_protocol	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline void enable_buffer_protocol(PyHeapTypeObject *heap_type) {$/;"	f
enable_dynamic_attributes	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline void enable_dynamic_attributes(PyHeapTypeObject *heap_type) {$/;"	f
enable_function_signatures	python_bindings/pybind11/include/pybind11/options.h	/^    options& enable_function_signatures() & { global_state().show_function_signatures = true; return *this; }$/;"	f	class:options
enable_user_defined_docstrings	python_bindings/pybind11/include/pybind11/options.h	/^    options& enable_user_defined_docstrings() & { global_state().show_user_defined_docstrings = true; return *this; }$/;"	f	class:options
enabled	python_bindings/pybind11/tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:CustomGuard	file:
enabled	python_bindings/pybind11/tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:DependentGuard	file:
enabled	python_bindings/pybind11/tests/test_call_policies.cpp	/^bool CustomGuard::enabled = false;$/;"	m	class:CustomGuard	file:
enabled	python_bindings/pybind11/tests/test_call_policies.cpp	/^bool DependentGuard::enabled = false;$/;"	m	class:DependentGuard	file:
end	include/taco/ir/ir.h	/^  Expr end;$/;"	m	struct:taco::ir::For
end	include/taco/storage/typed_vector.h	/^  const_iterator end() const {$/;"	f	class:taco::TypedVector
end	include/taco/storage/typed_vector.h	/^  iterator end() {$/;"	f	class:taco::TypedVector
end	include/taco/tensor.h	/^    const_iterator<T, CType> end() const {$/;"	f	class:taco::TensorBase::iterator_wrapper
end	include/taco/tensor.h	/^TensorBase::const_iterator<int,CType> Tensor<CType>::end() const {$/;"	f	class:taco::Tensor
end	include/taco/tensor.h	/^TensorBase::const_iterator<int,CType> Tensor<CType>::end() {$/;"	f	class:taco::Tensor
end	include/taco/util/collections.h	/^  ZipConstIterator end() const {$/;"	f	class:taco::util::ZipConstIterable
end	include/taco/util/collections.h	/^  const_iterator end() const {return c.end();}$/;"	f	class:taco::util::ExcludeFirstConstIterable
end	include/taco/util/collections.h	/^  const_reverse_iterator end() const {return c.rend();}$/;"	f	class:taco::util::ReverseConstIterable
end	include/taco/util/collections.h	/^  iterator end() {return c.end();}$/;"	f	class:taco::util::ExcludeFirstIterable
end	include/taco/util/collections.h	/^  reverse_iterator end() {return c.rend();}$/;"	f	class:taco::util::ReverseIterable
end	python_bindings/pybind11/include/pybind11/cast.h	/^    iterator end() { return iterator(tinfo.size()); }$/;"	f	struct:values_and_holders
end	python_bindings/pybind11/include/pybind11/pybind11.h	/^    Sentinel end;$/;"	m	struct:iterator_state
end	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::dict_iterator end() const { return {}; }$/;"	f	class:dict
end	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::list_iterator end() const { return {*this, PyList_GET_SIZE(m_ptr)}; }$/;"	f	class:list
end	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::sequence_iterator end() const { return {*this, PySequence_Size(m_ptr)}; }$/;"	f	class:sequence
end	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::tuple_iterator end() const { return {*this, PyTuple_GET_SIZE(m_ptr)}; }$/;"	f	class:tuple
end	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename D> iterator object_api<D>::end() const { return iterator::sentinel(); }$/;"	f	class:object_api
end	python_bindings/src/pyTensor.cpp	/^  const typename Tensor<T>::template const_iterator<int,T> end;$/;"	m	class:taco::pythonBindings::PyTensorIter	file:
end	src/type.cpp	/^std::vector<Dimension>::const_iterator Shape::end() const {$/;"	f	class:taco::Shape
end	test/gtest/gtest.h	/^  const_iterator end() const { return array_ + size_; }$/;"	f	class:testing::internal::NativeArray
end	test/gtest/gtest.h	/^  iterator end() const { return iterator(impl_->End()); }$/;"	f	class:testing::internal::ParamGenerator
end10_	test/gtest/gtest.h	/^    const typename ParamGenerator<T10>::iterator end10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end1_	test/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end2_	test/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end3_	test/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end4_	test/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end5_	test/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end6_	test/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end7_	test/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end7_	test/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end7_	test/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end7_	test/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end8_	test/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end8_	test/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end8_	test/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end9_	test/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end9_	test/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
endTyped	include/taco/tensor.h	/^TensorBase::const_iterator<T,CType> Tensor<CType>::endTyped() const {$/;"	f	class:taco::Tensor
endTyped	include/taco/tensor.h	/^TensorBase::const_iterator<T,CType> Tensor<CType>::endTyped() {$/;"	f	class:taco::Tensor
endVar	src/lower/iterator.cpp	/^  ir::Expr endVar;$/;"	m	struct:taco::Iterator::Content	file:
end_	test/gtest/gtest.h	/^  const T end_;$/;"	m	class:testing::internal::RangeGenerator
end_index_	test/gtest/gtest.h	/^  const int end_index_;$/;"	m	class:testing::internal::RangeGenerator
ensure_builtins_in_globals	python_bindings/pybind11/include/pybind11/eval.h	/^inline void ensure_builtins_in_globals(object &global) {$/;"	f
enter	python_bindings/pybind11/include/pybind11/iostream.h	/^    void enter() {$/;"	f	class:OstreamRedirect
enum_	python_bindings/pybind11/include/pybind11/pybind11.h	/^    enum_(const handle &scope, const char *name, const Extra&... extra)$/;"	f	class:enum_
enum_	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <typename Type> class enum_ : public class_<Type> {$/;"	c
enum_base	python_bindings/pybind11/include/pybind11/pybind11.h	/^    enum_base(handle base, handle parent) : m_base(base), m_parent(parent) { }$/;"	f	struct:enum_base
enum_base	python_bindings/pybind11/include/pybind11/pybind11.h	/^struct enum_base {$/;"	s
enum_name	python_bindings/pybind11/include/pybind11/pybind11.h	/^inline str enum_name(handle arg) {$/;"	f
enumerateChildrenPoints	src/lower/merge_lattice.cpp	/^  enumerateChildrenPoints(const MergePoint& point, const map<set<Iterator>, MergePoint>& originalPoints,$/;"	f	class:taco::MergeLatticeBuilder	file:
env	python_bindings/pybind11/tests/conftest.py	/^import env$/;"	i
env	python_bindings/pybind11/tests/test_buffers.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_builtin_casters.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_call_policies.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_chrono.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_class.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_eval.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_factory_constructors.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_local_bindings.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_numpy_array.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_pickling.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_pytypes.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_stl_binders.py	/^import env  # noqa: F401$/;"	i
env	python_bindings/pybind11/tests/test_virtual_functions.py	/^import env  # noqa: F401$/;"	i
environ	test/gtest/gtest-all.cc	/^extern "C" char** environ;$/;"	m	namespace:testing::internal	file:
environments	test/gtest/gtest-all.cc	/^  std::vector<Environment*>& environments() { return environments_; }$/;"	f	class:testing::internal::UnitTestImpl
environments_	test/gtest/gtest-all.cc	/^  std::vector<Environment*> environments_;$/;"	m	class:testing::internal::UnitTestImpl	file:
eot	include/taco/parser/lexer.h	/^  eot,  \/\/ End of tokens$/;"	m	class:taco::parser::Token
eq	include/taco/parser/lexer.h	/^  eq,$/;"	m	class:taco::parser::Token
eq	src/index_notation/index_notation.cpp	/^  bool eq = false;$/;"	m	struct:taco::Equals	file:
eq	src/index_notation/index_notation.cpp	/^  bool eq = false;$/;"	m	struct:taco::Isomorphic	file:
eq	src/index_notation/index_notation.cpp	/^IndexExpr eq(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
eq	src/index_notation/iteration_algebra.cpp	/^  bool eq = false;$/;"	m	struct:taco::AlgComparer	file:
equal	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool equal(const dict_readonly &b) const { return pos == b.pos; }$/;"	f	class:dict_readonly
equal	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool equal(const sequence_fast_readonly &b) const { return ptr == b.ptr; }$/;"	f	class:sequence_fast_readonly
equal	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool equal(const sequence_slow_readwrite &b) const { return index == b.index; }$/;"	f	class:sequence_slow_readwrite
equal	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool equal(object_api const &other) const      { return rich_compare(other, Py_EQ); }$/;"	f	class:object_api
equals	src/index_notation/index_notation.cpp	/^bool equals(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
equals	src/index_notation/index_notation.cpp	/^bool equals(IndexStmt a, IndexStmt b) {$/;"	f	namespace:taco
equals	src/index_notation/properties.cpp	/^bool Property::equals(const Property &p) const {$/;"	f	class:taco::Property
equals	src/index_notation/property_pointers.cpp	/^bool AnnihilatorPtr::equals(const PropertyPtr* p) const {$/;"	f	class:taco::AnnihilatorPtr
equals	src/index_notation/property_pointers.cpp	/^bool AssociativePtr::equals(const PropertyPtr* p) const {$/;"	f	class:taco::AssociativePtr
equals	src/index_notation/property_pointers.cpp	/^bool CommutativePtr::equals(const PropertyPtr* p) const {$/;"	f	class:taco::CommutativePtr
equals	src/index_notation/property_pointers.cpp	/^bool IdentityPtr::equals(const PropertyPtr* p) const {$/;"	f	class:taco::IdentityPtr
equals	src/index_notation/property_pointers.cpp	/^bool PropertyPtr::equals(const PropertyPtr* p) const {$/;"	f	class:taco::PropertyPtr
equals	src/index_notation/provenance_graph.cpp	/^bool BoundRelNode::equals(const BoundRelNode &rel) const {$/;"	f	class:taco::BoundRelNode
equals	src/index_notation/provenance_graph.cpp	/^bool DivideRelNode::equals(const DivideRelNode &rel) const {$/;"	f	class:taco::DivideRelNode
equals	src/index_notation/provenance_graph.cpp	/^bool FuseRelNode::equals(const FuseRelNode &rel) const {$/;"	f	class:taco::FuseRelNode
equals	src/index_notation/provenance_graph.cpp	/^bool IndexVarRel::equals(const IndexVarRel &rel) const {$/;"	f	class:taco::IndexVarRel
equals	src/index_notation/provenance_graph.cpp	/^bool PosRelNode::equals(const PosRelNode &rel) const {$/;"	f	class:taco::PosRelNode
equals	src/index_notation/provenance_graph.cpp	/^bool PrecomputeRelNode::equals(const PrecomputeRelNode &rel) const {$/;"	f	class:taco::PrecomputeRelNode
equals	src/index_notation/provenance_graph.cpp	/^bool SplitRelNode::equals(const SplitRelNode &rel) const {$/;"	f	class:taco::SplitRelNode
equals	src/lower/mode_format_compressed.cpp	/^bool CompressedModeFormat::equals(const ModeFormatImpl& other) const {$/;"	f	class:taco::CompressedModeFormat
equals	src/lower/mode_format_impl.cpp	/^bool ModeFormatImpl::equals(const ModeFormatImpl& other) const {$/;"	f	class:taco::ModeFormatImpl
equals	src/lower/mode_format_singleton.cpp	/^bool SingletonModeFormat::equals(const ModeFormatImpl& other) const {$/;"	f	class:taco::SingletonModeFormat
equals	src/storage/storage.cpp	/^bool equals(TensorStorage a, TensorStorage b) {$/;"	f	namespace:taco
equals	src/tensor.cpp	/^bool equals(const TensorBase& a, const TensorBase& b) {$/;"	f	namespace:taco
equalsExact	test/tests-tensor_types.cpp	/^bool equalsExact(Tensor<T> a, Tensor<T> b) {$/;"	f
equalsScalar	src/ir/ir.cpp	/^bool Literal::equalsScalar(double scalar) const {$/;"	f	class:taco::ir::Literal
equalsTyped	src/tensor.cpp	/^bool equalsTyped(const TensorBase& a, const TensorBase& b) {$/;"	f	namespace:taco
erase_all	python_bindings/pybind11/include/pybind11/detail/typeid.h	/^inline void erase_all(std::string &string, const std::string &search) {$/;"	f
error	include/taco/error/error_messages.h	/^namespace error {$/;"	n	namespace:taco
error	src/error/error_checks.cpp	/^namespace error {$/;"	n	namespace:taco	file:
error	src/error/error_checks.h	/^namespace error {$/;"	n	namespace:taco
error	src/error/error_messages.cpp	/^namespace error {$/;"	n	namespace:taco	file:
error_already_set	python_bindings/pybind11/include/pybind11/pytypes.h	/^    error_already_set() : std::runtime_error(detail::error_string()) {$/;"	f	class:error_already_set
error_already_set	python_bindings/pybind11/include/pybind11/pytypes.h	/^class error_already_set : public std::runtime_error {$/;"	c
error_scope	python_bindings/pybind11/include/pybind11/detail/common.h	/^    error_scope() { PyErr_Fetch(&type, &value, &trace); }$/;"	f	struct:error_scope
error_scope	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct error_scope {$/;"	s
error_string	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline std::string error_string() {$/;"	f
errors	python_bindings/pybind11/pybind11/setup_helpers.py	/^import distutils.errors$/;"	i
eval	python_bindings/pybind11/include/pybind11/eval.h	/^object eval(const char (&s)[N], object global = globals(), object local = object()) {$/;"	f
eval	python_bindings/pybind11/include/pybind11/eval.h	/^object eval(str expr, object global = globals(), object local = object()) {$/;"	f
eval_expr	python_bindings/pybind11/include/pybind11/eval.h	/^    eval_expr,$/;"	e	enum:eval_mode
eval_file	python_bindings/pybind11/include/pybind11/eval.h	/^object eval_file(str fname, object global = globals(), object local = object()) {$/;"	f
eval_file	python_bindings/pybind11/include/pybind11/eval.h	/^object eval_file(str) {$/;"	f
eval_file	python_bindings/pybind11/include/pybind11/eval.h	/^object eval_file(str, object) {$/;"	f
eval_file	python_bindings/pybind11/include/pybind11/eval.h	/^object eval_file(str, object, object) {$/;"	f
eval_mode	python_bindings/pybind11/include/pybind11/eval.h	/^enum eval_mode {$/;"	g
eval_single_statement	python_bindings/pybind11/include/pybind11/eval.h	/^    eval_single_statement,$/;"	e	enum:eval_mode
eval_statements	python_bindings/pybind11/include/pybind11/eval.h	/^    eval_statements$/;"	e	enum:eval_mode
evaluate	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def evaluate(self):$/;"	m	class:tensor
evaluate	python_bindings/pytaco/pytensor/taco_tensor.py	/^def evaluate(expr, *operands, out_format=None, dtype=None):$/;"	f
evaluate	src/tensor.cpp	/^void TensorBase::evaluate() {$/;"	f	class:taco::TensorBase
evaluateFunction	include/taco/index_notation/kernel.h	/^  void* evaluateFunction;$/;"	m	class:taco::Kernel
event_	test/gtest/gtest.h	/^  AutoHandle event_;$/;"	m	class:std::tr1::Notification
event_handle_	test/gtest/gtest-all.cc	/^  AutoHandle event_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
event_loop	python_bindings/pybind11/tests/test_async.py	/^def event_loop():$/;"	f
exact	src/lower/merge_lattice.cpp	/^bool MergeLattice::exact() const {$/;"	f	class:taco::MergeLattice
exactly_one	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct exactly_one {$/;"	s
exactly_one	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct exactly_one<P, Default> { using type = Default; };$/;"	s
exampleScheduleSPMVCPURowTiling	test/tests-scheduling-eval.cpp	/^IndexStmt exampleScheduleSPMVCPURowTiling(IndexStmt stmt, Tensor<double> A) {$/;"	f
exampleScheduleSPMVPosIteration	test/tests-scheduling-eval.cpp	/^IndexStmt exampleScheduleSPMVPosIteration(IndexStmt stmt, Tensor<double> A) {$/;"	f
exampleScheduleSPMVUntiled	test/tests-scheduling-eval.cpp	/^IndexStmt exampleScheduleSPMVUntiled(IndexStmt stmt, Tensor<double> A) {$/;"	f
exception	python_bindings/pybind11/include/pybind11/pybind11.h	/^    exception(handle scope, const char *name, handle base = PyExc_Exception) {$/;"	f	class:exception
exception	python_bindings/pybind11/include/pybind11/pybind11.h	/^class exception : public object {$/;"	c
excitement	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    int excitement;$/;"	m	struct:Animal::Labrador	file:
excludeFirst	include/taco/util/collections.h	/^ExcludeFirstConstIterable<C> excludeFirst(const C &collection) {$/;"	f	namespace:taco::util
excludeFirst	include/taco/util/collections.h	/^ExcludeFirstIterable<C> excludeFirst(C &collection) {$/;"	f	namespace:taco::util
exclude_patterns	python_bindings/pybind11/docs/conf.py	/^exclude_patterns = [".build", "release.rst"]$/;"	v
exclude_patterns	python_bindings/source/conf.py	/^exclude_patterns = []$/;"	v
exec	python_bindings/pybind11/include/pybind11/eval.h	/^inline void exec(str expr, object global = globals(), object local = object()) {$/;"	f
exec	python_bindings/pybind11/include/pybind11/eval.h	/^void exec(const char (&s)[N], object global = globals(), object local = object()) {$/;"	f
execute	python_bindings/pybind11/include/pybind11/detail/init.h	/^    static void execute(Class &cl, const Extra&... extra) {$/;"	f	struct:alias_constructor
execute	python_bindings/pybind11/include/pybind11/detail/init.h	/^    static void execute(Class &cl, const Extra&... extra) {$/;"	f	struct:constructor
execute	python_bindings/pybind11/include/pybind11/detail/init.h	/^    void execute(Class &cl, const Extra &...extra) && {$/;"	f	struct:factory
execute	python_bindings/pybind11/include/pybind11/detail/init.h	/^    void execute(Class &cl, const Extra &...extra) && {$/;"	f	struct:pickle_factory
execute	python_bindings/pybind11/include/pybind11/detail/init.h	/^    void execute(Class &cl, const Extra&... extra) && {$/;"	f	struct:factory
execute	python_bindings/pybind11/include/pybind11/operators.h	/^    template <typename Class, typename... Extra> void execute(Class &cl, const Extra&... extra) const {$/;"	f	struct:op_
execute_cast	python_bindings/pybind11/include/pybind11/operators.h	/^    template <typename Class, typename... Extra> void execute_cast(Class &cl, const Extra&... extra) const {$/;"	f	struct:op_
exhausted	src/lower/merge_lattice.cpp	/^set<Iterator> MergeLattice::exhausted(MergePoint point) {$/;"	f	class:taco::MergeLattice
exit	python_bindings/pybind11/include/pybind11/iostream.h	/^    void exit() {$/;"	f	class:OstreamRedirect
exit_code_	test/gtest/gtest.h	/^  const int exit_code_;$/;"	m	class:testing::ExitedWithCode
exp	src/index_notation/index_notation.cpp	/^IndexExpr exp(IndexExpr a) {$/;"	f	namespace:taco
expected	test/test.h	/^  IndexStmt expected;$/;"	m	struct:taco::test::NotationTest
expected	test/tests-lower.cpp	/^  map<TensorVar, vector<pair<vector<int>,double>>> expected;$/;"	m	struct:taco::test::TestCase	file:
expected	test/tests-merge_lattice.cpp	/^  taco::MergeLattice expected;$/;"	m	struct:tests::Test	file:
expected	test/tests-transformation.cpp	/^  IndexStmt expected;$/;"	m	struct:test::TransformationTest	file:
expectedIndices	test/tests-api.cpp	/^  Indices        expectedIndices;$/;"	m	class:APIMatrixStorageTestData	file:
expectedIndices	test/tests-expr_storage.cpp	/^  Indices        expectedIndices;$/;"	m	struct:expr_storage_tests::TestData	file:
expectedIndices	test/tests-storage.cpp	/^  Indices        expectedIndices;$/;"	m	struct:TestData	file:
expectedIndices	test/tests-storage_alloc.cpp	/^  Indices        expectedIndices;$/;"	m	struct:storage_alloc_tests::TestData	file:
expectedValues	test/tests-api.cpp	/^  vector<double> expectedValues;$/;"	m	class:APIMatrixStorageTestData	file:
expectedValues	test/tests-expr_storage.cpp	/^  vector<double> expectedValues;$/;"	m	struct:expr_storage_tests::TestData	file:
expectedValues	test/tests-storage.cpp	/^  vector<double> expectedValues;$/;"	m	struct:TestData	file:
expectedValues	test/tests-storage_alloc.cpp	/^  vector<double> expectedValues;$/;"	m	struct:storage_alloc_tests::TestData	file:
expected_num_args	python_bindings/pybind11/include/pybind11/attr.h	/^constexpr bool expected_num_args(size_t nargs, bool has_args, bool has_kwargs) {$/;"	f
explodeWithException	src/error.cpp	/^void ErrorReport::explodeWithException() {$/;"	f	class:taco::ErrorReport
exponent_bits	test/gtest/gtest.h	/^  Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
export_values	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void export_values() {$/;"	f	struct:enum_base
export_values	python_bindings/pybind11/include/pybind11/pybind11.h	/^    enum_& export_values() {$/;"	f	class:enum_
expr	include/taco/index_notation/index_notation_nodes.h	/^  IndexExpr expr;$/;"	m	struct:taco::YieldNode
expr	include/taco/index_notation/index_notation_rewriter.h	/^  IndexExpr expr;$/;"	m	class:taco::IndexExprRewriterStrict
expr	include/taco/ir/ir_rewriter.h	/^  Expr expr;$/;"	m	class:taco::ir::IRRewriter
expr	include/taco/parser/lexer.h	/^  std::string expr;$/;"	m	class:taco::parser::Lexer
expr	src/index_notation/iteration_algebra.cpp	/^const IndexExpr RegionNode::expr() const {$/;"	f	class:taco::RegionNode
expr	src/index_notation/transformations.cpp	/^  IndexExpr expr;$/;"	m	struct:taco::Precompute::Content	file:
expr	src/lower/iteration_graph.cpp	/^  IndexExpr                 expr;$/;"	m	struct:taco::IterationGraph::Content	file:
expr	src/lower/lowerer_impl.cpp	/^  Expr expr;$/;"	m	class:taco::LowererImpl::Visitor	file:
expr	test/tests-expr_storage.cpp	/^struct expr : public TestWithParam<TestData> {};$/;"	s	namespace:expr_storage_tests	file:
exprHasOutput	src/parser/einsum_parser.cpp	/^bool EinsumParser::exprHasOutput(const std::string &subscripts){$/;"	f	class:taco::parser::EinsumParser
exprScalarSetter	python_bindings/src/pyTensor.cpp	/^static inline void exprScalarSetter(Tensor<CType> &tensor, VarType idx, SType scalar) {$/;"	f	namespace:taco::pythonBindings
exprSetter	python_bindings/src/pyTensor.cpp	/^static inline void exprSetter(Tensor<CType> &tensor, VarType idx, ExprType expr) {$/;"	f	namespace:taco::pythonBindings
exprSubstitutions	src/index_notation/index_notation_rewriter.cpp	/^  const std::map<IndexExpr,IndexExpr>& exprSubstitutions;$/;"	m	struct:taco::ReplaceRewriter	file:
expr_	include/taco/index_notation/iteration_algebra.h	/^  IndexExpr expr_;$/;"	m	struct:taco::RegionNode
expr_dimension_mismatch	src/error/error_messages.cpp	/^const std::string expr_dimension_mismatch =$/;"	m	namespace:taco::error	file:
expr_distribution	src/error/error_messages.cpp	/^const std::string expr_distribution =$/;"	m	namespace:taco::error	file:
expr_einsum_missformed	src/error/error_messages.cpp	/^const std::string expr_einsum_missformed =$/;"	m	namespace:taco::error	file:
expr_storage_tests	test/tests-expr_storage.cpp	/^namespace expr_storage_tests {$/;"	n	file:
expr_transposition	src/error/error_messages.cpp	/^const std::string expr_transposition =$/;"	m	namespace:taco::error	file:
extensions	python_bindings/pybind11/docs/conf.py	/^extensions = [$/;"	v
extensions	python_bindings/source/conf.py	/^extensions = [$/;"	v
extent	python_bindings/pybind11/include/pybind11/numpy.h	/^    static constexpr size_t extent = N;$/;"	m	struct:array_info
extents	python_bindings/pybind11/include/pybind11/numpy.h	/^    static constexpr auto extents = _("");$/;"	m	struct:array_info_scalar
extents	python_bindings/pybind11/include/pybind11/numpy.h	/^    static constexpr auto extents = _<array_info<T>::is_array>($/;"	m	struct:array_info
extractNames	python_bindings/src/pyParsers.cpp	/^static std::vector<std::string> extractNames(std::string& expr){$/;"	f	namespace:taco::pythonBindings
f	python_bindings/pybind11/tests/pybind11_tests.h	/^    float f;$/;"	m	union:IntFloat
f	python_bindings/pybind11/tests/test_callbacks.py	/^    def f(*args, **kwargs):$/;"	f	function:test_keyword_args_and_generalized_unpacking
f	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization1.B
f	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization2.B2
f0	test/gtest/gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f0_	test/gtest/gtest.h	/^  T0 f0_;$/;"	m	class:std::tr1::tuple
f1	test/gtest/gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f1_	test/gtest/gtest.h	/^  T1 f1_;$/;"	m	class:std::tr1::tuple
f2	test/gtest/gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f2_	test/gtest/gtest.h	/^  T2 f2_;$/;"	m	class:std::tr1::tuple
f3	test/gtest/gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f3_	test/gtest/gtest.h	/^  T3 f3_;$/;"	m	class:std::tr1::tuple
f4	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^int f4(int x) throw() { return x+4; } \/\/ Deprecated equivalent to noexcept(true)$/;"	f	namespace:test_exc_sp
f4	test/gtest/gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f4_	test/gtest/gtest.h	/^  T4 f4_;$/;"	m	class:std::tr1::tuple
f5	test/gtest/gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f5_	test/gtest/gtest.h	/^  T5 f5_;$/;"	m	class:std::tr1::tuple
f6	test/gtest/gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f6_	test/gtest/gtest.h	/^  T6 f6_;$/;"	m	class:std::tr1::tuple
f7	test/gtest/gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f7_	test/gtest/gtest.h	/^  T7 f7_;$/;"	m	class:std::tr1::tuple
f8	test/gtest/gtest.h	/^      GTEST_BY_REF_(T8) f8, GTEST_BY_REF_(T9) f9) : f0_(f0), f1_(f1), f2_(f2),$/;"	m	class:std::tr1::tuple
f8_	test/gtest/gtest.h	/^  T8 f8_;$/;"	m	class:std::tr1::tuple
f9_	test/gtest/gtest.h	/^      f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7), f8_(f8), f9_(f9) {}$/;"	f	class:std::tr1::tuple
f9_	test/gtest/gtest.h	/^      f9_(t.f9_) {}$/;"	f	class:std::tr1::tuple
f9_	test/gtest/gtest.h	/^  T9 f9_;$/;"	m	class:std::tr1::tuple
f_	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^    std::function<void()> f_;$/;"	m	struct:scope_exit	file:
f_strides	python_bindings/pybind11/include/pybind11/buffer_info.h	/^inline std::vector<ssize_t> f_strides(const std::vector<ssize_t> &shape, ssize_t itemsize) {$/;"	f
factTenInnerProd	test/tests-parafac.cpp	/^FactorizedTensorInnerProductFactory factTenInnerProd;$/;"	v
factTenSquaredNorm	test/tests-parafac.cpp	/^FactorizedTensorSquaredNormFactory  factTenSquaredNorm;$/;"	v
factory	python_bindings/pybind11/include/pybind11/detail/init.h	/^    factory(CFunc &&c, AFunc &&a)$/;"	f	struct:factory
factory	python_bindings/pybind11/include/pybind11/detail/init.h	/^    factory(Func &&f) : class_factory(std::forward<Func>(f)) { }$/;"	f	struct:factory
factory	python_bindings/pybind11/include/pybind11/detail/init.h	/^struct factory<CFunc, AFunc, CReturn(CArgs...), AReturn(AArgs...)> {$/;"	s
factory	python_bindings/pybind11/include/pybind11/detail/init.h	/^struct factory<Func, void_type (*)(), Return(Args...)> {$/;"	s
factory_	test/gtest/gtest.h	/^  internal::TestFactoryBase* const factory_;  \/\/ The factory that creates$/;"	m	class:testing::TestInfo::internal
failed	test/gtest/gtest.h	/^  bool failed() const { return type_ != kSuccess; }$/;"	f	class:testing::TestPartResult
failed_test_case_count	test/gtest/gtest-all.cc	/^int UnitTest::failed_test_case_count() const {$/;"	f	class:testing::UnitTest
failed_test_case_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::failed_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failed_test_count	test/gtest/gtest-all.cc	/^int TestCase::failed_test_count() const {$/;"	f	class:testing::TestCase
failed_test_count	test/gtest/gtest-all.cc	/^int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }$/;"	f	class:testing::UnitTest
failed_test_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::failed_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failure_message	test/gtest/gtest.h	/^  const char* failure_message() const { return message(); }$/;"	f	class:testing::AssertionResult
false_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^    constexpr auto operator()(Return (Class::*pmf)(Args...), std::false_type = {}) const noexcept$/;"	m	class:overload_cast_impl::std
false_type	test/gtest/gtest.h	/^typedef bool_constant<false> false_type;$/;"	t	namespace:std::tr1
fatally_failed	test/gtest/gtest.h	/^  bool fatally_failed() const { return type_ == kFatalFailure; }$/;"	f	class:testing::TestPartResult
fd_	test/gtest/gtest-all.cc	/^  const int fd_;  \/\/ A stream to capture.$/;"	m	class:testing::internal::CapturedStream	file:
fields	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *fields;$/;"	m	struct:PyArrayDescr_Proxy
file	include/taco/error.h	/^  const char *file;$/;"	m	struct:taco::ErrorReport
file	test/gtest/gtest-all.cc	/^  const char* file;$/;"	m	struct:testing::internal::TraceInfo	file:
file	test/gtest/gtest.h	/^    const char* const file;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
file	test/gtest/gtest.h	/^  const std::string& file() const { return file_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
fileFormats	tools/taco.cpp	/^static const string fileFormats = "(.tns .ttx .mtx .rb)";$/;"	v	file:
file_	test/gtest/gtest-all.cc	/^  const char* const file_;$/;"	m	class:testing::internal::ExecDeathTest	file:
file_	test/gtest/gtest-all.cc	/^  const char* const file_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
file_	test/gtest/gtest.h	/^  std::string file_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
file_name	test/gtest/gtest.h	/^  const char* file_name() const {$/;"	f	class:testing::TestPartResult
file_name_	test/gtest/gtest.h	/^  std::string file_name_;$/;"	m	class:testing::TestPartResult
filename	test/tests-api.cpp	/^  std::string filename;$/;"	m	class:APIFileTestData	file:
filename_	test/gtest/gtest-all.cc	/^  ::std::string filename_;$/;"	m	class:testing::internal::CapturedStream	file:
fill	src/index_notation/index_notation.cpp	/^  Literal fill;$/;"	m	struct:taco::TensorVar::Content	file:
fill	src/util/strings.cpp	/^string fill(string text, char fill, size_t n) {$/;"	f	namespace:taco::util
fillBuffer	include/taco/tensor.h	/^    void fillBuffer() {$/;"	f	class:taco::TensorBase::const_iterator
fillFactors	include/taco/util/fill.h	/^const std::map<FillMethod,double> fillFactors = {$/;"	m	namespace:taco::util
fillMatrix	include/taco/util/fill.h	/^void fillMatrix(TensorBase& tens, const FillMethod& fill, double fillValue) {$/;"	f	namespace:taco::util
fillTensor	include/taco/util/fill.h	/^void fillTensor(TensorBase& tens, const FillMethod& fill, double fillValue\/*=-1.0*\/) {$/;"	f	namespace:taco::util
fillTensor3	include/taco/util/fill.h	/^void fillTensor3(TensorBase& tens, const FillMethod& fill, double fillValue) {$/;"	f	namespace:taco::util
fillValue	src/storage/storage.cpp	/^  Literal       fillValue;$/;"	m	struct:taco::TensorStorage::Content	file:
fillValueInferrer	src/index_notation/index_notation.cpp	/^struct fillValueInferrer : IndexExprRewriterStrict {$/;"	s	namespace:taco	file:
fillVector	include/taco/util/fill.h	/^void fillVector(TensorBase& tensor, const FillMethod& fill, double fillValue) {$/;"	f	namespace:taco::util
fill_value	include/taco/taco_tensor_t.h	/^  uint8_t*     fill_value;    \/\/ tensor fill value$/;"	m	struct:taco_tensor_t
filter	include/taco/util/collections.h	/^std::vector<V> filter(const std::vector<V>& vector, T test) {$/;"	f	namespace:taco::util
filter_	test/gtest/gtest-all.cc	/^  std::string filter_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
final	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^class PyWidget final : public Widget {$/;"	c	file:
finalizeResultArrays	src/lower/lowerer_impl.cpp	/^ir::Stmt LowererImpl::finalizeResultArrays(std::vector<Access> writes) {$/;"	f	class:taco::LowererImpl
finalize_interpreter	python_bindings/pybind11/include/pybind11/embed.h	/^inline void finalize_interpreter() {$/;"	f
find	python_bindings/pybind11/include/pybind11/cast.h	/^    iterator find(const type_info *find_type) {$/;"	f	struct:values_and_holders
findProperty	include/taco/index_notation/properties.h	/^inline const P findProperty(const std::vector<Property> &properties) {$/;"	f	namespace:taco
findUniqueIndices	src/parser/einsum_parser.cpp	/^std::string EinsumParser::findUniqueIndices(const std::string &subscripts) {$/;"	f	class:taco::parser::EinsumParser
finished_	test/gtest/gtest.h	/^  bool finished_;  \/\/ true iff we know that the thread function has finished.$/;"	m	class:std::tr1::ThreadWithParam
first	python_bindings/pybind11/include/pybind11/detail/common.h	/^constexpr int first(int i) { return i; }$/;"	f
first	python_bindings/pybind11/include/pybind11/detail/common.h	/^constexpr int first(int i, T v, Ts... vs) { return v ? i : first(i + 1, vs...); }$/;"	f
first_or_done	python_bindings/pybind11/include/pybind11/pybind11.h	/^    bool first_or_done;$/;"	m	struct:iterator_state
fixed	python_bindings/pybind11/include/pybind11/eigen.h	/^        fixed = size != Eigen::Dynamic, \/\/ Fully-fixed size$/;"	m	struct:EigenProps
fixed_cols	python_bindings/pybind11/include/pybind11/eigen.h	/^        fixed_cols = cols != Eigen::Dynamic,$/;"	m	struct:EigenProps
fixed_rows	python_bindings/pybind11/include/pybind11/eigen.h	/^        fixed_rows = rows != Eigen::Dynamic,$/;"	m	struct:EigenProps
fixture_class_id_	test/gtest/gtest.h	/^  const internal::TypeId fixture_class_id_;   \/\/ ID of the test fixture class$/;"	m	class:testing::TestInfo
flag_noconvert	python_bindings/pybind11/include/pybind11/cast.h	/^    bool flag_noconvert : 1; \/\/\/< If set, do not allow conversion (requires a supporting type caster!)$/;"	m	struct:arg
flag_none	python_bindings/pybind11/include/pybind11/cast.h	/^    bool flag_none : 1; \/\/\/< If set (the default), allow None to be passed to this argument$/;"	m	struct:arg
flags	python_bindings/pybind11/include/pybind11/numpy.h	/^    char flags;$/;"	m	struct:PyArrayDescr_Proxy
flags	python_bindings/pybind11/include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyArray_Proxy
flags	python_bindings/pybind11/include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyVoidScalarObject_Proxy
flipPoints	src/lower/merge_lattice.cpp	/^  flipPoints(const vector<MergePoint>& points) {$/;"	f	class:taco::MergeLatticeBuilder	file:
float32Value	include/taco/type.h	/^  float float32Value;$/;"	m	union:taco::ComponentTypeUnion
float64Value	include/taco/type.h	/^  double float64Value;$/;"	m	union:taco::ComponentTypeUnion
float_	python_bindings/pybind11/include/pybind11/pytypes.h	/^    float_(double value = .0) : object(PyFloat_FromDouble((double) value), stolen_t{}) {$/;"	f	class:float_
float_	python_bindings/pybind11/include/pybind11/pytypes.h	/^    float_(float value) : object(PyFloat_FromDouble((double) value), stolen_t{}) {$/;"	f	class:float_
float_	python_bindings/pybind11/include/pybind11/pytypes.h	/^class float_ : public object {$/;"	c
float_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:PartialStruct	file:
float_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:SimpleStruct	file:
float_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:SimpleStructReordered	file:
float_scalar	include/taco/parser/lexer.h	/^  float_scalar,$/;"	m	class:taco::parser::Token
fmt	include/taco/ir/ir.h	/^  std::string fmt;$/;"	m	struct:taco::ir::Print
fnptr_t	include/taco/tensor.h	/^    typedef int (*fnptr_t)(void**);$/;"	t	class:taco::TensorBase::const_iterator
foo	python_bindings/pybind11/tests/test_class.py	/^        def foo(self):$/;"	m	class:test_bind_protected_functions.C
foo	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def foo(self):$/;"	m	class:test_multiple_inheritance_mix1.Base1
footer	include/taco/lower/lowerer_impl.h	/^  std::vector<ir::Stmt> footer;$/;"	m	class:taco::LowererImpl
forall	src/index_notation/index_notation.cpp	/^Forall forall(IndexVar i, IndexStmt stmt) {$/;"	f	namespace:taco
forall	src/index_notation/index_notation.cpp	/^Forall forall(IndexVar i, IndexStmt stmt, ParallelUnit parallel_unit, OutputRaceStrategy output_race_strategy, size_t unrollFactor) {$/;"	f	namespace:taco
forall	test/tests-merge_lattice.cpp	/^  Forall forall;$/;"	m	struct:tests::Test	file:
format	include/taco/parser/einsum_parser.h	/^  Format format;$/;"	m	class:taco::parser::EinsumParser
format	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    std::string format;           \/\/ For homogeneous buffers, this should be set to format_descriptor<T>::format()$/;"	m	struct:buffer_info
format	python_bindings/pybind11/include/pybind11/complex.h	/^    static std::string format() { return std::string(value); }$/;"	f	struct:format_descriptor
format	python_bindings/pybind11/include/pybind11/detail/common.h	/^    static std::string format() { return std::string(1, c); }$/;"	f	struct:format_descriptor
format	python_bindings/pybind11/include/pybind11/pytypes.h	/^    str format(Args &&...args) const {$/;"	f	class:str
format	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def format(self):$/;"	m	class:tensor
format	src/index_notation/index_notation.cpp	/^  Format format;$/;"	m	struct:taco::TensorVar::Content	file:
format	src/storage/index.cpp	/^  Format format;$/;"	m	struct:taco::Index::Content	file:
format	src/storage/storage.cpp	/^  Format        format;$/;"	m	struct:taco::TensorStorage::Content	file:
format	test/tests-format.cpp	/^struct format : public TestWithParam<TestData> {};$/;"	s	file:
formatVars	test/tests-lower.cpp	/^map<TensorVar,TensorVar> formatVars(const std::vector<TensorVar>& vars,$/;"	f	namespace:taco::test
format_descriptor	python_bindings/pybind11/include/pybind11/complex.h	/^template <typename T> struct format_descriptor<std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s
format_descriptor	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T, typename SFINAE = void> struct format_descriptor { };$/;"	s
format_descriptor	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T> struct format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::value>> {$/;"	s
format_ptrs	python_bindings/pybind11/tests/constructor_stats.h	/^inline const char *format_ptrs(const char *p) { return p; }$/;"	f
format_ptrs	python_bindings/pybind11/tests/constructor_stats.h	/^py::str format_ptrs(T *p) { return "{:#x}"_s.format(reinterpret_cast<std::uintptr_t>(p)); }$/;"	f
format_str	python_bindings/pybind11/include/pybind11/numpy.h	/^    std::string format_str;$/;"	m	struct:numpy_type_info
formats	src/parser/parser.cpp	/^  map<string,Format> formats;$/;"	m	struct:taco::parser::Parser::Content	file:
formats	test/tests-lower.cpp	/^  map<TensorVar, Format> formats;$/;"	m	struct:taco::test::Formats	file:
forward	python_bindings/pybind11/include/pybind11/pybind11.h	/^auto method_adaptor(F &&f) -> decltype(std::forward<F>(f)) { return std::forward<F>(f); }$/;"	f
forward	python_bindings/pybind11/include/pybind11/pytypes.h	/^auto object_or_cast(T &&o) -> decltype(std::forward<T>(o)) { return std::forward<T>(o); }$/;"	f
forward	python_bindings/pybind11/tests/constructor_stats.h	/^auto format_ptrs(T &&x) -> decltype(std::forward<T>(x)) { return std::forward<T>(x); }$/;"	f
forward_like	python_bindings/pybind11/include/pybind11/stl.h	/^forwarded_type<T, U> forward_like(U &&u) {$/;"	f
forwarding_enabled	test/gtest/gtest-all.cc	/^  bool forwarding_enabled() const { return forwarding_enabled_; }$/;"	f	class:testing::internal::TestEventRepeater
forwarding_enabled_	test/gtest/gtest-all.cc	/^  bool forwarding_enabled_;$/;"	m	class:testing::internal::TestEventRepeater	file:
found	python_bindings/pybind11/include/pybind11/detail/common.h	/^    static constexpr auto found = constexpr_sum(Predicate<Ts>::value...);$/;"	m	struct:exactly_one
fraction_bits	test/gtest/gtest.h	/^  Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
freeVars	src/lower/iteration_graph.cpp	/^  set<IndexVar>             freeVars;$/;"	m	struct:taco::IterationGraph::Content	file:
free_data	python_bindings/pybind11/include/pybind11/attr.h	/^    void (*free_data) (function_record *ptr) = nullptr;$/;"	m	struct:function_record
free_mem	src/taco_tensor_t.cpp	/^void free_mem(void *ptr) {$/;"	f
fromNpArr	python_bindings/src/pyTensor.cpp	/^static Tensor<T> fromNpArr(py::buffer_info& array_buffer, Format& fmt, bool copy){$/;"	f	namespace:taco::pythonBindings
fromNumpyC	python_bindings/src/pyTensor.cpp	/^static Tensor<T> fromNumpyC(py::array_t<T, py::array::c_style>  &array, bool copy) {$/;"	f	namespace:taco::pythonBindings
fromNumpyF	python_bindings/src/pyTensor.cpp	/^static Tensor<T> fromNumpyF(py::array_t<T, py::array::f_style> &array, bool copy) {$/;"	f	namespace:taco::pythonBindings
fromSpMatrix	python_bindings/src/pyTensor.cpp	/^static Tensor<T> fromSpMatrix(py::array_t<IdxType> &ind_ptr, py::array_t<IdxType> &inds, py::array_t<T> &data,$/;"	f	namespace:taco::pythonBindings
from_array	python_bindings/pytaco/pytensor/taco_tensor.py	/^def from_array(array, copy=True):$/;"	f
from_buffer	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static memoryview from_buffer($/;"	f	class:memoryview
from_buffer	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline memoryview memoryview::from_buffer($/;"	f	class:memoryview
from_memory	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static memoryview from_memory(const void *mem, ssize_t size) {$/;"	f	class:memoryview
from_memory	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static memoryview from_memory(void *mem, ssize_t size, bool readonly = false) {$/;"	f	class:memoryview
from_sp_csc	python_bindings/pytaco/pytensor/taco_tensor.py	/^def from_sp_csc(matrix, copy=True):$/;"	f
from_sp_csr	python_bindings/pytaco/pytensor/taco_tensor.py	/^def from_sp_csr(matrix, copy=True):$/;"	f
from_tensor_base	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def from_tensor_base(cls, tensor_base):$/;"	m	class:tensor
fullSpaceGen	test/op_factory.h	/^struct fullSpaceGen {$/;"	s	namespace:taco
full_pattern_	test/gtest/gtest.h	/^  const char* full_pattern_;  \/\/ For FullMatch();$/;"	m	class:std::tr1::RE
full_regex_	test/gtest/gtest.h	/^  regex_t full_regex_;     \/\/ For FullMatch().$/;"	m	class:std::tr1::RE
func	include/taco/error.h	/^  const char *func;$/;"	m	struct:taco::ErrorReport
func	include/taco/index_notation/index_notation_nodes.h	/^  std::shared_ptr<Intrinsic> func;$/;"	m	struct:taco::CallIntrinsicNode
func	include/taco/ir/ir.h	/^  std::string func;$/;"	m	struct:taco::ir::Call
func	python_bindings/pybind11/include/pybind11/cast.h	/^    const function_record &func;$/;"	m	struct:function_call
func	python_bindings/pybind11/tests/test_pytypes.py	/^        def func(self, x, *args):$/;"	m	class:test_accessors.TestObject
func1	python_bindings/pybind11/tests/test_callbacks.py	/^    def func1():$/;"	f	function:test_callbacks
func2	python_bindings/pybind11/tests/test_callbacks.py	/^    def func2(a, b, c, d):$/;"	f	function:test_callbacks
func3	python_bindings/pybind11/tests/test_callbacks.py	/^    def func3(a):$/;"	f	function:test_callbacks
funcName	src/codegen/codegen_c.h	/^  std::string funcName;$/;"	m	class:taco::ir::CodeGen_C
funcName	src/codegen/codegen_cuda.h	/^  std::string funcName;$/;"	m	class:taco::ir::CodeGen_CUDA
func_	test/gtest/gtest.h	/^    UserThreadFunc* const func_;$/;"	m	class:std::tr1::ThreadWithParam::RunnableImpl
func_	test/gtest/gtest.h	/^  UserThreadFunc* const func_;  \/\/ User-supplied thread function.$/;"	m	class:std::tr1::ThreadWithParam
funcs	include/taco/codegen/module.h	/^  std::vector<Stmt> funcs;$/;"	m	class:taco::ir::Module
function	python_bindings/pybind11/include/pybind11/pytypes.h	/^class function : public object {$/;"	c
function	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def function(self):$/;"	m	class:ParallelCompile
functionParameters	src/codegen/codegen_cuda.cpp	/^  vector<vector<pair<string, Expr>>> functionParameters;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
function_call	python_bindings/pybind11/include/pybind11/attr.h	/^inline function_call::function_call(const function_record &f, handle p) :$/;"	f	class:function_call
function_call	python_bindings/pybind11/include/pybind11/cast.h	/^struct function_call {$/;"	s
function_record	python_bindings/pybind11/include/pybind11/attr.h	/^    function_record()$/;"	f	struct:function_record
function_record	python_bindings/pybind11/include/pybind11/attr.h	/^struct function_record {$/;"	s
functions	python_bindings/pybind11/include/pybind11/numpy.h	/^    enum functions {$/;"	g	struct:npy_api
functorAddress	include/taco/util/functions.h	/^Fnptr functorAddress(std::function<T(U...)> f) {$/;"	f	namespace:taco::util
fuse	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::fuse(IndexVar i, IndexVar j, IndexVar f) const {$/;"	f	class:taco::IndexStmt
fusedVar	src/index_notation/provenance_graph.cpp	/^  IndexVar fusedVar;$/;"	m	struct:taco::FuseRelNode::Content	file:
g10_	test/gtest/gtest.h	/^  const Generator10 g10_;$/;"	m	class:testing::internal::CartesianProductHolder10
g10_	test/gtest/gtest.h	/^  const ParamGenerator<T10> g10_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	test/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder10
g1_	test/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder2
g1_	test/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder3
g1_	test/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder4
g1_	test/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder5
g1_	test/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder6
g1_	test/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder7
g1_	test/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder8
g1_	test/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder9
g1_	test/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	test/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g1_	test/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g1_	test/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g1_	test/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g1_	test/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g1_	test/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g1_	test/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g1_	test/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g2_	test/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder10
g2_	test/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder2
g2_	test/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder3
g2_	test/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder4
g2_	test/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder5
g2_	test/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder6
g2_	test/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder7
g2_	test/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder8
g2_	test/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder9
g2_	test/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g2_	test/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g2_	test/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g2_	test/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g2_	test/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g2_	test/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g2_	test/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g2_	test/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g2_	test/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g3_	test/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder10
g3_	test/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder3
g3_	test/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder4
g3_	test/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder5
g3_	test/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder6
g3_	test/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder7
g3_	test/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder8
g3_	test/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder9
g3_	test/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g3_	test/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g3_	test/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g3_	test/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g3_	test/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g3_	test/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g3_	test/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g3_	test/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g4_	test/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder10
g4_	test/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder4
g4_	test/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder5
g4_	test/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder6
g4_	test/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder7
g4_	test/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder8
g4_	test/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder9
g4_	test/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g4_	test/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g4_	test/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g4_	test/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g4_	test/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g4_	test/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g4_	test/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g5_	test/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder10
g5_	test/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder5
g5_	test/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder6
g5_	test/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder7
g5_	test/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder8
g5_	test/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder9
g5_	test/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g5_	test/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g5_	test/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g5_	test/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g5_	test/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g5_	test/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g6_	test/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder10
g6_	test/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder6
g6_	test/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder7
g6_	test/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder8
g6_	test/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder9
g6_	test/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g6_	test/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g6_	test/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g6_	test/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g6_	test/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g7_	test/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder10
g7_	test/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder7
g7_	test/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder8
g7_	test/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder9
g7_	test/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g7_	test/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g7_	test/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g7_	test/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g8_	test/gtest/gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder10
g8_	test/gtest/gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder8
g8_	test/gtest/gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder9
g8_	test/gtest/gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g8_	test/gtest/gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g8_	test/gtest/gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g9_	test/gtest/gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder10
g9_	test/gtest/gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder9
g9_	test/gtest/gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g9_	test/gtest/gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g_argvs	test/gtest/gtest-all.cc	/^::std::vector<testing::internal::string> g_argvs;$/;"	m	namespace:testing::internal	file:
g_captured_stderr	test/gtest/gtest-all.cc	/^static CapturedStream* g_captured_stderr = NULL;$/;"	m	namespace:testing::internal	file:
g_captured_stdout	test/gtest/gtest-all.cc	/^static CapturedStream* g_captured_stdout = NULL;$/;"	m	namespace:testing::internal	file:
g_executable_path	test/gtest/gtest-all.cc	/^std::string g_executable_path;$/;"	m	namespace:testing::internal	file:
g_help_flag	test/gtest/gtest-all.cc	/^bool g_help_flag = false;$/;"	m	namespace:testing::internal	file:
g_in_fast_death_test_child	test/gtest/gtest-all.cc	/^static bool g_in_fast_death_test_child = false;$/;"	m	namespace:testing::internal	file:
g_init_gtest_count	test/gtest/gtest-all.cc	/^GTEST_API_ int g_init_gtest_count = 0;$/;"	m	namespace:testing::internal	file:
g_injected_test_argvs	test/gtest/gtest-all.cc	/^static const ::std::vector<testing::internal::string>* g_injected_test_argvs =$/;"	m	namespace:testing::internal	file:
gc	python_bindings/pybind11/tests/conftest.py	/^import gc$/;"	i
gc	python_bindings/pybind11/tests/constructor_stats.h	/^    static void gc() {$/;"	f	class:ConstructorStats
gc_collect	python_bindings/pybind11/tests/conftest.py	/^def gc_collect():$/;"	f
genUniqueName	src/codegen/codegen.cpp	/^string CodeGen::genUniqueName(string name) {$/;"	f	class:taco::ir::CodeGen
genVectorizePragma	src/codegen/codegen_c.cpp	/^static string genVectorizePragma(int width) {$/;"	f	namespace:taco::ir
genVectorizePragma	src/codegen/codegen_cuda.cpp	/^static string genVectorizePragma(int width) {$/;"	f	namespace:taco::ir
gen_f	python_bindings/pybind11/tests/test_callbacks.py	/^    def gen_f():$/;"	f	function:test_async_callbacks
generateAppendPositions	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::generateAppendPositions(vector<Iterator> appenders) {$/;"	f	class:taco::LowererImpl
generateAssembleCode	src/lower/lowerer_impl.cpp	/^bool LowererImpl::generateAssembleCode() const {$/;"	f	class:taco::LowererImpl
generateComputeCode	src/lower/lowerer_impl.cpp	/^bool LowererImpl::generateComputeCode() const {$/;"	f	class:taco::LowererImpl
generateModeOrderings	test/test_tensors.cpp	/^std::vector<std::vector<int>> generateModeOrderings(int order) {$/;"	f	namespace:taco::test
generateModeTypes	test/test_tensors.cpp	/^std::vector<std::vector<ModeFormatPack>> generateModeTypes(int order) {$/;"	f	namespace:taco::test
generatePackCOOStmt	src/index_notation/index_notation.cpp	/^IndexStmt generatePackCOOStmt(TensorVar tensor, $/;"	f	namespace:taco
generatePackStmt	src/index_notation/index_notation.cpp	/^IndexStmt generatePackStmt(TensorVar tensor, $/;"	f	namespace:taco
generateShim	src/codegen/codegen_c.cpp	/^void CodeGen_C::generateShim(const Stmt& func, stringstream &ret) {$/;"	f	class:taco::ir::CodeGen_C
generateShim	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::generateShim(const Stmt& func, stringstream &ret) {$/;"	f	class:taco::ir::CodeGen_CUDA
generateValueLocExpr	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::generateValueLocExpr(Access access) const {$/;"	f	class:taco::LowererImpl
generate_doxygen_xml	python_bindings/pybind11/docs/conf.py	/^def generate_doxygen_xml(app):$/;"	f
generate_dummy_code_boost	python_bindings/pybind11/docs/benchmark.py	/^def generate_dummy_code_boost(nclasses=10):$/;"	f
generate_dummy_code_pybind11	python_bindings/pybind11/docs/benchmark.py	/^def generate_dummy_code_pybind11(nclasses=10):$/;"	f
generic_item	python_bindings/pybind11/include/pybind11/pytypes.h	/^struct generic_item {$/;"	s
generic_iterator	python_bindings/pybind11/include/pybind11/pytypes.h	/^    generic_iterator(handle seq, ssize_t index) : Policy(seq, index) { }$/;"	f	class:generic_iterator
generic_iterator	python_bindings/pybind11/include/pybind11/pytypes.h	/^class generic_iterator : public Policy {$/;"	c
generic_type	python_bindings/pybind11/include/pybind11/pybind11.h	/^class generic_type : public object {$/;"	c
get	include/taco/storage/typed_vector.h	/^  typename Typed::Ref get(size_t index) const {$/;"	f	class:taco::TypedVector
get	include/taco/util/intrusive_ptr.h	/^  const T* get() {$/;"	f	class:taco::util::IntrusivePtr
get	include/taco/util/scopedmap.h	/^  const Value& get(const Key& key) const {$/;"	f	class:taco::util::ScopedMap
get	python_bindings/pybind11/include/pybind11/cast.h	/^    static const void *get(const itype *src, const std::type_info*& type) {$/;"	f	struct:polymorphic_type_hook_base
get	python_bindings/pybind11/include/pybind11/cast.h	/^    static const void *get(const itype *src, const std::type_info*&) { return src; }$/;"	f	struct:polymorphic_type_hook_base
get	python_bindings/pybind11/include/pybind11/detail/init.h	/^    remove_reference_t<Get> get;$/;"	m	struct:pickle_factory
get	python_bindings/pybind11/include/pybind11/numpy.h	/^    static npy_api& get() {$/;"	f	struct:npy_api
get	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, const char *key) { return getattr(obj, key); }$/;"	f	struct:str_attr
get	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) { return getattr(obj, key); }$/;"	f	struct:obj_attr
get	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) {$/;"	f	struct:generic_item
get	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, size_t index) {$/;"	f	struct:list_item
get	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, size_t index) {$/;"	f	struct:sequence_item
get	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static object get(handle obj, size_t index) {$/;"	f	struct:tuple_item
get	python_bindings/pybind11/tests/constructor_stats.h	/^    static ConstructorStats& get(py::object class_) {$/;"	f	class:ConstructorStats
get	python_bindings/pybind11/tests/constructor_stats.h	/^    static ConstructorStats& get(std::type_index type) {$/;"	f	class:ConstructorStats
get	python_bindings/pybind11/tests/constructor_stats.h	/^    template <typename T> static ConstructorStats& get() {$/;"	f	class:ConstructorStats
get	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    virtual int get() { return value; }$/;"	f	class:TestFactory6
get	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    virtual int get() { return value; }$/;"	f	class:TestFactory7
get	python_bindings/pybind11/tests/test_factory_constructors.py	/^        def get(self):$/;"	m	class:test_init_factory_alias.MyTest
get	python_bindings/pybind11/tests/test_factory_constructors.py	/^        def get(self):$/;"	m	class:test_init_factory_dual.PythFactory7
get	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int get() const { return value; }$/;"	f	struct:TestProperties
get	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^        static const T *get(const ref<T> &p) { return p.get_ptr(); }$/;"	f	struct:pybind11::detail::holder_helper
get	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    T *get() { return ptr.get(); }$/;"	f	class:huge_unique_ptr
get	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    T* get() const { return impl.get(); }$/;"	f	class:custom_unique_ptr
get	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    T* get() const { return impl.get(); }$/;"	f	class:shared_ptr_with_addressof_operator
get	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    T* get() const { return impl.get(); }$/;"	f	class:unique_ptr_with_addressof_operator
get	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^        static const void *get(const itype *src, const std::type_info*& type)$/;"	f	struct:Animal::pybind11::polymorphic_type_hook
get	src/storage/array.cpp	/^TypedComponentRef Array::get(size_t index) const {$/;"	f	class:taco::Array
get	src/storage/typed_index.cpp	/^IndexTypeUnion TypedIndexRef::get() const {$/;"	f	class:taco::TypedIndexRef
get	src/storage/typed_index.cpp	/^IndexTypeUnion TypedIndexVal::get() const {$/;"	f	class:taco::TypedIndexVal
get	src/storage/typed_index.cpp	/^IndexTypeUnion& TypedIndexRef::get() {$/;"	f	class:taco::TypedIndexRef
get	src/storage/typed_index.cpp	/^IndexTypeUnion& TypedIndexVal::get() {$/;"	f	class:taco::TypedIndexVal
get	src/storage/typed_index.cpp	/^void* TypedIndexPtr::get() {$/;"	f	class:taco::TypedIndexPtr
get	src/storage/typed_value.cpp	/^ComponentTypeUnion TypedComponentRef::get() const {$/;"	f	class:taco::TypedComponentRef
get	src/storage/typed_value.cpp	/^ComponentTypeUnion TypedComponentVal::get() const {$/;"	f	class:taco::TypedComponentVal
get	src/storage/typed_value.cpp	/^ComponentTypeUnion& TypedComponentRef::get() {$/;"	f	class:taco::TypedComponentRef
get	src/storage/typed_value.cpp	/^ComponentTypeUnion& TypedComponentVal::get() {$/;"	f	class:taco::TypedComponentVal
get	src/storage/typed_value.cpp	/^const void* TypedComponentPtr::get() const {$/;"	f	class:taco::TypedComponentPtr
get	src/storage/typed_value.cpp	/^void* TypedComponentPtr::get() {$/;"	f	class:taco::TypedComponentPtr
get	test/gtest/gtest.h	/^      const typename ::std::tr1::tuple_element<I, Tuple>::type>::type get($/;"	f	struct:testing::internal::TuplePolicy
get	test/gtest/gtest.h	/^  T* get() const { return ptr_; }$/;"	f	struct:std::tr1::tuple_element
get	test/gtest/gtest.h	/^  T* get() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
get	test/gtest/gtest.h	/^  const T& get() const { return *pointer(); }$/;"	f	class:std::tr1::ThreadLocal
get	test/gtest/gtest.h	/^  const T& get() const { return value_; }$/;"	f	class:std::tr1::ThreadLocal
get	test/gtest/gtest.h	/^  static const typename ::std::tuple_element<I, Tuple>::type& get($/;"	f	struct:testing::internal::TuplePolicy
get1	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    const UserType &get1() const { return v1; }$/;"	f	struct:TestPropRVP
get2	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    const UserType &get2() const { return v2; }$/;"	f	struct:TestPropRVP
getA	src/index_notation/index_notation.cpp	/^IndexExpr Add::getA() const {$/;"	f	class:taco::Add
getA	src/index_notation/index_notation.cpp	/^IndexExpr Cast::getA() const {$/;"	f	class:taco::Cast
getA	src/index_notation/index_notation.cpp	/^IndexExpr Div::getA() const {$/;"	f	class:taco::Div
getA	src/index_notation/index_notation.cpp	/^IndexExpr Mul::getA() const {$/;"	f	class:taco::Mul
getA	src/index_notation/index_notation.cpp	/^IndexExpr Neg::getA() const {$/;"	f	class:taco::Neg
getA	src/index_notation/index_notation.cpp	/^IndexExpr Sqrt::getA() const {$/;"	f	class:taco::Sqrt
getA	src/index_notation/index_notation.cpp	/^IndexExpr Sub::getA() const {$/;"	f	class:taco::Sub
getAccess	src/index_notation/provenance_graph.cpp	/^const Access& PosRelNode::getAccess() const {$/;"	f	class:taco::PosRelNode
getAccess	src/lower/mode_access.cpp	/^Access ModeAccess::getAccess() const {$/;"	f	class:taco::ModeAccess
getAccess	src/lower/tensor_path.cpp	/^const Access& TensorPath::getAccess() const {$/;"	f	class:taco::TensorPath
getAccessCoordArray	src/index_notation/provenance_graph.cpp	/^ir::Expr PosRelNode::getAccessCoordArray(Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::PosRelNode
getAccessIterator	src/index_notation/provenance_graph.cpp	/^Iterator PosRelNode::getAccessIterator(Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::PosRelNode
getAccessNodes	src/error/error_checks.cpp	/^static vector<const AccessNode*> getAccessNodes(const IndexExpr& expr) {$/;"	f	namespace:taco::error
getAlgebra	src/index_notation/index_notation.cpp	/^const IterationAlgebra& Call::getAlgebra() const {$/;"	f	class:taco::Call
getAllIndexVars	src/index_notation/provenance_graph.cpp	/^std::set<IndexVar> ProvenanceGraph::getAllIndexVars() const {$/;"	f	class:taco::ProvenanceGraph
getAllocSize	src/tensor.cpp	/^size_t TensorBase::getAllocSize() const {$/;"	f	class:taco::TensorBase
getAncestors	src/lower/iteration_graph.cpp	/^vector<IndexVar> IterationGraph::getAncestors(const IndexVar& var) const {$/;"	f	class:taco::IterationGraph
getAppendCoord	src/lower/iterator.cpp	/^Stmt Iterator::getAppendCoord(const Expr& p, const Expr& i) const {$/;"	f	class:taco::Iterator
getAppendCoord	src/lower/mode_format_compressed.cpp	/^Stmt CompressedModeFormat::getAppendCoord(Expr p, Expr i, Mode mode) const {$/;"	f	class:taco::CompressedModeFormat
getAppendCoord	src/lower/mode_format_impl.cpp	/^Stmt ModeFormatImpl::getAppendCoord(Expr p, Expr i,$/;"	f	class:taco::ModeFormatImpl
getAppendCoord	src/lower/mode_format_singleton.cpp	/^Stmt SingletonModeFormat::getAppendCoord(Expr pos, Expr coord, $/;"	f	class:taco::SingletonModeFormat
getAppendEdges	src/lower/iterator.cpp	/^Stmt Iterator::getAppendEdges(const Expr& pPrev, const Expr& pBegin, $/;"	f	class:taco::Iterator
getAppendEdges	src/lower/mode_format_compressed.cpp	/^Stmt CompressedModeFormat::getAppendEdges(Expr pPrev, Expr pBegin, Expr pEnd, $/;"	f	class:taco::CompressedModeFormat
getAppendEdges	src/lower/mode_format_impl.cpp	/^Stmt ModeFormatImpl::getAppendEdges(Expr pPrev, Expr pBegin,$/;"	f	class:taco::ModeFormatImpl
getAppendFinalizeLevel	src/lower/iterator.cpp	/^Stmt Iterator::getAppendFinalizeLevel(const Expr& szPrev, const Expr& sz) const{$/;"	f	class:taco::Iterator
getAppendFinalizeLevel	src/lower/mode_format_compressed.cpp	/^Stmt CompressedModeFormat::getAppendFinalizeLevel(Expr szPrev, $/;"	f	class:taco::CompressedModeFormat
getAppendFinalizeLevel	src/lower/mode_format_impl.cpp	/^Stmt ModeFormatImpl::getAppendFinalizeLevel(Expr szPrev,$/;"	f	class:taco::ModeFormatImpl
getAppendFinalizeLevel	src/lower/mode_format_singleton.cpp	/^Stmt SingletonModeFormat::getAppendFinalizeLevel(Expr parentSize, Expr size, $/;"	f	class:taco::SingletonModeFormat
getAppendInitEdges	src/lower/iterator.cpp	/^Stmt Iterator::getAppendInitEdges(const Expr& pPrevBegin, $/;"	f	class:taco::Iterator
getAppendInitEdges	src/lower/mode_format_compressed.cpp	/^Stmt CompressedModeFormat::getAppendInitEdges(Expr pPrevBegin, $/;"	f	class:taco::CompressedModeFormat
getAppendInitEdges	src/lower/mode_format_impl.cpp	/^Stmt ModeFormatImpl::getAppendInitEdges(Expr pPrevBegin,$/;"	f	class:taco::ModeFormatImpl
getAppendInitLevel	src/lower/iterator.cpp	/^Stmt Iterator::getAppendInitLevel(const Expr& szPrev, const Expr& sz) const {$/;"	f	class:taco::Iterator
getAppendInitLevel	src/lower/mode_format_compressed.cpp	/^Stmt CompressedModeFormat::getAppendInitLevel(Expr szPrev, Expr sz,$/;"	f	class:taco::CompressedModeFormat
getAppendInitLevel	src/lower/mode_format_impl.cpp	/^Stmt ModeFormatImpl::getAppendInitLevel(Expr szPrev,$/;"	f	class:taco::ModeFormatImpl
getAppendInitLevel	src/lower/mode_format_singleton.cpp	/^Stmt SingletonModeFormat::getAppendInitLevel(Expr parentSize, Expr size,$/;"	f	class:taco::SingletonModeFormat
getAppenders	src/lower/iterator.cpp	/^std::vector<Iterator> getAppenders(const std::vector<Iterator>& iterators) {$/;"	f	namespace:taco
getArgs	src/index_notation/index_notation.cpp	/^const std::vector<IndexExpr>& Call::getArgs() const {$/;"	f	class:taco::Call
getArgs	src/index_notation/index_notation.cpp	/^const std::vector<IndexExpr>& CallIntrinsic::getArgs() const {$/;"	f	class:taco::CallIntrinsic
getArgument	test/tests-lower.cpp	/^  TensorStorage getArgument(TensorVar var, Format format) const {$/;"	f	struct:taco::test::TestCase
getArgumentAccesses	src/index_notation/index_notation.cpp	/^std::vector<Access> getArgumentAccesses(IndexStmt stmt)$/;"	f	namespace:taco
getArguments	src/index_notation/index_notation.cpp	/^vector<TensorVar> getArguments(IndexStmt stmt) {$/;"	f	namespace:taco
getArray	src/lower/mode.cpp	/^ir::Expr ModePack::getArray(size_t i) const {$/;"	f	class:taco::ModePack
getArrays	src/lower/mode_format_compressed.cpp	/^vector<Expr> CompressedModeFormat::getArrays(Expr tensor, int mode, $/;"	f	class:taco::CompressedModeFormat
getArrays	src/lower/mode_format_dense.cpp	/^vector<Expr> DenseModeFormat::getArrays(Expr tensor, int mode, $/;"	f	class:taco::DenseModeFormat
getArrays	src/lower/mode_format_singleton.cpp	/^std::vector<Expr> SingletonModeFormat::getArrays(Expr tensor, int mode, $/;"	f	class:taco::SingletonModeFormat
getArrays	test/tests-merge_lattice.cpp	/^  vector<ir::Expr> getArrays(ir::Expr tensor, int mode, int level) const {$/;"	f	class:tests::HashedModeFormat
getAsIndex	src/storage/typed_index.cpp	/^size_t TypedIndex::getAsIndex(const IndexTypeUnion& mem) const {$/;"	f	class:taco::TypedIndex
getAsIndex	src/storage/typed_index.cpp	/^size_t TypedIndexRef::getAsIndex() const {$/;"	f	class:taco::TypedIndexRef
getAsIndex	src/storage/typed_index.cpp	/^size_t TypedIndexVal::getAsIndex() const {$/;"	f	class:taco::TypedIndexVal
getAsIndex	src/storage/typed_value.cpp	/^size_t TypedComponent::getAsIndex(const ComponentTypeUnion mem) const {$/;"	f	class:taco::TypedComponent
getAsIndex	src/storage/typed_value.cpp	/^size_t TypedComponentRef::getAsIndex() const {$/;"	f	class:taco::TypedComponentRef
getAsIndex	src/storage/typed_value.cpp	/^size_t TypedComponentVal::getAsIndex() const {$/;"	f	class:taco::TypedComponentVal
getAssignment	src/tensor.cpp	/^Assignment TensorBase::getAssignment() const {$/;"	f	class:taco::TensorBase
getAssignmentContainingExpr	src/index_notation/transformations.cpp	/^static Assignment getAssignmentContainingExpr(IndexStmt stmt, IndexExpr expr) {$/;"	f	namespace:taco
getAtomicPragma	src/codegen/codegen_c.cpp	/^static string getAtomicPragma() {$/;"	f	namespace:taco::ir
getAtomicPragma	src/codegen/codegen_cuda.cpp	/^static string getAtomicPragma() {$/;"	f	namespace:taco::ir
getAvailableExpressions	src/lower/expr_tools.cpp	/^vector<IndexExpr> getAvailableExpressions(const IndexExpr& expr,$/;"	f	namespace:taco
getB	src/index_notation/index_notation.cpp	/^IndexExpr Add::getB() const {$/;"	f	class:taco::Add
getB	src/index_notation/index_notation.cpp	/^IndexExpr Div::getB() const {$/;"	f	class:taco::Div
getB	src/index_notation/index_notation.cpp	/^IndexExpr Mul::getB() const {$/;"	f	class:taco::Mul
getB	src/index_notation/index_notation.cpp	/^IndexExpr Sub::getB() const {$/;"	f	class:taco::Sub
getBeginVar	src/lower/iterator.cpp	/^Expr Iterator::getBeginVar() const {$/;"	f	class:taco::Iterator
getBoolValue	src/ir/ir.cpp	/^bool Literal::getBoolValue() const {$/;"	f	class:taco::ir::Literal
getBound	src/index_notation/provenance_graph.cpp	/^const size_t& BoundRelNode::getBound() const {$/;"	f	class:taco::BoundRelNode
getBoundType	src/index_notation/provenance_graph.cpp	/^const BoundType& BoundRelNode::getBoundType() const {$/;"	f	class:taco::BoundRelNode
getBoundVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& BoundRelNode::getBoundVar() const {$/;"	f	class:taco::BoundRelNode
getCSCArrays	include/taco/tensor.h	/^void getCSCArrays(const TensorBase& tensor,$/;"	f	namespace:taco
getCSRArrays	include/taco/tensor.h	/^void getCSRArrays(const TensorBase& tensor,$/;"	f	namespace:taco
getCapacityVar	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::getCapacityVar(Expr tensor) const {$/;"	f	class:taco::LowererImpl
getChild	src/lower/iterator.cpp	/^const Iterator Iterator::getChild() const {$/;"	f	class:taco::Iterator
getChildren	include/taco/index_notation/provenance_graph.h	/^  virtual std::vector<IndexVar> getChildren() const {$/;"	f	struct:taco::IndexVarRelNode
getChildren	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> BoundRelNode::getChildren() const {$/;"	f	class:taco::BoundRelNode
getChildren	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> DivideRelNode::getChildren() const {$/;"	f	class:taco::DivideRelNode
getChildren	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> FuseRelNode::getChildren() const {$/;"	f	class:taco::FuseRelNode
getChildren	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> PosRelNode::getChildren() const {$/;"	f	class:taco::PosRelNode
getChildren	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> PrecomputeRelNode::getChildren() const {$/;"	f	class:taco::PrecomputeRelNode
getChildren	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> ProvenanceGraph::getChildren(IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
getChildren	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> SplitRelNode::getChildren() const {$/;"	f	class:taco::SplitRelNode
getChildren	src/lower/iteration_forest.cpp	/^IterationForest::getChildren(const IndexVar& var) const {$/;"	f	class:taco::IterationForest
getChildren	src/lower/iteration_graph.cpp	/^IterationGraph::getChildren(const IndexVar& var) const {$/;"	f	class:taco::IterationGraph
getComplexValue	src/ir/ir.cpp	/^std::complex<double> Literal::getComplexValue() const {$/;"	f	class:taco::ir::Literal
getComponentType	src/storage/storage.cpp	/^Datatype TensorStorage::getComponentType() const {$/;"	f	class:taco::TensorStorage
getComponentType	src/tensor.cpp	/^const Datatype& TensorBase::getComponentType() const {$/;"	f	class:taco::TensorBase
getComputeKernel	src/tensor.cpp	/^std::shared_ptr<Module> TensorBase::getComputeKernel(const IndexStmt stmt) {$/;"	f	class:taco::TensorBase
getConsumer	src/index_notation/index_notation.cpp	/^IndexStmt Where::getConsumer() {$/;"	f	class:taco::Where
getCoordArray	src/lower/mode_format_compressed.cpp	/^Expr CompressedModeFormat::getCoordArray(ModePack pack) const {$/;"	f	class:taco::CompressedModeFormat
getCoordArray	src/lower/mode_format_singleton.cpp	/^Expr SingletonModeFormat::getCoordArray(ModePack pack) const {$/;"	f	class:taco::SingletonModeFormat
getCoordCapacity	src/lower/mode_format_compressed.cpp	/^Expr CompressedModeFormat::getCoordCapacity(Mode mode) const {$/;"	f	class:taco::CompressedModeFormat
getCoordCapacity	src/lower/mode_format_singleton.cpp	/^Expr SingletonModeFormat::getCoordCapacity(Mode mode) const {$/;"	f	class:taco::SingletonModeFormat
getCoordVar	src/lower/iterator.cpp	/^Expr Iterator::getCoordVar() const {$/;"	f	class:taco::Iterator
getCoordinateTypeIdx	src/format.cpp	/^Datatype Format::getCoordinateTypeIdx(size_t level) const {$/;"	f	class:taco::Format
getCoordinateTypePos	src/format.cpp	/^Datatype Format::getCoordinateTypePos(size_t level) const {$/;"	f	class:taco::Format
getCoordinateVar	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::getCoordinateVar(IndexVar indexVar) const {$/;"	f	class:taco::LowererImpl
getCoordinateVar	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::getCoordinateVar(Iterator iterator) const {$/;"	f	class:taco::LowererImpl
getData	src/storage/array.cpp	/^const void* Array::getData() const {$/;"	f	class:taco::Array
getData	src/storage/array.cpp	/^void* Array::getData() {$/;"	f	class:taco::Array
getDataType	src/index_notation/index_notation.cpp	/^Datatype IndexExpr::getDataType() const {$/;"	f	class:taco::IndexExpr
getDataType	src/index_notation/index_notation_nodes_abstract.cpp	/^Datatype IndexExprNode::getDataType() const {$/;"	f	class:taco::IndexExprNode
getDataType	src/type.cpp	/^Datatype Type::getDataType() const {$/;"	f	class:taco::Type
getDataTypes	src/index_notation/index_notation_nodes.cpp	/^static std::vector<Datatype> getDataTypes(const std::vector<T> args) {$/;"	f	namespace:taco
getDefinedArgs	src/index_notation/index_notation.cpp	/^const std::vector<int>& Call::getDefinedArgs() const {$/;"	f	class:taco::Call
getDefinition	src/index_notation/index_notation.cpp	/^IndexStmt Sequence::getDefinition() const {$/;"	f	class:taco::Sequence
getDefs	src/index_notation/index_notation.cpp	/^const std::map<std::vector<int>, CallNode::OpImpl> Call::getDefs() const {$/;"	f	class:taco::Call
getDependentTensors	src/tensor.cpp	/^vector<TensorBase> TensorBase::getDependentTensors() {$/;"	f	class:taco::TensorBase
getDerivedVar	src/lower/iterator.cpp	/^Expr Iterator::getDerivedVar() const {$/;"	f	class:taco::Iterator
getDescendants	src/lower/iteration_graph.cpp	/^vector<IndexVar> IterationGraph::getDescendants(const IndexVar& var) const{$/;"	f	class:taco::IterationGraph
getDimension	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::getDimension(IndexVar indexVar) const {$/;"	f	class:taco::LowererImpl
getDimension	src/tensor.cpp	/^int TensorBase::getDimension(int mode) const {$/;"	f	class:taco::TensorBase
getDimension	src/type.cpp	/^Dimension Shape::getDimension(size_t i) const {$/;"	f	class:taco::Shape
getDimensions	src/storage/storage.cpp	/^const vector<int>& TensorStorage::getDimensions() const {$/;"	f	class:taco::TensorStorage
getDimensions	src/tensor.cpp	/^const vector<int>& TensorBase::getDimensions() const {$/;"	f	class:taco::TensorBase
getDimensions	test/tests-lower.cpp	/^  vector<int> getDimensions(TensorVar var) const {$/;"	f	struct:taco::test::TestCase
getDivFactor	src/index_notation/provenance_graph.cpp	/^const size_t& DivideRelNode::getDivFactor() const {$/;"	f	class:taco::DivideRelNode
getEndVar	src/lower/iterator.cpp	/^Expr Iterator::getEndVar() const {$/;"	f	class:taco::Iterator
getExhaustedAccesses	src/lower/lowerer_impl.cpp	/^set<Access> LowererImpl::getExhaustedAccesses(MergePoint point,$/;"	f	class:taco::LowererImpl
getExpected	test/tests-lower.cpp	/^  TensorStorage getExpected(TensorVar var, Format format) const {$/;"	f	struct:taco::test::TestCase
getExpectedIndices	test/tests-api.cpp	/^  const Indices& getExpectedIndices() const {$/;"	f	class:APIMatrixStorageTestData
getExpectedValues	test/tests-api.cpp	/^  const vector<double>& getExpectedValues() const {$/;"	f	class:APIMatrixStorageTestData
getExpr	src/index_notation/index_notation.cpp	/^IndexExpr Reduction::getExpr() const {$/;"	f	class:taco::Reduction
getExpr	src/index_notation/index_notation.cpp	/^IndexExpr Yield::getExpr() const {$/;"	f	class:taco::Yield
getExpr	src/index_notation/transformations.cpp	/^IndexExpr Precompute::getExpr() const {$/;"	f	class:taco::Precompute
getExtension	src/tensor.cpp	/^static string getExtension(string filename) {$/;"	f	namespace:taco
getFilename	test/tests-api.cpp	/^  string getFilename() const {$/;"	f	class:APIFileTestData
getFill	src/index_notation/index_notation.cpp	/^const Literal& TensorVar::getFill() const {$/;"	f	class:taco::TensorVar
getFillValue	src/storage/storage.cpp	/^Literal TensorStorage::getFillValue() {$/;"	f	class:taco::TensorStorage
getFillValue	src/tensor.cpp	/^Literal TensorBase::getFillValue() const {$/;"	f	class:taco::TensorBase
getFloatValue	src/ir/ir.cpp	/^double Literal::getFloatValue() const {$/;"	f	class:taco::ir::Literal
getFormat	src/index_notation/index_notation.cpp	/^const Format& TensorVar::getFormat() const {$/;"	f	class:taco::TensorVar
getFormat	src/storage/index.cpp	/^const Format& Index::getFormat() const {$/;"	f	class:taco::Index
getFormat	src/storage/storage.cpp	/^const Format& TensorStorage::getFormat() const {$/;"	f	class:taco::TensorStorage
getFormat	src/tensor.cpp	/^const Format& TensorBase::getFormat() const {$/;"	f	class:taco::TensorBase
getFreeVars	src/index_notation/index_notation.cpp	/^const std::vector<IndexVar>& Assignment::getFreeVars() const {$/;"	f	class:taco::Assignment
getFromEnv	include/taco/util/env.h	/^inline std::string getFromEnv(std::string flag, std::string dflt) {$/;"	f	namespace:taco::util
getFullyDerivedDescendants	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> ProvenanceGraph::getFullyDerivedDescendants(IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
getFunc	src/index_notation/index_notation.cpp	/^const CallNode::OpImpl Call::getFunc() const {$/;"	f	class:taco::Call
getFunc	src/index_notation/index_notation.cpp	/^const Intrinsic& CallIntrinsic::getFunc() const {$/;"	f	class:taco::CallIntrinsic
getFuncPtr	src/codegen/module.cpp	/^void* Module::getFuncPtr(std::string name) {$/;"	f	class:taco::ir::Module
getFusedVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& FuseRelNode::getFusedVar() const {$/;"	f	class:taco::FuseRelNode
getGraph	src/lower/iteration_forest.cpp	/^getGraph(const vector<TensorPath>& tensorPaths) {$/;"	f	namespace:taco
getHelperFunctions	src/tensor.cpp	/^TensorBase::getHelperFunctions(const Format& format, Datatype ctype,$/;"	f	class:taco::TensorBase
getId	src/index_notation/index_notation.cpp	/^int TensorVar::getId() const {$/;"	f	class:taco::TensorVar
getIdentifier	src/parser/lexer.cpp	/^std::string Lexer::getIdentifier() const {$/;"	f	class:taco::parser::Lexer
getIndex	src/storage/storage.cpp	/^Index TensorStorage::getIndex() {$/;"	f	class:taco::TensorStorage
getIndex	src/storage/storage.cpp	/^const Index& TensorStorage::getIndex() const {$/;"	f	class:taco::TensorStorage
getIndexArray	src/storage/index.cpp	/^Array ModeIndex::getIndexArray(int i) {$/;"	f	class:taco::ModeIndex
getIndexArray	src/storage/index.cpp	/^const Array& ModeIndex::getIndexArray(int i) const {$/;"	f	class:taco::ModeIndex
getIndexExpr	src/lower/iteration_graph.cpp	/^const IndexExpr& IterationGraph::getIndexExpr(const IndexVar&) const {$/;"	f	class:taco::IterationGraph
getIndexSet	src/index_notation/index_notation.cpp	/^const std::vector<int>& Access::getIndexSet(int mode) const {$/;"	f	class:taco::Access
getIndexSet	src/index_notation/index_notation.cpp	/^const std::vector<int>& IndexSetVar::getIndexSet() const {$/;"	f	class:taco::IndexSetVar
getIndexSetIterator	src/lower/iterator.cpp	/^Iterator Iterator::getIndexSetIterator() const {$/;"	f	class:taco::Iterator
getIndexVar	src/index_notation/index_notation.cpp	/^IndexVar Forall::getIndexVar() const {$/;"	f	class:taco::Forall
getIndexVar	src/index_notation/index_notation.cpp	/^IndexVar IndexSetVar::getIndexVar() const {$/;"	f	class:taco::IndexSetVar
getIndexVar	src/index_notation/index_notation.cpp	/^IndexVar WindowedIndexVar::getIndexVar() const {$/;"	f	class:taco::WindowedIndexVar
getIndexVar	src/lower/iterator.cpp	/^IndexVar Iterator::getIndexVar() const {$/;"	f	class:taco::Iterator
getIndexVar	src/parser/parser.cpp	/^IndexVar Parser::getIndexVar(string name) const {$/;"	f	class:taco::parser::Parser
getIndexVarDomains	src/index_notation/index_notation.cpp	/^map<IndexVar,Dimension> IndexStmt::getIndexVarDomains() const {$/;"	f	class:taco::IndexStmt
getIndexVarSize	src/type.cpp	/^IndexVar Dimension::getIndexVarSize() const {$/;"	f	class:taco::Dimension
getIndexVarType	src/lower/iteration_graph.cpp	/^IndexVarType IterationGraph::getIndexVarType(const IndexVar& var) const {$/;"	f	class:taco::IterationGraph
getIndexVars	python_bindings/src/pyIndexNotation.cpp	/^static std::vector<IndexVar> getIndexVars(int n){$/;"	f	namespace:taco::pythonBindings
getIndexVars	src/index_notation/index_notation.cpp	/^const std::vector<IndexVar>& Access::getIndexVars() const {$/;"	f	class:taco::Access
getIndexVars	src/index_notation/index_notation.cpp	/^const std::vector<IndexVar>& Yield::getIndexVars() const {$/;"	f	class:taco::Yield
getIndexVars	src/index_notation/index_notation.cpp	/^std::vector<IndexVar> IndexStmt::getIndexVars() const {$/;"	f	class:taco::IndexStmt
getIndexVars	src/index_notation/index_notation.cpp	/^vector<IndexVar> getIndexVars(IndexExpr expr) {$/;"	f	namespace:taco
getIndexVars	src/index_notation/index_notation.cpp	/^vector<IndexVar> getIndexVars(IndexStmt stmt) {$/;"	f	namespace:taco
getInnerParentVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& FuseRelNode::getInnerParentVar() const {$/;"	f	class:taco::FuseRelNode
getInnerVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& DivideRelNode::getInnerVar() const {$/;"	f	class:taco::DivideRelNode
getInnerVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& SplitRelNode::getInnerVar() const {$/;"	f	class:taco::SplitRelNode
getInsertCoord	src/lower/iterator.cpp	/^Stmt Iterator::getInsertCoord(const Expr& p, const std::vector<Expr>& coords) const {$/;"	f	class:taco::Iterator
getInsertCoord	src/lower/mode_format_dense.cpp	/^Stmt DenseModeFormat::getInsertCoord(Expr p, $/;"	f	class:taco::DenseModeFormat
getInsertCoord	src/lower/mode_format_impl.cpp	/^Stmt ModeFormatImpl::getInsertCoord(Expr p,$/;"	f	class:taco::ModeFormatImpl
getInsertFinalizeLevel	src/lower/iterator.cpp	/^Stmt Iterator::getInsertFinalizeLevel(const Expr& szPrev, const Expr& sz) const{$/;"	f	class:taco::Iterator
getInsertFinalizeLevel	src/lower/mode_format_dense.cpp	/^Stmt DenseModeFormat::getInsertFinalizeLevel(Expr szPrev, $/;"	f	class:taco::DenseModeFormat
getInsertFinalizeLevel	src/lower/mode_format_impl.cpp	/^Stmt ModeFormatImpl::getInsertFinalizeLevel(Expr szPrev,$/;"	f	class:taco::ModeFormatImpl
getInsertInitCoords	src/lower/iterator.cpp	/^Stmt Iterator::getInsertInitCoords(const Expr& pBegin, const Expr& pEnd) const {$/;"	f	class:taco::Iterator
getInsertInitCoords	src/lower/mode_format_dense.cpp	/^Stmt DenseModeFormat::getInsertInitCoords(Expr pBegin, $/;"	f	class:taco::DenseModeFormat
getInsertInitCoords	src/lower/mode_format_impl.cpp	/^Stmt ModeFormatImpl::getInsertInitCoords(Expr pBegin,$/;"	f	class:taco::ModeFormatImpl
getInsertInitLevel	src/lower/iterator.cpp	/^Stmt Iterator::getInsertInitLevel(const Expr& szPrev, const Expr& sz) const {$/;"	f	class:taco::Iterator
getInsertInitLevel	src/lower/mode_format_dense.cpp	/^Stmt DenseModeFormat::getInsertInitLevel(Expr szPrev, Expr sz, $/;"	f	class:taco::DenseModeFormat
getInsertInitLevel	src/lower/mode_format_impl.cpp	/^Stmt ModeFormatImpl::getInsertInitLevel(Expr szPrev,$/;"	f	class:taco::ModeFormatImpl
getInserters	src/lower/iterator.cpp	/^std::vector<Iterator> getInserters(const std::vector<Iterator>& iterators) {$/;"	f	namespace:taco
getIntValue	src/ir/ir.cpp	/^int64_t Literal::getIntValue() const {$/;"	f	class:taco::ir::Literal
getIrregularDescendant	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::getIrregularDescendant(IndexVar indexVar, IndexVar *irregularChild) const {$/;"	f	class:taco::ProvenanceGraph
getIrregulars	include/taco/index_notation/provenance_graph.h	/^  virtual std::vector<IndexVar> getIrregulars() const {$/;"	f	struct:taco::IndexVarRelNode
getIrregulars	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> BoundRelNode::getIrregulars() const {$/;"	f	class:taco::BoundRelNode
getIrregulars	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> DivideRelNode::getIrregulars() const {$/;"	f	class:taco::DivideRelNode
getIrregulars	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> FuseRelNode::getIrregulars() const {$/;"	f	class:taco::FuseRelNode
getIrregulars	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> PosRelNode::getIrregulars() const {$/;"	f	class:taco::PosRelNode
getIrregulars	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> PrecomputeRelNode::getIrregulars() const {$/;"	f	class:taco::PrecomputeRelNode
getIrregulars	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> SplitRelNode::getIrregulars() const {$/;"	f	class:taco::SplitRelNode
getIterator	src/lower/merge_lattice.cpp	/^  Iterator getIterator(Access access, IndexVar accessVar) {$/;"	f	class:taco::MergeLatticeBuilder
getIteratorVar	src/lower/iterator.cpp	/^Expr Iterator::getIteratorVar() const {$/;"	f	class:taco::Iterator
getIterators	src/lower/lowerer_impl.cpp	/^std::vector<Iterator> LowererImpl::getIterators(Access access) const {$/;"	f	class:taco::LowererImpl
getIteratorsFrom	src/lower/lowerer_impl.cpp	/^vector<Iterator> getIteratorsFrom(IndexVar var, $/;"	f	namespace:taco
getKind	src/type.cpp	/^Datatype::Kind Datatype::getKind() const {$/;"	f	class:taco::Datatype
getLastChar	src/parser/lexer.cpp	/^std::string Lexer::getLastChar() const {$/;"	f	class:taco::parser::Lexer
getLastStep	src/lower/tensor_path.cpp	/^TensorPathStep TensorPath::getLastStep() const {$/;"	f	class:taco::TensorPath
getLevel	src/lower/mode.cpp	/^int Mode::getLevel() const {$/;"	f	class:taco::Mode
getLevelArrayTypes	src/format.cpp	/^const std::vector<std::vector<Datatype>>& Format::getLevelArrayTypes() const {$/;"	f	class:taco::Format
getLhs	src/index_notation/index_notation.cpp	/^Access Assignment::getLhs() const {$/;"	f	class:taco::Assignment
getLoopLattice	src/lower/merge_lattice.cpp	/^MergeLattice MergeLattice::getLoopLattice() const {$/;"	f	class:taco::MergeLattice
getLowerBound	src/index_notation/index_notation.cpp	/^int WindowedIndexVar::getLowerBound() const {$/;"	f	class:taco::WindowedIndexVar
getLowererImpl	src/lower/lower.cpp	/^std::shared_ptr<LowererImpl> Lowerer::getLowererImpl() {$/;"	f	class:taco::Lowerer
getMessage	include/taco/parser/parser.h	/^  std::string getMessage() const {return msg;}$/;"	f	class:taco::parser::ParseError
getMode	src/lower/iterator.cpp	/^const Mode& Iterator::getMode() const {$/;"	f	class:taco::Iterator
getModeFormat	src/lower/mode.cpp	/^ModeFormat Mode::getModeFormat() const {$/;"	f	class:taco::Mode
getModeFormatPacks	src/format.cpp	/^const std::vector<ModeFormatPack>& Format::getModeFormatPacks() const {$/;"	f	class:taco::Format
getModeFormats	src/format.cpp	/^const std::vector<ModeFormat> Format::getModeFormats() const {$/;"	f	class:taco::Format
getModeFormats	src/format.cpp	/^const std::vector<ModeFormat>& ModeFormatPack::getModeFormats() const {$/;"	f	class:taco::ModeFormatPack
getModeIndex	src/storage/index.cpp	/^ModeIndex Index::getModeIndex(int i) {$/;"	f	class:taco::Index
getModeIndex	src/storage/index.cpp	/^const ModeIndex& Index::getModeIndex(int i) const {$/;"	f	class:taco::Index
getModeIndexSetTensor	src/index_notation/index_notation.cpp	/^TensorVar Access::getModeIndexSetTensor(int mode) const {$/;"	f	class:taco::Access
getModeIterators	src/lower/lowerer_impl.cpp	/^std::vector<Iterator> LowererImpl::getModeIterators(const std::vector<Iterator>& iters) {$/;"	f	class:taco::LowererImpl
getModeOrdering	src/format.cpp	/^const std::vector<int>& Format::getModeOrdering() const {$/;"	f	class:taco::Format
getModePack	src/lower/mode.cpp	/^ModePack Mode::getModePack() const {$/;"	f	class:taco::Mode
getModePos	src/lower/mode_access.cpp	/^size_t ModeAccess::getModePos() const {$/;"	f	class:taco::ModeAccess
getMutation	src/index_notation/index_notation.cpp	/^IndexStmt Sequence::getMutation() const {$/;"	f	class:taco::Sequence
getName	include/taco/index_notation/tensor_operator.h	/^  std::string getName() const { return this->name; }$/;"	f	class:taco::Func
getName	src/format.cpp	/^std::string ModeFormat::getName() const {$/;"	f	class:taco::ModeFormat
getName	src/index_notation/index_notation.cpp	/^const std::string Call::getName() const {$/;"	f	class:taco::Call
getName	src/index_notation/index_notation.cpp	/^std::string IndexVar::getName() const {$/;"	f	class:taco::IndexVar
getName	src/index_notation/index_notation.cpp	/^std::string TensorVar::getName() const {$/;"	f	class:taco::TensorVar
getName	src/index_notation/index_notation_nodes.cpp	/^std::string IndexVarNode::getName() const {$/;"	f	class:taco::IndexVarNode
getName	src/index_notation/intrinsic.cpp	/^std::string AbsIntrinsic::getName() const {$/;"	f	class:taco::AbsIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string AcosIntrinsic::getName() const {$/;"	f	class:taco::AcosIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string AcoshIntrinsic::getName() const {$/;"	f	class:taco::AcoshIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string AsinIntrinsic::getName() const {$/;"	f	class:taco::AsinIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string AsinhIntrinsic::getName() const {$/;"	f	class:taco::AsinhIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string Atan2Intrinsic::getName() const {$/;"	f	class:taco::Atan2Intrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string AtanIntrinsic::getName() const {$/;"	f	class:taco::AtanIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string AtanhIntrinsic::getName() const {$/;"	f	class:taco::AtanhIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string CbrtIntrinsic::getName() const {$/;"	f	class:taco::CbrtIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string CosIntrinsic::getName() const {$/;"	f	class:taco::CosIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string CoshIntrinsic::getName() const {$/;"	f	class:taco::CoshIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string CubeIntrinsic::getName() const {$/;"	f	class:taco::CubeIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string EqIntrinsic::getName() const {$/;"	f	class:taco::EqIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string ExpIntrinsic::getName() const {$/;"	f	class:taco::ExpIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string GtIntrinsic::getName() const {$/;"	f	class:taco::GtIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string GteIntrinsic::getName() const {$/;"	f	class:taco::GteIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string HeavisideIntrinsic::getName() const {$/;"	f	class:taco::HeavisideIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string Log10Intrinsic::getName() const {$/;"	f	class:taco::Log10Intrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string LogIntrinsic::getName() const {$/;"	f	class:taco::LogIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string LtIntrinsic::getName() const {$/;"	f	class:taco::LtIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string LteIntrinsic::getName() const {$/;"	f	class:taco::LteIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string MaxIntrinsic::getName() const {$/;"	f	class:taco::MaxIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string MinIntrinsic::getName() const {$/;"	f	class:taco::MinIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string ModIntrinsic::getName() const {$/;"	f	class:taco::ModIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string NeqIntrinsic::getName() const {$/;"	f	class:taco::NeqIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string NotIntrinsic::getName() const {$/;"	f	class:taco::NotIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string PowIntrinsic::getName() const {$/;"	f	class:taco::PowIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string SinIntrinsic::getName() const {$/;"	f	class:taco::SinIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string SinhIntrinsic::getName() const {$/;"	f	class:taco::SinhIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string SqrtIntrinsic::getName() const {$/;"	f	class:taco::SqrtIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string SquareIntrinsic::getName() const {$/;"	f	class:taco::SquareIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string TanIntrinsic::getName() const {$/;"	f	class:taco::TanIntrinsic
getName	src/index_notation/intrinsic.cpp	/^std::string TanhIntrinsic::getName() const {$/;"	f	class:taco::TanhIntrinsic
getName	src/lower/mode.cpp	/^std::string Mode::getName() const {$/;"	f	class:taco::Mode
getName	src/tensor.cpp	/^string TensorBase::getName() const {$/;"	f	class:taco::TensorBase
getNames	src/parser/parser.cpp	/^const std::vector<std::string> Parser::getNames() const{$/;"	f	class:taco::parser::Parser
getNextChar	src/parser/lexer.cpp	/^int Lexer::getNextChar() {$/;"	f	class:taco::parser::Lexer
getNode	include/taco/index_notation/index_notation_nodes.h	/^inline const typename I::Node* getNode(const I& stmt) {$/;"	f	namespace:taco
getNode	include/taco/index_notation/provenance_graph.h	/^  const IndexVarRelNode* getNode() const {$/;"	f	class:taco::IndexVarRel
getNode	include/taco/index_notation/provenance_graph.h	/^  const T* getNode() const {$/;"	f	class:taco::IndexVarRel
getNodes	src/lower/iteration_forest.cpp	/^std::vector<IndexVar> IterationForest::getNodes() const {$/;"	f	class:taco::IterationForest
getNpType	python_bindings/src/pyDatatypes.cpp	/^std::string getNpType(const taco::Datatype& dtype) {$/;"	f	namespace:taco::pythonBindings
getNumBits	src/type.cpp	/^int Datatype::getNumBits() const {$/;"	f	class:taco::Datatype
getNumBytes	src/type.cpp	/^int Datatype::getNumBytes() const {$/;"	f	class:taco::Datatype
getNumModes	src/lower/mode.cpp	/^size_t ModePack::getNumModes() const {$/;"	f	class:taco::ModePack
getOp	src/index_notation/index_notation.cpp	/^IndexExpr Reduction::getOp() const {$/;"	f	class:taco::Reduction
getOperator	src/index_notation/index_notation.cpp	/^IndexExpr Assignment::getOperator() const {$/;"	f	class:taco::Assignment
getOperatorString	include/taco/index_notation/index_notation_nodes.h	/^  std::string getOperatorString() const {$/;"	f	struct:taco::AddNode
getOperatorString	include/taco/index_notation/index_notation_nodes.h	/^  std::string getOperatorString() const {$/;"	f	struct:taco::DivNode
getOperatorString	include/taco/index_notation/index_notation_nodes.h	/^  std::string getOperatorString() const {$/;"	f	struct:taco::MulNode
getOperatorString	include/taco/index_notation/index_notation_nodes.h	/^  std::string getOperatorString() const {$/;"	f	struct:taco::SubNode
getOrder	include/taco/tensor.h	/^      size_t getOrder() const {$/;"	f	class:taco::TensorBase::const_iterator::Coordinates
getOrder	src/format.cpp	/^int Format::getOrder() const {$/;"	f	class:taco::Format
getOrder	src/index_notation/index_notation.cpp	/^int TensorVar::getOrder() const {$/;"	f	class:taco::TensorVar
getOrder	src/storage/storage.cpp	/^int TensorStorage::getOrder() const {$/;"	f	class:taco::TensorStorage
getOrder	src/tensor.cpp	/^int TensorBase::getOrder() const {$/;"	f	class:taco::TensorBase
getOrder	src/type.cpp	/^int Shape::getOrder() const {$/;"	f	class:taco::Shape
getOrder	src/type.cpp	/^int Type::getOrder() const {$/;"	f	class:taco::Type
getOuterParentVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& FuseRelNode::getOuterParentVar() const {$/;"	f	class:taco::FuseRelNode
getOuterVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& DivideRelNode::getOuterVar() const {$/;"	f	class:taco::DivideRelNode
getOuterVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& SplitRelNode::getOuterVar() const {$/;"	f	class:taco::SplitRelNode
getOutputRaceStrategy	src/index_notation/index_notation.cpp	/^OutputRaceStrategy Forall::getOutputRaceStrategy() const {$/;"	f	class:taco::Forall
getOutputRaceStrategy	src/index_notation/transformations.cpp	/^OutputRaceStrategy Parallelize::getOutputRaceStrategy() const {$/;"	f	class:taco::Parallelize
getPackLocation	src/lower/mode.cpp	/^size_t Mode::getPackLocation() const {$/;"	f	class:taco::Mode
getParallelUnit	src/index_notation/index_notation.cpp	/^ParallelUnit Forall::getParallelUnit() const {$/;"	f	class:taco::Forall
getParallelUnit	src/index_notation/transformations.cpp	/^ParallelUnit Parallelize::getParallelUnit() const {$/;"	f	class:taco::Parallelize
getParallelizePragma	src/codegen/codegen_c.cpp	/^static string getParallelizePragma(LoopKind kind) {$/;"	f	namespace:taco::ir
getParallelizePragma	src/codegen/codegen_cuda.cpp	/^static string getParallelizePragma(LoopKind kind) {$/;"	f	namespace:taco::ir
getParent	src/lower/iteration_forest.cpp	/^const IndexVar& IterationForest::getParent(const IndexVar& var) const {$/;"	f	class:taco::IterationForest
getParent	src/lower/iteration_graph.cpp	/^const IndexVar& IterationGraph::getParent(const IndexVar& var) const {$/;"	f	class:taco::IterationGraph
getParent	src/lower/iterator.cpp	/^const Iterator& Iterator::getParent() const {$/;"	f	class:taco::Iterator
getParentModeType	src/lower/mode.cpp	/^ModeFormat Mode::getParentModeType() const {$/;"	f	class:taco::Mode
getParentVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& BoundRelNode::getParentVar() const {$/;"	f	class:taco::BoundRelNode
getParentVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& DivideRelNode::getParentVar() const {$/;"	f	class:taco::DivideRelNode
getParentVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& PosRelNode::getParentVar() const {$/;"	f	class:taco::PosRelNode
getParentVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& PrecomputeRelNode::getParentVar() const {$/;"	f	class:taco::PrecomputeRelNode
getParentVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& SplitRelNode::getParentVar() const {$/;"	f	class:taco::SplitRelNode
getParents	include/taco/index_notation/provenance_graph.h	/^  virtual std::vector<IndexVar> getParents() const {$/;"	f	struct:taco::IndexVarRelNode
getParents	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> BoundRelNode::getParents() const {$/;"	f	class:taco::BoundRelNode
getParents	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> DivideRelNode::getParents() const {$/;"	f	class:taco::DivideRelNode
getParents	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> FuseRelNode::getParents() const {$/;"	f	class:taco::FuseRelNode
getParents	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> PosRelNode::getParents() const {$/;"	f	class:taco::PosRelNode
getParents	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> PrecomputeRelNode::getParents() const {$/;"	f	class:taco::PrecomputeRelNode
getParents	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> ProvenanceGraph::getParents(IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
getParents	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> SplitRelNode::getParents() const {$/;"	f	class:taco::SplitRelNode
getPath	src/lower/tensor_path.cpp	/^const TensorPath& TensorPathStep::getPath() const {$/;"	f	class:taco::TensorPathStep
getPattern	src/index_notation/transformations.cpp	/^std::vector<IndexVar> ForAllReplace::getPattern() const {$/;"	f	class:taco::ForAllReplace
getPosArray	src/lower/mode_format_compressed.cpp	/^Expr CompressedModeFormat::getPosArray(ModePack pack) const {$/;"	f	class:taco::CompressedModeFormat
getPosCapacity	src/lower/mode_format_compressed.cpp	/^Expr CompressedModeFormat::getPosCapacity(Mode mode) const {$/;"	f	class:taco::CompressedModeFormat
getPosIteratorAncestor	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::getPosIteratorAncestor(IndexVar indexVar, IndexVar *irregularChild) const {$/;"	f	class:taco::ProvenanceGraph
getPosIteratorDescendant	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::getPosIteratorDescendant(IndexVar indexVar, IndexVar *irregularChild) const {$/;"	f	class:taco::ProvenanceGraph
getPosIteratorFullyDerivedDescendant	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::getPosIteratorFullyDerivedDescendant(IndexVar indexVar, IndexVar *irregularChild) const {$/;"	f	class:taco::ProvenanceGraph
getPosVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& PosRelNode::getPosVar() const {$/;"	f	class:taco::PosRelNode
getPosVar	src/lower/iterator.cpp	/^Expr Iterator::getPosVar() const {$/;"	f	class:taco::Iterator
getPrecompute	src/index_notation/schedule.cpp	/^Precompute Schedule::getPrecompute(IndexExpr expr) const {$/;"	f	class:taco::Schedule
getPrecomputeVar	src/index_notation/provenance_graph.cpp	/^const IndexVar& PrecomputeRelNode::getPrecomputeVar() const {$/;"	f	class:taco::PrecomputeRelNode
getPrecomputes	src/index_notation/schedule.cpp	/^std::vector<Precompute> Schedule::getPrecomputes() const {$/;"	f	class:taco::Schedule
getPredicate	src/index_notation/index_notation.cpp	/^std::vector<IndexVarRel> SuchThat::getPredicate() const {$/;"	f	class:taco::SuchThat
getPredicates	src/index_notation/transformations.cpp	/^std::vector<IndexVarRel> AddSuchThatPredicates::getPredicates() const {$/;"	f	class:taco::AddSuchThatPredicates
getProducer	src/index_notation/index_notation.cpp	/^IndexStmt Where::getProducer() {$/;"	f	class:taco::Where
getProducerOrOmitterRegions	src/lower/merge_lattice.cpp	/^  getProducerOrOmitterRegions(const std::vector<MergePoint>& points, bool getOmitters) {$/;"	f	class:taco::MergeLatticeBuilder	file:
getProperties	src/index_notation/index_notation.cpp	/^const std::vector<Property>& Call::getProperties() const {$/;"	f	class:taco::Call
getPtr	include/taco/index_notation/property_pointers.h	/^inline const typename P::Ptr* getPtr(const P& propertyPtr) {$/;"	f	namespace:taco
getReducedValueVar	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::getReducedValueVar(Access access) const {$/;"	f	class:taco::LowererImpl
getReductionVars	src/index_notation/index_notation.cpp	/^std::vector<IndexVar> Assignment::getReductionVars() const {$/;"	f	class:taco::Assignment
getReductionVars	src/index_notation/index_notation.cpp	/^std::vector<IndexVar> getReductionVars(IndexStmt stmt) {$/;"	f	namespace:taco
getRefCount	python_bindings/pybind11/tests/object.h	/^    int getRefCount() const { return m_refCount; };$/;"	f	class:Object
getRelType	src/index_notation/provenance_graph.cpp	/^IndexVarRelType IndexVarRel::getRelType() const {$/;"	f	class:taco::IndexVarRel
getReplacement	src/index_notation/transformations.cpp	/^std::vector<IndexVar> ForAllReplace::getReplacement() const {$/;"	f	class:taco::ForAllReplace
getResult	include/taco/util/timers.h	/^  TimeResults getResult() {$/;"	f	class:taco::util::Timer
getResult	src/index_notation/index_notation.cpp	/^TensorVar Where::getResult() {$/;"	f	class:taco::Where
getResult	test/tests-lower.cpp	/^  TensorStorage getResult(TensorVar var, Format format) const {$/;"	f	struct:taco::test::TestCase
getResultAccesses	src/index_notation/index_notation.cpp	/^pair<vector<Access>,set<Access>> getResultAccesses(IndexStmt stmt)$/;"	f	namespace:taco
getResultTensor	src/parser/einsum_parser.cpp	/^TensorBase& EinsumParser::getResultTensor() {$/;"	f	class:taco::parser::EinsumParser
getResultTensor	src/parser/parser.cpp	/^const TensorBase& Parser::getResultTensor() const {$/;"	f	class:taco::parser::Parser
getResultTensorPath	src/lower/iteration_graph.cpp	/^const TensorPath& IterationGraph::getResultTensorPath() const {$/;"	f	class:taco::IterationGraph
getResults	src/index_notation/index_notation.cpp	/^vector<TensorVar> getResults(IndexStmt stmt) {$/;"	f	namespace:taco
getResults	src/lower/mode_format_impl.cpp	/^const std::vector<ir::Expr>& ModeFunction::getResults() const {$/;"	f	class:taco::ModeFunction
getReturnType	src/ir/ir.cpp	/^std::pair<std::vector<Datatype>,Datatype> Function::getReturnType() const {$/;"	f	class:taco::ir::Function
getRhs	src/index_notation/index_notation.cpp	/^IndexExpr Assignment::getRhs() const {$/;"	f	class:taco::Assignment
getRoots	src/lower/iteration_forest.h	/^  const std::vector<IndexVar>& getRoots() const {return roots;}$/;"	f	class:taco::IterationForest
getRoots	src/lower/iteration_graph.cpp	/^const std::vector<IndexVar>& IterationGraph::getRoots() const {$/;"	f	class:taco::IterationGraph
getScalarValue	test/tests-qcd.cpp	/^double getScalarValue(Tensor<double> tensor) {$/;"	f
getSchedule	src/index_notation/index_notation.cpp	/^const Schedule& TensorVar::getSchedule() const {$/;"	f	class:taco::TensorVar
getSegendVar	src/lower/iterator.cpp	/^Expr Iterator::getSegendVar() const {$/;"	f	class:taco::Iterator
getShape	src/type.cpp	/^Shape Type::getShape() const {$/;"	f	class:taco::Type
getSize	src/lower/iterator.cpp	/^Expr Iterator::getSize(const ir::Expr& szPrev) const {$/;"	f	class:taco::Iterator
getSize	src/lower/mode.cpp	/^Dimension Mode::getSize() const {$/;"	f	class:taco::Mode
getSize	src/lower/mode_format_compressed.cpp	/^Expr CompressedModeFormat::getSize(ir::Expr szPrev, Mode mode) const {$/;"	f	class:taco::CompressedModeFormat
getSize	src/lower/mode_format_impl.cpp	/^Expr ModeFormatImpl::getSize(Expr szPrev, Mode mode) const {$/;"	f	class:taco::ModeFormatImpl
getSize	src/lower/mode_format_singleton.cpp	/^Expr SingletonModeFormat::getSize(ir::Expr parentSize, Mode mode) const {$/;"	f	class:taco::SingletonModeFormat
getSize	src/lower/tensor_path.cpp	/^size_t TensorPath::getSize() const {$/;"	f	class:taco::TensorPath
getSize	src/storage/array.cpp	/^size_t Array::getSize() const {$/;"	f	class:taco::Array
getSize	src/storage/index.cpp	/^size_t Index::getSize() const {$/;"	f	class:taco::Index
getSize	src/type.cpp	/^size_t Dimension::getSize() const {$/;"	f	class:taco::Dimension
getSize	test/tests-merge_lattice.cpp	/^  ir::Expr getSize(ir::Expr parentSize, Mode mode) const {$/;"	f	class:tests::HashedModeFormat
getSizeArray	src/lower/mode_format_dense.cpp	/^Expr DenseModeFormat::getSizeArray(ModePack pack) const {$/;"	f	class:taco::DenseModeFormat
getSizeInBytes	src/storage/storage.cpp	/^size_t TensorStorage::getSizeInBytes() {$/;"	f	class:taco::TensorStorage
getSource	src/codegen/module.cpp	/^string Module::getSource() {$/;"	f	class:taco::ir::Module
getSource	src/tensor.cpp	/^string TensorBase::getSource() const {$/;"	f	class:taco::TensorBase
getSplitFactor	src/index_notation/provenance_graph.cpp	/^const size_t& SplitRelNode::getSplitFactor() const {$/;"	f	class:taco::SplitRelNode
getStep	src/lower/tensor_path.cpp	/^TensorPathStep TensorPath::getStep(const IndexVar& var) const {$/;"	f	class:taco::TensorPath
getStep	src/lower/tensor_path.cpp	/^TensorPathStep TensorPath::getStep(size_t i) const {$/;"	f	class:taco::TensorPath
getStep	src/lower/tensor_path.cpp	/^int TensorPathStep::getStep() const {$/;"	f	class:taco::TensorPathStep
getStmt	src/index_notation/index_notation.cpp	/^IndexStmt Forall::getStmt() const {$/;"	f	class:taco::Forall
getStmt	src/index_notation/index_notation.cpp	/^IndexStmt SuchThat::getStmt() const {$/;"	f	class:taco::SuchThat
getStmt1	src/index_notation/index_notation.cpp	/^IndexStmt Multi::getStmt1() const {$/;"	f	class:taco::Multi
getStmt2	src/index_notation/index_notation.cpp	/^IndexStmt Multi::getStmt2() const {$/;"	f	class:taco::Multi
getStorage	src/tensor.cpp	/^TensorStorage& TensorBase::getStorage() {$/;"	f	class:taco::TensorBase
getStorage	src/tensor.cpp	/^const TensorStorage& TensorBase::getStorage() const {$/;"	f	class:taco::TensorBase
getStride	src/index_notation/index_notation.cpp	/^int Access::getStride(int mode) const {$/;"	f	class:taco::Access
getStride	src/index_notation/index_notation.cpp	/^int WindowedIndexVar::getStride() const {$/;"	f	class:taco::WindowedIndexVar
getStride	src/lower/iterator.cpp	/^ir::Expr Iterator::getStride() const {$/;"	f	class:taco::Iterator
getSubExpr	src/lower/expr_tools.cpp	/^IndexExpr getSubExpr(IndexExpr expr, const vector<IndexVar>& vars) {$/;"	f	namespace:taco
getSubExprOld	src/lower/expr_tools.cpp	/^IndexExpr getSubExprOld(IndexExpr expr, const vector<IndexVar>& vars) {$/;"	f	namespace:taco
getSubExpression	src/lower/expr_tools.cpp	/^  IndexExpr getSubExpression(const IndexExpr& expr) {$/;"	f	class:taco::SubExprVisitor
getTacoTensorT	src/tensor.cpp	/^taco_tensor_t* TensorBase::getTacoTensorT() {$/;"	f	class:taco::TensorBase
getTargetFromEnvironment	src/target.cpp	/^Target getTargetFromEnvironment() {$/;"	f	namespace:taco
getTemporaries	src/index_notation/index_notation.cpp	/^std::vector<TensorVar> getTemporaries(IndexStmt stmt) {$/;"	f	namespace:taco
getTemporary	src/index_notation/index_notation.cpp	/^TensorVar Where::getTemporary() {$/;"	f	class:taco::Where
getTemporaryLocations	src/index_notation/index_notation.cpp	/^std::map<Forall, Where> getTemporaryLocations(IndexStmt stmt) {$/;"	f	namespace:taco
getTemporarySize	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::getTemporarySize(Where where) {$/;"	f	class:taco::LowererImpl
getTensor	src/lower/iterator.cpp	/^Expr Iterator::getTensor() const {$/;"	f	class:taco::Iterator
getTensor	src/parser/parser.cpp	/^const TensorBase& Parser::getTensor(string name) const {$/;"	f	class:taco::parser::Parser
getTensor	test/tests-api.cpp	/^  TensorBase getTensor() const {$/;"	f	class:APIMatrixStorageTestData
getTensor	test/tests-api.cpp	/^  TensorBase getTensor(Format format) const {$/;"	f	class:APIFileTestData
getTensorExpr	src/lower/mode.cpp	/^ir::Expr Mode::getTensorExpr() const {$/;"	f	class:taco::Mode
getTensorPath	src/lower/iteration_graph.cpp	/^IterationGraph::getTensorPath(const IndexExpr& operand) const {$/;"	f	class:taco::IterationGraph
getTensorPaths	src/lower/iteration_graph.cpp	/^const vector<TensorPath>& IterationGraph::getTensorPaths() const {$/;"	f	class:taco::IterationGraph
getTensorRegionsToKeep	src/lower/merge_lattice.cpp	/^set<set<Iterator>> MergeLattice::getTensorRegionsToKeep() const {$/;"	f	class:taco::MergeLattice
getTensorVar	src/index_notation/index_notation.cpp	/^const TensorVar& Access::getTensorVar() const {$/;"	f	class:taco::Access
getTensorVar	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::getTensorVar(TensorVar tensorVar) const {$/;"	f	class:taco::LowererImpl
getTensorVar	src/tensor.cpp	/^const TensorVar& TensorBase::getTensorVar() const {$/;"	f	class:taco::TensorBase
getTensorVars	src/index_notation/index_notation.cpp	/^std::vector<TensorVar> getTensorVars(IndexStmt stmt) {$/;"	f	namespace:taco
getTensors	src/parser/parser.cpp	/^const std::map<std::string,TensorBase>& Parser::getTensors() const {$/;"	f	class:taco::parser::Parser
getTensors	src/tensor.cpp	/^static inline map<TensorVar, TensorBase> getTensors(const IndexExpr& expr) {$/;"	f	namespace:taco
getTmpdir	include/taco/util/env.h	/^inline std::string getTmpdir() {$/;"	f	namespace:taco::util
getToken	src/parser/lexer.cpp	/^Token Lexer::getToken() {$/;"	f	class:taco::parser::Lexer
getType	include/taco/storage/typed_vector.h	/^  Datatype getType() const {$/;"	f	class:taco::TypedVector
getType	src/index_notation/index_notation.cpp	/^const Type& TensorVar::getType() const {$/;"	f	class:taco::TensorVar
getType	src/storage/array.cpp	/^const Datatype& Array::getType() const {$/;"	f	class:taco::Array
getType	src/storage/typed_index.cpp	/^const Datatype& TypedIndex::getType() const {$/;"	f	class:taco::TypedIndex
getType	src/storage/typed_value.cpp	/^const Datatype& TypedComponent::getType() const {$/;"	f	class:taco::TypedComponent
getTypedVal	include/taco/ir/ir.h	/^  TypedComponentVal getTypedVal() const {$/;"	f	struct:taco::ir::Literal
getUIntValue	src/ir/ir.cpp	/^uint64_t Literal::getUIntValue() const {$/;"	f	class:taco::ir::Literal
getUnderivedAncestors	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> ProvenanceGraph::getUnderivedAncestors(IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
getUniqueEntries	src/storage/pack.cpp	/^static TypedIndexVector getUniqueEntries(TypedIndexVector v, $/;"	f	namespace:taco
getUniqueId	src/util/name_generator.cpp	/^int getUniqueId() {$/;"	f	namespace:taco::util
getUniqueName	src/util/name_generator.cpp	/^std::string NameGenerator::getUniqueName(std::string name) {$/;"	f	class:taco::util::NameGenerator
getUnrollFactor	src/index_notation/index_notation.cpp	/^size_t Forall::getUnrollFactor() const {$/;"	f	class:taco::Forall
getUnrollPragma	src/codegen/codegen_c.cpp	/^static string getUnrollPragma(size_t unrollFactor) {$/;"	f	namespace:taco::ir
getUnrollPragma	src/codegen/codegen_cuda.cpp	/^static string getUnrollPragma(size_t unrollFactor) {$/;"	f	namespace:taco::ir
getUpperBound	src/index_notation/index_notation.cpp	/^int WindowedIndexVar::getUpperBound() const {$/;"	f	class:taco::WindowedIndexVar
getVal	include/taco/index_notation/index_notation_nodes.h	/^  template <typename T> T getVal() const {$/;"	f	struct:taco::LiteralNode
getVal	src/index_notation/index_notation.cpp	/^template <typename T> T Literal::getVal() const {$/;"	f	class:taco::Literal
getValPtr	src/index_notation/index_notation.cpp	/^void* Literal::getValPtr() {$/;"	f	class:taco::Literal
getValidVar	src/lower/iterator.cpp	/^Expr Iterator::getValidVar() const {$/;"	f	class:taco::Iterator
getValue	include/taco/ir/ir.h	/^  T getValue() const {$/;"	f	struct:taco::ir::Literal
getValues	src/storage/storage.cpp	/^Array TensorStorage::getValues() {$/;"	f	class:taco::TensorStorage
getValues	src/storage/storage.cpp	/^const Array& TensorStorage::getValues() const {$/;"	f	class:taco::TensorStorage
getValuesArray	src/lower/lowerer_impl.cpp	/^ir::Expr LowererImpl::getValuesArray(TensorVar var) const$/;"	f	class:taco::LowererImpl
getVar	src/index_notation/index_notation.cpp	/^IndexVar Reduction::getVar() const {$/;"	f	class:taco::Reduction
getVar	src/lower/mode.cpp	/^ir::Expr Mode::getVar(std::string varName) const {$/;"	f	class:taco::Mode
getVariables	src/lower/tensor_path.cpp	/^const std::vector<IndexVar>& TensorPath::getVariables() const {$/;"	f	class:taco::TensorPath
getWidth	src/lower/iterator.cpp	/^Expr Iterator::getWidth() const {$/;"	f	class:taco::Iterator
getWidth	src/lower/mode_format_compressed.cpp	/^Expr CompressedModeFormat::getWidth(Mode mode) const {$/;"	f	class:taco::CompressedModeFormat
getWidth	src/lower/mode_format_dense.cpp	/^Expr DenseModeFormat::getWidth(Mode mode) const {$/;"	f	class:taco::DenseModeFormat
getWidth	src/lower/mode_format_impl.cpp	/^Expr ModeFormatImpl::getWidth(Mode mode) const {$/;"	f	class:taco::ModeFormatImpl
getWindowLowerBound	src/index_notation/index_notation.cpp	/^int Access::getWindowLowerBound(int mode) const {$/;"	f	class:taco::Access
getWindowLowerBound	src/lower/iterator.cpp	/^ir::Expr Iterator::getWindowLowerBound() const {$/;"	f	class:taco::Iterator
getWindowSize	src/index_notation/index_notation.cpp	/^int Access::getWindowSize(int mode) const {$/;"	f	class:taco::Access
getWindowSize	src/index_notation/index_notation.cpp	/^int WindowedIndexVar::getWindowSize() const {$/;"	f	class:taco::WindowedIndexVar
getWindowUpperBound	src/index_notation/index_notation.cpp	/^int Access::getWindowUpperBound(int mode) const {$/;"	f	class:taco::Access
getWindowUpperBound	src/lower/iterator.cpp	/^ir::Expr Iterator::getWindowUpperBound() const {$/;"	f	class:taco::Iterator
getWindowVar	src/lower/iterator.cpp	/^ir::Expr Iterator::getWindowVar() const {$/;"	f	class:taco::Iterator
getWorkspace	src/index_notation/index_notation_nodes_abstract.cpp	/^Precompute IndexExprNode::getWorkspace() const {$/;"	f	class:taco::IndexExprNode
getWorkspace	src/index_notation/transformations.cpp	/^TensorVar Precompute::getWorkspace() const {$/;"	f	class:taco::Precompute
get_and_replace	python_bindings/pybind11/setup.py	/^def get_and_replace(filename, binary=False, **opts):$/;"	f
get_await_result	python_bindings/pybind11/tests/test_async.py	/^async def get_await_result(x):$/;"	f
get_buffer	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    buffer_info *(*get_buffer)(PyObject *, void *) = nullptr;$/;"	m	struct:type_info
get_buffer_data	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    void *get_buffer_data = nullptr;$/;"	m	struct:type_info
get_cache	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object &get_cache() const {$/;"	f	class:accessor
get_cm	python_bindings/pybind11/tests/test_eigen.cpp	/^Eigen::MatrixXd &get_cm() {$/;"	f
get_cmake_dir	python_bindings/pybind11/pybind11/__init__.py	/^from .commands import get_include, get_cmake_dir$/;"	i
get_cmake_dir	python_bindings/pybind11/pybind11/__main__.py	/^from .commands import get_include, get_cmake_dir$/;"	i
get_cmake_dir	python_bindings/pybind11/pybind11/commands.py	/^def get_cmake_dir():$/;"	f
get_concrete_dtype_checks	python_bindings/pybind11/tests/test_numpy_array.cpp	/^std::vector<DtypeCheck> get_concrete_dtype_checks() {$/;"	f
get_default_CUDA_compiler_flags	src/cuda.cpp	/^string get_default_CUDA_compiler_flags() {$/;"	f	namespace:taco
get_double	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    double get_double() const { return ro_value; }$/;"	f	class:UnregisteredBase
get_dtype_check	python_bindings/pybind11/tests/test_numpy_array.cpp	/^DtypeCheck get_dtype_check(const char* name) {$/;"	f
get_dtype_size_check	python_bindings/pybind11/tests/test_numpy_array.cpp	/^DtypeSizeCheck get_dtype_size_check() {$/;"	f
get_duration	python_bindings/pybind11/include/pybind11/chrono.h	/^    static const std::chrono::duration<rep, period>& get_duration(const std::chrono::duration<rep, period> &src) {$/;"	f	class:duration_caster
get_duration	python_bindings/pybind11/include/pybind11/chrono.h	/^    template <typename Clock> static std::chrono::duration<rep, period> get_duration(const std::chrono::time_point<Clock, std::chrono::duration<rep, period>> &src) {$/;"	f	class:duration_caster
get_elem	python_bindings/pybind11/tests/test_eigen.cpp	/^double get_elem(Eigen::Ref<const Eigen::MatrixXd> m) { return m(2, 1); };$/;"	f
get_exception_object	python_bindings/pybind11/include/pybind11/pybind11.h	/^exception<CppException> &get_exception_object() { static exception<CppException> ex; return ex; }$/;"	f
get_fully_qualified_tp_name	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline std::string get_fully_qualified_tp_name(PyTypeObject *type) {$/;"	f
get_function	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline handle get_function(handle value) {$/;"	f
get_function_record	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static detail::function_record *get_function_record(handle h) {$/;"	f	class:class_
get_global_type_info	python_bindings/pybind11/include/pybind11/cast.h	/^inline detail::type_info *get_global_type_info(const std::type_index &tp) {$/;"	f
get_include	python_bindings/pybind11/pybind11/__init__.py	/^from .commands import get_include, get_cmake_dir$/;"	i
get_include	python_bindings/pybind11/pybind11/__main__.py	/^from .commands import get_include, get_cmake_dir$/;"	i
get_include	python_bindings/pybind11/pybind11/commands.py	/^def get_include(user=False):$/;"	f
get_int	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int get_int() const { return rw_value; }$/;"	f	class:UnregisteredBase
get_internals	python_bindings/pybind11/include/pybind11/detail/internals.h	/^PYBIND11_NOINLINE inline internals &get_internals() {$/;"	f
get_internals_pp	python_bindings/pybind11/include/pybind11/detail/internals.h	/^inline internals **&get_internals_pp() {$/;"	f
get_local_type_info	python_bindings/pybind11/include/pybind11/cast.h	/^inline detail::type_info *get_local_type_info(const std::type_index &tp) {$/;"	f
get_movable	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt
get_movable	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2
get_noncopyable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    virtual NonCopyable get_noncopyable(int a, int b) { return NonCopyable(a, b); }$/;"	f	class:NCVirt
get_noncopyable	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt
get_noncopyable	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2
get_numpy_internals	python_bindings/pybind11/include/pybind11/numpy.h	/^inline numpy_internals& get_numpy_internals() {$/;"	f
get_object_handle	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline handle get_object_handle(const void *ptr, const detail::type_info *type ) {$/;"	f
get_one	python_bindings/pybind11/tests/test_copy_move.cpp	/^    static const derived& get_one() { return instance_; }$/;"	f	struct:empty
get_or_create_shared_data	python_bindings/pybind11/include/pybind11/detail/internals.h	/^T &get_or_create_shared_data(const std::string &name) {$/;"	f
get_overload	python_bindings/pybind11/include/pybind11/pybind11.h	/^inline function get_overload(const T *this_ptr, const char *name) {$/;"	f
get_override	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <class T> function get_override(const T *this_ptr, const char *name) {$/;"	f
get_platform_dtype_size_checks	python_bindings/pybind11/tests/test_numpy_array.cpp	/^std::vector<DtypeSizeCheck> get_platform_dtype_size_checks() {$/;"	f
get_pointer	python_bindings/pybind11/include/pybind11/pytypes.h	/^    T* get_pointer() const {$/;"	f	class:capsule
get_ptr	python_bindings/pybind11/tests/object.h	/^    T* get_ptr() { return m_ptr; }$/;"	f	class:ref
get_ptr	python_bindings/pybind11/tests/object.h	/^    const T* get_ptr() const { return m_ptr; }$/;"	f	class:ref
get_rm	python_bindings/pybind11/tests/test_eigen.cpp	/^MatrixXdR &get_rm() {$/;"	f
get_rvalue	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    UserType get_rvalue() const { return v2; }$/;"	f	struct:TestPropRVP
get_shared_data	python_bindings/pybind11/include/pybind11/detail/internals.h	/^inline PYBIND11_NOINLINE void *get_shared_data(const std::string &name) {$/;"	f
get_string1	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    virtual const std::string &get_string1() { return str1; }$/;"	f	class:ExampleVirt
get_string1	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def get_string1(self):$/;"	m	class:test_override.ExtendedExampleVirt
get_string2	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    virtual const std::string *get_string2() { return &str2; }$/;"	f	class:ExampleVirt
get_string2	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def get_string2(self):$/;"	m	class:test_override.ExtendedExampleVirt2
get_thread_state_unchecked	python_bindings/pybind11/include/pybind11/cast.h	/^inline PyThreadState *get_thread_state_unchecked() {$/;"	f
get_type	python_bindings/pybind11/include/pybind11/pytypes.h	/^handle object_api<D>::get_type() const { return type::handle_of(derived()); }$/;"	f	class:object_api
get_type_handle	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline handle get_type_handle(const std::type_info &tp, bool throw_if_missing) {$/;"	f
get_type_info	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline detail::type_info *get_type_info(const std::type_index &tp,$/;"	f
get_type_info	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline detail::type_info* get_type_info(PyTypeObject *type) {$/;"	f
get_type_info	python_bindings/pybind11/include/pybind11/numpy.h	/^    numpy_type_info *get_type_info(const std::type_info& tinfo, bool throw_if_missing = true) {$/;"	f	struct:numpy_internals
get_type_info	python_bindings/pybind11/include/pybind11/numpy.h	/^    template<typename T> numpy_type_info *get_type_info(bool throw_if_missing = true) {$/;"	f	struct:numpy_internals
get_type_overload	python_bindings/pybind11/include/pybind11/pybind11.h	/^inline function get_type_overload(const void *this_ptr, const detail::type_info *this_type, const char *name) {$/;"	f
get_type_override	python_bindings/pybind11/include/pybind11/pybind11.h	/^inline function get_type_override(const void *this_ptr, const type_info *this_type, const char *name)  {$/;"	f
get_value	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    std::string get_value() const { return std::to_string(value); }$/;"	f	class:Movable
get_value	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    std::string get_value() const {$/;"	f	class:NonCopyable
get_value_and_holder	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline value_and_holder instance::get_value_and_holder(const type_info *find_type \/*= nullptr default in common.h*\/, bool throw_if_missing \/*= true in common.h*\/) {$/;"	f	class:instance
getattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline object getattr(handle obj, const char *name) {$/;"	f
getattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline object getattr(handle obj, const char *name, handle default_) {$/;"	f
getattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline object getattr(handle obj, handle name) {$/;"	f
getattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline object getattr(handle obj, handle name, handle default_) {$/;"	f
geti	src/index_notation/transformations.cpp	/^IndexVar Parallelize::geti() const {$/;"	f	class:taco::Parallelize
geti	src/index_notation/transformations.cpp	/^IndexVar Precompute::geti() const {$/;"	f	class:taco::Precompute
geti	src/index_notation/transformations.cpp	/^IndexVar Reorder::geti() const {$/;"	f	class:taco::Reorder
getiw	src/index_notation/transformations.cpp	/^IndexVar Precompute::getiw() const {$/;"	f	class:taco::Precompute
getj	src/index_notation/transformations.cpp	/^IndexVar Reorder::getj() const {$/;"	f	class:taco::Reorder
getrefcount	python_bindings/pybind11/tests/test_class.py	/^    from sys import getrefcount$/;"	i
getrefcount	python_bindings/pybind11/tests/test_numpy_array.py	/^    from sys import getrefcount$/;"	i
getrefcount	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^    from sys import getrefcount$/;"	i
getreplacepattern	src/index_notation/transformations.cpp	/^const std::vector<IndexVar>& Reorder::getreplacepattern() const {$/;"	f	class:taco::Reorder
ghapi	python_bindings/pybind11/tools/make_changelog.py	/^import ghapi.all$/;"	i
gil_acquire	python_bindings/pybind11/tests/cross_module_gil_utils.cpp	/^void gil_acquire() { py::gil_scoped_acquire gil; }$/;"	f	namespace:__anon14
gil_scoped_acquire	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire
gil_scoped_acquire	python_bindings/pybind11/include/pybind11/pybind11.h	/^    gil_scoped_acquire() { state = PyGILState_Ensure(); }$/;"	f	class:gil_scoped_acquire
gil_scoped_acquire	python_bindings/pybind11/include/pybind11/pybind11.h	/^class gil_scoped_acquire {$/;"	c
gil_scoped_release	python_bindings/pybind11/include/pybind11/pybind11.h	/^    explicit gil_scoped_release(bool disassoc = false) : disassoc(disassoc) {$/;"	f	class:gil_scoped_release
gil_scoped_release	python_bindings/pybind11/include/pybind11/pybind11.h	/^    gil_scoped_release() { state = PyEval_SaveThread(); }$/;"	f	class:gil_scoped_release
gil_scoped_release	python_bindings/pybind11/include/pybind11/pybind11.h	/^class gil_scoped_release {$/;"	c
global_sdist	python_bindings/pybind11/setup.py	/^global_sdist = os.environ.get("PYBIND11_GLOBAL_SDIST", False)$/;"	v
global_state	python_bindings/pybind11/include/pybind11/options.h	/^    static state &global_state() {$/;"	f	class:options
global_test_part_result_reporter_mutex_	test/gtest/gtest-all.cc	/^  internal::Mutex global_test_part_result_reporter_mutex_;$/;"	m	class:testing::internal::UnitTestImpl	file:
global_test_part_result_repoter_	test/gtest/gtest-all.cc	/^  TestPartResultReporterInterface* global_test_part_result_repoter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
globals	python_bindings/pybind11/include/pybind11/pybind11.h	/^inline dict globals() {$/;"	f
gpuAssert	src/cuda.cpp	/^  inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort=true)$/;"	f	namespace:taco
gpuAssertMacro	src/codegen/codegen_cuda.cpp	/^const string gpuAssertMacro =$/;"	m	namespace:taco::ir::__anon17	file:
gpuErrchk	src/cuda.cpp	/^  #define gpuErrchk(/;"	d	file:
green	src/ir/ir_printer.cpp	/^const std::string green="\\033[38;5;70m";$/;"	m	namespace:taco::ir	file:
gt	src/index_notation/index_notation.cpp	/^IndexExpr gt(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
gte	src/index_notation/index_notation.cpp	/^IndexExpr gte(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
gtest_flag_saver_	test/gtest/gtest.h	/^  const internal::GTestFlagSaver* const gtest_flag_saver_;$/;"	m	class:testing::Test::internal
gtest_internal	test/gtest/gtest.h	/^namespace gtest_internal {$/;"	n	namespace:std::tr1
gtest_trace_stack	test/gtest/gtest-all.cc	/^  const std::vector<TraceInfo>& gtest_trace_stack() const {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack	test/gtest/gtest-all.cc	/^  std::vector<TraceInfo>& gtest_trace_stack() {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack_	test/gtest/gtest-all.cc	/^  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;$/;"	m	class:testing::internal::UnitTestImpl	file:
h1	test/tests-merge_lattice.cpp	/^static Access h1 = h1t(i);$/;"	m	namespace:tests	file:
h2	test/tests-merge_lattice.cpp	/^static Access h2 = h2t(i);$/;"	m	namespace:tests	file:
h3	test/tests-merge_lattice.cpp	/^static Access h3 = h3t(i);$/;"	m	namespace:tests	file:
h4	test/tests-merge_lattice.cpp	/^static Access h4 = h4t(i);$/;"	m	namespace:tests	file:
handle	python_bindings/pybind11/include/pybind11/pytypes.h	/^    handle(PyObject *ptr) : m_ptr(ptr) { } \/\/ Allow implicit conversion from PyObject*$/;"	f	class:handle
handle	python_bindings/pybind11/include/pybind11/pytypes.h	/^class handle : public detail::object_api<handle> {$/;"	c
handle	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <> inline bool isinstance<handle>(handle) = delete;$/;"	v
handle_	test/gtest/gtest.h	/^  Handle handle_;$/;"	m	class:std::tr1::AutoHandle
handle_of	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static handle handle_of(handle h) { return handle((PyObject*) Py_TYPE(h.ptr())); }$/;"	f	class:type
handle_type_name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<args> { static constexpr auto name = _("*args"); };$/;"	s
handle_type_name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<bytes> { static constexpr auto name = _(PYBIND11_BYTES_NAME); };$/;"	s
handle_type_name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<int_> { static constexpr auto name = _("int"); };$/;"	s
handle_type_name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<iterable> { static constexpr auto name = _("Iterable"); };$/;"	s
handle_type_name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<iterator> { static constexpr auto name = _("Iterator"); };$/;"	s
handle_type_name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<kwargs> { static constexpr auto name = _("**kwargs"); };$/;"	s
handle_type_name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<none> { static constexpr auto name = _("None"); };$/;"	s
handle_type_name	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> struct handle_type_name { static constexpr auto name = _<T>(); };$/;"	s
handle_type_name	python_bindings/pybind11/include/pybind11/numpy.h	/^template <> struct handle_type_name<array> { static constexpr auto name = _("numpy.ndarray"); };$/;"	s
hasAppend	include/taco/lower/mode_format_impl.h	/^  const bool hasAppend;$/;"	m	class:taco::ModeFormatImpl
hasAppend	src/format.cpp	/^bool ModeFormat::hasAppend() const {$/;"	f	class:taco::ModeFormat
hasAppend	src/lower/iterator.cpp	/^bool Iterator::hasAppend() const {$/;"	f	class:taco::Iterator
hasCoordBounds	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::hasCoordBounds(IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
hasCoordIter	src/lower/iterator.cpp	/^bool Iterator::hasCoordIter() const {$/;"	f	class:taco::Iterator
hasCoordPosIter	include/taco/lower/mode_format_impl.h	/^  const bool hasCoordPosIter;$/;"	m	class:taco::ModeFormatImpl
hasCoordPosIter	src/format.cpp	/^bool ModeFormat::hasCoordPosIter() const {$/;"	f	class:taco::ModeFormat
hasCoordValIter	include/taco/lower/mode_format_impl.h	/^  const bool hasCoordValIter;$/;"	m	class:taco::ModeFormatImpl
hasCoordValIter	src/format.cpp	/^bool ModeFormat::hasCoordValIter() const {$/;"	f	class:taco::ModeFormat
hasCycle	src/error/error_checks.cpp	/^static bool hasCycle(const IndexVar& var,$/;"	f	namespace:taco::error
hasExactBound	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::hasExactBound(IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
hasFreeVariableDescendant	src/lower/iteration_graph.cpp	/^bool IterationGraph::hasFreeVariableDescendant(const IndexVar& var) const {$/;"	f	class:taco::IterationGraph
hasIndexSet	src/lower/iterator.cpp	/^bool Iterator::hasIndexSet() const {$/;"	f	class:taco::Iterator
hasIndexSetModes	src/index_notation/index_notation.cpp	/^bool Access::hasIndexSetModes() const {$/;"	f	class:taco::Access
hasIndexVar	src/parser/parser.cpp	/^bool Parser::hasIndexVar(std::string name) const {$/;"	f	class:taco::parser::Parser
hasInsert	include/taco/lower/mode_format_impl.h	/^  const bool hasInsert;$/;"	m	class:taco::ModeFormatImpl
hasInsert	src/format.cpp	/^bool ModeFormat::hasInsert() const {$/;"	f	class:taco::ModeFormat
hasInsert	src/lower/iterator.cpp	/^bool Iterator::hasInsert() const {$/;"	f	class:taco::Iterator
hasLocate	include/taco/lower/mode_format_impl.h	/^  const bool hasLocate;$/;"	m	class:taco::ModeFormatImpl
hasLocate	src/format.cpp	/^bool ModeFormat::hasLocate() const {$/;"	f	class:taco::ModeFormat
hasLocate	src/lower/iterator.cpp	/^bool Iterator::hasLocate() const {$/;"	f	class:taco::Iterator
hasNoForAlls	src/index_notation/index_notation.cpp	/^bool hasNoForAlls(IndexStmt stmt) {$/;"	f	namespace:taco
hasParent	src/lower/iteration_forest.cpp	/^bool IterationForest::hasParent(const IndexVar& var) const {$/;"	f	class:taco::IterationForest
hasPosDescendant	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::hasPosDescendant(taco::IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
hasPosIter	src/lower/iterator.cpp	/^bool Iterator::hasPosIter() const {$/;"	f	class:taco::Iterator
hasProperties	src/format.cpp	/^bool ModeFormat::hasProperties(const std::vector<Property>& properties) const {$/;"	f	class:taco::ModeFormat
hasReductionVariableAncestor	src/lower/iteration_graph.cpp	/^bool IterationGraph::hasReductionVariableAncestor(const IndexVar& var) const {$/;"	f	class:taco::IterationGraph
hasSparseInserts	src/lower/lowerer_impl.cpp	/^bool hasSparseInserts(const std::vector<Iterator>& resultIterators,$/;"	f	namespace:taco
hasStores	src/lower/lowerer_impl.cpp	/^static bool hasStores(Stmt stmt) {$/;"	f	namespace:taco
hasTensor	src/parser/parser.cpp	/^bool Parser::hasTensor(std::string name) const {$/;"	f	class:taco::parser::Parser
hasVar	src/lower/mode.cpp	/^bool Mode::hasVar(std::string varName) const {$/;"	f	class:taco::Mode
hasWindowedModes	src/index_notation/index_notation.cpp	/^bool Access::hasWindowedModes() const {$/;"	f	class:taco::Access
has_alias	python_bindings/pybind11/include/pybind11/pybind11.h	/^    constexpr static bool has_alias = !std::is_void<type_alias>::value;$/;"	m	class:class_
has_alias	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    bool has_alias() { return alias; }$/;"	f	class:TestFactory6
has_alias	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    bool has_alias() { return alias; }$/;"	f	class:TestFactory7
has_args	python_bindings/pybind11/include/pybind11/attr.h	/^    bool has_args : 1;$/;"	m	struct:function_record
has_fields	python_bindings/pybind11/include/pybind11/numpy.h	/^    bool has_fields() const {$/;"	f
has_flag	python_bindings/pybind11/pybind11/setup_helpers.py	/^def has_flag(compiler, flag):$/;"	f
has_kw_only_args	python_bindings/pybind11/include/pybind11/attr.h	/^    bool has_kw_only_args : 1;$/;"	m	struct:function_record
has_kwargs	python_bindings/pybind11/include/pybind11/attr.h	/^    bool has_kwargs : 1;$/;"	m	struct:function_record
has_new_fatal_failure	test/gtest/gtest.h	/^  bool has_new_fatal_failure() const { return has_new_fatal_failure_; }$/;"	f	class:testing::internal::HasNewFatalFailureHelper
has_new_fatal_failure_	test/gtest/gtest.h	/^  bool has_new_fatal_failure_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
has_operator_delete	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <typename T, typename SFINAE = void> struct has_operator_delete : std::false_type { };$/;"	s
has_operator_delete	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <typename T> struct has_operator_delete<T, void_t<decltype(static_cast<void (*)(void *)>(T::operator delete))>>$/;"	s
has_operator_delete_size	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <typename T, typename SFINAE = void> struct has_operator_delete_size : std::false_type { };$/;"	s
has_operator_delete_size	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <typename T> struct has_operator_delete_size<T, void_t<decltype(static_cast<void (*)(void *, size_t)>(T::operator delete))>>$/;"	s
has_owner_	test/gtest/gtest.h	/^  bool has_owner_;$/;"	m	class:std::tr1::MutexBase
has_patients	python_bindings/pybind11/include/pybind11/detail/common.h	/^    bool has_patients : 1;$/;"	m	struct:instance
has_pybind11_internals_builtin	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^bool has_pybind11_internals_builtin() {$/;"	f
has_pybind11_internals_static	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^bool has_pybind11_internals_static() {$/;"	f
hasattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline bool hasattr(handle obj, const char *name) {$/;"	f
hasattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline bool hasattr(handle obj, handle name) {$/;"	f
hash	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline ssize_t hash(handle obj) {$/;"	f
hash	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    struct hash<Vector2> {$/;"	s	namespace:std	file:
hash	python_bindings/pybind11/tests/test_stl.cpp	/^    struct hash<TplCtorClass> { size_t operator()(const TplCtorClass &) const { return 0; } };$/;"	s	namespace:std	file:
hashFormat	python_bindings/src/pyFormat.cpp	/^std::size_t hashFormat(const taco::Format& format){$/;"	f	namespace:taco::pythonBindings
hashModeFormat	python_bindings/src/pyFormat.cpp	/^static std::size_t hashModeFormat(const taco::ModeFormat& modeFormat){$/;"	f	namespace:taco::pythonBindings
hashModeFormatPack	python_bindings/src/pyFormat.cpp	/^static std::size_t hashModeFormatPack(const taco::ModeFormatPack& modeFormatPack){$/;"	f	namespace:taco::pythonBindings
header	include/taco/codegen/module.h	/^  std::stringstream header;$/;"	m	class:taco::ir::Module
header	include/taco/lower/lowerer_impl.h	/^  std::vector<ir::Stmt> header;$/;"	m	class:taco::LowererImpl
headers	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^headers = main_headers | detail_headers$/;"	v
heaviside	src/index_notation/index_notation.cpp	/^IndexExpr heaviside(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
helperFunctions	include/taco/tensor.h	/^  static HelperFuncsCache helperFunctions;$/;"	m	class:taco::TensorBase
helperFunctions	src/tensor.cpp	/^TensorBase::HelperFuncsCache TensorBase::helperFunctions;$/;"	m	class:taco::TensorBase	file:
helperFunctionsMutex	include/taco/tensor.h	/^  static std::mutex helperFunctionsMutex;$/;"	m	class:taco::TensorBase
helperFunctionsMutex	src/tensor.cpp	/^std::mutex TensorBase::helperFunctionsMutex;$/;"	m	class:taco::TensorBase	file:
hi	include/taco/index_notation/index_notation.h	/^  int hi;$/;"	m	struct:taco::WindowedIndexVar::Content
hi	include/taco/index_notation/index_notation_nodes.h	/^  int hi;$/;"	m	struct:taco::AccessWindow
hi	src/lower/iterator.cpp	/^    ir::Expr hi;$/;"	m	struct:taco::Iterator::Content::Window	file:
highlight_language	python_bindings/pybind11/docs/conf.py	/^highlight_language = "cpp"$/;"	v
holder	python_bindings/pybind11/include/pybind11/cast.h	/^    holder_type holder;$/;"	m	struct:copyable_holder_caster
holder	python_bindings/pybind11/include/pybind11/cast.h	/^    template <typename H> H &holder() const {$/;"	f	struct:value_and_holder
holder_constructed	python_bindings/pybind11/include/pybind11/cast.h	/^    bool holder_constructed() const {$/;"	f	struct:value_and_holder
holder_helper	python_bindings/pybind11/include/pybind11/cast.h	/^struct holder_helper {$/;"	s
holder_helper	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    struct holder_helper<ref<T>> {$/;"	s	namespace:pybind11::detail	file:
holder_size	python_bindings/pybind11/include/pybind11/attr.h	/^    size_t holder_size = 0;$/;"	m	struct:type_record
holder_size_in_ptrs	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info
hook	python_bindings/pybind11/tests/test_exceptions.py	/^        def hook(unraisable_hook_args):$/;"	f	function:test_python_alreadyset_in_destructor
host_name_	test/gtest/gtest-all.cc	/^    const string host_name_;$/;"	m	class:testing::internal::StreamingListener::SocketWriter	file:
html_context	python_bindings/pybind11/docs/conf.py	/^    html_context = {"css_files": ["_static\/theme_overrides.css"]}$/;"	v
html_context	python_bindings/pybind11/docs/conf.py	/^    html_context = {$/;"	v
html_static_path	python_bindings/pybind11/docs/conf.py	/^html_static_path = ["_static"]$/;"	v
html_static_path	python_bindings/source/conf.py	/^html_static_path = ['_static']$/;"	v
html_theme	python_bindings/pybind11/docs/conf.py	/^    html_theme = "sphinx_rtd_theme"$/;"	v
html_theme	python_bindings/source/conf.py	/^html_theme = 'sphinx_rtd_theme'$/;"	v
html_theme_path	python_bindings/pybind11/docs/conf.py	/^    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]$/;"	v
htmlhelp_basename	python_bindings/pybind11/docs/conf.py	/^htmlhelp_basename = "pybind11doc"$/;"	v
huge_unique_ptr	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    huge_unique_ptr(T *p) : ptr(p) {};$/;"	f	class:huge_unique_ptr
huge_unique_ptr	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^template <typename T> class huge_unique_ptr {$/;"	c	file:
i	python_bindings/pybind11/tests/local_bindings.h	/^    int i = -1;$/;"	m	class:LocalBase
i	python_bindings/pybind11/tests/local_bindings.h	/^struct MixGL { int i; MixGL(int i) : i{i} {} };$/;"	m	struct:MixGL
i	python_bindings/pybind11/tests/local_bindings.h	/^struct MixGL2 { int i; MixGL2(int i) : i{i} {} };$/;"	m	struct:MixGL2
i	python_bindings/pybind11/tests/pybind11_tests.h	/^    int i = -1;$/;"	m	class:UserType
i	python_bindings/pybind11/tests/pybind11_tests.h	/^    int i;$/;"	m	union:IntFloat
i	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:BaseN	file:
i	src/index_notation/transformations.cpp	/^  IndexVar i;$/;"	m	struct:taco::Parallelize::Content	file:
i	src/index_notation/transformations.cpp	/^  IndexVar i;$/;"	m	struct:taco::Precompute::Content	file:
i	src/lower/merge_lattice.cpp	/^  IndexVar i;$/;"	m	class:taco::MergeLatticeBuilder	file:
i1	test/tests-merge_lattice.cpp	/^IndexVar i1, i2;$/;"	m	namespace:tests	file:
i2	test/tests-merge_lattice.cpp	/^IndexVar i1, i2;$/;"	m	namespace:tests	file:
id	src/index_notation/index_notation.cpp	/^  int id;$/;"	m	struct:taco::TensorVar::Content	file:
identifier	include/taco/parser/lexer.h	/^  identifier,$/;"	m	class:taco::parser::Token
identifier	include/taco/parser/lexer.h	/^  std::string identifier;$/;"	m	class:taco::parser::Lexer
identity	src/index_notation/properties.cpp	/^const Literal& Identity::identity() const {$/;"	f	class:taco::Identity
identity	src/index_notation/property_pointers.cpp	/^  Literal identity;$/;"	m	struct:taco::IdentityPtr::Content	file:
identity	src/index_notation/property_pointers.cpp	/^const Literal& IdentityPtr::identity() const {$/;"	f	class:taco::IdentityPtr
identityFunc	test/op_factory.h	/^struct identityFunc {$/;"	s	namespace:taco
if	python_bindings/pybind11/docs/conf.py	/^if not on_rtd:  # only import and set the theme if we're building docs locally$/;"	i
ignoreOldStyleInitWarnings	python_bindings/pybind11/tests/pybind11_tests.h	/^void ignoreOldStyleInitWarnings(F &&body) {$/;"	f
ignoreVectorize	include/taco/lower/lowerer_impl.h	/^  bool ignoreVectorize = false; \/\/ already being taken into account$/;"	m	class:taco::LowererImpl
ignore_pytest_unraisable_warning	python_bindings/pybind11/tests/test_exceptions.py	/^def ignore_pytest_unraisable_warning(f):$/;"	f
ignore_unused	python_bindings/pybind11/include/pybind11/detail/common.h	/^inline void ignore_unused(const int *) { }$/;"	f
impl	include/taco/format.h	/^  std::shared_ptr<const ModeFormatImpl> impl;$/;"	m	class:taco::ModeFormat
impl	include/taco/lower/lower.h	/^  std::shared_ptr<LowererImpl> impl;$/;"	m	class:taco::Lowerer
impl	python_bindings/pybind11/include/pybind11/attr.h	/^    handle (*impl) (function_call &) = nullptr;$/;"	m	struct:function_record
impl	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    std::shared_ptr<T> impl;$/;"	m	class:shared_ptr_with_addressof_operator	file:
impl	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> impl;$/;"	m	class:custom_unique_ptr	file:
impl	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> impl;$/;"	m	class:unique_ptr_with_addressof_operator	file:
impl	src/lower/lowerer_impl.cpp	/^  LowererImpl* impl;$/;"	m	class:taco::LowererImpl::Visitor	file:
impl	test/gtest/gtest.h	/^  const internal::UnitTestImpl* impl() const { return impl_; }$/;"	f	class:testing::UnitTest
impl	test/gtest/gtest.h	/^  internal::UnitTestImpl* impl() { return impl_; }$/;"	f	class:testing::UnitTest
impl_	test/gtest/gtest.h	/^  internal::UnitTestImpl* impl_;$/;"	m	class:testing::UnitTest
impl_	test/gtest/gtest.h	/^  linked_ptr<const ParamGeneratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamGenerator
impl_	test/gtest/gtest.h	/^  scoped_ptr<ParamIteratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamIterator
implicit_cast	python_bindings/pybind11/include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) & { return type(cast_op<Ts>(std::get<Is>(subcasters))...); }$/;"	f	class:tuple_caster
implicit_cast	python_bindings/pybind11/include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) && { return type(cast_op<Ts>(std::move(std::get<Is>(subcasters)))...); }$/;"	f	class:tuple_caster
implicit_casts	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::vector<std::pair<const std::type_info *, void *(*)(void *)>> implicit_casts;$/;"	m	struct:type_info
implicit_conversions	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::vector<PyObject *(*)(PyObject *, PyTypeObject *)> implicit_conversions;$/;"	m	struct:type_info
implicitly_convertible	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <typename InputType, typename OutputType> void implicitly_convertible() {$/;"	f
import	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static module_ import(const char *name) {$/;"	f	class:module_
inBlock	src/codegen/codegen_cuda.cpp	/^  bool inBlock;$/;"	m	class:taco::ir::CodeGen_CUDA::FindVars	file:
inDeviceFunction	src/codegen/codegen_cuda.cpp	/^  bool inDeviceFunction;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
inParallelLoopDepth	include/taco/lower/lowerer_impl.h	/^  int inParallelLoopDepth = 0;$/;"	m	class:taco::LowererImpl
inactive_override_cache	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::unordered_set<std::pair<const PyObject *, const char *>, override_hash> inactive_override_cache;$/;"	m	struct:internals
incRef	python_bindings/pybind11/tests/object.h	/^    void incRef() const { ++m_refCount; }$/;"	f	class:Object
inc_ref	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void inc_ref() {$/;"	f	class:gil_scoped_acquire
inc_ref	python_bindings/pybind11/include/pybind11/pytypes.h	/^    const handle& inc_ref() const & { Py_XINCREF(m_ptr); return *this; }$/;"	f	class:handle
includeDimensionIterator	src/lower/merge_lattice.cpp	/^  includeDimensionIterator(const vector<MergePoint>& points, const Iterator& dimIter) {$/;"	f	class:taco::MergeLatticeBuilder	file:
includeMissingProducerPoints	src/lower/merge_lattice.cpp	/^  includeMissingProducerPoints(const vector<MergePoint>& points) {$/;"	f	class:taco::MergeLatticeBuilder	file:
increase_value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void increase_value() { rw_value++; ro_value += 0.25; }$/;"	f	class:UnregisteredBase
increment	include/taco/ir/ir.h	/^  Expr increment;$/;"	m	struct:taco::ir::For
increment	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void increment() { ++index; }$/;"	f	class:sequence_slow_readwrite
increment	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void increment() { ++ptr; }$/;"	f	class:sequence_fast_readonly
increment	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void increment() { if (!PyDict_Next(obj.ptr(), &pos, &key, &value)) { pos = -1; } }$/;"	f	class:dict_readonly
increment_death_test_count	test/gtest/gtest.h	/^  int increment_death_test_count() { return ++death_test_count_; }$/;"	f	class:testing::TestResult
increment_death_test_count	test/gtest/gtest.h	/^  int increment_death_test_count() {$/;"	f	class:testing::TestInfo
indent	include/taco/ir/ir_printer.h	/^  int indent;$/;"	m	class:taco::ir::IRPrinter
index	include/taco/ir/ir.h	/^  int index = 0;$/;"	m	struct:taco::ir::GetProperty
index	python_bindings/pybind11/include/pybind11/cast.h	/^    size_t index = 0u;$/;"	m	struct:value_and_holder
index	python_bindings/pybind11/include/pybind11/complex.h	/^    static constexpr int index = is_fmt_numeric<T>::index + 3;$/;"	m	struct:is_fmt_numeric
index	python_bindings/pybind11/include/pybind11/detail/common.h	/^    static constexpr auto index = found ? constexpr_first<Predicate, Ts...>() : 0;$/;"	m	struct:exactly_one
index	python_bindings/pybind11/include/pybind11/detail/common.h	/^    static constexpr int index = std::is_same<T, bool>::value ? 0 : 1 + ($/;"	m	struct:is_fmt_numeric
index	python_bindings/pybind11/include/pybind11/pytypes.h	/^    ssize_t index;$/;"	m	class:sequence_slow_readwrite
index	src/storage/storage.cpp	/^  Index         index;$/;"	m	struct:taco::TensorStorage::Content	file:
index	test/gtest/gtest.h	/^  int index() const { return index_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
indexArrays	src/storage/index.cpp	/^  vector<Array> indexArrays;$/;"	m	struct:taco::ModeIndex::Content	file:
indexSet	include/taco/index_notation/index_notation.h	/^  std::vector<int> indexSet;$/;"	m	struct:taco::IndexSetVar::Content
indexSetIterator	src/lower/iterator.cpp	/^  Iterator indexSetIterator;$/;"	m	struct:taco::Iterator::Content	file:
indexSetMatrices	test/tests-windowing.cpp	/^struct indexSetMatrices : public TestWithParam<std::tuple<ModeFormat, ModeFormat, ModeFormat>> {};$/;"	s	file:
indexSetModes	include/taco/index_notation/index_notation_nodes.h	/^  std::map<int, IndexSet> indexSetModes;$/;"	m	struct:taco::AccessNode
indexSetVectors	test/tests-windowing.cpp	/^struct indexSetVectors : public TestWithParam<std::tuple<ModeFormat, ModeFormat, ModeFormat>> {};$/;"	s	file:
indexVar	include/taco/index_notation/index_notation_nodes.h	/^  IndexVar indexVar;$/;"	m	struct:taco::ForallNode
indexVar	src/lower/iterator.cpp	/^  IndexVar indexVar;$/;"	m	struct:taco::Iterator::Content	file:
indexVar	src/type.cpp	/^  IndexVar indexVar;$/;"	m	struct:taco::Dimension::Content	file:
indexVarDefined	src/type.cpp	/^  bool indexVarDefined;$/;"	m	struct:taco::Dimension::Content	file:
indexVarDimensions	src/parser/parser.cpp	/^  map<IndexVar, int>           indexVarDimensions;$/;"	m	struct:taco::parser::Parser::Content	file:
indexVarToExprMap	include/taco/lower/lowerer_impl.h	/^  std::map<IndexVar, ir::Expr> indexVarToExprMap;$/;"	m	class:taco::LowererImpl
indexVars	include/taco/index_notation/index_notation_nodes.h	/^  std::vector<IndexVar> indexVars;$/;"	m	struct:taco::AccessNode
indexVars	include/taco/index_notation/index_notation_nodes.h	/^  std::vector<IndexVar> indexVars;$/;"	m	struct:taco::YieldNode
indexVars	src/index_notation/index_notation.cpp	/^  vector<IndexVar> indexVars;$/;"	m	struct:taco::GetIndexVars	file:
indexVars	src/parser/parser.cpp	/^  map<string,IndexVar> indexVars;$/;"	m	struct:taco::parser::Parser::Content	file:
index_	test/gtest/gtest.h	/^    int index_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
index_	test/gtest/gtest.h	/^  int index_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
index_at	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> py::ssize_t index_at(const arr& a, Ix... idx) { return a.index_at(idx...); }$/;"	f
index_at_t	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> py::ssize_t index_at_t(const arr_t& a, Ix... idx) { return a.index_at(idx...); }$/;"	f
indices	include/taco/taco_tensor_t.h	/^  uint8_t***   indices;       \/\/ tensor index data (per mode)$/;"	m	struct:taco_tensor_t
indices	include/taco/tensor.h	/^  const std::vector<int> indices;$/;"	m	struct:taco::ScalarAccess
indices	src/storage/index.cpp	/^  vector<ModeIndex> indices;$/;"	m	struct:taco::Index::Content	file:
inferAlgFromProperties	src/index_notation/tensor_operator.cpp	/^IterationAlgebra Func::inferAlgFromProperties(const std::vector<IndexExpr>& exprs) {$/;"	f	class:taco::Func
inferFill	src/index_notation/index_notation.cpp	/^IndexExpr inferFill(IndexExpr expr) {$/;"	f	namespace:taco
inferReturnType	include/taco/index_notation/index_notation_nodes.h	/^  static Datatype inferReturnType(OpImpl f, const std::vector<IndexExpr>& inputs) {$/;"	f	struct:taco::CallNode
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype AbsIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::AbsIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype AcosIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::AcosIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype AcoshIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::AcoshIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype AsinIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::AsinIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype AsinhIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::AsinhIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype Atan2Intrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::Atan2Intrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype AtanIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::AtanIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype AtanhIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::AtanhIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype CbrtIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::CbrtIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype CosIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::CosIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype CoshIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::CoshIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype CubeIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::CubeIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype EqIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::EqIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype ExpIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::ExpIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype GtIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::GtIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype GteIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::GteIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype HeavisideIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::HeavisideIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype Log10Intrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::Log10Intrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype LogIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::LogIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype LtIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::LtIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype LteIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::LteIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype MaxIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::MaxIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype MinIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::MinIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype ModIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::ModIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype NeqIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::NeqIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype NotIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::NotIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype PowIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::PowIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype SinIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::SinIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype SinhIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::SinhIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype SqrtIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::SqrtIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype SquareIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::SquareIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype TanIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::TanIntrinsic
inferReturnType	src/index_notation/intrinsic.cpp	/^Datatype TanhIntrinsic::inferReturnType(const std::vector<Datatype>& argTypes) const {$/;"	f	class:taco::TanhIntrinsic
info_arch	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_extensions_default	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v
info_language_extensions_default	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v
info_language_standard_default	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v
info_language_standard_default	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v
info_platform	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version_internal	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
info_version_internal	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const Args&... args, function_record *r) {$/;"	f	struct:process_attributes
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const Args&... args, type_record *r) {$/;"	f	struct:process_attributes
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const T &, function_record *) { }$/;"	f	struct:process_attribute_default
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const T &, type_record *) { }$/;"	f	struct:process_attribute_default
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const arg &a, function_record *r) {$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const arg_v &a, function_record *r) {$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const base<T> &, type_record *r) { r->add_base(typeid(T), nullptr); }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const buffer_protocol &, type_record *r) { r->buffer_protocol = true; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const char *d, function_record *r) { r->doc = const_cast<char *>(d); }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const char *d, type_record *r) { r->doc = const_cast<char *>(d); }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const doc &n, function_record *r) { r->doc = const_cast<char *>(n.value); }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const dynamic_attr &, type_record *r) { r->dynamic_attr = true; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const handle &h, type_record *r) { r->bases.append(h); }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const is_final &, type_record *r) { r->is_final = true; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const is_method &s, function_record *r) { r->is_method = true; r->scope = s.class_; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const is_new_style_constructor &, function_record *r) { r->is_new_style_constructor = true; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const is_operator &, function_record *r) { r->is_operator = true; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const kw_only &, function_record *r) {$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const metaclass &m, type_record *r) { r->metaclass = m.value; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const module_local &l, type_record *r) { r->module_local = l.value; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const multiple_inheritance &, type_record *r) { r->multiple_inheritance = true; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const name &n, function_record *r) { r->name = const_cast<char *>(n.value); }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const pos_only &, function_record *r) {$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const prepend &, function_record *r) { r->prepend = true; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const return_value_policy &p, function_record *r) { r->policy = p; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const scope &s, function_record *r) { r->scope = s.value; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/attr.h	/^    static void init(const sibling &s, function_record *r) { r->sibling = s.value; }$/;"	f	struct:process_attribute
init	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void init(bool is_arithmetic, bool is_convertible) {$/;"	f	struct:enum_base
init	python_bindings/pybind11/include/pybind11/pybind11.h	/^Ret init(CFunc &&c, AFunc &&a) {$/;"	f
init	python_bindings/pybind11/include/pybind11/pybind11.h	/^Ret init(Func &&f) { return {std::forward<Func>(f)}; }$/;"	f
init	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <typename... Args> detail::initimpl::constructor<Args...> init() { return {}; }$/;"	f
initFormat	src/tensor.cpp	/^static Format initFormat(Format format) {$/;"	f	namespace:taco
initResultArrays	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::initResultArrays(IndexVar var, vector<Access> writes, $/;"	f	class:taco::LowererImpl
initResultArrays	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::initResultArrays(vector<Access> writes, $/;"	f	class:taco::LowererImpl
initTensor	test/tests-api.cpp	/^  bool initTensor = false;$/;"	m	class:APIFileTestData	file:
initValues	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::initValues(Expr tensor, Expr initVal, Expr begin, Expr size) {$/;"	f	class:taco::LowererImpl
init_alias	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <typename... Args> detail::initimpl::alias_constructor<Args...> init_alias() { return {}; }$/;"	f
init_default	src/codegen/codegen.cpp	/^shared_ptr<CodeGen> CodeGen::init_default(std::ostream &dest, OutputKind outputKind) {$/;"	f	class:taco::ir::CodeGen
init_holder	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static void init_holder(detail::instance *inst, detail::value_and_holder &v_h,$/;"	f	class:class_
init_holder_from_existing	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static void init_holder_from_existing(const detail::value_and_holder &v_h,$/;"	f	class:class_
init_instance	python_bindings/pybind11/include/pybind11/attr.h	/^    void (*init_instance)(instance *, const void *) = nullptr;$/;"	m	struct:type_record
init_instance	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    void (*init_instance)(instance *, const void *);$/;"	m	struct:type_info
init_instance	python_bindings/pybind11/include/pybind11/pybind11.h	/^    static void init_instance(detail::instance *inst, const void *holder_ptr) {$/;"	f	class:class_
init_self	python_bindings/pybind11/include/pybind11/cast.h	/^    handle init_self;$/;"	m	struct:function_call
init_taco_tensor_t	src/taco_tensor_t.cpp	/^taco_tensor_t* init_taco_tensor_t(int32_t order, int32_t csize,$/;"	f
initialize	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void initialize(Func &&f, Return (*)(Args...), const Extra&... extra) {$/;"	f	class:cpp_function
initialize	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void initialize(const type_record &rec) {$/;"	f	class:generic_type
initialize_generic	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void initialize_generic(unique_function_record &&unique_rec, const char *text,$/;"	f	class:cpp_function
initialize_inherited_virtuals	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^void initialize_inherited_virtuals(py::module_ &m) {$/;"	f
initialize_interpreter	python_bindings/pybind11/include/pybind11/embed.h	/^inline void initialize_interpreter(bool init_signal_handlers = true) {$/;"	f
initializers	python_bindings/pybind11/tests/pybind11_tests.cpp	/^std::list<std::function<void(py::module_ &)>> &initializers() {$/;"	f
inner	python_bindings/pytaco/pytensor/taco_tensor.py	/^def inner(t1, t2, out_format=default_mode, dtype=None):$/;"	f
innerParentVar	src/index_notation/provenance_graph.cpp	/^  IndexVar innerParentVar;$/;"	m	struct:taco::FuseRelNode::Content	file:
innerVar	src/index_notation/provenance_graph.cpp	/^  IndexVar innerVar;$/;"	m	struct:taco::DivideRelNode::Content	file:
innerVar	src/index_notation/provenance_graph.cpp	/^  IndexVar innerVar;$/;"	m	struct:taco::SplitRelNode::Content	file:
inner_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr EigenIndex inner_stride = if_zero<StrideType::InnerStrideAtCompileTime, 1>::value,$/;"	m	struct:EigenProps
inputTensors	src/codegen/codegen_c.cpp	/^  vector<Expr> inputTensors;$/;"	m	class:taco::ir::CodeGen_C::FindVars	file:
inputs	include/taco/ir/ir.h	/^  std::vector<Expr> inputs;$/;"	m	struct:taco::ir::Function
inputs	test/tests-lower.cpp	/^  map<TensorVar, vector<pair<vector<int>,double>>> inputs;$/;"	m	struct:taco::test::TestCase	file:
insert	include/taco/tensor.h	/^void TensorBase::insert(const std::initializer_list<int>& coordinate, CType value) {$/;"	f	class:taco::TensorBase
insert	include/taco/tensor.h	/^void TensorBase::insert(const std::vector<int>& coordinate, CType value) {$/;"	f	class:taco::TensorBase
insert	include/taco/util/scopedmap.h	/^  void insert(const std::pair<Key, Value>& value) {$/;"	f	class:taco::util::ScopedMap
insert	include/taco/util/scopedset.h	/^  void insert(const Key& key) {$/;"	f	class:taco::util::ScopedSet
insert	python_bindings/pybind11/include/pybind11/pytypes.h	/^    template <typename T> void insert(size_t index, T &&val) const {$/;"	f	class:list
insert	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def insert(self, coords, val):$/;"	m	class:tensor
insert	python_bindings/src/pyTensor.cpp	/^static void insert(Tensor<CType> &tensor, std::vector<int> coords, double value) {$/;"	f	namespace:taco::pythonBindings
insertDimensionIteratorIfNotOrdered	src/lower/merge_lattice.cpp	/^  insertDimensionIteratorIfNotOrdered(const vector<MergePoint>& points)$/;"	f	class:taco::MergeLatticeBuilder	file:
insertTemporaries	src/index_notation/transformations.cpp	/^IndexStmt insertTemporaries(IndexStmt stmt)$/;"	f	namespace:taco
insertTemporaries	test/tests-transformation.cpp	/^struct insertTemporaries : public TestWithParam<NotationTest> {};$/;"	s	namespace:test	file:
insertUnchecked	include/taco/tensor.h	/^void TensorBase::insertUnchecked($/;"	f	class:taco::TensorBase
insertUnsynced	include/taco/tensor.h	/^void TensorBase::insertUnsynced(const std::vector<int>& coordinate, CType value) {$/;"	f	class:taco::TensorBase
inst	python_bindings/pybind11/include/pybind11/cast.h	/^        instance *inst = nullptr;$/;"	m	struct:values_and_holders::iterator
inst	python_bindings/pybind11/include/pybind11/cast.h	/^    instance *inst = nullptr;$/;"	m	struct:value_and_holder
inst	python_bindings/pybind11/include/pybind11/cast.h	/^    instance *inst;$/;"	m	struct:values_and_holders
install	python_bindings/pybind11/pybind11/setup_helpers.py	/^    def install(self):$/;"	m	class:ParallelCompile
instance	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct instance {$/;"	s
instance_	python_bindings/pybind11/tests/test_copy_move.cpp	/^    static derived instance_;$/;"	m	struct:empty	file:
instance_	python_bindings/pybind11/tests/test_copy_move.cpp	/^template <> lacking_copy_ctor empty<lacking_copy_ctor>::instance_ = {};$/;"	m	class:empty	file:
instance_	python_bindings/pybind11/tests/test_copy_move.cpp	/^template <> lacking_move_ctor empty<lacking_move_ctor>::instance_ = {};$/;"	m	class:empty	file:
instance_base	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    PyObject *instance_base;$/;"	m	struct:internals
instance_registered	python_bindings/pybind11/include/pybind11/cast.h	/^    bool instance_registered() const {$/;"	f	struct:value_and_holder
instance_simple_holder_in_ptrs	python_bindings/pybind11/include/pybind11/detail/common.h	/^constexpr size_t instance_simple_holder_in_ptrs() {$/;"	f
instantiations_	test/gtest/gtest.h	/^  InstantiationContainer instantiations_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
int128Value	include/taco/type.h	/^  long long int128Value;$/;"	m	union:taco::ComponentTypeUnion
int16Value	include/taco/type.h	/^  int16_t int16Value;$/;"	m	union:taco::ComponentTypeUnion
int16Value	include/taco/type.h	/^  int16_t int16Value;$/;"	m	union:taco::IndexTypeUnion
int32Value	include/taco/type.h	/^  int32_t int32Value;$/;"	m	union:taco::ComponentTypeUnion
int32Value	include/taco/type.h	/^  int32_t int32Value;$/;"	m	union:taco::IndexTypeUnion
int64Value	include/taco/type.h	/^  int64_t int64Value;$/;"	m	union:taco::ComponentTypeUnion
int64Value	include/taco/type.h	/^  int64_t int64Value;$/;"	m	union:taco::IndexTypeUnion
int8Value	include/taco/type.h	/^  int8_t int8Value;$/;"	m	union:taco::ComponentTypeUnion
int8Value	include/taco/type.h	/^  int8_t int8Value;$/;"	m	union:taco::IndexTypeUnion
int_	python_bindings/pybind11/include/pybind11/pytypes.h	/^    int_() : object(PyLong_FromLong(0), stolen_t{}) { }$/;"	f	class:int_
int_	python_bindings/pybind11/include/pybind11/pytypes.h	/^    int_(T value) {$/;"	f	class:int_
int_	python_bindings/pybind11/include/pybind11/pytypes.h	/^class int_ : public object {$/;"	c
int_scalar	include/taco/parser/lexer.h	/^  int_scalar,$/;"	m	class:taco::parser::Token
int_to_str	python_bindings/pybind11/include/pybind11/detail/descr.h	/^template <size_t Rem, size_t... Digits> struct int_to_str : int_to_str<Rem\/10, Rem%10, Digits...> { };$/;"	s
int_to_str	python_bindings/pybind11/include/pybind11/detail/descr.h	/^template <size_t...Digits> struct int_to_str<0, Digits...> {$/;"	s
intercept_mode_	test/gtest/gtest-all.cc	/^  const InterceptMode intercept_mode_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter	file:
internal	test/gtest/gtest-all.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	test/gtest/gtest.h	/^namespace internal {$/;"	n	namespace:testing
internal1	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int internal1() { return value; }                               \/\/ return by value$/;"	f	class:ExampleMandA
internal2	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int &internal2() { return value; }                              \/\/ return by reference$/;"	f	class:ExampleMandA
internal2	test/gtest/gtest-all.cc	/^namespace internal2 {$/;"	n	namespace:testing	file:
internal2	test/gtest/gtest.h	/^namespace internal2 {$/;"	n	namespace:testing
internal3	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    const int &internal3() { return value; }                        \/\/ return by const reference$/;"	f	class:ExampleMandA
internal4	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int *internal4() { return &value; }                             \/\/ return by pointer$/;"	f	class:ExampleMandA
internal5	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    const int *internal5() { return &value; }                       \/\/ return by const pointer$/;"	f	class:ExampleMandA
internal_run_death_test_	test/gtest/gtest-all.cc	/^  std::string internal_run_death_test_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
internal_run_death_test_flag	test/gtest/gtest-all.cc	/^  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {$/;"	f	class:testing::internal::UnitTestImpl
internal_run_death_test_flag_	test/gtest/gtest-all.cc	/^  internal::scoped_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_;$/;"	m	class:testing::internal::UnitTestImpl	file:
internals	python_bindings/pybind11/include/pybind11/detail/internals.h	/^struct internals {$/;"	s
intersectEdge	test/op_factory.h	/^struct intersectEdge {$/;"	s	namespace:taco
intersectLattices	src/lower/merge_lattice.cpp	/^  static MergeLattice intersectLattices(MergeLattice left, MergeLattice right)$/;"	f	class:taco::MergeLatticeBuilder	file:
intersectPoints	src/lower/merge_lattice.cpp	/^  static MergePoint intersectPoints(MergePoint left, MergePoint right,$/;"	f	class:taco::MergeLatticeBuilder	file:
intersphinx_mapping	python_bindings/source/conf.py	/^intersphinx_mapping = {'https:\/\/docs.python.org\/': None}$/;"	v
intrinsic_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T, size_t N> struct intrinsic_type<T[N]>       { using type = typename intrinsic_type<T>::type; };$/;"	s
intrinsic_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T, size_t N> struct intrinsic_type<const T[N]> { using type = typename intrinsic_type<T>::type; };$/;"	s
intrinsic_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T> struct intrinsic_type                       { using type = T; };$/;"	s
intrinsic_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T> struct intrinsic_type<T&&>                  { using type = typename intrinsic_type<T>::type; };$/;"	s
intrinsic_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T> struct intrinsic_type<T&>                   { using type = typename intrinsic_type<T>::type; };$/;"	s
intrinsic_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T> struct intrinsic_type<T*>                   { using type = typename intrinsic_type<T>::type; };$/;"	s
intrinsic_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T> struct intrinsic_type<const T>              { using type = typename intrinsic_type<T>::type; };$/;"	s
invalidStmt	test/tests-transformation.cpp	/^  IndexStmt invalidStmt;$/;"	m	struct:test::PreconditionTest	file:
io	python_bindings/pybind11/tests/test_buffers.py	/^import io$/;"	i
ir	include/taco/codegen/module.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/index_notation/kernel.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/ir/ir.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/ir/ir_printer.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/ir/ir_rewriter.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/ir/ir_verifier.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/ir/ir_visitor.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/ir/simplify.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/lower/iterator.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/lower/lower.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/lower/lowerer_impl.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/lower/mode.h	/^namespace ir {$/;"	n	namespace:taco
ir	include/taco/storage/pack.h	/^namespace ir {$/;"	n	namespace:taco
ir	src/codegen/codegen.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
ir	src/codegen/codegen.h	/^namespace ir {$/;"	n	namespace:taco
ir	src/codegen/codegen_c.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
ir	src/codegen/codegen_c.h	/^namespace ir {$/;"	n	namespace:taco
ir	src/codegen/codegen_cuda.cpp	/^  namespace ir {$/;"	n	namespace:taco	file:
ir	src/codegen/codegen_cuda.h	/^namespace ir {$/;"	n	namespace:taco
ir	src/codegen/module.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
ir	src/ir/ir.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
ir	src/ir/ir_generators.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
ir	src/ir/ir_generators.h	/^namespace ir {$/;"	n	namespace:taco
ir	src/ir/ir_printer.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
ir	src/ir/ir_rewriter.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
ir	src/ir/ir_verifier.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
ir	src/ir/ir_visitor.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
ir	src/ir/simplify.cpp	/^namespace ir {$/;"	n	namespace:taco	file:
is	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool is(object_api const& other) const { return derived().ptr() == other.derived().ptr(); }$/;"	f	class:object_api
isAvailable	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isAvailable(IndexVar indexVar, std::set<IndexVar> defined) const {$/;"	f	class:taco::ProvenanceGraph
isBool	src/type.cpp	/^bool Datatype::isBool() const {$/;"	f	class:taco::Datatype
isBranchless	include/taco/lower/mode_format_impl.h	/^  const bool isBranchless;$/;"	m	class:taco::ModeFormatImpl
isBranchless	src/format.cpp	/^bool ModeFormat::isBranchless() const {$/;"	f	class:taco::ModeFormat
isBranchless	src/lower/iterator.cpp	/^bool Iterator::isBranchless() const {$/;"	f	class:taco::Iterator
isChildRecoverable	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isChildRecoverable(taco::IndexVar indexVar, std::set<taco::IndexVar> defined) const {$/;"	f	class:taco::ProvenanceGraph
isCompact	include/taco/lower/mode_format_impl.h	/^  const bool isCompact;$/;"	m	class:taco::ModeFormatImpl
isCompact	src/format.cpp	/^bool ModeFormat::isCompact() const {$/;"	f	class:taco::ModeFormat
isCompact	src/lower/iterator.cpp	/^bool Iterator::isCompact() const {$/;"	f	class:taco::Iterator
isComplex	src/type.cpp	/^bool Datatype::isComplex() const {$/;"	f	class:taco::Datatype
isConcreteNotation	src/index_notation/index_notation.cpp	/^bool isConcreteNotation(IndexStmt stmt, std::string* reason) {$/;"	f	namespace:taco
isCoordVariable	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isCoordVariable(taco::IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
isDense	src/format.cpp	/^bool isDense(const Format& format) {$/;"	f	namespace:taco
isDerivedFrom	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isDerivedFrom(taco::IndexVar indexVar, taco::IndexVar ancestor) const {$/;"	f	class:taco::ProvenanceGraph
isDimensionIterator	src/lower/iterator.cpp	/^bool Iterator::isDimensionIterator() const {$/;"	f	class:taco::Iterator
isDivided	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isDivided(IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
isEinsumNotation	src/index_notation/index_notation.cpp	/^bool isEinsumNotation(IndexStmt stmt, std::string* reason) {$/;"	f	namespace:taco
isFixed	src/type.cpp	/^bool Dimension::isFixed() const {$/;"	f	class:taco::Dimension
isFloat	src/type.cpp	/^bool Datatype::isFloat() const {$/;"	f	class:taco::Datatype
isFree	src/lower/iteration_graph.cpp	/^bool IterationGraph::isFree(const IndexVar& var) const {$/;"	f	class:taco::IterationGraph
isFull	include/taco/lower/mode_format_impl.h	/^  const bool isFull;$/;"	m	class:taco::ModeFormatImpl
isFull	src/format.cpp	/^bool ModeFormat::isFull() const {$/;"	f	class:taco::ModeFormat
isFull	src/lower/iterator.cpp	/^bool Iterator::isFull() const {$/;"	f	class:taco::Iterator
isFullyDerived	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isFullyDerived(taco::IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
isHostFunction	src/codegen/codegen_cuda.h	/^  bool isHostFunction=true;$/;"	m	class:taco::ir::CodeGen_CUDA
isIndexVarSized	src/type.cpp	/^bool Dimension::isIndexVarSized() const {$/;"	f	class:taco::Dimension
isInt	src/type.cpp	/^bool Datatype::isInt() const {$/;"	f	class:taco::Datatype
isIrregular	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isIrregular(IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
isLastAppender	src/lower/lowerer_impl.cpp	/^bool isLastAppender(Iterator iter) {$/;"	f	namespace:taco
isLastFreeVariable	src/lower/iteration_graph.cpp	/^bool IterationGraph::isLastFreeVariable(const IndexVar& var) const {$/;"	f	class:taco::IterationGraph
isLeaf	src/lower/iterator.cpp	/^bool Iterator::isLeaf() const {$/;"	f	class:taco::Iterator
isLowerable	src/lower/lower.cpp	/^bool isLowerable(IndexStmt stmt, std::string* reason) {$/;"	f	namespace:taco
isModeIndexSet	src/index_notation/index_notation.cpp	/^bool Access::isModeIndexSet(int mode) const {$/;"	f	class:taco::Access
isModeIterator	src/lower/iterator.cpp	/^bool Iterator::isModeIterator() const {$/;"	f	class:taco::Iterator
isModeWindowed	src/index_notation/index_notation.cpp	/^bool Access::isModeWindowed(int mode) const {$/;"	f	class:taco::Access
isOmitter	src/lower/merge_lattice.cpp	/^bool MergePoint::isOmitter() const {$/;"	f	class:taco::MergePoint
isOrdered	include/taco/lower/mode_format_impl.h	/^  const bool isOrdered;$/;"	m	class:taco::ModeFormatImpl
isOrdered	src/format.cpp	/^bool ModeFormat::isOrdered() const {$/;"	f	class:taco::ModeFormat
isOrdered	src/lower/iterator.cpp	/^bool Iterator::isOrdered() const {$/;"	f	class:taco::Iterator
isPosOfAccess	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isPosOfAccess(IndexVar indexVar, Access access) const {$/;"	f	class:taco::ProvenanceGraph
isPosVariable	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isPosVariable(taco::IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
isRecoverable	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isRecoverable(taco::IndexVar indexVar, std::set<taco::IndexVar> defined) const {$/;"	f	class:taco::ProvenanceGraph
isReduction	src/lower/iteration_graph.cpp	/^bool IterationGraph::isReduction(const IndexVar& var) const {$/;"	f	class:taco::IterationGraph
isReductionNotation	src/index_notation/index_notation.cpp	/^bool isReductionNotation(IndexStmt stmt, std::string* reason) {$/;"	f	namespace:taco
isRoot	src/lower/iterator.cpp	/^bool Iterator::isRoot() const {$/;"	f	class:taco::Iterator
isScalar	src/type.cpp	/^bool isScalar(const Type& type) {$/;"	f	namespace:taco
isStrided	src/lower/iterator.cpp	/^bool Iterator::isStrided() const {$/;"	f	class:taco::Iterator
isTiming	include/taco/util/timers.h	/^  bool isTiming;$/;"	m	class:taco::util::LapTimer
isUInt	src/type.cpp	/^bool Datatype::isUInt() const {$/;"	f	class:taco::Datatype
isUnderived	src/index_notation/provenance_graph.cpp	/^bool ProvenanceGraph::isUnderived(taco::IndexVar indexVar) const {$/;"	f	class:taco::ProvenanceGraph
isUnique	include/taco/lower/mode_format_impl.h	/^  const bool isUnique;$/;"	m	class:taco::ModeFormatImpl
isUnique	src/format.cpp	/^bool ModeFormat::isUnique() const {$/;"	f	class:taco::ModeFormat
isUnique	src/lower/iterator.cpp	/^bool Iterator::isUnique() const {$/;"	f	class:taco::Iterator
isValid	src/index_notation/index_notation.cpp	/^static bool isValid(Assignment assignment, string* reason) {$/;"	f	namespace:taco
isValue	include/taco/ir/ir.h	/^bool isValue(Expr expr, T val) {$/;"	f	namespace:taco::ir
isVariable	src/type.cpp	/^bool Dimension::isVariable() const {$/;"	f	class:taco::Dimension
isWindowed	src/lower/iterator.cpp	/^bool Iterator::isWindowed() const {$/;"	f	class:taco::Iterator
isZero	src/tensor.cpp	/^bool isZero(T a) {$/;"	f	namespace:taco
isZero	src/tensor.cpp	/^bool isZero(std::complex<T> a) {$/;"	f	namespace:taco
isZeroless	include/taco/lower/mode_format_impl.h	/^  const bool isZeroless;$/;"	m	class:taco::ModeFormatImpl
isZeroless	src/format.cpp	/^bool ModeFormat::isZeroless() const {$/;"	f	class:taco::ModeFormat
isZeroless	src/lower/iterator.cpp	/^bool Iterator::isZeroless() const {$/;"	f	class:taco::Iterator
is_alias	python_bindings/pybind11/include/pybind11/detail/init.h	/^bool is_alias(Cpp<Class> *ptr) {$/;"	f
is_alias	python_bindings/pybind11/include/pybind11/detail/init.h	/^constexpr bool is_alias(void *) { return false; }$/;"	f
is_array	python_bindings/pybind11/include/pybind11/numpy.h	/^    static constexpr bool is_array = false;$/;"	m	struct:array_info_scalar
is_array	python_bindings/pybind11/include/pybind11/numpy.h	/^    static constexpr bool is_array = true;$/;"	m	struct:array_info
is_comparable	python_bindings/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool is_comparable = std::is_same<std::true_type, decltype(test_comparable<T>(nullptr))>::value;$/;"	m	struct:container_traits
is_comparable	python_bindings/pybind11/include/pybind11/stl_bind.h	/^struct is_comparable : std::false_type { };$/;"	s
is_comparable	python_bindings/pybind11/include/pybind11/stl_bind.h	/^struct is_comparable<$/;"	s
is_comparable	python_bindings/pybind11/include/pybind11/stl_bind.h	/^struct is_comparable<T, enable_if_t<container_traits<T>::is_pair>> {$/;"	s
is_comparable	python_bindings/pybind11/include/pybind11/stl_bind.h	/^struct is_comparable<T, enable_if_t<container_traits<T>::is_vector>> {$/;"	s
is_complex	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename T> struct is_complex : std::false_type { };$/;"	s
is_complex	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename T> struct is_complex<std::complex<T>> : std::true_type { };$/;"	s
is_constructor	python_bindings/pybind11/include/pybind11/attr.h	/^    bool is_constructor : 1;$/;"	m	struct:function_record
is_copy_assignable	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename Container> struct is_copy_assignable<Container, enable_if_t<all_of<$/;"	s
is_copy_assignable	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T, typename SFINAE = void> struct is_copy_assignable : std::is_copy_assignable<T> {};$/;"	s
is_copy_assignable	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T1, typename T2> struct is_copy_assignable<std::pair<T1, T2>>$/;"	s
is_copy_constructible	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename Container> struct is_copy_constructible<Container, enable_if_t<all_of<$/;"	s
is_copy_constructible	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T, typename SFINAE = void> struct is_copy_constructible : std::is_copy_constructible<T> {};$/;"	s
is_copy_constructible	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T1, typename T2> struct is_copy_constructible<std::pair<T1, T2>>$/;"	s
is_cpp_function	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool is_cpp_function() const { return (bool) cpp_function(); }$/;"	f	class:function
is_disabled_	test/gtest/gtest.h	/^  bool is_disabled_;                \/\/ True iff this test is disabled$/;"	m	class:testing::TestInfo
is_element	python_bindings/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool is_element = !is_pair && !is_vector;$/;"	m	struct:container_traits
is_empty	python_bindings/pybind11/include/pybind11/numpy.h	/^    static constexpr bool is_empty = (N == 0) || array_info<T>::is_empty;$/;"	m	struct:array_info
is_empty	python_bindings/pybind11/include/pybind11/numpy.h	/^    static constexpr bool is_empty = false;$/;"	m	struct:array_info_scalar
is_final	python_bindings/pybind11/include/pybind11/attr.h	/^    bool is_final : 1;$/;"	m	struct:type_record
is_final	python_bindings/pybind11/include/pybind11/attr.h	/^struct is_final { };$/;"	s
is_fmt_numeric	python_bindings/pybind11/include/pybind11/complex.h	/^template <typename T> struct is_fmt_numeric<std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s
is_fmt_numeric	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T, typename SFINAE = void> struct is_fmt_numeric { static constexpr bool value = false; };$/;"	s
is_fmt_numeric	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T> struct is_fmt_numeric<T, enable_if_t<std::is_arithmetic<T>::value>> {$/;"	s
is_holder_type	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename base, typename deleter> struct is_holder_type<base, std::unique_ptr<base, deleter>> :$/;"	s
is_holder_type	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename base, typename holder> struct is_holder_type :$/;"	s
is_input_iterator	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct is_input_iterator<T, void_t<decltype(*std::declval<T &>()), decltype(++std::declval<T &>())>>$/;"	s
is_input_iterator	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T, typename = void> struct is_input_iterator : std::false_type {};$/;"	s
is_instantiation	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct is_instantiation : std::false_type { };$/;"	s
is_instantiation	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct is_instantiation<Class, Class<Us...>> : std::true_type { };$/;"	s
is_method	python_bindings/pybind11/include/pybind11/attr.h	/^    bool is_method : 1;$/;"	m	struct:function_record
is_method	python_bindings/pybind11/include/pybind11/attr.h	/^struct is_method { handle class_; is_method(const handle &c) : class_(c) { } };$/;"	f	struct:is_method
is_method	python_bindings/pybind11/include/pybind11/attr.h	/^struct is_method { handle class_; is_method(const handle &c) : class_(c) { } };$/;"	s
is_nan	test/gtest/gtest.h	/^  bool is_nan() const {$/;"	f	class:testing::internal::FloatingPoint
is_new_style_constructor	python_bindings/pybind11/include/pybind11/attr.h	/^    bool is_new_style_constructor : 1;$/;"	m	struct:function_record
is_new_style_constructor	python_bindings/pybind11/include/pybind11/attr.h	/^struct is_new_style_constructor { };$/;"	s
is_none	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool is_none() const { return derived().ptr() == Py_None; }$/;"	f	class:object_api
is_operator	python_bindings/pybind11/include/pybind11/attr.h	/^    bool is_operator : 1;$/;"	m	struct:function_record
is_operator	python_bindings/pybind11/include/pybind11/attr.h	/^struct is_operator { };$/;"	s
is_pair	python_bindings/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool is_pair = std::is_same<std::true_type, decltype(test_pair<T>(nullptr, nullptr))>::value;$/;"	m	struct:container_traits
is_parameter	include/taco/ir/ir.h	/^  bool is_parameter; $/;"	m	struct:taco::ir::Var
is_pointer	test/gtest/gtest.h	/^struct is_pointer : public false_type {};$/;"	s	namespace:std::tr1
is_pointer	test/gtest/gtest.h	/^struct is_pointer<T*> : public true_type {};$/;"	s	namespace:std::tr1
is_ptr	include/taco/ir/ir.h	/^  bool is_ptr;$/;"	m	struct:taco::ir::Var
is_realloc	include/taco/ir/ir.h	/^  bool is_realloc;$/;"	m	struct:taco::ir::Allocate
is_reportable	test/gtest/gtest.h	/^  bool is_reportable() const {$/;"	f	class:testing::TestInfo
is_stateless	python_bindings/pybind11/include/pybind11/attr.h	/^    bool is_stateless : 1;$/;"	m	struct:function_record
is_std_array	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename T, size_t N> struct is_std_array<std::array<T, N>> : std::true_type { };$/;"	s
is_std_array	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename T> struct is_std_array : std::false_type { };$/;"	s
is_template_base_of_impl	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct is_template_base_of_impl {$/;"	s
is_tensor	include/taco/ir/ir.h	/^  bool is_tensor;$/;"	m	struct:taco::ir::Var
is_valid	python_bindings/pybind11/include/pybind11/embed.h	/^    bool is_valid = true;$/;"	m	class:scoped_interpreter
is_valid_	test/gtest/gtest.h	/^  bool is_valid_;$/;"	m	class:std::tr1::RE
is_valid_class_option	python_bindings/pybind11/include/pybind11/pybind11.h	/^    template <typename T> struct is_valid_class_option :$/;"	s	class:class_
is_vector	python_bindings/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool is_vector = std::is_same<std::true_type, decltype(test_value<T>(nullptr))>::value;$/;"	m	struct:container_traits
isa	include/taco/index_notation/index_notation_nodes.h	/^inline bool isa(const IndexExprNode* e) {$/;"	f	namespace:taco
isa	include/taco/index_notation/index_notation_nodes.h	/^inline bool isa(const IndexStmtNode* s) {$/;"	f	namespace:taco
isa	include/taco/index_notation/iteration_algebra.h	/^inline bool isa(const IterationAlgebraNode* e) {$/;"	f	namespace:taco
isa	include/taco/index_notation/property_pointers.h	/^inline bool isa(const PropertyPtr* p) {$/;"	f	namespace:taco
isa	include/taco/ir/ir.h	/^inline bool isa(Expr e) {$/;"	f	namespace:taco::ir
isa	include/taco/ir/ir.h	/^inline bool isa(Stmt s) {$/;"	f	namespace:taco::ir
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Access>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Add>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Assignment>(IndexStmt s) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Call>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<CallIntrinsic>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Cast>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Div>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Forall>(IndexStmt s) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<IndexVar>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Literal>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Mul>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Multi>(IndexStmt s) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Neg>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Reduction>(IndexExpr s) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Sequence>(IndexStmt s) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Sqrt>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Sub>(IndexExpr e) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<SuchThat>(IndexStmt s) {$/;"	f	namespace:taco
isa	src/index_notation/index_notation.cpp	/^template <> bool isa<Where>(IndexStmt s) {$/;"	f	namespace:taco
isa	src/index_notation/iteration_algebra.cpp	/^template <> bool isa<Complement>(IterationAlgebra alg) {$/;"	f	namespace:taco
isa	src/index_notation/iteration_algebra.cpp	/^template <> bool isa<Intersect>(IterationAlgebra alg) {$/;"	f	namespace:taco
isa	src/index_notation/iteration_algebra.cpp	/^template <> bool isa<Region>(IterationAlgebra alg) {$/;"	f	namespace:taco
isa	src/index_notation/iteration_algebra.cpp	/^template <> bool isa<Union>(IterationAlgebra alg) {$/;"	f	namespace:taco
isa	src/index_notation/properties.cpp	/^template<> bool isa<Annihilator>(const Property& p) {$/;"	f	namespace:taco
isa	src/index_notation/properties.cpp	/^template<> bool isa<Associative>(const Property& p) {$/;"	f	namespace:taco
isa	src/index_notation/properties.cpp	/^template<> bool isa<Commutative>(const Property& p) {$/;"	f	namespace:taco
isa	src/index_notation/properties.cpp	/^template<> bool isa<Identity>(const Property& p) {$/;"	f	namespace:taco
isalnum	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  undef isalnum$/;"	d
isalpha	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  undef isalpha$/;"	d
isclose	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def isclose(a, b, rel_tol=1e-05, abs_tol=0.0):$/;"	f
isinstance	python_bindings/pybind11/include/pybind11/pytypes.h	/^bool isinstance(handle obj) { return T::check_(obj); }$/;"	f
isinstance	python_bindings/pybind11/include/pybind11/pytypes.h	/^bool isinstance(handle obj) { return detail::isinstance_generic(obj, typeid(T)); }$/;"	f
isinstance	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline bool isinstance(handle obj, handle type) {$/;"	f
isinstance	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <> inline bool isinstance<object>(handle obj) { return obj.ptr() != nullptr; }$/;"	f
isinstance_generic	python_bindings/pybind11/include/pybind11/cast.h	/^PYBIND11_NOINLINE inline bool isinstance_generic(handle obj, const std::type_info &tp) {$/;"	f
islower	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  undef islower$/;"	d
isoATensor	src/index_notation/index_notation.cpp	/^  std::map<TensorVar,TensorVar> isoATensor, isoBTensor;$/;"	m	struct:taco::Isomorphic	file:
isoAVar	src/index_notation/index_notation.cpp	/^  std::map<IndexVar,IndexVar> isoAVar, isoBVar;$/;"	m	struct:taco::Isomorphic	file:
isoBTensor	src/index_notation/index_notation.cpp	/^  std::map<TensorVar,TensorVar> isoATensor, isoBTensor;$/;"	m	struct:taco::Isomorphic	file:
isoBVar	src/index_notation/index_notation.cpp	/^  std::map<IndexVar,IndexVar> isoAVar, isoBVar;$/;"	m	struct:taco::Isomorphic	file:
isomorphic	src/index_notation/index_notation.cpp	/^bool isomorphic(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
isomorphic	src/index_notation/index_notation.cpp	/^bool isomorphic(IndexStmt a, IndexStmt b) {$/;"	f	namespace:taco
isspace	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  undef isspace$/;"	d
issues	python_bindings/pybind11/tools/make_changelog.py	/^issues = api.issues.list_for_repo(labels="needs changelog", state="closed")$/;"	v
istate	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    PyInterpreterState *istate = nullptr;$/;"	m	struct:internals
isupper	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  undef isupper$/;"	d
it	python_bindings/pybind11/include/pybind11/pybind11.h	/^    Iterator it;$/;"	m	struct:iterator_state
it	python_bindings/src/pyTensor.cpp	/^  typename Tensor<T>::template const_iterator<int,T> it;$/;"	m	class:taco::pythonBindings::PyTensorIter	file:
it	test/tests-merge_lattice.cpp	/^static Iterator it(Access access)$/;"	f	namespace:tests
itemsize	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    ssize_t itemsize = 0;         \/\/ Size of individual items in bytes$/;"	m	struct:buffer_info
iter	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline iterator iter(handle obj) {$/;"	f
iterAlg	include/taco/index_notation/index_notation_nodes.h	/^  IterationAlgebra iterAlg;$/;"	m	struct:taco::CallNode
iterCtx	include/taco/tensor.h	/^      void* iterCtx;$/;"	m	struct:taco::TensorBase::const_iterator::Context
iterFunc	include/taco/tensor.h	/^    fnptr_t                        iterFunc;$/;"	m	class:taco::TensorBase::const_iterator
iterable	python_bindings/pybind11/include/pybind11/pytypes.h	/^class iterable : public object {$/;"	c
iterate	include/taco/tensor.h	/^Tensor<CType> iterate(const TensorBase& tensor) {$/;"	f	namespace:taco
iterationForest	src/lower/iteration_graph.cpp	/^  IterationForest           iterationForest;$/;"	m	struct:taco::IterationGraph::Content	file:
iterator	include/taco/storage/typed_vector.h	/^    iterator(pointer ptr, Datatype type) : ptr_(ptr), type(type) { }$/;"	f	class:taco::TypedVector::iterator
iterator	include/taco/storage/typed_vector.h	/^  class iterator$/;"	c	class:taco::TypedVector
iterator	include/taco/tensor.h	/^TensorBase::iterator_wrapper<int,CType> TensorBase::iterator() const {$/;"	f	class:taco::TensorBase
iterator	include/taco/tensor.h	/^TensorBase::iterator_wrapper<int,CType> TensorBase::iterator() {$/;"	f	class:taco::TensorBase
iterator	include/taco/util/collections.h	/^  typedef typename Collection::iterator iterator;$/;"	t	class:taco::util::ExcludeFirstIterable
iterator	python_bindings/pybind11/include/pybind11/cast.h	/^        iterator(instance *inst, const type_vec *tinfo)$/;"	f	struct:values_and_holders::iterator
iterator	python_bindings/pybind11/include/pybind11/cast.h	/^        iterator(size_t end) : curr(end) {}$/;"	f	struct:values_and_holders::iterator
iterator	python_bindings/pybind11/include/pybind11/cast.h	/^    struct iterator {$/;"	s	struct:values_and_holders
iterator	python_bindings/pybind11/include/pybind11/pytypes.h	/^class iterator : public object {$/;"	c
iterator	test/gtest/gtest.h	/^  typedef Element* iterator;$/;"	t	class:testing::internal::NativeArray
iterator	test/gtest/gtest.h	/^  typedef ParamIterator<T> iterator;$/;"	t	class:testing::internal::ParamGenerator
iteratorPacked	include/taco/tensor.h	/^TensorBase::iterator_wrapper<int,CType> TensorBase::iteratorPacked() {$/;"	f	class:taco::TensorBase
iteratorTyped	include/taco/tensor.h	/^TensorBase::iterator_wrapper<T,CType> TensorBase::iteratorTyped() const {$/;"	f	class:taco::TensorBase
iteratorTyped	include/taco/tensor.h	/^TensorBase::iterator_wrapper<T,CType> TensorBase::iteratorTyped() {$/;"	f	class:taco::TensorBase
iterator_	test/gtest/gtest.h	/^    typename ContainerType::const_iterator iterator_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
iterator_category	include/taco/storage/typed_vector.h	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:taco::TypedVector::const_iterator
iterator_category	include/taco/storage/typed_vector.h	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:taco::TypedVector::iterator
iterator_category	include/taco/tensor.h	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:taco::TensorBase::const_iterator
iterator_passthrough	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^    from pybind11_tests.sequences_and_iterators import iterator_passthrough$/;"	i
iterator_state	python_bindings/pybind11/include/pybind11/pybind11.h	/^struct iterator_state {$/;"	s
iterator_wrapper	include/taco/tensor.h	/^    iterator_wrapper(const TensorBase* tensor, bool iterateAll = true) : $/;"	f	class:taco::TensorBase::iterator_wrapper
iterator_wrapper	include/taco/tensor.h	/^  class iterator_wrapper {$/;"	c	class:taco::TensorBase
iterators	include/taco/lower/lowerer_impl.h	/^  Iterators iterators;$/;"	m	class:taco::LowererImpl
iterators	src/lower/merge_lattice.cpp	/^  Iterators iterators;$/;"	m	class:taco::MergeLatticeBuilder	file:
iterators	src/lower/merge_lattice.cpp	/^  std::vector<Iterator> iterators;$/;"	m	struct:taco::MergePoint::Content	file:
iterators	src/lower/merge_lattice.cpp	/^const vector<Iterator>& MergeLattice::iterators() const {$/;"	f	class:taco::MergeLattice
iterators	src/lower/merge_lattice.cpp	/^const vector<Iterator>& MergePoint::iterators() const {$/;"	f	class:taco::MergePoint
iterators	test/tests-merge_lattice.cpp	/^static Iterators iterators = Iterators(dummy, tensorVars);$/;"	m	namespace:tests	file:
iw	src/index_notation/transformations.cpp	/^  IndexVar iw;$/;"	m	struct:taco::Precompute::Content	file:
join	include/taco/util/strings.h	/^std::string join(Iterator begin, Iterator end, const std::string &sep=", ") {$/;"	f	namespace:taco::util
join	include/taco/util/strings.h	/^std::string join(const Collection &collection, const std::string &sep=", ") {$/;"	f	namespace:taco::util
join	include/taco/util/strings.h	/^std::string join(const std::map<K,V> &collection, const std::string &sep=", ") {$/;"	f	namespace:taco::util
join	python_bindings/pybind11/tests/test_iostream.cpp	/^    void join() {$/;"	f	struct:TestThread
join_new	test/gtest/gtest.h	/^  void join_new() {$/;"	f	class:testing::internal::linked_ptr_internal
kAlsoRunDisabledTestsFlag	test/gtest/gtest-all.cc	/^const char kAlsoRunDisabledTestsFlag[] = "also_run_disabled_tests";$/;"	m	namespace:testing::internal	file:
kAlternatePathSeparator	test/gtest/gtest-all.cc	/^const char kAlternatePathSeparator = '\/';$/;"	m	namespace:testing::internal	file:
kAlternatePathSeparatorString	test/gtest/gtest-all.cc	/^const char kAlternatePathSeparatorString[] = "\/";$/;"	m	namespace:testing::internal	file:
kAsIs	test/gtest/gtest-all.cc	/^  kAsIs,$/;"	e	enum:testing::internal::CharFormat	file:
kBitCount	test/gtest/gtest.h	/^  static const size_t kBitCount = 8*sizeof(RawType);$/;"	m	class:testing::internal::FloatingPoint
kBreakOnFailureFlag	test/gtest/gtest-all.cc	/^const char kBreakOnFailureFlag[] = "break_on_failure";$/;"	m	namespace:testing::internal	file:
kCatchExceptionsFlag	test/gtest/gtest-all.cc	/^const char kCatchExceptionsFlag[] = "catch_exceptions";$/;"	m	namespace:testing::internal	file:
kCheckTypeIsNotConstOrAReference	test/gtest/gtest.h	/^    kCheckTypeIsNotConstOrAReference = StaticAssertTypeEqHelper<$/;"	e	enum:testing::internal::NativeArray::__anon1
kColorEncodedHelpMessage	test/gtest/gtest-all.cc	/^static const char kColorEncodedHelpMessage[] =$/;"	m	namespace:testing::internal	file:
kColorFlag	test/gtest/gtest-all.cc	/^const char kColorFlag[] = "color";$/;"	m	namespace:testing::internal	file:
kConvertibleToInteger	test/gtest/gtest.h	/^  kConvertibleToInteger,  \/\/ a type implicitly convertible to BiggestInt$/;"	e	enum:testing::internal2::TypeKind
kCurrentDirectoryString	test/gtest/gtest-all.cc	/^const char kCurrentDirectoryString[] = ".\\\\";$/;"	m	namespace:testing::internal	file:
kCurrentDirectoryString	test/gtest/gtest-all.cc	/^const char kCurrentDirectoryString[] = "\\\\";$/;"	m	namespace:testing::internal	file:
kDeathTestCaseFilter	test/gtest/gtest-all.cc	/^static const char kDeathTestCaseFilter[] = "*DeathTest:*DeathTest\/*";$/;"	m	namespace:testing	file:
kDeathTestInternalError	test/gtest/gtest-all.cc	/^static const char kDeathTestInternalError = 'I';$/;"	m	namespace:testing::internal	file:
kDeathTestLived	test/gtest/gtest-all.cc	/^static const char kDeathTestLived = 'L';$/;"	m	namespace:testing::internal	file:
kDeathTestReturned	test/gtest/gtest-all.cc	/^static const char kDeathTestReturned = 'R';$/;"	m	namespace:testing::internal	file:
kDeathTestStyleFlag	test/gtest/gtest.h	/^const char kDeathTestStyleFlag[] = "death_test_style";$/;"	m	namespace:testing::internal
kDeathTestThrew	test/gtest/gtest-all.cc	/^static const char kDeathTestThrew = 'T';$/;"	m	namespace:testing::internal	file:
kDeathTestUseFork	test/gtest/gtest.h	/^const char kDeathTestUseFork[] = "death_test_use_fork";$/;"	m	namespace:testing::internal
kDefaultDeathTestStyle	test/gtest/gtest-all.cc	/^static const char kDefaultDeathTestStyle[] = "fast";$/;"	m	namespace:testing	file:
kDefaultOutputFile	test/gtest/gtest-all.cc	/^static const char kDefaultOutputFile[] = "test_detail.xml";$/;"	m	namespace:testing	file:
kDisableTestFilter	test/gtest/gtest-all.cc	/^static const char kDisableTestFilter[] = "DISABLED_*:*\/DISABLED_*";$/;"	m	namespace:testing	file:
kDynamic	test/gtest/gtest.h	/^  enum MutexType { kStatic = 0, kDynamic = 1 };$/;"	e	enum:std::tr1::Mutex::MutexType
kElidedFramesMarker	test/gtest/gtest-all.cc	/^  static const char* const kElidedFramesMarker;$/;"	m	class:testing::internal::OsStackTraceGetter	file:
kElidedFramesMarker	test/gtest/gtest-all.cc	/^OsStackTraceGetter::kElidedFramesMarker =$/;"	m	class:testing::internal::OsStackTraceGetter	file:
kExponentBitCount	test/gtest/gtest.h	/^  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;$/;"	m	class:testing::internal::FloatingPoint
kExponentBitMask	test/gtest/gtest.h	/^  static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);$/;"	m	class:testing::internal::FloatingPoint
kFatalFailure	test/gtest/gtest.h	/^    kFatalFailure      \/\/ Failed and the test should be terminated.$/;"	e	enum:testing::TestPartResult::Type
kFilterFlag	test/gtest/gtest-all.cc	/^const char kFilterFlag[] = "filter";$/;"	m	namespace:testing::internal	file:
kFractionBitCount	test/gtest/gtest.h	/^  static const size_t kFractionBitCount =$/;"	m	class:testing::internal::FloatingPoint
kFractionBitMask	test/gtest/gtest.h	/^  static const Bits kFractionBitMask =$/;"	m	class:testing::internal::FloatingPoint
kHexEscape	test/gtest/gtest-all.cc	/^  kHexEscape,$/;"	e	enum:testing::internal::CharFormat	file:
kInternalRunDeathTestFlag	test/gtest/gtest.h	/^const char kInternalRunDeathTestFlag[] = "internal_run_death_test";$/;"	m	namespace:testing::internal
kInvalidFileAttributes	test/gtest/gtest-all.cc	/^const DWORD kInvalidFileAttributes = 0xffffffff;$/;"	m	namespace:testing::internal	file:
kListTestsFlag	test/gtest/gtest-all.cc	/^const char kListTestsFlag[] = "list_tests";$/;"	m	namespace:testing::internal	file:
kMaxBiggestInt	test/gtest/gtest.h	/^const BiggestInt kMaxBiggestInt =$/;"	m	namespace:std::tr1
kMaxCodePoint1	test/gtest/gtest-all.cc	/^const UInt32 kMaxCodePoint1 = (static_cast<UInt32>(1) <<  7) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint2	test/gtest/gtest-all.cc	/^const UInt32 kMaxCodePoint2 = (static_cast<UInt32>(1) << (5 + 6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint3	test/gtest/gtest-all.cc	/^const UInt32 kMaxCodePoint3 = (static_cast<UInt32>(1) << (4 + 2*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint4	test/gtest/gtest-all.cc	/^const UInt32 kMaxCodePoint4 = (static_cast<UInt32>(1) << (3 + 3*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxRandomSeed	test/gtest/gtest-all.cc	/^const int kMaxRandomSeed = 99999;$/;"	m	namespace:testing::internal	file:
kMaxRange	test/gtest/gtest.h	/^  static const UInt32 kMaxRange = 1u << 31;$/;"	m	class:testing::internal::Random
kMaxStackTraceDepth	test/gtest/gtest.h	/^const int kMaxStackTraceDepth = 100;$/;"	m	namespace:testing
kMaxUlps	test/gtest/gtest.h	/^  static const size_t kMaxUlps = 4;$/;"	m	class:testing::internal::FloatingPoint
kModuleName	python_bindings/pybind11/tests/cross_module_gil_utils.cpp	/^constexpr char kModuleName[] = "cross_module_gil_utils";$/;"	m	namespace:__anon14	file:
kNonFatalFailure	test/gtest/gtest.h	/^    kNonFatalFailure,  \/\/ Failed but the test can continue.$/;"	e	enum:testing::TestPartResult::Type
kOtherType	test/gtest/gtest.h	/^  kOtherType              \/\/ anything else$/;"	e	enum:testing::internal2::TypeKind
kOutputFlag	test/gtest/gtest-all.cc	/^const char kOutputFlag[] = "output";$/;"	m	namespace:testing::internal	file:
kPathSeparator	test/gtest/gtest-all.cc	/^const char kPathSeparator = '\\\\';$/;"	m	namespace:testing::internal	file:
kPrintTimeFlag	test/gtest/gtest-all.cc	/^const char kPrintTimeFlag[] = "print_time";$/;"	m	namespace:testing::internal	file:
kProtobuf	test/gtest/gtest.h	/^  kProtobuf,              \/\/ a protobuf type$/;"	e	enum:testing::internal2::TypeKind
kProtobufOneLinerMaxLength	test/gtest/gtest.h	/^const size_t kProtobufOneLinerMaxLength = 50;$/;"	m	namespace:testing::internal2
kRandomSeedFlag	test/gtest/gtest-all.cc	/^const char kRandomSeedFlag[] = "random_seed";$/;"	m	namespace:testing::internal	file:
kRepeatFlag	test/gtest/gtest-all.cc	/^const char kRepeatFlag[] = "repeat";$/;"	m	namespace:testing::internal	file:
kReservedTestCaseAttributes	test/gtest/gtest-all.cc	/^static const char* const kReservedTestCaseAttributes[] = {$/;"	m	namespace:testing	file:
kReservedTestSuiteAttributes	test/gtest/gtest-all.cc	/^static const char* const kReservedTestSuiteAttributes[] = {$/;"	m	namespace:testing	file:
kReservedTestSuitesAttributes	test/gtest/gtest-all.cc	/^static const char* const kReservedTestSuitesAttributes[] = {$/;"	m	namespace:testing	file:
kShuffleFlag	test/gtest/gtest-all.cc	/^const char kShuffleFlag[] = "shuffle";$/;"	m	namespace:testing::internal	file:
kSignBitMask	test/gtest/gtest.h	/^  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);$/;"	m	class:testing::internal::FloatingPoint
kSpecialEscape	test/gtest/gtest-all.cc	/^  kSpecialEscape$/;"	e	enum:testing::internal::CharFormat	file:
kStackTraceDepthFlag	test/gtest/gtest-all.cc	/^const char kStackTraceDepthFlag[] = "stack_trace_depth";$/;"	m	namespace:testing::internal	file:
kStackTraceMarker	test/gtest/gtest-all.cc	/^const char kStackTraceMarker[] = "\\nStack trace:\\n";$/;"	m	namespace:testing::internal	file:
kStatic	test/gtest/gtest.h	/^  enum MutexType { kStatic = 0, kDynamic = 1 };$/;"	e	enum:std::tr1::Mutex::MutexType
kStaticMutex	test/gtest/gtest.h	/^  enum StaticConstructorSelector { kStaticMutex = 0 };$/;"	e	enum:std::tr1::Mutex::StaticConstructorSelector
kStdErrFileno	test/gtest/gtest-all.cc	/^const int kStdErrFileno = 2;$/;"	m	namespace:testing::internal	file:
kStdOutFileno	test/gtest/gtest-all.cc	/^const int kStdOutFileno = 1;$/;"	m	namespace:testing::internal	file:
kStreamResultToFlag	test/gtest/gtest-all.cc	/^const char kStreamResultToFlag[] = "stream_result_to";$/;"	m	namespace:testing::internal	file:
kSuccess	test/gtest/gtest.h	/^    kSuccess,          \/\/ Succeeded.$/;"	e	enum:testing::TestPartResult::Type
kTestShardIndex	test/gtest/gtest-all.cc	/^static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";$/;"	m	namespace:testing	file:
kTestShardStatusFile	test/gtest/gtest-all.cc	/^static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";$/;"	m	namespace:testing	file:
kTestTotalShards	test/gtest/gtest-all.cc	/^static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";$/;"	m	namespace:testing	file:
kTestTypeIdInGoogleTest	test/gtest/gtest-all.cc	/^extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();$/;"	m	namespace:testing::internal	file:
kThrowOnFailureFlag	test/gtest/gtest-all.cc	/^const char kThrowOnFailureFlag[] = "throw_on_failure";$/;"	m	namespace:testing::internal	file:
kTypeParamLabel	test/gtest/gtest-all.cc	/^static const char kTypeParamLabel[] = "TypeParam";$/;"	m	namespace:testing::internal	file:
kUniversalFilter	test/gtest/gtest-all.cc	/^static const char kUniversalFilter[] = "*";$/;"	m	namespace:testing	file:
kUnknownFile	test/gtest/gtest-all.cc	/^const char kUnknownFile[] = "unknown file";$/;"	m	namespace:testing::internal	file:
kValueParamLabel	test/gtest/gtest-all.cc	/^static const char kValueParamLabel[] = "GetParam()";$/;"	m	namespace:testing::internal	file:
keep_alive	python_bindings/pybind11/include/pybind11/attr.h	/^template <size_t Nurse, size_t Patient> struct keep_alive { };$/;"	s
keep_alive_impl	python_bindings/pybind11/include/pybind11/pybind11.h	/^PYBIND11_NOINLINE inline void keep_alive_impl(size_t Nurse, size_t Patient, function_call &call, handle ret) {$/;"	f
keep_alive_impl	python_bindings/pybind11/include/pybind11/pybind11.h	/^inline void keep_alive_impl(handle nurse, handle patient) {$/;"	f
key	python_bindings/pybind11/include/pybind11/pytypes.h	/^    PyObject *key = nullptr, *value = nullptr;$/;"	m	class:dict_readonly
key	python_bindings/pybind11/include/pybind11/pytypes.h	/^    key_type key;$/;"	m	class:accessor
key	test/gtest/gtest.h	/^  const char* key() const {$/;"	f	class:testing::TestProperty
key_	test/gtest/gtest-all.cc	/^  std::string key_;$/;"	m	class:testing::internal::TestPropertyKeyIs	file:
key_	test/gtest/gtest.h	/^  const pthread_key_t key_;$/;"	m	class:std::tr1::ThreadLocal
key_	test/gtest/gtest.h	/^  std::string key_;$/;"	m	class:testing::TestProperty
keywordString	src/ir/ir_printer.cpp	/^std::string IRPrinter::keywordString(std::string keyword) {$/;"	f	class:taco::ir::IRPrinter
kind	include/taco/error.h	/^  Kind kind;$/;"	m	struct:taco::ErrorReport
kind	include/taco/ir/ir.h	/^  LoopKind kind;$/;"	m	struct:taco::ir::For
kind	include/taco/ir/ir.h	/^  LoopKind kind;$/;"	m	struct:taco::ir::While
kind	include/taco/type.h	/^  Kind kind;$/;"	m	class:taco::Datatype
kind	python_bindings/pybind11/include/pybind11/numpy.h	/^    char kind() const {$/;"	f
kind	python_bindings/pybind11/include/pybind11/numpy.h	/^    char kind;$/;"	m	struct:PyArrayDescr_Proxy
kind	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    const Kind kind;$/;"	m	class:Animal::Kind	file:
kw_only	python_bindings/pybind11/include/pybind11/cast.h	/^struct kw_only {};$/;"	s
kwargs	python_bindings/pybind11/include/pybind11/pytypes.h	/^class kwargs : public dict { PYBIND11_OBJECT_DEFAULT(kwargs, dict, PyDict_Check)  };$/;"	c
kwargs_pos	python_bindings/pybind11/include/pybind11/cast.h	/^                        kwargs_pos = constexpr_first<argument_is_kwargs, Args...>() - (int) sizeof...(Args);$/;"	m	class:argument_loader
kwargs_proxy	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit kwargs_proxy(handle h) : handle(h) { }$/;"	f	class:kwargs_proxy
kwargs_proxy	python_bindings/pybind11/include/pybind11/pytypes.h	/^class kwargs_proxy : public handle {$/;"	c
kwargs_ref	python_bindings/pybind11/include/pybind11/cast.h	/^    object args_ref, kwargs_ref;$/;"	m	struct:function_call
labelCount	src/codegen/codegen_c.h	/^  int labelCount;$/;"	m	class:taco::ir::CodeGen_C
labelCount	src/codegen/codegen_cuda.h	/^  int labelCount;$/;"	m	class:taco::ir::CodeGen_CUDA
labelPrefix	src/codegen/codegen.cpp	/^const std::string labelPrefix = "resume_";$/;"	m	namespace:taco::ir	file:
lacking_copy_ctor	python_bindings/pybind11/tests/test_copy_move.cpp	/^struct lacking_copy_ctor : public empty<lacking_copy_ctor> {$/;"	s	file:
lacking_move_ctor	python_bindings/pybind11/tests/test_copy_move.cpp	/^struct lacking_move_ctor : public empty<lacking_move_ctor> {$/;"	s	file:
language	python_bindings/pybind11/docs/conf.py	/^language = None$/;"	v
lap	include/taco/util/timers.h	/^  void lap(const string& name) {$/;"	f	class:taco::util::LapTimer
last	python_bindings/pybind11/include/pybind11/detail/common.h	/^constexpr int last(int \/*i*\/, int result) { return result; }$/;"	f
last	python_bindings/pybind11/include/pybind11/detail/common.h	/^constexpr int last(int i, int result, T v, Ts... vs) { return last(i + 1, v ? i : result, vs...); }$/;"	f
lastChar	include/taco/parser/lexer.h	/^  int lastChar = ' ';$/;"	m	class:taco::parser::Lexer
lastCharPos	include/taco/parser/lexer.h	/^  int lastCharPos = -1;$/;"	m	class:taco::parser::Lexer
last_death_test_case_	test/gtest/gtest-all.cc	/^  int last_death_test_case_;$/;"	m	class:testing::internal::UnitTestImpl	file:
last_death_test_message_	test/gtest/gtest-all.cc	/^std::string DeathTest::last_death_test_message_;$/;"	m	class:testing::internal::DeathTest	file:
last_death_test_message_	test/gtest/gtest.h	/^  static std::string last_death_test_message_;$/;"	m	class:testing::internal::DeathTest
latex_documents	python_bindings/pybind11/docs/conf.py	/^latex_documents = [$/;"	v
latex_elements	python_bindings/pybind11/docs/conf.py	/^latex_elements = {$/;"	v
latex_engine	python_bindings/pybind11/docs/conf.py	/^latex_engine = "pdflatex"$/;"	v
lattice	src/lower/merge_lattice.cpp	/^  MergeLattice lattice = MergeLattice({});$/;"	m	class:taco::MergeLatticeBuilder	file:
latticesOfTemporaries	src/lower/merge_lattice.cpp	/^  map<TensorVar,MergeLattice> latticesOfTemporaries;$/;"	m	class:taco::MergeLatticeBuilder	file:
lcurly	include/taco/parser/lexer.h	/^  lcurly,$/;"	m	class:taco::parser::Token
ldbl_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:PartialStruct	file:
ldbl_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:SimpleStruct	file:
ldbl_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:SimpleStructReordered	file:
len	python_bindings/pybind11/include/pybind11/numpy.h	/^        int len;$/;"	m	struct:npy_api::__anon11
len	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline size_t len(handle h) {$/;"	f
len_hint	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline size_t len_hint(handle h) {$/;"	f
levelArrayTypes	include/taco/format.h	/^  std::vector<std::vector<Datatype>> levelArrayTypes;$/;"	m	class:taco::Format
levelIterator	src/lower/iterator.cpp	/^Iterator Iterators::levelIterator(ModeAccess modeAccess) const$/;"	f	class:taco::Iterators
levelIterators	src/lower/iterator.cpp	/^  map<ModeAccess,Iterator> levelIterators;$/;"	m	struct:taco::Iterators::Content	file:
levelIterators	src/lower/iterator.cpp	/^std::map<ModeAccess,Iterator> Iterators::levelIterators() const$/;"	f	class:taco::Iterators
lexer	src/parser/parser.cpp	/^  Lexer lexer;$/;"	m	struct:taco::parser::Parser::Content	file:
lexicographicalCmp	src/tensor.cpp	/^static int lexicographicalCmp(const void* a, const void* b) {$/;"	f	namespace:taco
lhs	include/taco/index_notation/index_notation_nodes.h	/^  Access    lhs;$/;"	m	struct:taco::AssignmentNode
lhs	include/taco/ir/ir.h	/^  Expr lhs;$/;"	m	struct:taco::ir::Assign
lib	python_bindings/pybind11/tools/libsize.py	/^lib = sys.argv[1]$/;"	v
lib_handle	include/taco/codegen/module.h	/^  void* lib_handle;$/;"	m	class:taco::ir::Module
libname	include/taco/codegen/module.h	/^  std::string libname;$/;"	m	class:taco::ir::Module
libsize	python_bindings/pybind11/tools/libsize.py	/^libsize = os.path.getsize(lib)$/;"	v
line	include/taco/error.h	/^  int line;$/;"	m	struct:taco::ErrorReport
line	test/gtest/gtest-all.cc	/^  int line;$/;"	m	struct:testing::internal::TraceInfo	file:
line	test/gtest/gtest.h	/^    int const line;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
line	test/gtest/gtest.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
line_	test/gtest/gtest-all.cc	/^  const int line_;$/;"	m	class:testing::internal::ExecDeathTest	file:
line_	test/gtest/gtest-all.cc	/^  const int line_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
line_	test/gtest/gtest.h	/^  int line_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
line_number	test/gtest/gtest.h	/^  int line_number() const { return line_number_; }$/;"	f	class:testing::TestPartResult
line_number_	test/gtest/gtest.h	/^  int line_number_;$/;"	m	class:testing::TestPartResult
link_	test/gtest/gtest.h	/^  linked_ptr_internal link_;$/;"	m	class:testing::internal::linked_ptr
linked_ptr	test/gtest/gtest.h	/^  explicit linked_ptr(T* ptr = NULL) { capture(ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	test/gtest/gtest.h	/^  linked_ptr(linked_ptr const& ptr) {  \/\/ NOLINT$/;"	f	class:testing::internal::linked_ptr
linked_ptr	test/gtest/gtest.h	/^  template <typename U> linked_ptr(linked_ptr<U> const& ptr) { copy(&ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	test/gtest/gtest.h	/^class linked_ptr {$/;"	c	namespace:testing::internal
linked_ptr_internal	test/gtest/gtest.h	/^class linked_ptr_internal {$/;"	c	namespace:testing::internal
list	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit list(size_t size = 0) : object(PyList_New((ssize_t) size), stolen_t{}) {$/;"	f	class:list
list	python_bindings/pybind11/include/pybind11/pytypes.h	/^class list : public object {$/;"	c
list_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Value> struct list_caster {$/;"	s
list_item	python_bindings/pybind11/include/pybind11/pytypes.h	/^struct list_item {$/;"	s
list_tests_	test/gtest/gtest-all.cc	/^  bool list_tests_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
listeners	test/gtest/gtest-all.cc	/^  TestEventListeners* listeners() { return &listeners_; }$/;"	f	class:testing::internal::UnitTestImpl
listeners	test/gtest/gtest-all.cc	/^TestEventListeners& UnitTest::listeners() {$/;"	f	class:testing::UnitTest
listeners_	test/gtest/gtest-all.cc	/^  TestEventListeners listeners_;$/;"	m	class:testing::internal::UnitTestImpl	file:
listeners_	test/gtest/gtest-all.cc	/^  std::vector<TestEventListener*> listeners_;$/;"	m	class:testing::internal::TestEventRepeater	file:
literals	python_bindings/pybind11/include/pybind11/cast.h	/^inline namespace literals {$/;"	n
literals	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline namespace literals {$/;"	n
lo	include/taco/index_notation/index_notation.h	/^  int lo;$/;"	m	struct:taco::WindowedIndexVar::Content
lo	include/taco/index_notation/index_notation_nodes.h	/^  int lo;$/;"	m	struct:taco::AccessWindow
lo	src/lower/iterator.cpp	/^    ir::Expr lo;$/;"	m	struct:taco::Iterator::Content::Window	file:
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle h, bool) {$/;"	f	class:type_caster
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool \/* convert *\/) { value = src; return static_cast<bool>(value); }$/;"	f	struct:pyobject_caster
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool \/* convert *\/) {$/;"	f	struct:pyobject_caster
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) { return subcaster.load(src, convert); }$/;"	f	class:type_caster
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:tuple_caster
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster_generic
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:string_caster
load	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:void_caster
load	python_bindings/pybind11/include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:duration_caster
load	python_bindings/pybind11/include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:type_caster
load	python_bindings/pybind11/include/pybind11/complex.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster
load	python_bindings/pybind11/include/pybind11/detail/init.h	/^    bool load(handle h, bool) {$/;"	f	class:type_caster
load	python_bindings/pybind11/include/pybind11/eigen.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster
load	python_bindings/pybind11/include/pybind11/eigen.h	/^    bool load(handle src, bool) {$/;"	f	struct:type_caster
load	python_bindings/pybind11/include/pybind11/functional.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster
load	python_bindings/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:array_caster
load	python_bindings/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:list_caster
load	python_bindings/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:map_caster
load	python_bindings/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:optional_caster
load	python_bindings/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:set_caster
load	python_bindings/pybind11/include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:variant_caster
load	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^  bool load(handle, bool) { return true; }$/;"	f	class:type_caster
load	python_bindings/pybind11/tests/test_copy_move.cpp	/^    bool load(handle src, bool) { value = CopyOnlyInt(src.cast<int>()); return true; }$/;"	f	struct:type_caster
load	python_bindings/pybind11/tests/test_copy_move.cpp	/^    bool load(handle src, bool) { value = MoveOnlyInt(src.cast<int>()); return true; }$/;"	f	struct:type_caster
load	python_bindings/pybind11/tests/test_copy_move.cpp	/^    bool load(handle src, bool) { value = MoveOrCopyInt(src.cast<int>()); return true; }$/;"	f	struct:type_caster
load	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    bool load(handle src, bool convert) {$/;"	f	struct:pybind11::detail::type_caster
load	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    bool load(handle, bool convert) {$/;"	f	struct:pybind11::detail::type_caster
load	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    bool load(handle, bool) { return true; }$/;"	f	struct:pybind11::detail::type_caster
load_alternative	python_bindings/pybind11/include/pybind11/stl.h	/^    bool load_alternative(handle src, bool convert, type_list<U, Us...>) {$/;"	f	struct:variant_caster
load_alternative	python_bindings/pybind11/include/pybind11/stl.h	/^    bool load_alternative(handle, bool, type_list<>) { return false; }$/;"	f	struct:variant_caster
load_bytes	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load_bytes(enable_if_t<!std::is_same<C, char>::value, handle>) { return false; }$/;"	f	struct:string_caster
load_bytes	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load_bytes(enable_if_t<std::is_same<C, char>::value, handle> src) {$/;"	f	struct:string_caster
load_impl	python_bindings/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE bool load_impl(handle src, bool convert) {$/;"	f	class:type_caster_generic
load_impl	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load_impl(const sequence &seq, bool convert, index_sequence<Is...>) {$/;"	f	class:tuple_caster
load_impl	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr bool load_impl(const sequence &, bool, index_sequence<>) { return true; }$/;"	f	class:tuple_caster
load_numpy_internals	python_bindings/pybind11/include/pybind11/numpy.h	/^inline PYBIND11_NOINLINE void load_numpy_internals(numpy_internals* &ptr) {$/;"	f
load_type	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T, typename SFINAE> type_caster<T, SFINAE> &load_type(type_caster<T, SFINAE> &conv, const handle &handle) {$/;"	f
load_type	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> make_caster<T> load_type(const handle &handle) {$/;"	f
load_value	python_bindings/pybind11/include/pybind11/cast.h	/^    bool load_value(value_and_holder &&v_h) {$/;"	f	struct:copyable_holder_caster
load_value	python_bindings/pybind11/include/pybind11/cast.h	/^    void load_value(value_and_holder &&v_h) {$/;"	f	class:type_caster_generic
loader_life_support	python_bindings/pybind11/include/pybind11/cast.h	/^    loader_life_support() {$/;"	f	class:loader_life_support
loader_life_support	python_bindings/pybind11/include/pybind11/cast.h	/^class loader_life_support {$/;"	c
loader_patient_stack	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::vector<PyObject *> loader_patient_stack; \/\/ Used by `loader_life_support`$/;"	m	struct:internals
loc	include/taco/ir/ir.h	/^  Expr loc;$/;"	m	struct:taco::ir::Load
loc	include/taco/ir/ir.h	/^  Expr loc;$/;"	m	struct:taco::ir::Store
loc	python_bindings/pybind11/docs/conf.py	/^loc = {}$/;"	v
loc	python_bindings/pybind11/setup.py	/^loc = {}$/;"	v
localVars	src/codegen/codegen_c.cpp	/^  vector<Expr> localVars;$/;"	m	class:taco::ir::CodeGen_C::FindVars	file:
localVars	src/codegen/codegen_c.h	/^  std::vector<Expr> localVars;$/;"	m	class:taco::ir::CodeGen_C
localVars	src/codegen/codegen_cuda.cpp	/^  vector<Expr> localVars;$/;"	m	class:taco::ir::CodeGen_CUDA::FindVars	file:
localVars	src/codegen/codegen_cuda.h	/^  std::vector<Expr> localVars;$/;"	m	class:taco::ir::CodeGen_CUDA
local_load	python_bindings/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE static void *local_load(PyObject *src, const type_info *ti) {$/;"	f	class:type_caster_generic
local_sdist_files	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^local_sdist_files = {$/;"	v
locate	include/taco/util/collections.h	/^size_t locate(const Collection &collection, const Value &value) {$/;"	f	namespace:taco::util
locate	src/lower/iterator.cpp	/^ModeFunction Iterator::locate(const std::vector<ir::Expr>& coords) const {$/;"	f	class:taco::Iterator
locate	src/lower/mode_format_dense.cpp	/^ModeFunction DenseModeFormat::locate(ir::Expr parentPos,$/;"	f	class:taco::DenseModeFormat
locate	src/lower/mode_format_impl.cpp	/^ModeFunction ModeFormatImpl::locate(ir::Expr parentPos,$/;"	f	class:taco::ModeFormatImpl
locateBounds	src/index_notation/provenance_graph.cpp	/^std::vector<ir::Expr> PosRelNode::locateBounds(std::vector<ir::Expr> coordBounds,$/;"	f	class:taco::PosRelNode
locateFromLeft	src/lower/merge_lattice.cpp	/^  static bool locateFromLeft(MergeLattice left, MergeLattice right)$/;"	f	class:taco::MergeLatticeBuilder	file:
locators	src/lower/merge_lattice.cpp	/^  std::vector<Iterator> locators;$/;"	m	struct:taco::MergePoint::Content	file:
locators	src/lower/merge_lattice.cpp	/^const std::vector<Iterator>& MergePoint::locators() const {$/;"	f	class:taco::MergePoint
locators	src/lower/merge_lattice.cpp	/^const vector<Iterator>& MergeLattice::locators() const {$/;"	f	class:taco::MergeLattice
log	src/index_notation/index_notation.cpp	/^IndexExpr log(IndexExpr a) {$/;"	f	namespace:taco
log10	src/index_notation/index_notation.cpp	/^IndexExpr log10(IndexExpr a) {$/;"	f	namespace:taco
log2	python_bindings/pybind11/include/pybind11/detail/common.h	/^inline static constexpr int log2(size_t n, int k = 0) { return (n <= 1) ? k : log2(n >> 1, k + 1); }$/;"	f
lookup	python_bindings/pybind11/include/pybind11/numpy.h	/^    static npy_api lookup() {$/;"	f	struct:npy_api
loopOrderAllowsShortCircuit	include/taco/lower/lowerer_impl.h	/^  bool loopOrderAllowsShortCircuit = false;$/;"	m	class:taco::LowererImpl
lower	src/index_notation/intrinsic.cpp	/^ir::Expr AbsIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::AbsIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr AcosIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::AcosIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr AcoshIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::AcoshIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr AsinIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::AsinIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr AsinhIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::AsinhIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr Atan2Intrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::Atan2Intrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr AtanIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::AtanIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr AtanhIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::AtanhIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr CbrtIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::CbrtIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr CosIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::CosIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr CoshIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::CoshIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr CubeIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::CubeIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr EqIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::EqIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr ExpIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::ExpIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr GtIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::GtIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr GteIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::GteIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr HeavisideIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::HeavisideIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr Log10Intrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::Log10Intrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr LogIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::LogIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr LtIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::LtIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr LteIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::LteIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr MaxIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::MaxIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr MinIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::MinIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr ModIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::ModIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr NeqIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::NeqIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr NotIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::NotIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr PowIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::PowIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr SinIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::SinIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr SinhIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::SinhIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr SqrtIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::SqrtIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr SquareIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::SquareIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr TanIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::TanIntrinsic
lower	src/index_notation/intrinsic.cpp	/^ir::Expr TanhIntrinsic::lower(const std::vector<ir::Expr>& args) const {$/;"	f	class:taco::TanhIntrinsic
lower	src/lower/lower.cpp	/^ir::Stmt lower(IndexStmt stmt, std::string name, $/;"	f	namespace:taco
lower	src/lower/lowerer_impl.cpp	/^  Expr lower(IndexExpr expr) {$/;"	f	class:taco::LowererImpl::Visitor
lower	src/lower/lowerer_impl.cpp	/^  Stmt lower(IndexStmt stmt) {$/;"	f	class:taco::LowererImpl::Visitor
lower	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lower(IndexExpr expr) {$/;"	f	class:taco::LowererImpl
lower	src/lower/lowerer_impl.cpp	/^LowererImpl::lower(IndexStmt stmt, string name, $/;"	f	class:taco::LowererImpl
lower	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lower(IndexStmt stmt) {$/;"	f	class:taco::LowererImpl
lower	test/tests-lower.cpp	/^struct lower : public TestWithParam<::testing::tuple<Test,Formats>> {};$/;"	s	namespace:taco::test	file:
lowerAccess	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerAccess(Access access) {$/;"	f	class:taco::LowererImpl
lowerAdd	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerAdd(Add add) {$/;"	f	class:taco::LowererImpl
lowerAssignment	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerAssignment(Assignment assignment)$/;"	f	class:taco::LowererImpl
lowerCallIntrinsic	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerCallIntrinsic(CallIntrinsic call) {$/;"	f	class:taco::LowererImpl
lowerCasesFromMap	src/lower/lowerer_impl.cpp	/^vector<Stmt> LowererImpl::lowerCasesFromMap(map<Iterator, Expr> iteratorToCondition,$/;"	f	class:taco::LowererImpl
lowerCast	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerCast(Cast cast) {$/;"	f	class:taco::LowererImpl
lowerDiv	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerDiv(Div div) {$/;"	f	class:taco::LowererImpl
lowerForall	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerForall(Forall forall)$/;"	f	class:taco::LowererImpl
lowerForallBody	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerForallBody(Expr coordinate, IndexStmt stmt,$/;"	f	class:taco::LowererImpl
lowerForallCloned	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerForallCloned(Forall forall) {$/;"	f	class:taco::LowererImpl
lowerForallCoordinate	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerForallCoordinate(Forall forall, Iterator iterator,$/;"	f	class:taco::LowererImpl
lowerForallDenseAcceleration	src/lower/lowerer_impl.cpp	/^  Stmt LowererImpl::lowerForallDenseAcceleration(Forall forall,$/;"	f	class:taco::LowererImpl
lowerForallDimension	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerForallDimension(Forall forall,$/;"	f	class:taco::LowererImpl
lowerForallFusedPosition	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerForallFusedPosition(Forall forall, Iterator iterator,$/;"	f	class:taco::LowererImpl
lowerForallPosition	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerForallPosition(Forall forall, Iterator iterator,$/;"	f	class:taco::LowererImpl
lowerIndexVar	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerIndexVar(IndexVar var) {$/;"	f	class:taco::LowererImpl
lowerLiteral	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerLiteral(Literal literal) {$/;"	f	class:taco::LowererImpl
lowerMergeCases	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerMergeCases(ir::Expr coordinate, IndexVar coordinateVar, IndexStmt stmt,$/;"	f	class:taco::LowererImpl
lowerMergeCasesWithExplicitZeroChecks	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerMergeCasesWithExplicitZeroChecks(ir::Expr coordinate, IndexVar coordinateVar, IndexStmt stmt,$/;"	f	class:taco::LowererImpl
lowerMergeLattice	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerMergeLattice(MergeLattice caseLattice, IndexVar coordinateVar,$/;"	f	class:taco::LowererImpl
lowerMergePoint	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerMergePoint(MergeLattice pointLattice,$/;"	f	class:taco::LowererImpl
lowerMul	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerMul(Mul mul) {$/;"	f	class:taco::LowererImpl
lowerMulti	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerMulti(Multi multi) {$/;"	f	class:taco::LowererImpl
lowerNeg	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerNeg(Neg neg) {$/;"	f	class:taco::LowererImpl
lowerSequence	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerSequence(Sequence sequence) {$/;"	f	class:taco::LowererImpl
lowerSqrt	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerSqrt(Sqrt sqrt) {$/;"	f	class:taco::LowererImpl
lowerSub	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerSub(Sub sub) {$/;"	f	class:taco::LowererImpl
lowerSuchThat	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerSuchThat(SuchThat suchThat) {$/;"	f	class:taco::LowererImpl
lowerTensorOp	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::lowerTensorOp(Call op) {$/;"	f	class:taco::LowererImpl
lowerWhere	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerWhere(Where where) {$/;"	f	class:taco::LowererImpl
lowerYield	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::lowerYield(Yield yield) {$/;"	f	class:taco::LowererImpl
lowererFunc	include/taco/index_notation/tensor_operator.h	/^  FuncBodyGenerator lowererFunc;$/;"	m	class:taco::Func
lparen	include/taco/parser/lexer.h	/^  lparen,$/;"	m	class:taco::parser::Token
lt	src/index_notation/index_notation.cpp	/^IndexExpr lt(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
lte	src/index_notation/index_notation.cpp	/^IndexExpr lte(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
lucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.BT
lucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CCR
lucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CCT
lucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CR
lucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.DR
lucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.DT
m	python_bindings/pybind11/tests/test_async.py	/^m = pytest.importorskip("pybind11_tests.async_module")$/;"	v
m	python_bindings/pybind11/tests/test_buffers.py	/^from pybind11_tests import buffers as m$/;"	i
m	python_bindings/pybind11/tests/test_builtin_casters.py	/^from pybind11_tests import builtin_casters as m$/;"	i
m	python_bindings/pybind11/tests/test_call_policies.py	/^from pybind11_tests import call_policies as m$/;"	i
m	python_bindings/pybind11/tests/test_callbacks.py	/^from pybind11_tests import callbacks as m$/;"	i
m	python_bindings/pybind11/tests/test_chrono.py	/^from pybind11_tests import chrono as m$/;"	i
m	python_bindings/pybind11/tests/test_class.py	/^from pybind11_tests import class_ as m$/;"	i
m	python_bindings/pybind11/tests/test_constants_and_functions.py	/^m = pytest.importorskip("pybind11_tests.constants_and_functions")$/;"	v
m	python_bindings/pybind11/tests/test_copy_move.py	/^from pybind11_tests import copy_move_policies as m$/;"	i
m	python_bindings/pybind11/tests/test_custom_type_casters.py	/^from pybind11_tests import custom_type_casters as m$/;"	i
m	python_bindings/pybind11/tests/test_docstring_options.py	/^from pybind11_tests import docstring_options as m$/;"	i
m	python_bindings/pybind11/tests/test_eigen.py	/^m = pytest.importorskip("pybind11_tests.eigen")$/;"	v
m	python_bindings/pybind11/tests/test_enum.py	/^from pybind11_tests import enums as m$/;"	i
m	python_bindings/pybind11/tests/test_eval.py	/^from pybind11_tests import eval_ as m$/;"	i
m	python_bindings/pybind11/tests/test_exceptions.py	/^from pybind11_tests import exceptions as m$/;"	i
m	python_bindings/pybind11/tests/test_factory_constructors.py	/^from pybind11_tests import factory_constructors as m$/;"	i
m	python_bindings/pybind11/tests/test_gil_scoped.py	/^from pybind11_tests import gil_scoped as m$/;"	i
m	python_bindings/pybind11/tests/test_iostream.py	/^from pybind11_tests import iostream as m$/;"	i
m	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^from pybind11_tests import kwargs_and_defaults as m$/;"	i
m	python_bindings/pybind11/tests/test_local_bindings.py	/^from pybind11_tests import local_bindings as m$/;"	i
m	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^from pybind11_tests import methods_and_attributes as m$/;"	i
m	python_bindings/pybind11/tests/test_modules.py	/^from pybind11_tests import modules as m$/;"	i
m	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^from pybind11_tests import multiple_inheritance as m$/;"	i
m	python_bindings/pybind11/tests/test_numpy_array.py	/^from pybind11_tests import numpy_array as m$/;"	i
m	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^from pybind11_tests import numpy_dtypes as m$/;"	i
m	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^from pybind11_tests import numpy_vectorize as m$/;"	i
m	python_bindings/pybind11/tests/test_opaque_types.py	/^from pybind11_tests import opaque_types as m$/;"	i
m	python_bindings/pybind11/tests/test_operator_overloading.py	/^from pybind11_tests import operators as m$/;"	i
m	python_bindings/pybind11/tests/test_pickling.py	/^from pybind11_tests import pickling as m$/;"	i
m	python_bindings/pybind11/tests/test_pytypes.py	/^from pybind11_tests import pytypes as m$/;"	i
m	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^    import pybind11_tests.sequences_and_iterators as m$/;"	i
m	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^from pybind11_tests import sequences_and_iterators as m$/;"	i
m	python_bindings/pybind11/tests/test_smart_ptr.py	/^m = pytest.importorskip("pybind11_tests.smart_ptr")$/;"	v
m	python_bindings/pybind11/tests/test_stl.py	/^from pybind11_tests import stl as m$/;"	i
m	python_bindings/pybind11/tests/test_stl_binders.py	/^from pybind11_tests import stl_binders as m$/;"	i
m	python_bindings/pybind11/tests/test_tagbased_polymorphic.py	/^from pybind11_tests import tagbased_polymorphic as m$/;"	i
m	python_bindings/pybind11/tests/test_union.py	/^from pybind11_tests import union_ as m$/;"	i
m	python_bindings/pybind11/tests/test_virtual_functions.py	/^m = pytest.importorskip("pybind11_tests.virtual_functions")$/;"	v
m	test/tests-transformation.cpp	/^static const Dimension n, m, o;$/;"	v	file:
m	test/tests-transpose.cpp	/^static const Dimension n, m, o;$/;"	v	file:
m7	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^    int m7(int x) throw() { return x-7; }$/;"	f	struct:test_exc_sp::C
m8	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^    int m8(int x) const throw() { return x-8; }$/;"	f	struct:test_exc_sp::C
m_base	python_bindings/pybind11/include/pybind11/pybind11.h	/^    detail::enum_base m_base;$/;"	m	class:enum_
m_base	python_bindings/pybind11/include/pybind11/pybind11.h	/^    handle m_base;$/;"	m	struct:enum_base
m_parent	python_bindings/pybind11/include/pybind11/pybind11.h	/^    handle m_parent;$/;"	m	struct:enum_base
m_ptr	python_bindings/pybind11/include/pybind11/pytypes.h	/^    PyObject *m_ptr = nullptr;$/;"	m	class:handle
m_ptr	python_bindings/pybind11/tests/object.h	/^    T *m_ptr;$/;"	m	class:ref
m_trace	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object m_type, m_value, m_trace;$/;"	m	class:error_already_set
m_type	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object m_type, m_value, m_trace;$/;"	m	class:error_already_set
m_value	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object m_type, m_value, m_trace;$/;"	m	class:error_already_set
m_view	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    Py_buffer *m_view = nullptr;$/;"	m	struct:buffer_info
magenta	src/ir/ir_printer.cpp	/^const std::string magenta="\\033[38;5;204m";$/;"	m	namespace:taco::ir	file:
main	apps/tensor_times_vector/tensor_times_vector.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	python_bindings/pybind11/pybind11/__main__.py	/^def main():$/;"	f
main	python_bindings/pybind11/tests/test_cmake_build/embed.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	python_bindings/pybind11/tests/test_embed/catch.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	test/test.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/taco.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main_headers	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^main_headers = {$/;"	v
make	include/taco/ir/ir.h	/^  static Expr make(T val) {$/;"	f	struct:taco::ir::Literal
make	include/taco/ir/ir.h	/^  static Expr make(T val, Datatype type) {$/;"	f	struct:taco::ir::Literal
make	include/taco/ir/ir.h	/^  static Expr make(TypedComponentVal val, Datatype type) {$/;"	f	struct:taco::ir::Literal
make	include/taco/ir/ir.h	/^  static Stmt make(const Stmts&... stmts) {$/;"	f	struct:taco::ir::Block
make	src/ir/ir.cpp	/^Expr Add::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Add
make	src/ir/ir.cpp	/^Expr Add::make(Expr a, Expr b, Datatype type) {$/;"	f	class:taco::ir::Add
make	src/ir/ir.cpp	/^Expr And::make(Expr a, Expr b) {$/;"	f	class:taco::ir::And
make	src/ir/ir.cpp	/^Expr BinOp::make(Expr a, Expr b, std::string op) {$/;"	f	class:taco::ir::BinOp
make	src/ir/ir.cpp	/^Expr BinOp::make(Expr a, Expr b, std::string strStart, std::string strMid, std::string strEnd) {$/;"	f	class:taco::ir::BinOp
make	src/ir/ir.cpp	/^Expr BitAnd::make(Expr a, Expr b) {$/;"	f	class:taco::ir::BitAnd
make	src/ir/ir.cpp	/^Expr BitOr::make(Expr a, Expr b) {$/;"	f	class:taco::ir::BitOr
make	src/ir/ir.cpp	/^Expr Call::make(const std::string& func, const std::vector<Expr>& args, $/;"	f	class:taco::ir::Call
make	src/ir/ir.cpp	/^Expr Cast::make(Expr a, Datatype newType) {$/;"	f	class:taco::ir::Cast
make	src/ir/ir.cpp	/^Expr Div::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Div
make	src/ir/ir.cpp	/^Expr Div::make(Expr a, Expr b, Datatype type) {$/;"	f	class:taco::ir::Div
make	src/ir/ir.cpp	/^Expr Eq::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Eq
make	src/ir/ir.cpp	/^Expr GetProperty::make(Expr tensor, TensorProperty property, int mode) {$/;"	f	class:taco::ir::GetProperty
make	src/ir/ir.cpp	/^Expr GetProperty::make(Expr tensor, TensorProperty property, int mode,$/;"	f	class:taco::ir::GetProperty
make	src/ir/ir.cpp	/^Expr Gt::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Gt
make	src/ir/ir.cpp	/^Expr Gte::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Gte
make	src/ir/ir.cpp	/^Expr Load::make(Expr arr) {$/;"	f	class:taco::ir::Load
make	src/ir/ir.cpp	/^Expr Load::make(Expr arr, Expr loc) {$/;"	f	class:taco::ir::Load
make	src/ir/ir.cpp	/^Expr Lt::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Lt
make	src/ir/ir.cpp	/^Expr Lte::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Lte
make	src/ir/ir.cpp	/^Expr Malloc::make(Expr size) {$/;"	f	class:taco::ir::Malloc
make	src/ir/ir.cpp	/^Expr Max::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Max
make	src/ir/ir.cpp	/^Expr Max::make(Expr a, Expr b, Datatype type) {$/;"	f	class:taco::ir::Max
make	src/ir/ir.cpp	/^Expr Max::make(std::vector<Expr> operands) {$/;"	f	class:taco::ir::Max
make	src/ir/ir.cpp	/^Expr Max::make(std::vector<Expr> operands, Datatype type) {$/;"	f	class:taco::ir::Max
make	src/ir/ir.cpp	/^Expr Min::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Min
make	src/ir/ir.cpp	/^Expr Min::make(Expr a, Expr b, Datatype type) {$/;"	f	class:taco::ir::Min
make	src/ir/ir.cpp	/^Expr Min::make(std::vector<Expr> operands) {$/;"	f	class:taco::ir::Min
make	src/ir/ir.cpp	/^Expr Min::make(std::vector<Expr> operands, Datatype type) {$/;"	f	class:taco::ir::Min
make	src/ir/ir.cpp	/^Expr Mul::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Mul
make	src/ir/ir.cpp	/^Expr Mul::make(Expr a, Expr b, Datatype type) {$/;"	f	class:taco::ir::Mul
make	src/ir/ir.cpp	/^Expr Neg::make(Expr a) {$/;"	f	class:taco::ir::Neg
make	src/ir/ir.cpp	/^Expr Neq::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Neq
make	src/ir/ir.cpp	/^Expr Or::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Or
make	src/ir/ir.cpp	/^Expr Rem::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Rem
make	src/ir/ir.cpp	/^Expr Rem::make(Expr a, Expr b, Datatype type) {$/;"	f	class:taco::ir::Rem
make	src/ir/ir.cpp	/^Expr Sizeof::make(Type type) {$/;"	f	class:taco::ir::Sizeof
make	src/ir/ir.cpp	/^Expr Sqrt::make(Expr a) {$/;"	f	class:taco::ir::Sqrt
make	src/ir/ir.cpp	/^Expr Sub::make(Expr a, Expr b) {$/;"	f	class:taco::ir::Sub
make	src/ir/ir.cpp	/^Expr Sub::make(Expr a, Expr b, Datatype type) {$/;"	f	class:taco::ir::Sub
make	src/ir/ir.cpp	/^Expr Var::make(std::string name, Datatype type, $/;"	f	class:taco::ir::Var
make	src/ir/ir.cpp	/^Stmt Allocate::make(Expr var, Expr num_elements, bool is_realloc, Expr old_elements, bool clear) {$/;"	f	class:taco::ir::Allocate
make	src/ir/ir.cpp	/^Stmt Assign::make(Expr lhs, Expr rhs, bool use_atomics, ParallelUnit atomic_parallel_unit) {$/;"	f	class:taco::ir::Assign
make	src/ir/ir.cpp	/^Stmt BlankLine::make() {$/;"	f	class:taco::ir::BlankLine
make	src/ir/ir.cpp	/^Stmt Block::make() {$/;"	f	class:taco::ir::Block
make	src/ir/ir.cpp	/^Stmt Block::make(std::vector<Stmt> stmts) {$/;"	f	class:taco::ir::Block
make	src/ir/ir.cpp	/^Stmt Break::make() {$/;"	f	class:taco::ir::Break
make	src/ir/ir.cpp	/^Stmt Case::make(std::vector<std::pair<Expr,Stmt>> clauses, bool alwaysMatch) {$/;"	f	class:taco::ir::Case
make	src/ir/ir.cpp	/^Stmt Comment::make(std::string text) {$/;"	f	class:taco::ir::Comment
make	src/ir/ir.cpp	/^Stmt Continue::make() {$/;"	f	class:taco::ir::Continue
make	src/ir/ir.cpp	/^Stmt For::make(Expr var, Expr start, Expr end, Expr increment, Stmt body,$/;"	f	class:taco::ir::For
make	src/ir/ir.cpp	/^Stmt Free::make(Expr var) {$/;"	f	class:taco::ir::Free
make	src/ir/ir.cpp	/^Stmt Function::make(std::string name,$/;"	f	class:taco::ir::Function
make	src/ir/ir.cpp	/^Stmt IfThenElse::make(Expr cond, Stmt then) {$/;"	f	class:taco::ir::IfThenElse
make	src/ir/ir.cpp	/^Stmt IfThenElse::make(Expr cond, Stmt then, Stmt otherwise) {$/;"	f	class:taco::ir::IfThenElse
make	src/ir/ir.cpp	/^Stmt Print::make(std::string fmt, std::vector<Expr> params) {$/;"	f	class:taco::ir::Print
make	src/ir/ir.cpp	/^Stmt Scope::make(Stmt scopedStmt) {$/;"	f	class:taco::ir::Scope
make	src/ir/ir.cpp	/^Stmt Sort::make(std::vector<Expr> args) {$/;"	f	class:taco::ir::Sort
make	src/ir/ir.cpp	/^Stmt Store::make(Expr arr, Expr loc, Expr data, bool use_atomics, ParallelUnit atomic_parallel_unit) {$/;"	f	class:taco::ir::Store
make	src/ir/ir.cpp	/^Stmt Switch::make(std::vector<std::pair<Expr,Stmt>> cases, Expr controlExpr) {$/;"	f	class:taco::ir::Switch
make	src/ir/ir.cpp	/^Stmt VarDecl::make(Expr var, Expr rhs) {$/;"	f	class:taco::ir::VarDecl
make	src/ir/ir.cpp	/^Stmt While::make(Expr cond, Stmt contents, LoopKind kind,$/;"	f	class:taco::ir::While
make	src/ir/ir.cpp	/^Stmt Yield::make(std::vector<Expr> coords, Expr val) {$/;"	f	class:taco::ir::Yield
make	src/lower/iteration_graph.cpp	/^IterationGraph IterationGraph::make(Assignment assignment) {$/;"	f	class:taco::IterationGraph
make	src/lower/merge_lattice.cpp	/^MergeLattice MergeLattice::make(Forall forall, Iterators iterators, ProvenanceGraph provGraph, std::set<IndexVar> definedIndexVars, std::map<TensorVar, const AccessNode *> whereTempsToResult)$/;"	f	class:taco::MergeLattice
makeAcceleratedConcreteNotation	src/index_notation/index_notation.cpp	/^IndexStmt makeAcceleratedConcreteNotation(IndexStmt stmt, std::vector<IndexExpr> AcceleratedExpressions) {$/;"	f	namespace:taco
makeArray	include/taco/storage/array.h	/^Array makeArray(T* data, size_t size, Array::Policy policy=Array::UserOwns) {$/;"	f	namespace:taco
makeArray	include/taco/storage/array.h	/^Array makeArray(const std::initializer_list<T>& values) {$/;"	f	namespace:taco
makeArray	include/taco/storage/array.h	/^Array makeArray(const std::vector<T>& values) {$/;"	f	namespace:taco
makeArray	src/storage/array.cpp	/^Array makeArray(Datatype type, size_t size) {$/;"	f	namespace:taco
makeCSC	include/taco/tensor.h	/^TensorBase makeCSC(const std::string& name, const std::vector<int>& dimensions,$/;"	f	namespace:taco
makeCSCIndex	src/storage/index.cpp	/^Index makeCSCIndex(const vector<int>& colptr, const vector<int>& rowidx) {$/;"	f	namespace:taco
makeCSCIndex	src/storage/index.cpp	/^Index makeCSCIndex(size_t numcols, int* colptr, int* rowidx) {$/;"	f	namespace:taco
makeCSR	include/taco/tensor.h	/^TensorBase makeCSR(const std::string& name, const std::vector<int>& dimensions,$/;"	f	namespace:taco
makeCSRIndex	src/storage/index.cpp	/^Index makeCSRIndex(const vector<int>& rowptr, const vector<int>& colidx) {$/;"	f	namespace:taco
makeCSRIndex	src/storage/index.cpp	/^Index makeCSRIndex(size_t numrows, int* rowptr, int* colidx) {$/;"	f	namespace:taco
makeConcreteNotation	src/index_notation/index_notation.cpp	/^IndexStmt makeConcreteNotation(IndexStmt stmt) {$/;"	f	namespace:taco
makeContext	include/taco/tensor.h	/^    static std::shared_ptr<Context> makeContext(int tensorOrder, $/;"	f	class:taco::TensorBase::const_iterator
makeReductionNotation	src/index_notation/index_notation.cpp	/^Assignment makeReductionNotation(Assignment assignment) {$/;"	f	namespace:taco
makeReductionNotation	src/index_notation/index_notation.cpp	/^IndexStmt makeReductionNotation(IndexStmt stmt) {$/;"	f	namespace:taco
makeTensor	python_bindings/src/pyTensor.cpp	/^static Tensor<T> makeTensor(std::string s, std::vector<int> shape, std::vector<ModeFormatPack> fmt) {$/;"	f	namespace:taco::pythonBindings
makeTensor	test/test_tensors.h	/^  Tensor<T> makeTensor(const std::string& name, Format format) const {$/;"	f	struct:taco::test::TensorData
makeTensor	test/test_tensors.h	/^  Tensor<T> makeTensor(const std::string& name, ModeFormat modeType) const {$/;"	f	struct:taco::test::TensorData
make_copy_constructor	python_bindings/pybind11/include/pybind11/cast.h	/^    static Constructor make_copy_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base
make_default_metaclass	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline PyTypeObject* make_default_metaclass() {$/;"	f
make_function_record	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE unique_function_record make_function_record() {$/;"	f	class:cpp_function
make_iterator	python_bindings/pybind11/include/pybind11/pybind11.h	/^          typename Type, typename... Extra> iterator make_iterator(Type &value, Extra&&... extra) {$/;"	f
make_iterator	python_bindings/pybind11/include/pybind11/pybind11.h	/^iterator make_iterator(Iterator first, Sentinel last, Extra &&... extra) {$/;"	f
make_key_iterator	python_bindings/pybind11/include/pybind11/pybind11.h	/^          typename Type, typename... Extra> iterator make_key_iterator(Type &value, Extra&&... extra) {$/;"	f
make_key_iterator	python_bindings/pybind11/include/pybind11/pybind11.h	/^iterator make_key_iterator(Iterator first, Sentinel last, Extra &&... extra) {$/;"	f
make_linked_ptr	test/gtest/gtest.h	/^linked_ptr<T> make_linked_ptr(T* ptr) {$/;"	f	namespace:testing::internal
make_move_constructor	python_bindings/pybind11/include/pybind11/cast.h	/^    static Constructor make_move_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base
make_new_instance	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline PyObject *make_new_instance(PyTypeObject *type) {$/;"	f
make_new_python_type	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline PyObject* make_new_python_type(const type_record &rec) {$/;"	f
make_object_base_type	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline PyObject *make_object_base_type(PyTypeObject *metaclass) {$/;"	f
make_release_tree	python_bindings/pybind11/setup.py	/^    def make_release_tree(self, base_dir, files):$/;"	m	class:SDist
make_static_property_type	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline PyTypeObject *make_static_property_type() {$/;"	f
make_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^    static S make_stride(EigenIndex outer, EigenIndex inner) { return S(outer, inner); }$/;"	f	struct:type_caster
make_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^    static S make_stride(EigenIndex outer, EigenIndex) { return S(outer); }$/;"	f	struct:type_caster
make_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^    static S make_stride(EigenIndex, EigenIndex inner) { return S(inner); }$/;"	f	struct:type_caster
make_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^    static S make_stride(EigenIndex, EigenIndex) { return S(); }$/;"	f	struct:type_caster
make_tuple	python_bindings/pybind11/include/pybind11/cast.h	/^          typename... Args> tuple make_tuple(Args&&... args_) {$/;"	f
make_tuple	python_bindings/pybind11/include/pybind11/cast.h	/^tuple make_tuple() { return tuple(0); }$/;"	f
make_tuple	test/gtest/gtest.h	/^inline GTEST_10_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline GTEST_1_TUPLE_(T) make_tuple(const T0& f0) {$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline GTEST_2_TUPLE_(T) make_tuple(const T0& f0, const T1& f1) {$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline GTEST_3_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2) {$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline GTEST_4_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline GTEST_5_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline GTEST_6_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline GTEST_7_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline GTEST_8_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline GTEST_9_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	test/gtest/gtest.h	/^inline tuple<> make_tuple() { return tuple<>(); }$/;"	f	namespace:std::tr1
man_pages	python_bindings/pybind11/docs/conf.py	/^man_pages = [(master_doc, "pybind11", "pybind11 Documentation", [author], 1)]$/;"	v
manip	include/taco/error.h	/^    Dummy &operator<<(std::ostream& (*manip)(std::ostream&)) {$/;"	f	struct:taco::Dummy
manip	include/taco/error.h	/^  ErrorReport &operator<<(std::ostream& (*manip)(std::ostream&)) {$/;"	f	struct:taco::ErrorReport
map	include/taco/util/collections.h	/^std::vector<ResultValue> map(const Collection &collection,$/;"	f	namespace:taco::util
map	python_bindings/pybind11/include/pybind11/eigen.h	/^    std::unique_ptr<MapType> map;$/;"	m	struct:type_caster
map_assignment	python_bindings/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void map_assignment(const Args &...) { }$/;"	f
map_assignment	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void map_assignment(enable_if_t<$/;"	f
map_assignment	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void map_assignment(enable_if_t<is_copy_assignable<typename Map::mapped_type>::value, Class_> &cl) {$/;"	f
map_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Key, typename Value> struct map_caster {$/;"	s
map_if_insertion_operator	python_bindings/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void map_if_insertion_operator(const Args &...) { }$/;"	f
mark	python_bindings/pybind11/tools/check-style.sh	/^function mark(pattern, string) { sub(pattern, "\\033[01;31m&\\033[0m", string); return string }$/;"	f
markAssignsAtomicDepth	include/taco/lower/lowerer_impl.h	/^  int markAssignsAtomicDepth = 0;$/;"	m	class:taco::LowererImpl
mark_parents_nonsimple	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void mark_parents_nonsimple(PyTypeObject *value) {$/;"	f	class:generic_type
master_doc	python_bindings/pybind11/docs/conf.py	/^master_doc = "index"$/;"	v
matColNormalize	test/tests-parafac.cpp	/^MatrixColumnNormalizeFactory        matColNormalize;$/;"	v
matColSquaredNorm	test/tests-parafac.cpp	/^MatrixColumnSquaredNormFactory      matColSquaredNorm;$/;"	v
matElwiseMul	test/tests-parafac.cpp	/^MatrixElwiseMultiplyFactory         matElwiseMul;$/;"	v
matMul	test/tests-parafac.cpp	/^MatrixMultiplyFactory               matMul;$/;"	v
matTransposeMul	test/tests-parafac.cpp	/^MatrixTransposeMultiplyFactory      matTransposeMul;$/;"	v
match	include/taco/index_notation/index_notation.h	/^  static void match($/;"	f	class:taco::IndexVarInterface
match	include/taco/index_notation/index_notation_nodes.h	/^  static void match(std::shared_ptr<IndexVarIterationModifier> ptr,$/;"	f	struct:taco::IndexVarIterationModifier
match	include/taco/index_notation/index_notation_visitor.h	/^  void match(IndexExpr indexExpr) {$/;"	f	class:taco::Matcher
match	include/taco/index_notation/index_notation_visitor.h	/^void match(IndexExpr indexExpr, Patterns... patterns) {$/;"	f	namespace:taco
matches	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool matches(handle exc) const { return PyErr_GivenExceptionMatches(m_type.ptr(), exc.ptr()); }$/;"	f	class:error_already_set
matches	python_bindings/pybind11/setup.py	/^    matches = dict(VERSION_REGEX.findall(f.read()))$/;"	v
matches_filter_	test/gtest/gtest.h	/^  bool matches_filter_;             \/\/ True if this test matches the$/;"	m	class:testing::TestInfo
matmul	python_bindings/pytaco/pytensor/taco_tensor.py	/^def matmul(t1, t2, out_format=default_mode, dtype=None):$/;"	f
matrixMultiply	test/tests-windowing.cpp	/^struct matrixMultiply : public TestWithParam<std::tuple<ModeFormat, ModeFormat>> {};$/;"	s	file:
max	src/index_notation/index_notation.cpp	/^IndexExpr max(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
max_expr_type	src/ir/ir.cpp	/^Datatype max_expr_type(Expr a, Expr b) {$/;"	f	namespace:taco::ir
max_type	src/type.cpp	/^Datatype max_type(Datatype a, Datatype b) {$/;"	f	namespace:taco
mean	include/taco/util/timers.h	/^  double mean;$/;"	m	struct:taco::util::TimeResults
median	include/taco/util/timers.h	/^  double median;$/;"	m	struct:taco::util::TimeResults
member	python_bindings/pybind11/tests/test_stl.cpp	/^    OptionalImpl<T> member = T{};$/;"	m	struct:OptionalHolder	file:
member_initialized	python_bindings/pybind11/tests/test_stl.cpp	/^    bool member_initialized() const {$/;"	f	struct:OptionalHolder
memoryview	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit memoryview(const buffer_info& info) {$/;"	f	class:memoryview
memoryview	python_bindings/pybind11/include/pybind11/pytypes.h	/^class memoryview : public object {$/;"	c
merge_lattice	test/tests-merge_lattice.cpp	/^struct merge_lattice : public TestWithParam<Test> {};$/;"	s	namespace:tests	file:
mergers	src/lower/merge_lattice.cpp	/^std::vector<Iterator> MergePoint::mergers() const {$/;"	f	class:taco::MergePoint
message	include/taco/error.h	/^  std::string message;$/;"	m	class:taco::TacoException
message	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^    std::string message;$/;"	m	class:Widget	file:
message	python_bindings/pybind11/tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException	file:
message	python_bindings/pybind11/tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException2	file:
message	python_bindings/pybind11/tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException3	file:
message	python_bindings/pybind11/tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException4	file:
message	test/gtest/gtest-all.cc	/^  std::string message;$/;"	m	struct:testing::internal::TraceInfo	file:
message	test/gtest/gtest.h	/^    std::string const message;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::std
message	test/gtest/gtest.h	/^  const char* message() const { return message_.c_str(); }$/;"	f	class:testing::TestPartResult
message	test/gtest/gtest.h	/^  const char* message() const {$/;"	f	class:testing::AssertionResult
message_	test/gtest/gtest.h	/^  internal::scoped_ptr< ::std::string> message_;$/;"	m	class:testing::AssertionResult
message_	test/gtest/gtest.h	/^  std::string message_;  \/\/ The test failure message.$/;"	m	class:testing::TestPartResult
messages	src/ir/ir_verifier.cpp	/^  std::stringstream messages;$/;"	m	class:taco::ir::__anon15::IRVerifier	file:
metaclass	python_bindings/pybind11/include/pybind11/attr.h	/^    explicit metaclass(handle value) : value(value) { }$/;"	f	struct:metaclass
metaclass	python_bindings/pybind11/include/pybind11/attr.h	/^    handle metaclass;$/;"	m	struct:type_record
metaclass	python_bindings/pybind11/include/pybind11/attr.h	/^    metaclass() { } \/\/ NOLINT(modernize-use-equals-default): breaks MSVC 2015 when adding an attribute$/;"	f	struct:metaclass
metaclass	python_bindings/pybind11/include/pybind11/attr.h	/^struct metaclass {$/;"	s
min	src/index_notation/index_notation.cpp	/^IndexExpr min(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
missing	python_bindings/pybind11/tools/make_changelog.py	/^missing = []$/;"	v
mkarray_via_buffer	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^py::array mkarray_via_buffer(size_t n) {$/;"	f	class:E1	file:
mod	src/index_notation/index_notation.cpp	/^IndexExpr mod(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
mode	include/taco/ir/ir.h	/^  int mode;$/;"	m	struct:taco::ir::GetProperty
mode	src/lower/iterator.cpp	/^  Mode     mode;$/;"	m	struct:taco::Iterator::Content	file:
mode	src/lower/mode.cpp	/^  int        mode;              \/\/\/ the location of mode in a mode hierarchy$/;"	m	struct:taco::Mode::Content	file:
mode	src/lower/mode_access.h	/^  int mode;$/;"	m	class:taco::ModeAccess
modeAccess	src/lower/iterator.cpp	/^ModeAccess Iterators::modeAccess(Iterator iterator) const$/;"	f	class:taco::Iterators
modeAccesses	src/lower/iterator.cpp	/^  map<Iterator,ModeAccess> modeAccesses;$/;"	m	struct:taco::Iterators::Content	file:
modeFormat	src/lower/mode.cpp	/^  ModeFormat modeFormat;        \/\/\/ the type of the mode$/;"	m	struct:taco::Mode::Content	file:
modeFormatPacks	include/taco/format.h	/^  std::vector<ModeFormatPack> modeFormatPacks;$/;"	m	class:taco::Format
modeFormats	include/taco/format.h	/^  std::vector<ModeFormat> modeFormats;$/;"	m	class:taco::ModeFormatPack
modeIterationLattice	src/lower/merge_lattice.cpp	/^  MergeLattice modeIterationLattice() {$/;"	f	class:taco::MergeLatticeBuilder	file:
modeIterator	src/lower/iterator.cpp	/^Iterator Iterators::modeIterator(IndexVar indexVar) const$/;"	f	class:taco::Iterators
modeIterators	src/lower/iterator.cpp	/^  map<IndexVar,Iterator>   modeIterators;$/;"	m	struct:taco::Iterators::Content	file:
modeIterators	src/lower/iterator.cpp	/^std::map<IndexVar, Iterator> Iterators::modeIterators() const {$/;"	f	class:taco::Iterators
modeOrdering	include/taco/format.h	/^  std::vector<int> modeOrdering;$/;"	m	class:taco::Format
modeOrderings1	test/tests-format.cpp	/^const auto modeOrderings1 = generateModeOrderings(1);$/;"	v
modeOrderings2	test/tests-format.cpp	/^const auto modeOrderings2 = generateModeOrderings(2);$/;"	v
modeOrderings3	test/tests-format.cpp	/^const auto modeOrderings3 = generateModeOrderings(3);$/;"	v
modePack	src/lower/mode.cpp	/^  ModePack   modePack;          \/\/\/ the pack that contains the mode$/;"	m	struct:taco::Mode::Content	file:
modeTypes1	test/tests-format.cpp	/^const auto modeTypes1 = generateModeTypes(1);$/;"	v
modeTypes2	test/tests-format.cpp	/^const auto modeTypes2 = generateModeTypes(2);$/;"	v
modeTypes3	test/tests-format.cpp	/^const auto modeTypes3 = generateModeTypes(3);$/;"	v
mode_ordering	include/taco/taco_tensor_t.h	/^  int32_t*     mode_ordering; \/\/ mode storage ordering$/;"	m	struct:taco_tensor_t
mode_types	include/taco/taco_tensor_t.h	/^  taco_mode_t* mode_types;    \/\/ mode storage types$/;"	m	struct:taco_tensor_t
modesWithDefaults	src/parser/parser.cpp	/^  set<pair<TensorVar,size_t>> modesWithDefaults;$/;"	m	struct:taco::parser::Parser::Content	file:
module	include/taco/tensor.h	/^  std::shared_ptr<ir::Module> module;$/;"	m	struct:taco::TensorBase::Content
module	src/index_notation/kernel.cpp	/^  shared_ptr<ir::Module> module;$/;"	m	struct:taco::Kernel::Content	file:
moduleFromUserSource	include/taco/codegen/module.h	/^  bool moduleFromUserSource;$/;"	m	class:taco::ir::Module
module_	python_bindings/pybind11/include/pybind11/pybind11.h	/^    explicit module_(const char *name, const char *doc = nullptr) {$/;"	f	class:module_
module_	python_bindings/pybind11/include/pybind11/pybind11.h	/^class module_ : public object {$/;"	c
module_local	python_bindings/pybind11/include/pybind11/attr.h	/^    bool module_local : 1;$/;"	m	struct:type_record
module_local	python_bindings/pybind11/include/pybind11/attr.h	/^struct module_local { const bool value; constexpr module_local(bool v = true) : value(v) { } };$/;"	f	struct:module_local
module_local	python_bindings/pybind11/include/pybind11/attr.h	/^struct module_local { const bool value; constexpr module_local(bool v = true) : value(v) { } };$/;"	s
module_local	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    bool module_local : 1;$/;"	m	struct:type_info
module_local_load	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    void *(*module_local_load)(PyObject *, const type_info *) = nullptr;$/;"	m	struct:type_info
module_methods	python_bindings/pybind11/tests/cross_module_gil_utils.cpp	/^PyMethodDef module_methods[] = {$/;"	m	namespace:__anon14	file:
moduledef	python_bindings/pybind11/tests/cross_module_gil_utils.cpp	/^struct PyModuleDef moduledef = {$/;"	m	namespace:__anon14	typeref:struct:__anon14::PyModuleDef	file:
molly	python_bindings/pybind11/tests/test_class.py	/^        molly = [cls("Molly") for _ in range(10)]$/;"	v	class:test_class_refcount.PyDog
move	python_bindings/pybind11/include/pybind11/cast.h	/^detail::enable_if_t<!detail::move_never<T>::value, T> move(object &&obj) {$/;"	f
move	python_bindings/pybind11/include/pybind11/detail/common.h	/^    move,$/;"	m	class:return_value_policy
moveLocateSubsetIteratorsToLocateSet	src/lower/merge_lattice.cpp	/^  moveLocateSubsetIteratorsToLocateSet(const vector<MergePoint>& points)$/;"	f	class:taco::MergeLatticeBuilder	file:
move_always	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T, typename SFINAE = void> struct move_always : std::false_type {};$/;"	s
move_always	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> struct move_always<T, enable_if_t<all_of<$/;"	s
move_assignments	python_bindings/pybind11/tests/constructor_stats.h	/^    int move_assignments = 0;$/;"	m	class:ConstructorStats
move_constructions	python_bindings/pybind11/tests/constructor_stats.h	/^    int move_constructions = 0;$/;"	m	class:ConstructorStats
move_created	python_bindings/pybind11/tests/constructor_stats.h	/^    void move_created(void *inst) {$/;"	f	class:ConstructorStats
move_if_unreferenced	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T, typename SFINAE = void> struct move_if_unreferenced : std::false_type {};$/;"	s
move_if_unreferenced	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> struct move_if_unreferenced<T, enable_if_t<all_of<$/;"	s
move_only_holder_caster	python_bindings/pybind11/include/pybind11/cast.h	/^struct move_only_holder_caster {$/;"	s
ms	python_bindings/pybind11/tests/test_modules.py	/^from pybind11_tests.modules import subsubmodule as ms$/;"	i
msg	include/taco/error.h	/^  std::ostringstream *msg;$/;"	m	struct:taco::ErrorReport
msg	include/taco/parser/parser.h	/^  std::string msg;$/;"	m	class:taco::parser::ParseError
msg	python_bindings/pybind11/setup.py	/^    msg = "Python version {} does not match C++ version {}!".format($/;"	v
msg	python_bindings/pybind11/tests/conftest.py	/^def msg():$/;"	f
msg	python_bindings/pybind11/tools/make_changelog.py	/^            msg = "* " + msg$/;"	v
msg	python_bindings/pybind11/tools/make_changelog.py	/^    msg = "## Suggested changelog entry:\\n\\n```rst\\n\\n```"$/;"	v
mtx	include/taco/tensor.h	/^  mtx,$/;"	m	class:taco::FileType
mul	include/taco/parser/lexer.h	/^  mul,$/;"	m	class:taco::parser::Token
multi	src/index_notation/index_notation.cpp	/^Multi multi(IndexStmt stmt1, IndexStmt stmt2) {$/;"	f	namespace:taco
multiple_inheritance	python_bindings/pybind11/include/pybind11/attr.h	/^    bool multiple_inheritance : 1;$/;"	m	struct:type_record
multiple_inheritance	python_bindings/pybind11/include/pybind11/attr.h	/^struct multiple_inheritance { };$/;"	s
multiply	src/storage/typed_index.cpp	/^void TypedIndex::multiply(IndexTypeUnion& result, const IndexTypeUnion& a, const IndexTypeUnion& b) const {$/;"	f	class:taco::TypedIndex
multiply	src/storage/typed_value.cpp	/^void TypedComponent::multiply(ComponentTypeUnion& result, const ComponentTypeUnion& a, const ComponentTypeUnion& b) const {$/;"	f	class:taco::TypedComponent
multiplyInt	src/storage/typed_index.cpp	/^void TypedIndex::multiplyInt(IndexTypeUnion& result, const IndexTypeUnion& a, const int b) const {$/;"	f	class:taco::TypedIndex
multiplyInt	src/storage/typed_value.cpp	/^void TypedComponent::multiplyInt(ComponentTypeUnion& result, const ComponentTypeUnion& a, const int b) const {$/;"	f	class:taco::TypedComponent
multiprocessing	python_bindings/pybind11/pybind11/setup_helpers.py	/^                import multiprocessing$/;"	i
multiprocessing	python_bindings/pybind11/tests/test_gil_scoped.py	/^import multiprocessing$/;"	i
mutate_at_t	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr_t& mutate_at_t(arr_t& a, Ix... idx) { a.mutable_at(idx...)++; return a; }$/;"	f
mutate_data	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr& mutate_data(arr& a, Ix... index) {$/;"	f
mutate_data_t	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> arr_t& mutate_data_t(arr_t& a, Ix... index) {$/;"	f
mutation	include/taco/index_notation/index_notation_nodes.h	/^  IndexStmt mutation;$/;"	m	struct:taco::SequenceNode
mutex_	test/gtest/gtest-all.cc	/^  Mutex mutex_;  \/\/ protects all internal state$/;"	m	class:testing::internal::OsStackTraceGetter	file:
mutex_	test/gtest/gtest-all.cc	/^  static Mutex mutex_;$/;"	m	class:testing::internal::ThreadLocalRegistryImpl	file:
mutex_	test/gtest/gtest.h	/^  Mutex* const mutex_;$/;"	m	class:std::tr1::GTestMutexLock
mutex_	test/gtest/gtest.h	/^  MutexBase* const mutex_;$/;"	m	class:std::tr1::GTestMutexLock
mutex_	test/gtest/gtest.h	/^  mutable internal::Mutex mutex_;$/;"	m	class:testing::UnitTest
mutex_	test/gtest/gtest.h	/^  pthread_mutex_t mutex_;  \/\/ The underlying pthread mutex.$/;"	m	class:std::tr1::MutexBase
mutex_	test/gtest/gtest.h	/^  pthread_mutex_t mutex_;$/;"	m	class:std::tr1::Notification
my_func	python_bindings/pybind11/tests/test_numpy_vectorize.cpp	/^double my_func(int x, float y, double z) {$/;"	f
n	test/tests-lower.cpp	/^static const Dimension n;$/;"	m	namespace:taco::test	file:
n	test/tests-merge_lattice.cpp	/^static const Dimension n;$/;"	m	namespace:tests	file:
n	test/tests-transformation.cpp	/^static const Dimension n, m, o;$/;"	v	file:
n	test/tests-transpose.cpp	/^static const Dimension n, m, o;$/;"	v	file:
n1	python_bindings/pybind11/docs/benchmark.py	/^        n1 = dt.datetime.now()$/;"	v
n2	python_bindings/pybind11/docs/benchmark.py	/^        n2 = dt.datetime.now()$/;"	v
naive_recompile	python_bindings/pybind11/pybind11/setup_helpers.py	/^def naive_recompile(obj, src):$/;"	f
name	include/taco/index_notation/index_notation.h	/^  std::string name;$/;"	m	class:taco::Call
name	include/taco/index_notation/index_notation.h	/^  std::string name;$/;"	m	struct:taco::IndexVar::Content
name	include/taco/index_notation/index_notation_nodes.h	/^  std::string name;$/;"	m	struct:taco::CallNode
name	include/taco/index_notation/index_notation_nodes.h	/^  std::string name;$/;"	m	struct:taco::IndexVarNode::Content
name	include/taco/index_notation/tensor_operator.h	/^  std::string name;$/;"	m	class:taco::Func
name	include/taco/ir/ir.h	/^  std::string name;$/;"	m	struct:taco::ir::Function
name	include/taco/ir/ir.h	/^  std::string name;$/;"	m	struct:taco::ir::GetProperty
name	include/taco/ir/ir.h	/^  std::string name;$/;"	m	struct:taco::ir::Var
name	include/taco/lower/mode_format_impl.h	/^  const std::string name;$/;"	m	class:taco::ModeFormatImpl
name	python_bindings/pybind11/include/pybind11/attr.h	/^    char *name = nullptr; \/* why no C++ strings? They generate heavier code.. *\/$/;"	m	struct:function_record
name	python_bindings/pybind11/include/pybind11/attr.h	/^    const char *name = nullptr;$/;"	m	struct:type_record
name	python_bindings/pybind11/include/pybind11/attr.h	/^    const char *name;  \/\/\/< Argument name$/;"	m	struct:argument_record
name	python_bindings/pybind11/include/pybind11/attr.h	/^struct name { const char *value; name(const char *value) : value(value) { } };$/;"	f	struct:name
name	python_bindings/pybind11/include/pybind11/attr.h	/^struct name { const char *value; name(const char *value) : value(value) { } };$/;"	s
name	python_bindings/pybind11/include/pybind11/cast.h	/^    const char *name; \/\/\/< If non-null, this is a named kwargs argument$/;"	m	struct:arg
name	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr auto name = _("Tuple[") + concat(make_caster<Ts>::name...) + _("]");$/;"	m	class:tuple_caster
name	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr auto name = _("capsule");$/;"	m	class:type_caster
name	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr auto name = _(PYBIND11_STRING_NAME);$/;"	m	struct:type_caster
name	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr auto name = _<type>();$/;"	m	class:type_caster_base
name	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr auto name = caster_t::name;$/;"	m	class:type_caster
name	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr auto name = type_caster_base<type>::name;$/;"	m	struct:move_only_holder_caster
name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<args> { static constexpr auto name = _("*args"); };$/;"	m	struct:handle_type_name
name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<bytes> { static constexpr auto name = _(PYBIND11_BYTES_NAME); };$/;"	m	struct:handle_type_name
name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<int_> { static constexpr auto name = _("int"); };$/;"	m	struct:handle_type_name
name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<iterable> { static constexpr auto name = _("Iterable"); };$/;"	m	struct:handle_type_name
name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<iterator> { static constexpr auto name = _("Iterator"); };$/;"	m	struct:handle_type_name
name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<kwargs> { static constexpr auto name = _("**kwargs"); };$/;"	m	struct:handle_type_name
name	python_bindings/pybind11/include/pybind11/cast.h	/^template <> struct handle_type_name<none> { static constexpr auto name = _("None"); };$/;"	m	struct:handle_type_name
name	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T> struct handle_type_name { static constexpr auto name = _<T>(); };$/;"	m	struct:handle_type_name
name	python_bindings/pybind11/include/pybind11/detail/init.h	/^    static constexpr auto name = _<value_and_holder>();$/;"	m	class:type_caster
name	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr auto name = props::descriptor;$/;"	m	struct:eigen_map_caster
name	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr auto name = props::descriptor;$/;"	m	struct:type_caster
name	python_bindings/pybind11/include/pybind11/numpy.h	/^template <> struct handle_type_name<array> { static constexpr auto name = _("numpy.ndarray"); };$/;"	m	struct:handle_type_name
name	python_bindings/pybind11/include/pybind11/pybind11.h	/^    object name() const { return attr("__name__"); }$/;"	f	class:cpp_function
name	python_bindings/pybind11/include/pybind11/pytypes.h	/^    const char *name() const { return PyCapsule_GetName(m_ptr); }$/;"	f	class:capsule
name	python_bindings/pybind11/tests/local_bindings.h	/^    const std::string &name() { return name_; }$/;"	f	class:pets::Pet
name	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^  static constexpr auto name = _<ConstRefCasted>();$/;"	m	class:type_caster	file:
name	python_bindings/pybind11/tests/test_copy_move.cpp	/^    static constexpr auto name = _("CopyOnlyInt");$/;"	m	struct:type_caster	file:
name	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    const std::string name;$/;"	m	class:Animal::Kind	file:
name	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def name(self):$/;"	m	class:tensor
name	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def name(self, name):$/;"	m	class:tensor
name	src/index_notation/index_notation.cpp	/^  string name;$/;"	m	struct:taco::TensorVar::Content	file:
name	test/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestCase
name	test/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestInfo
nameCounters	include/taco/util/name_generator.h	/^  std::map<std::string, int> nameCounters;$/;"	m	class:taco::util::NameGenerator
name_	python_bindings/pybind11/tests/local_bindings.h	/^    std::string name_;$/;"	m	class:pets::Pet
name_	test/gtest/gtest-all.cc	/^  std::string name_;$/;"	m	class:testing::__anon4::TestNameIs	file:
name_	test/gtest/gtest-all.cc	/^  std::string name_;$/;"	m	class:testing::internal::TestCaseNameIs	file:
name_	test/gtest/gtest.h	/^  const std::string name_;               \/\/ Test name$/;"	m	class:testing::TestInfo
name_	test/gtest/gtest.h	/^  std::string name_;$/;"	m	class:testing::TestCase
name_of_kind	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^std::string Animal::name_of_kind(Kind kind)$/;"	f	class:Animal::Animal
names	include/taco/parser/parser.h	/^  std::vector<std::string> names;$/;"	m	class:taco::parser::Parser
names	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *names;$/;"	m	struct:PyArrayDescr_Proxy
nargs	python_bindings/pybind11/docs/benchmark.py	/^nargs = 4  # Arguments per function$/;"	v
nargs	python_bindings/pybind11/include/pybind11/attr.h	/^    std::uint16_t nargs;$/;"	m	struct:function_record
nargs_kw_only	python_bindings/pybind11/include/pybind11/attr.h	/^    std::uint16_t nargs_kw_only = 0;$/;"	m	struct:function_record
nargs_pos_only	python_bindings/pybind11/include/pybind11/attr.h	/^    std::uint16_t nargs_pos_only = 0;$/;"	m	struct:function_record
nc	src/codegen/codegen_cuda.cpp	/^const std::string nc="\\033[0m";$/;"	m	namespace:taco::ir::__anon17	file:
nc	src/ir/ir_printer.cpp	/^const std::string nc="\\033[0m";$/;"	m	namespace:taco::ir	file:
nclasses	python_bindings/pybind11/docs/benchmark.py	/^        nclasses = 2 ** i$/;"	v
nd	python_bindings/pybind11/include/pybind11/numpy.h	/^    int nd;$/;"	m	struct:PyArray_Proxy
ndim	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    ssize_t ndim = 0;             \/\/ Number of dimensions$/;"	m	struct:buffer_info
needExplicitZeroChecks	src/lower/merge_lattice.cpp	/^bool MergeLattice::needExplicitZeroChecks() {$/;"	f	class:taco::MergeLattice
need_writeable	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr bool need_writeable = is_eigen_mutable_map<Type>::value;$/;"	m	struct:type_caster
needsAssemble	include/taco/tensor.h	/^  bool               needsAssemble;$/;"	m	struct:taco::TensorBase::Content
needsAssemble	src/tensor.cpp	/^bool TensorBase::needsAssemble() {$/;"	f	class:taco::TensorBase
needsCompile	include/taco/tensor.h	/^  bool               needsCompile;$/;"	m	struct:taco::TensorBase::Content
needsCompile	src/tensor.cpp	/^bool TensorBase::needsCompile() {$/;"	f	class:taco::TensorBase
needsCompute	include/taco/tensor.h	/^  bool               needsCompute;$/;"	m	struct:taco::TensorBase::Content
needsCompute	src/tensor.cpp	/^bool TensorBase::needsCompute() {$/;"	f	class:taco::TensorBase
needsPack	include/taco/tensor.h	/^  bool               needsPack;$/;"	m	struct:taco::TensorBase::Content
needsPack	src/tensor.cpp	/^bool TensorBase::needsPack() {$/;"	f	class:taco::TensorBase
needsParentheses	src/ir/ir_printer.cpp	/^bool IRPrinter::needsParentheses(Precedence precedence) {$/;"	f	class:taco::ir::IRPrinter
negate	src/storage/typed_value.cpp	/^void TypedComponent::negate(ComponentTypeUnion& result, const ComponentTypeUnion& a) const {$/;"	f	class:taco::TypedComponent
negation	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T> struct negation : bool_constant<!T::value> { };$/;"	s
negativestrides	python_bindings/pybind11/include/pybind11/eigen.h	/^    bool negativestrides = false;   \/\/ If true, do not use stride!$/;"	m	struct:EigenConformable
neq	src/index_notation/index_notation.cpp	/^IndexExpr neq(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
neverPacked	include/taco/tensor.h	/^  bool               neverPacked;$/;"	m	struct:taco::TensorBase::Content
neverPacked	src/tensor.cpp	/^bool TensorBase::neverPacked() {$/;"	f	class:taco::TensorBase
newlyRecoverableParents	src/index_notation/provenance_graph.cpp	/^std::vector<IndexVar> ProvenanceGraph::newlyRecoverableParents(taco::IndexVar indexVar,$/;"	f	class:taco::ProvenanceGraph
next	python_bindings/pybind11/include/pybind11/attr.h	/^    function_record *next = nullptr;$/;"	m	struct:function_record
nextToken	src/parser/parser.cpp	/^void Parser::nextToken() {$/;"	f	class:taco::parser::Parser
next_	test/gtest/gtest.h	/^  mutable linked_ptr_internal const* next_;$/;"	m	class:testing::internal::linked_ptr_internal
nfns	python_bindings/pybind11/docs/benchmark.py	/^nfns = 4  # Functions per class$/;"	v
no_nullptr	python_bindings/pybind11/include/pybind11/detail/init.h	/^inline void no_nullptr(void *ptr) {$/;"	f
no_recompile	python_bindings/pybind11/pybind11/setup_helpers.py	/^def no_recompile(obg, src):$/;"	f
noconvert	python_bindings/pybind11/include/pybind11/cast.h	/^    arg &noconvert(bool flag = true) { flag_noconvert = flag; return *this; }$/;"	f	struct:arg
noconvert	python_bindings/pybind11/include/pybind11/cast.h	/^    arg_v &noconvert(bool flag = true) { arg::noconvert(flag); return *this; }$/;"	f	struct:arg_v
nodelete	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct nodelete { template <typename T> void operator()(T*) { } };$/;"	s
nodes	include/taco/index_notation/provenance_graph.h	/^  std::set<IndexVar> nodes;$/;"	m	class:taco::ProvenanceGraph
noexcept	include/taco/error.h	/^  const char * what() const noexcept;$/;"	m	class:taco::TacoException
noexcept	include/taco/error.h	/^  ~ErrorReport() noexcept(false) {$/;"	f	struct:taco::ErrorReport
noexcept	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^    int m3(int x) noexcept(true) { return x-3; }$/;"	f	struct:test_exc_sp::C
noexcept	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^    int m4(int x) const noexcept(true) { return x-4; }$/;"	f	struct:test_exc_sp::C
noexcept	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^    int m5(int x) noexcept(false) { return x-5; }$/;"	f	struct:test_exc_sp::C
noexcept	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^    int m6(int x) const noexcept(false) { return x-6; }$/;"	f	struct:test_exc_sp::C
noexcept	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^int f1(int x) noexcept(true) { return x+1; }$/;"	f	namespace:test_exc_sp
noexcept	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^int f2(int x) noexcept(true) { return x+2; }$/;"	f	namespace:test_exc_sp
noexcept	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^int f3(int x) noexcept(false) { return x+3; }$/;"	f	namespace:test_exc_sp
noexcept	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^    explicit scope_exit(std::function<void()> f) noexcept : f_(std::move(f)) {}$/;"	m	struct:scope_exit	file:
noisy_funct_dual	python_bindings/pybind11/tests/test_iostream.cpp	/^void noisy_funct_dual(std::string msg, std::string emsg) {$/;"	f
noisy_function	python_bindings/pybind11/tests/test_iostream.cpp	/^void noisy_function(std::string msg, bool flush) {$/;"	f
none	python_bindings/pybind11/include/pybind11/attr.h	/^    bool none : 1;     \/\/\/< True if None is allowed when loading$/;"	m	struct:argument_record
none	python_bindings/pybind11/include/pybind11/cast.h	/^    arg &none(bool flag = true) { flag_none = flag; return *this; }$/;"	f	struct:arg
none	python_bindings/pybind11/include/pybind11/cast.h	/^    arg_v &none(bool flag = true) { arg::none(flag); return *this; }$/;"	f	struct:arg_v
none	python_bindings/pybind11/include/pybind11/cast.h	/^    bool none = false;$/;"	m	struct:type_caster
none	python_bindings/pybind11/include/pybind11/pytypes.h	/^    none() : object(Py_None, borrowed_t{}) { }$/;"	f	class:none
none	python_bindings/pybind11/include/pybind11/pytypes.h	/^class none : public object {$/;"	c
none1	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^int none1(const NoneTester &obj) { return obj.answer; }$/;"	f
none2	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^int none2(NoneTester *obj) { return obj ? obj->answer : -1; }$/;"	f
none3	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^int none3(std::shared_ptr<NoneTester> &obj) { return obj ? obj->answer : -1; }$/;"	f
none4	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^int none4(std::shared_ptr<NoneTester> *obj) { return obj && *obj ? (*obj)->answer : -1; }$/;"	f
none5	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^int none5(std::shared_ptr<NoneTester> obj) { return obj ? obj->answer : -1; }$/;"	f
nonfatally_failed	test/gtest/gtest.h	/^  bool nonfatally_failed() const { return type_ == kNonFatalFailure; }$/;"	f	class:testing::TestPartResult
nonsimple	python_bindings/pybind11/include/pybind11/detail/common.h	/^        nonsimple_values_and_holders nonsimple;$/;"	m	union:instance::__anon13
nonsimple_values_and_holders	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct nonsimple_values_and_holders {$/;"	s
nop	src/ir/ir.cpp	/^static bool nop(const Stmt& stmt) {$/;"	f	namespace:taco::ir
noqa	python_bindings/pybind11/tests/conftest.py	/^import pybind11_tests  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_buffers.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_builtin_casters.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_call_policies.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_chrono.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_class.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_eval.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_factory_constructors.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_local_bindings.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_numpy_array.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_pickling.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_pytypes.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_smart_ptr.py	/^from pybind11_tests import ConstructorStats  # noqa: E402$/;"	i
noqa	python_bindings/pybind11/tests/test_stl_binders.py	/^import env  # noqa: F401$/;"	i
noqa	python_bindings/pybind11/tests/test_virtual_functions.py	/^from pybind11_tests import ConstructorStats  # noqa: E402$/;"	i
noqa	python_bindings/pybind11/tests/test_virtual_functions.py	/^import env  # noqa: F401$/;"	i
not_equal	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool not_equal(object_api const &other) const  { return rich_compare(other, Py_NE); }$/;"	f	class:object_api
notified_	test/gtest/gtest.h	/^  bool notified_;$/;"	m	class:std::tr1::Notification
np	python_bindings/pybind11/tests/test_buffers.py	/^np = pytest.importorskip("numpy")$/;"	v
np	python_bindings/pybind11/tests/test_eigen.py	/^np = pytest.importorskip("numpy")$/;"	v
np	python_bindings/pybind11/tests/test_numpy_array.py	/^np = pytest.importorskip("numpy")$/;"	v
np	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^np = pytest.importorskip("numpy")$/;"	v
np	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^np = pytest.importorskip("numpy")$/;"	v
np	python_bindings/pytaco/pytensor/taco_tensor.py	/^import numpy as np$/;"	i
np	python_bindings/unit_tests.py	/^import numpy as np$/;"	i
npy_api	python_bindings/pybind11/include/pybind11/numpy.h	/^struct npy_api {$/;"	s
numIndexArrays	src/storage/index.cpp	/^int ModeIndex::numIndexArrays() const {$/;"	f	class:taco::ModeIndex
numIntegersToCompare	src/tensor.cpp	/^static size_t numIntegersToCompare = 0;$/;"	m	namespace:taco	file:
numModeIndices	src/storage/index.cpp	/^int Index::numModeIndices() const {$/;"	f	class:taco::Index
numModes	src/lower/mode.cpp	/^  size_t numModes = 0;$/;"	m	struct:taco::ModePack::Content	file:
numResults	include/taco/index_notation/kernel.h	/^  size_t numResults;$/;"	m	class:taco::Kernel
numResults	src/lower/mode_format_impl.cpp	/^size_t ModeFunction::numResults() const {$/;"	f	class:taco::ModeFunction
numThreads	src/codegen/codegen_cuda.cpp	/^  vector<Expr> numThreads;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
numWarps	src/codegen/codegen_cuda.cpp	/^  vector<Expr> numWarps;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
num_elements	include/taco/ir/ir.h	/^  Expr num_elements;$/;"	m	struct:taco::ir::Allocate
numpy_internals	python_bindings/pybind11/include/pybind11/numpy.h	/^struct numpy_internals {$/;"	s
numpy_type_info	python_bindings/pybind11/include/pybind11/numpy.h	/^struct numpy_type_info {$/;"	s
numpydoc_attributes_as_param_list	python_bindings/source/conf.py	/^numpydoc_attributes_as_param_list = True$/;"	v
numpydoc_class_members_toctree	python_bindings/source/conf.py	/^numpydoc_class_members_toctree = False$/;"	v
numpydoc_show_class_members	python_bindings/source/conf.py	/^numpydoc_show_class_members = False$/;"	v
o	test/tests-transformation.cpp	/^static const Dimension n, m, o;$/;"	v	file:
o	test/tests-transpose.cpp	/^static const Dimension n, m, o;$/;"	v	file:
obj	python_bindings/pybind11/include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:accessor
obj	python_bindings/pybind11/include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:dict_readonly
obj	python_bindings/pybind11/include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:sequence_slow_readwrite
obj_attr	python_bindings/pybind11/include/pybind11/pytypes.h	/^struct obj_attr {$/;"	s
object	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object(const object &o) : handle(o) { inc_ref(); }$/;"	f	class:object
object	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object(handle h, bool is_borrowed) : handle(h) { if (is_borrowed) inc_ref(); }$/;"	f	class:object
object	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object(handle h, borrowed_t) : handle(h) { inc_ref(); }$/;"	f	class:object
object	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object(handle h, stolen_t) : handle(h) { }$/;"	f	class:object
object	python_bindings/pybind11/include/pybind11/pytypes.h	/^class object : public handle {$/;"	c
object_api	python_bindings/pybind11/include/pybind11/pytypes.h	/^class object_api : public pyobject_tag {$/;"	c
object_or_cast	python_bindings/pybind11/include/pybind11/cast.h	/^object object_or_cast(T &&o) { return pybind11::cast(std::forward<T>(o)); }$/;"	f
object_or_cast	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline handle object_or_cast(PyObject *ptr) { return ptr; }$/;"	f
obval	python_bindings/pybind11/include/pybind11/numpy.h	/^    char *obval;$/;"	m	struct:PyVoidScalarObject_Proxy
of	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static type of() {return type(type::handle_of<T>(), borrowed_t{}); }$/;"	f	class:type
of	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static type of(handle h) { return type(type::handle_of(h), borrowed_t{}); }$/;"	f	class:type
offset_at	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> py::ssize_t offset_at(const arr& a, Ix... idx) { return a.offset_at(idx...); }$/;"	f
offset_at_t	python_bindings/pybind11/tests/test_numpy_array.cpp	/^template<typename... Ix> py::ssize_t offset_at_t(const arr_t& a, Ix... idx) { return a.offset_at(idx...); }$/;"	f
old	python_bindings/pybind11/include/pybind11/iostream.h	/^    std::streambuf *old;$/;"	m	class:scoped_ostream_redirect
old_elements	include/taco/ir/ir.h	/^  Expr old_elements; \/\/ used for realloc in CUDA$/;"	m	struct:taco::ir::Allocate
old_reporter_	test/gtest/gtest-all.cc	/^  TestPartResultReporterInterface* old_reporter_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter	file:
oldsize	python_bindings/pybind11/tools/libsize.py	/^        oldsize = int(sf.readline())$/;"	v
omitPoint	src/lower/merge_lattice.cpp	/^  bool omitPoint;$/;"	m	struct:taco::MergePoint::Content	file:
on	python_bindings/pybind11/tests/test_pickling.py	/^    import cPickle as pickle  # Use cPickle on Python 2.7$/;"	i
on_rtd	python_bindings/pybind11/docs/conf.py	/^on_rtd = os.environ.get("READTHEDOCS", None) == "True"$/;"	v
one_char	python_bindings/pybind11/include/pybind11/cast.h	/^    CharT one_char = 0;$/;"	m	struct:type_caster
one_to_n	python_bindings/pybind11/tests/test_stl_binders.cpp	/^template <class Container> Container *one_to_n(int n) {$/;"	f
op	include/taco/index_notation/index_notation_nodes.h	/^  IndexExpr op;  \/\/ The binary reduction operator, which is a `BinaryExprNode`$/;"	m	struct:taco::ReductionNode
op	include/taco/index_notation/index_notation_nodes.h	/^  IndexExpr op;$/;"	m	struct:taco::AssignmentNode
op_	python_bindings/pybind11/include/pybind11/operators.h	/^template <op_id id, op_type ot, typename L, typename R> struct op_ {$/;"	s
op_impl	python_bindings/pybind11/include/pybind11/operators.h	/^template <op_id, op_type, typename B, typename L, typename R> struct op_impl { };$/;"	s
openStream	src/util/files.cpp	/^void openStream(std::fstream& stream, std::string path, fstream::openmode mode) {$/;"	f	namespace:taco::util
operands	include/taco/ir/ir.h	/^  std::vector<Expr> operands;$/;"	m	struct:taco::ir::Max
operands	include/taco/ir/ir.h	/^  std::vector<Expr> operands;$/;"	m	struct:taco::ir::Min
operator	python_bindings/pytaco/pytensor/taco_tensor.py	/^import operator$/;"	i
operator !	test/gtest/gtest-all.cc	/^AssertionResult AssertionResult::operator!() const {$/;"	f	class:testing::AssertionResult
operator !=	include/taco/storage/typed_vector.h	/^    bool operator!=(const self_type& rhs) { return ptr_ != rhs.ptr_; }$/;"	f	class:taco::TypedVector::const_iterator
operator !=	include/taco/storage/typed_vector.h	/^    bool operator!=(const self_type& rhs) { return ptr_ != rhs.ptr_; }$/;"	f	class:taco::TypedVector::iterator
operator !=	include/taco/storage/typed_vector.h	/^  bool operator!=(const TypedVector &other) const {$/;"	f	class:taco::TypedVector
operator !=	include/taco/tensor.h	/^      friend bool operator!=(const Coordinates& a, const Coordinates& b) {$/;"	f	class:taco::TensorBase::const_iterator::Coordinates
operator !=	include/taco/tensor.h	/^    bool operator!=(const const_iterator& rhs) {$/;"	f	class:taco::TensorBase::const_iterator
operator !=	include/taco/util/collections.h	/^    friend bool operator!=(const ZipConstIterator &l,$/;"	f	class:taco::util::ZipConstIterable::ZipConstIterator
operator !=	include/taco/util/comparable.h	/^bool operator!=(const Comparable<T> &lhs, const Comparable<T> &rhs) {$/;"	f	namespace:taco::util
operator !=	include/taco/util/intrusive_ptr.h	/^  bool operator!=(const IntrusivePtr<T> &p1, const IntrusivePtr<T> &p2) {$/;"	f	class:taco::util::IntrusivePtr
operator !=	python_bindings/pybind11/include/pybind11/cast.h	/^        bool operator!=(const iterator &other) const { return curr.index != other.curr.index; }$/;"	f	struct:values_and_holders::iterator
operator !=	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool operator!=(const handle &h) const { return m_ptr != h.m_ptr; }$/;"	f	class:handle
operator !=	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend bool operator!=(const It &a, const It &b) { return !(a == b); }$/;"	f	class:generic_iterator
operator !=	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend bool operator!=(const iterator &a, const iterator &b) { return a->ptr() != b->ptr(); }$/;"	f	class:iterator
operator !=	python_bindings/pybind11/tests/object.h	/^    bool operator!=(const T* ptr) const { return m_ptr != ptr; }$/;"	f	class:ref
operator !=	python_bindings/pybind11/tests/object.h	/^    bool operator!=(const ref &r) const { return m_ptr != r.m_ptr; }$/;"	f	class:ref
operator !=	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    bool operator!=(const Vector2 &v) const {$/;"	f	class:Vector2
operator !=	src/format.cpp	/^bool operator!=(const Format& a, const Format& b) {$/;"	f	namespace:taco
operator !=	src/format.cpp	/^bool operator!=(const ModeFormat& a, const ModeFormat& b) {$/;"	f	namespace:taco
operator !=	src/format.cpp	/^bool operator!=(const ModeFormatPack& a, const ModeFormatPack& b) {$/;"	f	namespace:taco
operator !=	src/index_notation/index_notation.cpp	/^bool operator!=(const IndexVar& a , const IndexVar& b) {$/;"	f	namespace:taco
operator !=	src/lower/merge_lattice.cpp	/^bool operator!=(const MergeLattice& a, const MergeLattice& b) {$/;"	f	namespace:taco
operator !=	src/lower/merge_lattice.cpp	/^bool operator!=(const MergePoint& a, const MergePoint& b) {$/;"	f	namespace:taco
operator !=	src/lower/mode_format_impl.cpp	/^bool operator!=(const ModeFormatImpl& a, const ModeFormatImpl& b) {$/;"	f	namespace:taco
operator !=	src/storage/typed_index.cpp	/^bool TypedIndexPtr::operator!= (const TypedIndexPtr &other) const {$/;"	f	class:taco::TypedIndexPtr
operator !=	src/storage/typed_index.cpp	/^bool operator!=(const TypedIndexVal& a, const TypedIndexVal &other) {$/;"	f	namespace:taco
operator !=	src/storage/typed_index.cpp	/^bool operator!=(const TypedIndexVal& a, const int other) {$/;"	f	namespace:taco
operator !=	src/storage/typed_value.cpp	/^bool TypedComponentPtr::operator!= (const TypedComponentPtr &other) const {$/;"	f	class:taco::TypedComponentPtr
operator !=	src/storage/typed_value.cpp	/^bool operator!=(const TypedComponentVal& a, const TypedComponentVal &other) {$/;"	f	namespace:taco
operator !=	src/storage/typed_value.cpp	/^bool operator!=(const TypedComponentVal& a, const int other) {$/;"	f	namespace:taco
operator !=	src/tensor.cpp	/^bool operator!=(const TensorBase& a, const TensorBase& b) {$/;"	f	namespace:taco
operator !=	src/type.cpp	/^bool operator!=(const Datatype& a, const Datatype& b) {$/;"	f	namespace:taco
operator !=	src/type.cpp	/^bool operator!=(const Dimension& a, const Dimension& b) {$/;"	f	namespace:taco
operator !=	src/type.cpp	/^bool operator!=(const Shape& a, const Shape& b) {$/;"	f	namespace:taco
operator !=	src/type.cpp	/^bool operator!=(const Type& a, const Type& b) {$/;"	f	namespace:taco
operator !=	test/gtest/gtest.h	/^  bool operator!=(T* p) const { return value_ != p; }$/;"	f	class:testing::internal::linked_ptr
operator !=	test/gtest/gtest.h	/^  bool operator!=(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator !=	test/gtest/gtest.h	/^  bool operator!=(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator !=	test/gtest/gtest.h	/^bool operator!=(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator &	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    T** operator&() { throw std::logic_error("Call of overloaded operator& is not expected"); }$/;"	f	class:shared_ptr_with_addressof_operator
operator &	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    T** operator&() { throw std::logic_error("Call of overloaded operator& is not expected"); }$/;"	f	class:unique_ptr_with_addressof_operator
operator &	src/storage/typed_index.cpp	/^TypedIndexPtr TypedIndexRef::operator&() const {$/;"	f	class:taco::TypedIndexRef
operator &	src/storage/typed_value.cpp	/^TypedComponentPtr TypedComponentRef::operator&() const {$/;"	f	class:taco::TypedComponentRef
operator ()	include/taco/index_notation/index_notation.h	/^  Access operator()(const IndexVars&... indices) {$/;"	f	class:taco::TensorVar
operator ()	include/taco/index_notation/index_notation.h	/^  const Access operator()(const IndexVars&... indices) const {$/;"	f	class:taco::TensorVar
operator ()	include/taco/index_notation/kernel.h	/^  template <typename... Args> bool operator()(const Args&... args) const {$/;"	f	class:taco::Kernel
operator ()	include/taco/index_notation/tensor_operator.h	/^  Call operator()(IndexExprs&&... exprs) {$/;"	f	class:taco::Func
operator ()	include/taco/ir/ir.h	/^  bool operator()(Expr a, Expr b) const { return a.ptr < b.ptr; }$/;"	f	class:taco::ir::ExprCompare
operator ()	include/taco/tensor.h	/^Access Tensor<CType>::operator()() {$/;"	f	class:taco::Tensor
operator ()	include/taco/tensor.h	/^Access Tensor<CType>::operator()(const IndexSetVar& first, const IndexVars&... indices) {$/;"	f	class:taco::Tensor
operator ()	include/taco/tensor.h	/^Access Tensor<CType>::operator()(const IndexVar& first, const IndexVars&... indices) {$/;"	f	class:taco::Tensor
operator ()	include/taco/tensor.h	/^Access Tensor<CType>::operator()(const IndexVars&... indices) {$/;"	f	class:taco::Tensor
operator ()	include/taco/tensor.h	/^Access Tensor<CType>::operator()(const WindowedIndexVar& first, const IndexVars&... indices) {$/;"	f	class:taco::Tensor
operator ()	include/taco/tensor.h	/^Access TensorBase::operator()(const IndexVars&... indices) {$/;"	f	class:taco::TensorBase
operator ()	include/taco/tensor.h	/^ScalarAccess<CType> Tensor<CType>::operator()(const int index, const Ints&... indices) {$/;"	f	class:taco::Tensor
operator ()	include/taco/tensor.h	/^ScalarAccess<CType> Tensor<CType>::operator()(const std::vector<int>& indices) {$/;"	f	class:taco::Tensor
operator ()	include/taco/tensor.h	/^const Access Tensor<CType>::operator()() const {$/;"	f	class:taco::Tensor
operator ()	include/taco/tensor.h	/^const Access Tensor<CType>::operator()(const IndexVars&... indices) const {$/;"	f	class:taco::Tensor
operator ()	include/taco/tensor.h	/^const Access TensorBase::operator()(const IndexVars&... indices) const {$/;"	f	class:taco::TensorBase
operator ()	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct nodelete { template <typename T> void operator()(T*) { } };$/;"	f	struct:nodelete
operator ()	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    inline size_t operator()(const std::pair<const PyObject *, const char *>& v) const {$/;"	f	struct:override_hash
operator ()	python_bindings/pybind11/include/pybind11/pybind11.h	/^        char *operator()(const char *s) {$/;"	f	class:cpp_function::strdup_guard
operator ()	python_bindings/pybind11/include/pybind11/pybind11.h	/^        void operator()(detail::function_record * rec) { destruct(rec, false); }$/;"	f	struct:cpp_function::InitializingFunctionRecordDeleter
operator ()	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void operator()(const char *message) {$/;"	f	class:exception
operator ()	python_bindings/pybind11/include/pybind11/stl.h	/^    result_type operator()(T &&src) const {$/;"	f	struct:variant_caster_visitor
operator ()	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^        size_t operator()(const Vector2 &) { return 4; }$/;"	f	struct:std::hash
operator ()	python_bindings/pybind11/tests/test_stl.cpp	/^    struct hash<TplCtorClass> { size_t operator()(const TplCtorClass &) const { return 0; } };$/;"	f	struct:std::hash
operator ()	src/format.cpp	/^ModeFormat ModeFormat::operator()($/;"	f	class:taco::ModeFormat
operator ()	src/format.cpp	/^ModeFormat ModeFormat::operator()(Property property) const {$/;"	f	class:taco::ModeFormat
operator ()	src/index_notation/index_notation.cpp	/^Access TensorVar::operator()(const std::vector<IndexVar>& indices) {$/;"	f	class:taco::TensorVar
operator ()	src/index_notation/index_notation.cpp	/^IndexSetVar IndexVar::operator()(std::vector<int>& indexSet) {$/;"	f	class:taco::IndexVar
operator ()	src/index_notation/index_notation.cpp	/^IndexSetVar IndexVar::operator()(std::vector<int>&& indexSet) {$/;"	f	class:taco::IndexVar
operator ()	src/index_notation/index_notation.cpp	/^WindowedIndexVar IndexVar::operator()(int lo, int hi, int stride) {$/;"	f	class:taco::IndexVar
operator ()	src/index_notation/index_notation.cpp	/^const Access TensorVar::operator()(const std::vector<IndexVar>& indices) const {$/;"	f	class:taco::TensorVar
operator ()	src/index_notation/kernel.cpp	/^bool Kernel::operator()(const vector<TensorStorage>& args) const {$/;"	f	class:taco::Kernel
operator ()	src/tensor.cpp	/^Access TensorBase::operator()() {$/;"	f	class:taco::TensorBase
operator ()	src/tensor.cpp	/^Access TensorBase::operator()(const std::vector<IndexVar>& indices) {$/;"	f	class:taco::TensorBase
operator ()	src/tensor.cpp	/^Access TensorBase::operator()(const std::vector<std::shared_ptr<IndexVarInterface>>& indices) {$/;"	f	class:taco::TensorBase
operator ()	src/tensor.cpp	/^const Access TensorBase::operator()() const {$/;"	f	class:taco::TensorBase
operator ()	src/tensor.cpp	/^const Access TensorBase::operator()(const std::vector<IndexVar>& indices) const {$/;"	f	class:taco::TensorBase
operator ()	test/expr_factory.cpp	/^FactorizedTensorInnerProductFactory::operator()(Tensors& operands, $/;"	f	class:taco::test::FactorizedTensorInnerProductFactory
operator ()	test/expr_factory.cpp	/^FactorizedTensorSquaredNormFactory::operator()(Tensors& operands, $/;"	f	class:taco::test::FactorizedTensorSquaredNormFactory
operator ()	test/expr_factory.cpp	/^KroneckerFactory::operator()(Tensors& operands, Format outFormat) {$/;"	f	class:taco::test::KroneckerFactory
operator ()	test/expr_factory.cpp	/^MTTKRP1Factory::operator()(Tensors& operands, Format outFormat) {$/;"	f	class:taco::test::MTTKRP1Factory
operator ()	test/expr_factory.cpp	/^MTTKRP2Factory::operator()(Tensors& operands, Format outFormat) {$/;"	f	class:taco::test::MTTKRP2Factory
operator ()	test/expr_factory.cpp	/^MTTKRP3Factory::operator()(Tensors& operands, Format outFormat) {$/;"	f	class:taco::test::MTTKRP3Factory
operator ()	test/expr_factory.cpp	/^MatrixColumnNormalizeFactory::operator()(Tensors& operands, Format outFormat) {$/;"	f	class:taco::test::MatrixColumnNormalizeFactory
operator ()	test/expr_factory.cpp	/^MatrixColumnSquaredNormFactory::operator()(Tensors& operands, $/;"	f	class:taco::test::MatrixColumnSquaredNormFactory
operator ()	test/expr_factory.cpp	/^MatrixElwiseMultiplyFactory::operator()(Tensors& operands, Format outFormat) {$/;"	f	class:taco::test::MatrixElwiseMultiplyFactory
operator ()	test/expr_factory.cpp	/^MatrixMultiplyFactory::operator()(Tensors& operands, Format outFormat) { $/;"	f	class:taco::test::MatrixMultiplyFactory
operator ()	test/expr_factory.cpp	/^MatrixTransposeMultiplyFactory::operator()(Tensors& operands, $/;"	f	class:taco::test::MatrixTransposeMultiplyFactory
operator ()	test/expr_factory.cpp	/^TensorSquaredNormFactory::operator()(Tensors& operands, Format outFormat) {$/;"	f	class:taco::test::TensorSquaredNormFactory
operator ()	test/expr_factory.cpp	/^VectorElwiseSqrtFactory::operator()(Tensors& operands, Format outFormat) {$/;"	f	class:taco::test::VectorElwiseSqrtFactory
operator ()	test/gtest/gtest-all.cc	/^  bool operator()(const TestCase* test_case) const {$/;"	f	class:testing::internal::TestCaseNameIs
operator ()	test/gtest/gtest-all.cc	/^  bool operator()(const TestInfo * test_info) const {$/;"	f	class:testing::__anon4::TestNameIs
operator ()	test/gtest/gtest-all.cc	/^  bool operator()(const TestProperty& test_property) const {$/;"	f	class:testing::internal::TestPropertyKeyIs
operator ()	test/gtest/gtest-all.cc	/^bool ExitedWithCode::operator()(int exit_status) const {$/;"	f	class:testing::ExitedWithCode
operator ()	test/gtest/gtest-all.cc	/^bool KilledBySignal::operator()(int exit_status) const {$/;"	f	class:testing::KilledBySignal
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr> &v) {$/;"	f	struct:taco::BC_BD_CD
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::BfsMaskAlg
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::ComplementIntersect
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::ComplementUnion
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::IntersectGen
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::IntersectGenDeMorgan
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::emptyGen
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::fullSpaceGen
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::intersectEdge
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::unionEdge
operator ()	test/op_factory.h	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::xorGen
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::AndImpl
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::BfsLower
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::BitOrImpl
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::GeneralAdd
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::MinImpl
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::MulAdd
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::MulRegionDef
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::OrImpl
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::SubRegionDef
operator ()	test/op_factory.h	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::identityFunc
operator ()	test/tests-lower.cpp	/^  IterationAlgebra operator()(const std::vector<IndexExpr>& regions) {$/;"	f	struct:taco::test::rightShiftAlgebra
operator ()	test/tests-lower.cpp	/^  ir::Expr operator()(const std::vector<ir::Expr> &v) {$/;"	f	struct:taco::test::RightShift
operator *	include/taco/storage/typed_vector.h	/^    reference operator*() { return *ptr_; }$/;"	f	class:taco::TypedVector::const_iterator
operator *	include/taco/storage/typed_vector.h	/^    reference operator*() { return *ptr_; }$/;"	f	class:taco::TypedVector::iterator
operator *	include/taco/tensor.h	/^    const value_type& operator*() const {$/;"	f	class:taco::TensorBase::const_iterator
operator *	include/taco/util/collections.h	/^    std::pair<value_type1, value_type2> operator*() {$/;"	f	class:taco::util::ZipConstIterable::ZipConstIterator
operator *	python_bindings/pybind11/include/pybind11/cast.h	/^        value_and_holder &operator*() { return curr; }$/;"	f	struct:values_and_holders::iterator
operator *	python_bindings/pybind11/include/pybind11/detail/common.h	/^    const std::vector<T> &operator*() const { return v; }$/;"	f	class:overload_cast_impl::any_container
operator *	python_bindings/pybind11/include/pybind11/detail/common.h	/^    std::vector<T> &operator*() { return v; }$/;"	f	class:overload_cast_impl::any_container
operator *	python_bindings/pybind11/include/pybind11/pytypes.h	/^    kwargs_proxy operator*() const { return kwargs_proxy(*this); }$/;"	f	class:args_proxy
operator *	python_bindings/pybind11/include/pybind11/pytypes.h	/^    reference operator*() const { return Policy::dereference(); }$/;"	f	class:generic_iterator
operator *	python_bindings/pybind11/include/pybind11/pytypes.h	/^    reference operator*() const {$/;"	f	class:iterator
operator *	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename D> args_proxy object_api<D>::operator*() const {$/;"	f	class:object_api
operator *	python_bindings/pybind11/tests/object.h	/^    T& operator*() { return *m_ptr; }$/;"	f	class:ref
operator *	python_bindings/pybind11/tests/object.h	/^    const T& operator*() const { return *m_ptr; }$/;"	f	class:ref
operator *	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator*(const Vector2 &v) const { return Vector2(x * v.x, y * v.y); }$/;"	f	class:Vector2
operator *	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator*(float value) const { return Vector2(x * value, y * value); }$/;"	f	class:Vector2
operator *	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    friend Vector2 operator*(float f, const Vector2 &v) { return Vector2(f * v.x, f * v.y); }$/;"	f	class:Vector2
operator *	python_bindings/pybind11/tests/test_sequences_and_iterators.cpp	/^    const T& operator*() const { return *ptr_; }$/;"	f	class:NonZeroIterator
operator *	src/index_notation/index_notation.cpp	/^IndexExpr operator*(const IndexExpr& lhs, const IndexExpr& rhs) {$/;"	f	namespace:taco
operator *	src/storage/typed_index.cpp	/^TypedIndexRef TypedIndexPtr::operator*() const {$/;"	f	class:taco::TypedIndexPtr
operator *	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexRef::operator*(const TypedIndexVal other) const {$/;"	f	class:taco::TypedIndexRef
operator *	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexRef::operator*(const int other) const {$/;"	f	class:taco::TypedIndexRef
operator *	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexVal::operator*(const TypedIndexVal other) const {$/;"	f	class:taco::TypedIndexVal
operator *	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexVal::operator*(const int other) const {$/;"	f	class:taco::TypedIndexVal
operator *	src/storage/typed_value.cpp	/^TypedComponentRef TypedComponentPtr::operator*() const {$/;"	f	class:taco::TypedComponentPtr
operator *	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentRef::operator*(const TypedComponentVal other) const {$/;"	f	class:taco::TypedComponentRef
operator *	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentRef::operator*(const int other) const {$/;"	f	class:taco::TypedComponentRef
operator *	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentVal::operator*(const TypedComponentVal other) const {$/;"	f	class:taco::TypedComponentVal
operator *	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentVal::operator*(const int other) const {$/;"	f	class:taco::TypedComponentVal
operator *	test/gtest/gtest.h	/^  T& operator*() const { return *value_; }$/;"	f	class:testing::internal::linked_ptr
operator *	test/gtest/gtest.h	/^  const T& operator*() const { return *impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator *=	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator*=(const Vector2 &v) { x *= v.x; y *= v.y; return *this; }$/;"	f	class:Vector2
operator *=	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator*=(float v) { x *= v; y *= v; return *this; }$/;"	f	class:Vector2
operator +	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr descr<N1 + N2, Ts1..., Ts2...> operator+(const descr<N1, Ts1...> &a, const descr<N2, Ts2...> &b) {$/;"	f
operator +	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend It operator+(const It &a, difference_type n) { auto copy = a; return copy += n; }$/;"	f	class:generic_iterator
operator +	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend It operator+(difference_type n, const It &b) { return b + n; }$/;"	f	class:generic_iterator
operator +	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator+(const Vector2 &v) const { return Vector2(x + v.x, y + v.y); }$/;"	f	class:Vector2
operator +	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator+(float value) const { return Vector2(x + value, y + value); }$/;"	f	class:Vector2
operator +	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    friend Vector2 operator+(float f, const Vector2 &v) { return Vector2(f + v.x, f + v.y); }$/;"	f	class:Vector2
operator +	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^int operator+(const C1 &, const C1 &) { return 11; }$/;"	f
operator +	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^int operator+(const C1 &, const C2 &) { return 12; }$/;"	f
operator +	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^int operator+(const C2 &, const C1 &) { return 21; }$/;"	f
operator +	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^int operator+(const C2 &, const C2 &) { return 22; }$/;"	f
operator +	src/index_notation/index_notation.cpp	/^IndexExpr operator+(const IndexExpr& lhs, const IndexExpr& rhs) {$/;"	f	namespace:taco
operator +	src/storage/typed_index.cpp	/^TypedIndexPtr TypedIndexPtr::operator+ (int value) const {$/;"	f	class:taco::TypedIndexPtr
operator +	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexRef::operator+(const TypedIndexVal other) const {$/;"	f	class:taco::TypedIndexRef
operator +	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexRef::operator+(const int other) const {$/;"	f	class:taco::TypedIndexRef
operator +	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexVal::operator+(const TypedIndexVal other) const {$/;"	f	class:taco::TypedIndexVal
operator +	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexVal::operator+(const int other) const {$/;"	f	class:taco::TypedIndexVal
operator +	src/storage/typed_value.cpp	/^TypedComponentPtr TypedComponentPtr::operator+ (int value) const {$/;"	f	class:taco::TypedComponentPtr
operator +	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentRef::operator+(const TypedComponentVal other) const {$/;"	f	class:taco::TypedComponentRef
operator +	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentRef::operator+(const int other) const {$/;"	f	class:taco::TypedComponentRef
operator +	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentVal::operator+(const TypedComponentVal other) const {$/;"	f	class:taco::TypedComponentVal
operator +	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentVal::operator+(const int other) const {$/;"	f	class:taco::TypedComponentVal
operator ++	include/taco/storage/typed_vector.h	/^    self_type operator++() { ptr_++; return *this; }$/;"	f	class:taco::TypedVector::const_iterator
operator ++	include/taco/storage/typed_vector.h	/^    self_type operator++() { ptr_++; return *this; }$/;"	f	class:taco::TypedVector::iterator
operator ++	include/taco/storage/typed_vector.h	/^    self_type operator++(int junk) { self_type i = *this; ptr_++; return i; }$/;"	f	class:taco::TypedVector::const_iterator
operator ++	include/taco/storage/typed_vector.h	/^    self_type operator++(int junk) { self_type i = *this; ptr_++; return i; }$/;"	f	class:taco::TypedVector::iterator
operator ++	include/taco/tensor.h	/^    const_iterator operator++(int) {$/;"	f	class:taco::TensorBase::const_iterator
operator ++	include/taco/tensor.h	/^    const_iterator& operator++() {$/;"	f	class:taco::TensorBase::const_iterator
operator ++	include/taco/util/collections.h	/^    ZipConstIterator operator++(int) {$/;"	f	class:taco::util::ZipConstIterable::ZipConstIterator
operator ++	include/taco/util/collections.h	/^    ZipConstIterator& operator++() {$/;"	f	class:taco::util::ZipConstIterable::ZipConstIterator
operator ++	python_bindings/pybind11/include/pybind11/cast.h	/^        iterator &operator++() {$/;"	f	struct:values_and_holders::iterator
operator ++	python_bindings/pybind11/include/pybind11/pytypes.h	/^    It &operator++() { Policy::increment(); return *this; }$/;"	f	class:generic_iterator
operator ++	python_bindings/pybind11/include/pybind11/pytypes.h	/^    It operator++(int) { auto copy = *this; Policy::increment(); return copy; }$/;"	f	class:generic_iterator
operator ++	python_bindings/pybind11/include/pybind11/pytypes.h	/^    iterator operator++(int) {$/;"	f	class:iterator
operator ++	python_bindings/pybind11/include/pybind11/pytypes.h	/^    iterator& operator++() {$/;"	f	class:iterator
operator ++	python_bindings/pybind11/tests/test_sequences_and_iterators.cpp	/^    NonZeroIterator& operator++() { ++ptr_; return *this; }$/;"	f	class:NonZeroIterator
operator ++	src/storage/typed_index.cpp	/^TypedIndexPtr TypedIndexPtr::operator++() {$/;"	f	class:taco::TypedIndexPtr
operator ++	src/storage/typed_index.cpp	/^TypedIndexPtr TypedIndexPtr::operator++(int junk) {$/;"	f	class:taco::TypedIndexPtr
operator ++	src/storage/typed_index.cpp	/^TypedIndexRef TypedIndexRef::operator++() {$/;"	f	class:taco::TypedIndexRef
operator ++	src/storage/typed_index.cpp	/^TypedIndexRef TypedIndexRef::operator++(int junk) {$/;"	f	class:taco::TypedIndexRef
operator ++	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexVal::operator++() {$/;"	f	class:taco::TypedIndexVal
operator ++	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexVal::operator++(int junk) {$/;"	f	class:taco::TypedIndexVal
operator ++	src/storage/typed_value.cpp	/^TypedComponentPtr TypedComponentPtr::operator++() {$/;"	f	class:taco::TypedComponentPtr
operator ++	src/storage/typed_value.cpp	/^TypedComponentPtr TypedComponentPtr::operator++(int junk) {$/;"	f	class:taco::TypedComponentPtr
operator ++	src/storage/typed_value.cpp	/^TypedComponentRef TypedComponentRef::operator++() {$/;"	f	class:taco::TypedComponentRef
operator ++	src/storage/typed_value.cpp	/^TypedComponentRef TypedComponentRef::operator++(int junk) {$/;"	f	class:taco::TypedComponentRef
operator ++	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentVal::operator++() {$/;"	f	class:taco::TypedComponentVal
operator ++	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentVal::operator++(int junk) {$/;"	f	class:taco::TypedComponentVal
operator ++	test/gtest/gtest.h	/^  ParamIterator operator++(int \/*unused*\/) {$/;"	f	class:testing::internal::ParamIterator
operator ++	test/gtest/gtest.h	/^  ParamIterator& operator++() {$/;"	f	class:testing::internal::ParamIterator
operator +=	include/taco/tensor.h	/^  void operator+=(CType scalar) {$/;"	f	struct:taco::ScalarAccess
operator +=	python_bindings/pybind11/include/pybind11/pytypes.h	/^    It &operator+=(difference_type n) { Policy::advance(n); return *this; }$/;"	f	class:generic_iterator
operator +=	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator+=(const Vector2 &v) { x += v.x; y += v.y; return *this; }$/;"	f	class:Vector2
operator +=	src/index_notation/index_notation.cpp	/^Assignment Access::operator+=(const IndexExpr& expr) {$/;"	f	class:taco::Access
operator +=	src/index_notation/index_notation.cpp	/^Assignment TensorVar::operator+=(IndexExpr expr) {$/;"	f	class:taco::TensorVar
operator -	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend It operator-(const It &a, difference_type n) { auto copy = a; return copy -= n; }$/;"	f	class:generic_iterator
operator -	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend difference_type operator-(const It &a, const It &b) { return a.distance_to(b); }$/;"	f	class:generic_iterator
operator -	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator-() const { return Vector2(-x, -y); }$/;"	f	class:Vector2
operator -	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator-(const Vector2 &v) const { return Vector2(x - v.x, y - v.y); }$/;"	f	class:Vector2
operator -	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator-(float value) const { return Vector2(x - value, y - value); }$/;"	f	class:Vector2
operator -	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    friend Vector2 operator-(float f, const Vector2 &v) { return Vector2(f - v.x, f - v.y); }$/;"	f	class:Vector2
operator -	src/index_notation/index_notation.cpp	/^IndexExpr operator-(const IndexExpr& expr) {$/;"	f	namespace:taco
operator -	src/index_notation/index_notation.cpp	/^IndexExpr operator-(const IndexExpr& lhs, const IndexExpr& rhs) {$/;"	f	namespace:taco
operator -	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentRef::operator-() const {$/;"	f	class:taco::TypedComponentRef
operator -	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentRef::operator-(const TypedComponentVal other) const {$/;"	f	class:taco::TypedComponentRef
operator -	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentVal::operator-() const {$/;"	f	class:taco::TypedComponentVal
operator -	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentVal::operator-(const TypedComponentVal other) const {$/;"	f	class:taco::TypedComponentVal
operator --	python_bindings/pybind11/include/pybind11/pytypes.h	/^    It &operator--() { Policy::decrement(); return *this; }$/;"	f	class:generic_iterator
operator --	python_bindings/pybind11/include/pybind11/pytypes.h	/^    It operator--(int) { auto copy = *this; Policy::decrement(); return copy; }$/;"	f	class:generic_iterator
operator -=	python_bindings/pybind11/include/pybind11/pytypes.h	/^    It &operator-=(difference_type n) { Policy::advance(-n); return *this; }$/;"	f	class:generic_iterator
operator -=	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator-=(const Vector2 &v) { x -= v.x; y -= v.y; return *this; }$/;"	f	class:Vector2
operator ->	include/taco/storage/typed_vector.h	/^    pointer operator->() { return ptr_; }$/;"	f	class:taco::TypedVector::const_iterator
operator ->	include/taco/storage/typed_vector.h	/^    pointer operator->() { return ptr_; }$/;"	f	class:taco::TypedVector::iterator
operator ->	include/taco/tensor.h	/^    const value_type* operator->() const {$/;"	f	class:taco::TensorBase::const_iterator
operator ->	python_bindings/pybind11/include/pybind11/cast.h	/^        value_and_holder *operator->() { return &curr; }$/;"	f	struct:values_and_holders::iterator
operator ->	python_bindings/pybind11/include/pybind11/detail/common.h	/^    const std::vector<T> *operator->() const { return &v; }$/;"	f	class:overload_cast_impl::any_container
operator ->	python_bindings/pybind11/include/pybind11/detail/common.h	/^    std::vector<T> *operator->() { return &v; }$/;"	f	class:overload_cast_impl::any_container
operator ->	python_bindings/pybind11/include/pybind11/pytypes.h	/^    T *operator->() const { return &value; }$/;"	f	struct:arrow_proxy
operator ->	python_bindings/pybind11/include/pybind11/pytypes.h	/^    pointer operator->() const { operator*(); return &value; }$/;"	f	class:iterator
operator ->	python_bindings/pybind11/include/pybind11/pytypes.h	/^    pointer operator->() const { return **this; }$/;"	f	class:generic_iterator
operator ->	python_bindings/pybind11/tests/object.h	/^    T* operator->() { return m_ptr; }$/;"	f	class:ref
operator ->	python_bindings/pybind11/tests/object.h	/^    const T* operator->() const { return m_ptr; }$/;"	f	class:ref
operator ->	test/gtest/gtest.h	/^  T* operator->() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
operator ->	test/gtest/gtest.h	/^  const T* operator->() const { return impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator /	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator\/(const Vector2 &v) const { return Vector2(x \/ v.x, y \/ v.y); }$/;"	f	class:Vector2
operator /	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 operator\/(float value) const { return Vector2(x \/ value, y \/ value); }$/;"	f	class:Vector2
operator /	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    friend Vector2 operator\/(float f, const Vector2 &v) { return Vector2(f \/ v.x, f \/ v.y); }$/;"	f	class:Vector2
operator /	src/index_notation/index_notation.cpp	/^IndexExpr operator\/(const IndexExpr& lhs, const IndexExpr& rhs) {$/;"	f	namespace:taco
operator /=	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator\/=(const Vector2 &v) { x \/= v.x; y \/= v.y; return *this; }$/;"	f	class:Vector2
operator /=	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2& operator\/=(float v) { x \/= v; y \/= v; return *this; }$/;"	f	class:Vector2
operator <	include/taco/coordinate.h	/^  friend bool operator<(const Coordinate<O,T>& a, const Coordinate<O,T>& b) {$/;"	f	class:taco::Coordinate
operator <	include/taco/index_notation/index_notation_nodes.h	/^  friend bool operator<(const AccessWindow& a, const AccessWindow& b) {$/;"	f	struct:taco::AccessWindow
operator <	include/taco/index_notation/index_notation_nodes.h	/^  friend bool operator<(const IndexSet& a, const IndexSet& b) {$/;"	f	struct:taco::IndexSet
operator <	include/taco/storage/coordinate.h	/^  friend bool operator<(const Coordinates<O,T>& a, const Coordinates<O,T>& b) {$/;"	f	class:taco::Coordinates
operator <	include/taco/storage/typed_vector.h	/^  bool operator<(const TypedVector &other) const {$/;"	f	class:taco::TypedVector
operator <	include/taco/tensor.h	/^      friend bool operator<(const Coordinates& a, const Coordinates& b) {$/;"	f	class:taco::TensorBase::const_iterator::Coordinates
operator <	include/taco/util/intrusive_ptr.h	/^  bool operator<(const IntrusivePtr<T> &p1, const IntrusivePtr<T> &p2) {$/;"	f	class:taco::util::IntrusivePtr
operator <	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool operator<(object_api const &other) const  { return rich_compare(other, Py_LT); }$/;"	f	class:object_api
operator <	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend bool operator< (const It &a, const It &b) { return b - a > 0; }$/;"	f	class:generic_iterator
operator <	src/index_notation/index_notation.cpp	/^bool operator<(const Access& a, const Access& b) {$/;"	f	namespace:taco
operator <	src/index_notation/index_notation.cpp	/^bool operator<(const IndexVar& a, const IndexVar& b) {$/;"	f	namespace:taco
operator <	src/index_notation/index_notation.cpp	/^bool operator<(const TensorVar& a, const TensorVar& b) {$/;"	f	namespace:taco
operator <	src/index_notation/index_notation_nodes.cpp	/^bool operator<(const IndexVarNode& a, const IndexVarNode& b) {$/;"	f	namespace:taco
operator <	src/lower/iterator.cpp	/^bool operator<(const Iterator& a, const Iterator& b) {$/;"	f	namespace:taco
operator <	src/lower/mode_access.cpp	/^bool operator<(const ModeAccess& a, const ModeAccess& b) {$/;"	f	namespace:taco
operator <	src/lower/tensor_path.cpp	/^bool operator<(const TensorPath& l, const TensorPath& r) {$/;"	f	namespace:taco
operator <	src/lower/tensor_path.cpp	/^bool operator<(const TensorPathStep& l, const TensorPathStep& r) {$/;"	f	namespace:taco
operator <	src/storage/typed_index.cpp	/^bool TypedIndexPtr::operator< (const TypedIndexPtr &other) const {$/;"	f	class:taco::TypedIndexPtr
operator <	src/storage/typed_index.cpp	/^bool operator<(const TypedIndexVal& a, const TypedIndexVal &other) {$/;"	f	namespace:taco
operator <	src/storage/typed_index.cpp	/^bool operator<(const TypedIndexVal& a, const int other) {$/;"	f	namespace:taco
operator <	src/storage/typed_value.cpp	/^bool TypedComponentPtr::operator< (const TypedComponentPtr &other) const {$/;"	f	class:taco::TypedComponentPtr
operator <	src/storage/typed_value.cpp	/^bool operator<(const TypedComponentVal& a, const TypedComponentVal &other) {$/;"	f	namespace:taco
operator <	src/storage/typed_value.cpp	/^bool operator<(const TypedComponentVal& a, const int other) {$/;"	f	namespace:taco
operator <	src/tensor.cpp	/^bool operator<(const TensorBase& a, const TensorBase& b) {$/;"	f	namespace:taco
operator <<	include/taco/coordinate.h	/^  friend std::ostream& operator<<(std::ostream& os, const Coordinate<O,T>& c) {$/;"	f	class:taco::Coordinate
operator <<	include/taco/coordinate.h	/^  friend std::ostream& operator<<(std::ostream& os,$/;"	f	class:taco::Coordinate
operator <<	include/taco/error.h	/^    Dummy &operator<<(T x) {$/;"	f	struct:taco::Dummy
operator <<	include/taco/error.h	/^  ErrorReport &operator<<(T x) {$/;"	f	struct:taco::ErrorReport
operator <<	include/taco/storage/coordinate.h	/^  friend std::ostream& operator<<(std::ostream& os, const Coordinates<O,T>& c) {$/;"	f	class:taco::Coordinates
operator <<	include/taco/storage/coordinate.h	/^  friend std::ostream& operator<<(std::ostream& os,$/;"	f	class:taco::Coordinates
operator <<	include/taco/tensor.h	/^      friend std::ostream& operator<<(std::ostream& os, const Coordinates& c) {$/;"	f	class:taco::TensorBase::const_iterator::Coordinates
operator <<	include/taco/util/collections.h	/^  friend std::ostream& operator<<(std::ostream &os,$/;"	f	class:taco::util::ZipConstIterable
operator <<	include/taco/util/printable.h	/^inline std::ostream &operator<<(std::ostream &os, const Printable &printable) {$/;"	f	namespace:taco::util
operator <<	include/taco/util/scopedmap.h	/^  friend std::ostream& operator<<(std::ostream& os, ScopedMap<Key,Value> smap) {$/;"	f	class:taco::util::ScopedMap
operator <<	include/taco/util/scopedset.h	/^  friend std::ostream& operator<<(std::ostream& os, ScopedSet<Key> sset) {$/;"	f	class:taco::util::ScopedSet
operator <<	include/taco/util/timers.h	/^  friend std::ostream& operator<<(std::ostream& os, const TimeResults& t) {$/;"	f	struct:taco::util::TimeResults
operator <<	python_bindings/pybind11/include/pybind11/stl.h	/^inline std::ostream &operator<<(std::ostream &os, const handle &obj) {$/;"	f
operator <<	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const ArrayStruct& v) {$/;"	f	class:E1	file:
operator <<	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const ComplexStruct& v) {$/;"	f
operator <<	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const EnumStruct& v) {$/;"	f	class:E1	file:
operator <<	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const NestedStruct& v) {$/;"	f
operator <<	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const PackedStruct& v) {$/;"	f
operator <<	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const SimpleStruct& v) {$/;"	f
operator <<	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^std::ostream& operator<<(std::ostream& os, const StringStruct& v) {$/;"	f	class:E1	file:
operator <<	python_bindings/pybind11/tests/test_stl_binders.cpp	/^std::ostream & operator<<(std::ostream &s, El const&v) {$/;"	f
operator <<	src/format.cpp	/^ostream& operator<<(ostream& os, const ModeFormatPack& modeFormatPack) {$/;"	f	namespace:taco
operator <<	src/format.cpp	/^std::ostream &operator<<(std::ostream& os, const Format& format) {$/;"	f	namespace:taco
operator <<	src/format.cpp	/^std::ostream& operator<<(std::ostream& os, const ModeFormat& modeFormat) {$/;"	f	namespace:taco
operator <<	src/index_notation/index_notation.cpp	/^std::ostream& operator<<(std::ostream& os, const IndexExpr& expr) {$/;"	f	namespace:taco
operator <<	src/index_notation/index_notation.cpp	/^std::ostream& operator<<(std::ostream& os, const IndexSetVar& var) {$/;"	f	namespace:taco
operator <<	src/index_notation/index_notation.cpp	/^std::ostream& operator<<(std::ostream& os, const IndexStmt& expr) {$/;"	f	namespace:taco
operator <<	src/index_notation/index_notation.cpp	/^std::ostream& operator<<(std::ostream& os, const IndexVar& var) {$/;"	f	namespace:taco
operator <<	src/index_notation/index_notation.cpp	/^std::ostream& operator<<(std::ostream& os, const TensorVar& var) {$/;"	f	namespace:taco
operator <<	src/index_notation/index_notation.cpp	/^std::ostream& operator<<(std::ostream& os, const WindowedIndexVar& var) {$/;"	f	namespace:taco
operator <<	src/index_notation/index_notation.cpp	/^std::ostream& operator<<(std::ostream& os, const std::shared_ptr<IndexVarInterface>& var) {$/;"	f	namespace:taco
operator <<	src/index_notation/iteration_algebra.cpp	/^std::ostream& operator<<(std::ostream& os, const IterationAlgebra& algebra) {$/;"	f	namespace:taco
operator <<	src/index_notation/kernel.cpp	/^std::ostream& operator<<(std::ostream& os, const Kernel& kernel) {$/;"	f	namespace:taco
operator <<	src/index_notation/properties.cpp	/^std::ostream& operator<<(std::ostream& os, const Property& p) {$/;"	f	namespace:taco
operator <<	src/index_notation/provenance_graph.cpp	/^std::ostream& operator<<(std::ostream& stream, const IndexVarRel& rel) {$/;"	f	namespace:taco
operator <<	src/index_notation/schedule.cpp	/^std::ostream& operator<<(std::ostream& os, const Schedule& schedule) {$/;"	f	namespace:taco
operator <<	src/index_notation/transformations.cpp	/^std::ostream& operator<<(std::ostream& os, const AddSuchThatPredicates& addSuchThatPredicates) {$/;"	f	namespace:taco
operator <<	src/index_notation/transformations.cpp	/^std::ostream& operator<<(std::ostream& os, const ForAllReplace& forallreplace) {$/;"	f	namespace:taco
operator <<	src/index_notation/transformations.cpp	/^std::ostream& operator<<(std::ostream& os, const Parallelize& parallelize) {$/;"	f	namespace:taco
operator <<	src/index_notation/transformations.cpp	/^std::ostream& operator<<(std::ostream& os, const Precompute& precompute) {$/;"	f	namespace:taco
operator <<	src/index_notation/transformations.cpp	/^std::ostream& operator<<(std::ostream& os, const Reorder& reorder) {$/;"	f	namespace:taco
operator <<	src/index_notation/transformations.cpp	/^std::ostream& operator<<(std::ostream& os, const Transformation& t) {$/;"	f	namespace:taco
operator <<	src/ir/ir.cpp	/^std::ostream& operator<<(std::ostream& os, const Expr& expr) {$/;"	f	namespace:taco::ir
operator <<	src/ir/ir.cpp	/^std::ostream& operator<<(std::ostream& os, const Stmt& stmt) {$/;"	f	namespace:taco::ir
operator <<	src/lower/iteration_forest.cpp	/^std::ostream& operator<<(std::ostream& os, const IterationForest& forest) {$/;"	f	namespace:taco
operator <<	src/lower/iteration_graph.cpp	/^std::ostream& operator<<(std::ostream& os, const IterationGraph& graph) {$/;"	f	namespace:taco
operator <<	src/lower/iterator.cpp	/^std::ostream& operator<<(std::ostream& os, const Iterator& iterator) {$/;"	f	namespace:taco
operator <<	src/lower/merge_lattice.cpp	/^ostream& operator<<(ostream& os, const MergeLattice& ml) {$/;"	f	namespace:taco
operator <<	src/lower/merge_lattice.cpp	/^ostream& operator<<(ostream& os, const MergePoint& mlp) {$/;"	f	namespace:taco
operator <<	src/lower/mode.cpp	/^std::ostream& operator<<(std::ostream& os, const Mode& mode) {$/;"	f	namespace:taco
operator <<	src/lower/mode_access.cpp	/^std::ostream &operator<<(std::ostream &os, const ModeAccess & modeAccess) {$/;"	f	namespace:taco
operator <<	src/lower/mode_format_impl.cpp	/^std::ostream& operator<<(std::ostream& os, const ModeFunction& modeFunction) {$/;"	f	namespace:taco
operator <<	src/lower/tensor_path.cpp	/^std::ostream& operator<<(std::ostream& os, const TensorPath& path) {$/;"	f	namespace:taco
operator <<	src/lower/tensor_path.cpp	/^std::ostream& operator<<(std::ostream& os, const TensorPathStep& step) {$/;"	f	namespace:taco
operator <<	src/storage/array.cpp	/^std::ostream& operator<<(std::ostream& os, Array::Policy policy) {$/;"	f	namespace:taco
operator <<	src/storage/array.cpp	/^std::ostream& operator<<(std::ostream& os, const Array& array) {$/;"	f	namespace:taco
operator <<	src/storage/index.cpp	/^std::ostream& operator<<(std::ostream& os, const Index& index) {$/;"	f	namespace:taco
operator <<	src/storage/storage.cpp	/^std::ostream& operator<<(std::ostream& os, const TensorStorage& storage) {$/;"	f	namespace:taco
operator <<	src/tensor.cpp	/^ostream& operator<<(ostream& os, TensorBase& tensor) {$/;"	f	namespace:taco
operator <<	src/tensor.cpp	/^ostream& operator<<(ostream& os, const TensorBase& tensor) {$/;"	f	namespace:taco
operator <<	src/type.cpp	/^std::ostream& operator<<(std::ostream& os, const Datatype& type) {$/;"	f	namespace:taco
operator <<	src/type.cpp	/^std::ostream& operator<<(std::ostream& os, const Datatype::Kind& kind) {$/;"	f	namespace:taco
operator <<	src/type.cpp	/^std::ostream& operator<<(std::ostream& os, const Dimension& dim) {$/;"	f	namespace:taco
operator <<	src/type.cpp	/^std::ostream& operator<<(std::ostream& os, const Shape& shape) {$/;"	f	namespace:taco
operator <<	src/type.cpp	/^std::ostream& operator<<(std::ostream& os, const Type& type) {$/;"	f	namespace:taco
operator <<	test/gtest/gtest-all.cc	/^Message& Message::operator <<(const ::std::wstring& wstr) {$/;"	f	class:testing::Message
operator <<	test/gtest/gtest-all.cc	/^Message& Message::operator <<(const ::wstring& wstr) {$/;"	f	class:testing::Message
operator <<	test/gtest/gtest-all.cc	/^Message& Message::operator <<(const wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	test/gtest/gtest-all.cc	/^Message& Message::operator <<(wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	test/gtest/gtest-all.cc	/^std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {$/;"	f	namespace:testing
operator <<	test/gtest/gtest.h	/^  Message& operator <<(BasicNarrowIoManip val) {$/;"	f	class:testing::Message
operator <<	test/gtest/gtest.h	/^  Message& operator <<(bool b) {$/;"	f	class:testing::Message
operator <<	test/gtest/gtest.h	/^  inline Message& operator <<(T* const& pointer) {  \/\/ NOLINT$/;"	f	class:testing::Message
operator <<	test/gtest/gtest.h	/^  inline Message& operator <<(const T& val) {$/;"	f	class:testing::Message
operator <<	test/gtest/gtest.h	/^  inline Message& operator <<(const T& value) {$/;"	f	class:testing::Message
operator <<	test/gtest/gtest.h	/^  template <typename T> AssertionResult& operator<<(const T& value) {$/;"	f	class:testing::AssertionResult
operator <<	test/gtest/gtest.h	/^::std::basic_ostream<Char, CharTraits>& operator<<($/;"	f	namespace:testing::internal2
operator <<	test/gtest/gtest.h	/^inline std::ostream& operator <<(std::ostream& os, const Message& sb) {$/;"	f	namespace:testing
operator <<	test/test.cpp	/^ostream& operator<<(ostream& os, const NotationTest& test) {$/;"	f	namespace:taco::test
operator <<	test/test_tensors.h	/^std::ostream& operator<<(std::ostream& os, const TensorData<T>&) {$/;"	f	namespace:taco::test
operator <<	test/tests-expr_storage.cpp	/^static ostream &operator<<(ostream& os, const TestData& data) {$/;"	f	namespace:expr_storage_tests
operator <<	test/tests-index_notation.cpp	/^  friend ostream &operator<<(ostream& os, const ConcreteTest& data) {$/;"	f	struct:ConcreteTest
operator <<	test/tests-lower.cpp	/^ostream& operator<<(ostream& os, const Formats& formats) {$/;"	f	namespace:taco::test
operator <<	test/tests-lower.cpp	/^ostream& operator<<(ostream& os, const Test& stmt) {$/;"	f	namespace:taco::test
operator <<	test/tests-lower.cpp	/^std::ostream& operator<<(std::ostream& os, const TestCase& testcase) {$/;"	f	namespace:taco::test
operator <<	test/tests-merge_lattice.cpp	/^std::ostream& operator<<(std::ostream& os, const Test& test) {$/;"	f	namespace:tests
operator <<	test/tests-storage.cpp	/^static ostream &operator<<(ostream& os, const TestData& data) {$/;"	f	file:
operator <<	test/tests-storage_alloc.cpp	/^static ostream &operator<<(ostream& os, const TestData& data) {$/;"	f	namespace:storage_alloc_tests
operator <<	test/tests-transformation.cpp	/^ostream& operator<<(ostream& os, const PreconditionTest& test) {$/;"	f	namespace:test
operator <<	test/tests-transformation.cpp	/^static ostream &operator<<(ostream& os, const TransformationTest& test) {$/;"	f	namespace:test
operator <=	include/taco/util/comparable.h	/^bool operator<=(const Comparable<T> &lhs, const Comparable<T> &rhs) {$/;"	f	namespace:taco::util
operator <=	include/taco/util/intrusive_ptr.h	/^  bool operator<=(const IntrusivePtr<T> &p1, const IntrusivePtr<T> &p2) {$/;"	f	class:taco::util::IntrusivePtr
operator <=	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool operator<=(object_api const &other) const { return rich_compare(other, Py_LE); }$/;"	f	class:object_api
operator <=	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend bool operator<=(const It &a, const It &b) { return !(a > b); }$/;"	f	class:generic_iterator
operator <=	src/index_notation/index_notation.cpp	/^bool operator<=(const IndexVar& a, const IndexVar& b) {$/;"	f	namespace:taco
operator <=	src/storage/typed_index.cpp	/^bool TypedIndexPtr::operator<= (const TypedIndexPtr &other) const {$/;"	f	class:taco::TypedIndexPtr
operator <=	src/storage/typed_index.cpp	/^bool operator<=(const TypedIndexVal& a, const TypedIndexVal &other) {$/;"	f	namespace:taco
operator <=	src/storage/typed_index.cpp	/^bool operator<=(const TypedIndexVal& a, const int other) {$/;"	f	namespace:taco
operator <=	src/storage/typed_value.cpp	/^bool TypedComponentPtr::operator<= (const TypedComponentPtr &other) const {$/;"	f	class:taco::TypedComponentPtr
operator <=	src/storage/typed_value.cpp	/^bool operator<=(const TypedComponentVal& a, const TypedComponentVal &other) {$/;"	f	namespace:taco
operator <=	src/storage/typed_value.cpp	/^bool operator<=(const TypedComponentVal& a, const int other) {$/;"	f	namespace:taco
operator <=	src/tensor.cpp	/^bool operator<=(const TensorBase& a, const TensorBase& b) {$/;"	f	namespace:taco
operator =	include/taco/tensor.h	/^  void operator=(CType scalar) {$/;"	f	struct:taco::ScalarAccess
operator =	include/taco/tensor.h	/^void Tensor<CType>::operator=(const IndexExpr& expr) {TensorBase::operator=(expr);}$/;"	f	class:taco::Tensor
operator =	include/taco/util/intrusive_ptr.h	/^  IntrusivePtr& operator=(IntrusivePtr &&other) {$/;"	f	class:taco::util::IntrusivePtr
operator =	include/taco/util/intrusive_ptr.h	/^  IntrusivePtr& operator=(T *p) {$/;"	f	class:taco::util::IntrusivePtr
operator =	include/taco/util/intrusive_ptr.h	/^  IntrusivePtr& operator=(const IntrusivePtr &other) {$/;"	f	class:taco::util::IntrusivePtr
operator =	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    buffer_info& operator=(buffer_info &&rhs) {$/;"	f	struct:buffer_info
operator =	python_bindings/pybind11/include/pybind11/cast.h	/^arg_v arg::operator=(T &&value) const { return {std::move(*this), std::forward<T>(value)}; }$/;"	f	class:arg
operator =	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object& operator=(const object &other) {$/;"	f	class:object
operator =	python_bindings/pybind11/include/pybind11/pytypes.h	/^    template <typename T> void operator=(T &&value) & {$/;"	f	class:accessor
operator =	python_bindings/pybind11/include/pybind11/pytypes.h	/^    template <typename T> void operator=(T &&value) && {$/;"	f	class:accessor
operator =	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void operator=(const accessor &a) & { operator=(handle(a)); }$/;"	f	class:accessor
operator =	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void operator=(const accessor &a) && { std::move(*this).operator=(handle(a)); }$/;"	f	class:accessor
operator =	python_bindings/pybind11/tests/object.h	/^    ref& operator=(T *ptr) {$/;"	f	class:ref
operator =	python_bindings/pybind11/tests/object.h	/^    ref& operator=(const ref& r) {$/;"	f	class:ref
operator =	python_bindings/pybind11/tests/object.h	/^    ref& operator=(ref&& r) {$/;"	f	class:ref
operator =	python_bindings/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt &operator=(const CopyOnlyInt &c) { print_copy_assigned(this, c.value); value = c.value; return *this; }$/;"	f	class:CopyOnlyInt
operator =	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOnlyInt &operator=(MoveOnlyInt &&m) { print_move_assigned(this, m.value); std::swap(value, m.value); return *this; }$/;"	f	class:MoveOnlyInt
operator =	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt &operator=(MoveOrCopyInt &&m) { print_move_assigned(this, m.value); std::swap(value, m.value); return *this; }$/;"	f	class:MoveOrCopyInt
operator =	python_bindings/pybind11/tests/test_copy_move.cpp	/^    MoveOrCopyInt &operator=(const MoveOrCopyInt &c) { print_copy_assigned(this, c.value); value = c.value; return *this; }$/;"	f	class:MoveOrCopyInt
operator =	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    DestructionTester &operator=(DestructionTester &&) { print_move_assigned(this); return *this; }$/;"	f	class:DestructionTester
operator =	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    DestructionTester &operator=(const DestructionTester &) { print_copy_assigned(this); return *this; }$/;"	f	class:DestructionTester
operator =	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory2 &operator=(TestFactory2 &&m) { value = std::move(m.value); print_move_assigned(this); return *this; }$/;"	f	class:TestFactory2
operator =	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    TestFactory3 &operator=(TestFactory3 &&m) { value = std::move(m.value); print_move_assigned(this); return *this; }$/;"	f	class:TestFactory3
operator =	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void operator=(ExampleMandA &&e) { print_move_assigned(this); value = e.value; }$/;"	f	class:ExampleMandA
operator =	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void operator=(const ExampleMandA &e) { print_copy_assigned(this); value = e.value; }$/;"	f	class:ExampleMandA
operator =	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 &operator=(Vector2 &&v) { x = v.x; y = v.y; v.x = v.y = 0; print_move_assigned(this); return *this; }$/;"	f	class:Vector2
operator =	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    Vector2 &operator=(const Vector2 &v) { x = v.x; y = v.y; print_copy_assigned(this); return *this; }$/;"	f	class:Vector2
operator =	src/index_notation/index_notation.cpp	/^Assignment Access::operator=(const Access& expr) {$/;"	f	class:taco::Access
operator =	src/index_notation/index_notation.cpp	/^Assignment Access::operator=(const IndexExpr& expr) {$/;"	f	class:taco::Access
operator =	src/index_notation/index_notation.cpp	/^Assignment Access::operator=(const TensorVar& var) {$/;"	f	class:taco::Access
operator =	src/index_notation/index_notation.cpp	/^Assignment TensorVar::operator=(IndexExpr expr) {$/;"	f	class:taco::TensorVar
operator =	src/storage/typed_index.cpp	/^TypedIndexRef TypedIndexRef::operator=(TypedIndexRef other) {$/;"	f	class:taco::TypedIndexRef
operator =	src/storage/typed_index.cpp	/^TypedIndexRef TypedIndexRef::operator=(TypedIndexVal other) {$/;"	f	class:taco::TypedIndexRef
operator =	src/storage/typed_index.cpp	/^TypedIndexRef TypedIndexRef::operator=(const int other) {$/;"	f	class:taco::TypedIndexRef
operator =	src/storage/typed_index.cpp	/^TypedIndexVal TypedIndexVal::operator=(const int other) {$/;"	f	class:taco::TypedIndexVal
operator =	src/storage/typed_value.cpp	/^TypedComponentRef TypedComponentRef::operator=(TypedComponentRef other) {$/;"	f	class:taco::TypedComponentRef
operator =	src/storage/typed_value.cpp	/^TypedComponentRef TypedComponentRef::operator=(TypedComponentVal other) {$/;"	f	class:taco::TypedComponentRef
operator =	src/storage/typed_value.cpp	/^TypedComponentRef TypedComponentRef::operator=(const int other) {$/;"	f	class:taco::TypedComponentRef
operator =	src/storage/typed_value.cpp	/^TypedComponentVal TypedComponentVal::operator=(const int other) {$/;"	f	class:taco::TypedComponentVal
operator =	src/tensor.cpp	/^void TensorBase::operator=(const IndexExpr& expr) {$/;"	f	class:taco::TensorBase
operator =	test/gtest/gtest-all.cc	/^void AssertHelper::operator=(const Message& message) const {$/;"	f	class:testing::internal::AssertHelper
operator =	test/gtest/gtest.h	/^  AssertionResult& operator=(AssertionResult other) {$/;"	f	class:testing::AssertionResult
operator =	test/gtest/gtest.h	/^  FilePath& operator=(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
operator =	test/gtest/gtest.h	/^  ParamGenerator& operator=(const ParamGenerator& other) {$/;"	f	class:testing::internal::ParamGenerator
operator =	test/gtest/gtest.h	/^  ParamIterator& operator=(const ParamIterator& other) {$/;"	f	class:testing::internal::ParamIterator
operator =	test/gtest/gtest.h	/^  linked_ptr& operator=(linked_ptr const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	test/gtest/gtest.h	/^  template <typename U> linked_ptr& operator=(linked_ptr<U> const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	test/gtest/gtest.h	/^  tuple& operator=(const tuple& \/* t *\/) { return *this; }$/;"	f	class:std::tr1::tuple
operator =	test/gtest/gtest.h	/^  tuple& operator=(const tuple& t) { return CopyFrom(t); }$/;"	f	class:std::tr1::tuple
operator ==	include/taco/coordinate.h	/^  friend bool operator==(const Coordinate<O,T>& a, const Coordinate<O,T>& b) {$/;"	f	class:taco::Coordinate
operator ==	include/taco/index_notation/index_notation_nodes.h	/^  friend bool operator==(const AccessWindow& a, const AccessWindow& b) {$/;"	f	struct:taco::AccessWindow
operator ==	include/taco/index_notation/index_notation_nodes.h	/^  friend bool operator==(const IndexSet& a, const IndexSet& b) {$/;"	f	struct:taco::IndexSet
operator ==	include/taco/storage/coordinate.h	/^  friend bool operator==(const Coordinates<O,T>& a, const Coordinates<O,T>& b) {$/;"	f	class:taco::Coordinates
operator ==	include/taco/storage/typed_vector.h	/^    bool operator==(const self_type& rhs) { return ptr_ == rhs.ptr_; }$/;"	f	class:taco::TypedVector::const_iterator
operator ==	include/taco/storage/typed_vector.h	/^    bool operator==(const self_type& rhs) { return ptr_ == rhs.ptr_; }$/;"	f	class:taco::TypedVector::iterator
operator ==	include/taco/storage/typed_vector.h	/^  bool operator==(const TypedVector &other) const {$/;"	f	class:taco::TypedVector
operator ==	include/taco/tensor.h	/^      friend bool operator==(const Coordinates& a, const Coordinates& b) {$/;"	f	class:taco::TensorBase::const_iterator::Coordinates
operator ==	include/taco/tensor.h	/^    bool operator==(const const_iterator& rhs) {$/;"	f	class:taco::TensorBase::const_iterator
operator ==	include/taco/util/collections.h	/^    friend bool operator==(const ZipConstIterator &l,$/;"	f	class:taco::util::ZipConstIterable::ZipConstIterator
operator ==	include/taco/util/intrusive_ptr.h	/^  bool operator==(const IntrusivePtr<T> &p1, const IntrusivePtr<T> &p2) {$/;"	f	class:taco::util::IntrusivePtr
operator ==	python_bindings/pybind11/include/pybind11/cast.h	/^        bool operator==(const iterator &other) const { return curr.index == other.curr.index; }$/;"	f	struct:values_and_holders::iterator
operator ==	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool operator==(const handle &h) const { return m_ptr == h.m_ptr; }$/;"	f	class:handle
operator ==	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend bool operator==(const It &a, const It &b) { return a.equal(b); }$/;"	f	class:generic_iterator
operator ==	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend bool operator==(const iterator &a, const iterator &b) { return a->ptr() == b->ptr(); }$/;"	f	class:iterator
operator ==	python_bindings/pybind11/tests/object.h	/^    bool operator==(const T* ptr) const { return m_ptr == ptr; }$/;"	f	class:ref
operator ==	python_bindings/pybind11/tests/object.h	/^    bool operator==(const ref &r) const { return m_ptr == r.m_ptr; }$/;"	f	class:ref
operator ==	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    bool operator==(const Vector2 &v) const {$/;"	f	class:Vector2
operator ==	python_bindings/pybind11/tests/test_sequences_and_iterators.cpp	/^bool operator==(const NonZeroIterator<std::pair<A, B>>& it, const NonZeroSentinel&) {$/;"	f
operator ==	python_bindings/pybind11/tests/test_stl.cpp	/^    bool operator==(const TplCtorClass &) const { return true; }$/;"	f	struct:TplCtorClass
operator ==	src/format.cpp	/^bool operator==(const Format& a, const Format& b){$/;"	f	namespace:taco
operator ==	src/format.cpp	/^bool operator==(const ModeFormat& a, const ModeFormat& b) {$/;"	f	namespace:taco
operator ==	src/format.cpp	/^bool operator==(const ModeFormatPack& a, const ModeFormatPack& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/index_notation.cpp	/^bool operator==(const Access& a, const Access& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/index_notation.cpp	/^bool operator==(const IndexVar& a, const IndexVar& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/index_notation.cpp	/^bool operator==(const TensorVar& a, const TensorVar& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/index_notation_nodes.cpp	/^bool operator==(const IndexVarNode& a, const IndexVarNode& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/provenance_graph.cpp	/^bool operator==(const BoundRelNode& a, const BoundRelNode& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/provenance_graph.cpp	/^bool operator==(const DivideRelNode& a, const DivideRelNode& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/provenance_graph.cpp	/^bool operator==(const FuseRelNode& a, const FuseRelNode& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/provenance_graph.cpp	/^bool operator==(const IndexVarRel& a, const IndexVarRel& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/provenance_graph.cpp	/^bool operator==(const PosRelNode& a, const PosRelNode& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/provenance_graph.cpp	/^bool operator==(const PrecomputeRelNode& a, const PrecomputeRelNode& b) {$/;"	f	namespace:taco
operator ==	src/index_notation/provenance_graph.cpp	/^bool operator==(const SplitRelNode& a, const SplitRelNode& b) {$/;"	f	namespace:taco
operator ==	src/lower/iterator.cpp	/^bool operator==(const Iterator& a, const Iterator& b) {$/;"	f	namespace:taco
operator ==	src/lower/merge_lattice.cpp	/^bool operator==(const MergeLattice& a, const MergeLattice& b) {$/;"	f	namespace:taco
operator ==	src/lower/merge_lattice.cpp	/^bool operator==(const MergePoint& a, const MergePoint& b) {$/;"	f	namespace:taco
operator ==	src/lower/mode_access.cpp	/^bool operator==(const ModeAccess& a, const ModeAccess& b) {$/;"	f	namespace:taco
operator ==	src/lower/mode_format_impl.cpp	/^bool operator==(const ModeFormatImpl& a, const ModeFormatImpl& b) {$/;"	f	namespace:taco
operator ==	src/lower/tensor_path.cpp	/^bool operator==(const TensorPath& l, const TensorPath& r) {$/;"	f	namespace:taco
operator ==	src/lower/tensor_path.cpp	/^bool operator==(const TensorPathStep& l, const TensorPathStep& r) {$/;"	f	namespace:taco
operator ==	src/storage/typed_index.cpp	/^bool TypedIndexPtr::operator== (const TypedIndexPtr &other) const {$/;"	f	class:taco::TypedIndexPtr
operator ==	src/storage/typed_index.cpp	/^bool operator==(const TypedIndexVal& a, const TypedIndexVal &other) {$/;"	f	namespace:taco
operator ==	src/storage/typed_index.cpp	/^bool operator==(const TypedIndexVal& a, const int other) {$/;"	f	namespace:taco
operator ==	src/storage/typed_value.cpp	/^bool TypedComponentPtr::operator== (const TypedComponentPtr &other) const {$/;"	f	class:taco::TypedComponentPtr
operator ==	src/storage/typed_value.cpp	/^bool operator==(const TypedComponentVal& a, const TypedComponentVal &other) {$/;"	f	namespace:taco
operator ==	src/storage/typed_value.cpp	/^bool operator==(const TypedComponentVal& a, const int other) {$/;"	f	namespace:taco
operator ==	src/tensor.cpp	/^bool operator==(const TensorBase& a, const TensorBase& b) {$/;"	f	namespace:taco
operator ==	src/type.cpp	/^bool operator==(const Datatype& a, const Datatype& b) {$/;"	f	namespace:taco
operator ==	src/type.cpp	/^bool operator==(const Dimension& a, const Dimension& b) {$/;"	f	namespace:taco
operator ==	src/type.cpp	/^bool operator==(const Shape& a, const Shape& b) {$/;"	f	namespace:taco
operator ==	src/type.cpp	/^bool operator==(const Type& a, const Type& b) {$/;"	f	namespace:taco
operator ==	test/gtest/gtest.h	/^  bool operator==(T* p) const { return value_ == p; }$/;"	f	class:testing::internal::linked_ptr
operator ==	test/gtest/gtest.h	/^  bool operator==(const NativeArray& rhs) const {$/;"	f	class:testing::internal::NativeArray
operator ==	test/gtest/gtest.h	/^  bool operator==(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator ==	test/gtest/gtest.h	/^  bool operator==(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator ==	test/gtest/gtest.h	/^bool operator==(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator >	include/taco/storage/typed_vector.h	/^  bool operator>(const TypedVector &other) const {$/;"	f	class:taco::TypedVector
operator >	include/taco/util/comparable.h	/^bool operator>(const Comparable<T> &lhs, const Comparable<T> &rhs) {$/;"	f	namespace:taco::util
operator >	include/taco/util/intrusive_ptr.h	/^  bool operator>(const IntrusivePtr<T> &p1, const IntrusivePtr<T> &p2) {$/;"	f	class:taco::util::IntrusivePtr
operator >	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool operator>(object_api const &other) const  { return rich_compare(other, Py_GT); }$/;"	f	class:object_api
operator >	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend bool operator> (const It &a, const It &b) { return b < a; }$/;"	f	class:generic_iterator
operator >	src/index_notation/index_notation.cpp	/^bool operator>(const IndexVar& a , const IndexVar& b) {$/;"	f	namespace:taco
operator >	src/storage/typed_index.cpp	/^bool TypedIndexPtr::operator> (const TypedIndexPtr &other) const {$/;"	f	class:taco::TypedIndexPtr
operator >	src/storage/typed_index.cpp	/^bool operator>(const TypedIndexVal& a, const TypedIndexVal &other) {$/;"	f	namespace:taco
operator >	src/storage/typed_index.cpp	/^bool operator>(const TypedIndexVal& a, const int other) {$/;"	f	namespace:taco
operator >	src/storage/typed_value.cpp	/^bool TypedComponentPtr::operator> (const TypedComponentPtr &other) const {$/;"	f	class:taco::TypedComponentPtr
operator >	src/storage/typed_value.cpp	/^bool operator>(const TypedComponentVal& a, const TypedComponentVal &other) {$/;"	f	namespace:taco
operator >	src/storage/typed_value.cpp	/^bool operator>(const TypedComponentVal& a, const int other) {$/;"	f	namespace:taco
operator >	src/tensor.cpp	/^bool operator>(const TensorBase& a, const TensorBase& b) {$/;"	f	namespace:taco
operator >=	include/taco/util/comparable.h	/^bool operator>=(const Comparable<T> &lhs, const Comparable<T> &rhs) {$/;"	f	namespace:taco::util
operator >=	include/taco/util/intrusive_ptr.h	/^  bool operator>=(const IntrusivePtr<T> &p1, const IntrusivePtr<T> &p2) {$/;"	f	class:taco::util::IntrusivePtr
operator >=	python_bindings/pybind11/include/pybind11/pytypes.h	/^    bool operator>=(object_api const &other) const { return rich_compare(other, Py_GE); }$/;"	f	class:object_api
operator >=	python_bindings/pybind11/include/pybind11/pytypes.h	/^    friend bool operator>=(const It &a, const It &b) { return !(a < b); }$/;"	f	class:generic_iterator
operator >=	src/index_notation/index_notation.cpp	/^bool operator>=(const IndexVar& a, const IndexVar& b) {$/;"	f	namespace:taco
operator >=	src/storage/typed_index.cpp	/^bool TypedIndexPtr::operator>= (const TypedIndexPtr &other) const {$/;"	f	class:taco::TypedIndexPtr
operator >=	src/storage/typed_index.cpp	/^bool operator>=(const TypedIndexVal& a,const TypedIndexVal &other) {$/;"	f	namespace:taco
operator >=	src/storage/typed_index.cpp	/^bool operator>=(const TypedIndexVal& a,const int other) {$/;"	f	namespace:taco
operator >=	src/storage/typed_value.cpp	/^bool TypedComponentPtr::operator>= (const TypedComponentPtr &other) const {$/;"	f	class:taco::TypedComponentPtr
operator >=	src/storage/typed_value.cpp	/^bool operator>=(const TypedComponentVal& a,const TypedComponentVal &other) {$/;"	f	namespace:taco
operator >=	src/storage/typed_value.cpp	/^bool operator>=(const TypedComponentVal& a,const int other) {$/;"	f	namespace:taco
operator >=	src/tensor.cpp	/^bool operator>=(const TensorBase& a, const TensorBase& b) {$/;"	f	namespace:taco
operator CType	include/taco/tensor.h	/^  operator CType() {$/;"	f	struct:taco::ScalarAccess
operator CharT&	python_bindings/pybind11/include/pybind11/cast.h	/^    operator CharT&() {$/;"	f	struct:type_caster
operator CharT*	python_bindings/pybind11/include/pybind11/cast.h	/^    operator CharT*() { return none ? nullptr : const_cast<CharT *>(static_cast<StringType &>(str_caster).c_str()); }$/;"	f	struct:type_caster
operator ConstRefCasted&	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^  operator ConstRefCasted&() { value = {2}; return value; }$/;"	f	class:type_caster
operator ConstRefCasted&&	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^  operator ConstRefCasted&&() { value = {1}; return std::move(value); }$/;"	f	class:type_caster
operator ConstRefCasted*	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^  operator ConstRefCasted*() { value = {3}; return &value; }$/;"	f	class:type_caster
operator CopyOnlyInt&	python_bindings/pybind11/tests/test_copy_move.cpp	/^    operator CopyOnlyInt&() { return value; }$/;"	f	struct:type_caster
operator CopyOnlyInt*	python_bindings/pybind11/tests/test_copy_move.cpp	/^    operator CopyOnlyInt*() { return &value; }$/;"	f	struct:type_caster
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >	test/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9,$/;"	f	class:testing::internal::CartesianProductHolder10
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> >	test/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder9
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8> >	test/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7,$/;"	f	class:testing::internal::CartesianProductHolder8
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7> >	test/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6,$/;"	f	class:testing::internal::CartesianProductHolder7
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6> >	test/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6> >() const {$/;"	f	class:testing::internal::CartesianProductHolder6
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5> >	test/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5> >() const {$/;"	f	class:testing::internal::CartesianProductHolder5
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4> >	test/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4> >() const {$/;"	f	class:testing::internal::CartesianProductHolder4
operator ParamGenerator< ::testing::tuple<T1, T2, T3> >	test/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3> >() const {$/;"	f	class:testing::internal::CartesianProductHolder3
operator ParamGenerator< ::testing::tuple<T1, T2> >	test/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2> >() const {$/;"	f	class:testing::internal::CartesianProductHolder2
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const { return ValuesIn(&v1_, &v1_ + 1); }$/;"	f	class:testing::internal::ValueArray1
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray10
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray11
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray12
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray13
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray14
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray15
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray16
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray17
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray18
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray19
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray2
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray20
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray21
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray22
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray23
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray24
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray25
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray26
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray27
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray28
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray29
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray3
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray30
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray31
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray32
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray33
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray34
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray35
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray36
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray37
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray38
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray39
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray4
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray40
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray41
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray42
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray43
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray44
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray45
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray46
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray47
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray48
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray49
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray5
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray50
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray6
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray7
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray8
operator ParamGenerator<T>	test/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray9
operator T	python_bindings/pybind11/include/pybind11/pytypes.h	/^    operator T() const {$/;"	f	class:int_
operator T *	python_bindings/pybind11/include/pybind11/pytypes.h	/^    template <typename T> operator T *() const {$/;"	f	class:capsule
operator T*	python_bindings/pybind11/tests/object.h	/^    operator T* () { return m_ptr; }$/;"	f	class:ref
operator Type&	python_bindings/pybind11/include/pybind11/eigen.h	/^    operator Type&() { return *ref; }$/;"	f	struct:type_caster
operator Type&	python_bindings/pybind11/include/pybind11/eigen.h	/^    operator Type&() { return value; }$/;"	f	struct:type_caster
operator Type&&	python_bindings/pybind11/include/pybind11/eigen.h	/^    operator Type&&() && { return std::move(value); }$/;"	f	struct:type_caster
operator Type*	python_bindings/pybind11/include/pybind11/eigen.h	/^    operator Type*() { return &value; }$/;"	f	struct:type_caster
operator Type*	python_bindings/pybind11/include/pybind11/eigen.h	/^    operator Type*() { return ref.get(); }$/;"	f	struct:type_caster
operator []	include/taco/coordinate.h	/^  Type& operator[](size_t idx) {$/;"	f	class:taco::Coordinate
operator []	include/taco/coordinate.h	/^  const Type& operator[](size_t idx) const {$/;"	f	class:taco::Coordinate
operator []	include/taco/storage/coordinate.h	/^  Type& operator[](size_t idx) {$/;"	f	class:taco::Coordinates
operator []	include/taco/storage/coordinate.h	/^  const Type& operator[](size_t idx) const {$/;"	f	class:taco::Coordinates
operator []	include/taco/storage/typed_vector.h	/^  typename Typed::Ref operator[] (const size_t index) const {$/;"	f	class:taco::TypedVector
operator []	include/taco/tensor.h	/^      const T& operator[](size_t idx) const {$/;"	f	class:taco::TensorBase::const_iterator::Coordinates
operator []	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::item_accessor operator[](handle h) const { return object::operator[](h); }$/;"	f	class:list
operator []	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::item_accessor operator[](handle h) const { return object::operator[](h); }$/;"	f	class:sequence
operator []	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::item_accessor operator[](handle h) const { return object::operator[](h); }$/;"	f	class:tuple
operator []	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::list_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:list
operator []	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::sequence_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:sequence
operator []	python_bindings/pybind11/include/pybind11/pytypes.h	/^    detail::tuple_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:tuple
operator []	python_bindings/pybind11/include/pybind11/pytypes.h	/^    reference operator[](difference_type n) const { return *(*this + n); }$/;"	f	class:generic_iterator
operator []	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename D> item_accessor object_api<D>::operator[](const char *key) const {$/;"	f	class:object_api
operator []	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename D> item_accessor object_api<D>::operator[](handle key) const {$/;"	f	class:object_api
operator []	src/lower/mode_format_impl.cpp	/^ir::Expr ModeFunction::operator[](size_t result) const {$/;"	f	class:taco::ModeFunction
operator []	src/storage/array.cpp	/^TypedComponentRef Array::operator[] (const int index) const {$/;"	f	class:taco::Array
operator bool	python_bindings/pybind11/include/pybind11/cast.h	/^    explicit operator bool() const { return value_ptr(); }$/;"	f	struct:value_and_holder
operator bool	python_bindings/pybind11/include/pybind11/eigen.h	/^    operator bool() const { return conformable; }$/;"	f	struct:EigenConformable
operator bool	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit operator bool() const { return m_ptr != nullptr; }$/;"	f	class:handle
operator bool	python_bindings/pybind11/include/pybind11/pytypes.h	/^    operator bool() const { return m_ptr && PyLong_AsLong(m_ptr) != 0; }$/;"	f	class:bool_
operator bool	test/gtest/gtest.h	/^  operator bool() const { return success_; }  \/\/ NOLINT$/;"	f	class:testing::AssertionResult
operator bool	test/gtest/gtest.h	/^  operator bool() const { return true; }$/;"	f	struct:testing::internal::ConstCharPtr
operator const ConstRefCasted&	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^  operator const ConstRefCasted&() { value = {4}; return value; }$/;"	f	class:type_caster
operator const ConstRefCasted*	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^  operator const ConstRefCasted*() { value = {5}; return &value; }$/;"	f	class:type_caster
operator double	python_bindings/pybind11/include/pybind11/pytypes.h	/^    operator double() const { return (double) PyFloat_AsDouble(m_ptr); }$/;"	f	class:float_
operator enable_if_t<std::is_same<T, accessor_policies::generic_item>::value, bool>	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit operator enable_if_t<std::is_same<T, accessor_policies::generic_item>::value, bool>() const {$/;"	f	class:accessor
operator enable_if_t<std::is_same<T, accessor_policies::str_attr>::value || std::is_same<T, accessor_policies::obj_attr>::value, bool>	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit operator enable_if_t<std::is_same<T, accessor_policies::str_attr>::value ||$/;"	f	class:accessor
operator float	python_bindings/pybind11/include/pybind11/pytypes.h	/^    operator float() const { return (float) PyFloat_AsDouble(m_ptr); }$/;"	f	class:float_
operator holder_type&	python_bindings/pybind11/include/pybind11/cast.h	/^    explicit operator holder_type&() { return holder; }$/;"	f	struct:copyable_holder_caster
operator holder_type*	python_bindings/pybind11/include/pybind11/cast.h	/^    explicit operator holder_type*() { return std::addressof(holder); }$/;"	f	struct:copyable_holder_caster
operator itype&	python_bindings/pybind11/include/pybind11/cast.h	/^    operator itype&() { if (!value) throw reference_cast_error(); return *((itype *) value); }$/;"	f	class:type_caster_base
operator itype*	python_bindings/pybind11/include/pybind11/cast.h	/^    operator itype*() { return (type *) value; }$/;"	f	class:type_caster_base
operator object	python_bindings/pybind11/include/pybind11/pytypes.h	/^    operator object() const { return get_cache(); }$/;"	f	class:accessor
operator std::reference_wrapper<type>	python_bindings/pybind11/include/pybind11/cast.h	/^    operator std::reference_wrapper<type>() { return cast_op<type &>(subcaster); }$/;"	f	class:type_caster
operator std::string	python_bindings/pybind11/include/pybind11/pytypes.h	/^    operator std::string() const {$/;"	f	class:bytes
operator std::string	python_bindings/pybind11/include/pybind11/pytypes.h	/^    operator std::string() const {$/;"	f	class:str
operator std::vector<T> &&	python_bindings/pybind11/include/pybind11/detail/common.h	/^    operator std::vector<T> &&() && { return std::move(v); }$/;"	f	class:overload_cast_impl::any_container
operator std::vector<int>	include/taco/coordinate.h	/^  operator std::vector<int>() const {$/;"	f	class:taco::Coordinate
operator struct taco_tensor_t*	src/storage/storage.cpp	/^TensorStorage::operator struct taco_tensor_t*() const {$/;"	f	class:taco::TensorStorage
operator type	python_bindings/pybind11/include/pybind11/cast.h	/^    operator type() & { return implicit_cast(indices{}); }$/;"	f	class:tuple_caster
operator type	python_bindings/pybind11/include/pybind11/cast.h	/^    operator type() && { return std::move(*this).implicit_cast(indices{}); }$/;"	f	class:tuple_caster
operator type&	python_bindings/pybind11/include/pybind11/cast.h	/^    explicit operator type&() { return *(static_cast<type *>(this->value)); }$/;"	f	struct:copyable_holder_caster
operator type*	python_bindings/pybind11/include/pybind11/cast.h	/^    explicit operator type*() { return this->value; }$/;"	f	struct:copyable_holder_caster
operator value_and_holder &	python_bindings/pybind11/include/pybind11/detail/init.h	/^    operator value_and_holder &() { return *value; }$/;"	f	class:type_caster
operator void *&	python_bindings/pybind11/include/pybind11/cast.h	/^    operator void *&() { return value; }$/;"	f	class:type_caster
operator_new	python_bindings/pybind11/include/pybind11/attr.h	/^    void *(*operator_new)(size_t) = nullptr;$/;"	m	struct:type_record
operator_new	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    void *(*operator_new)(size_t);$/;"	m	struct:type_info
optimizeSpMM	src/index_notation/transformations.cpp	/^static IndexStmt optimizeSpMM(IndexStmt stmt) {$/;"	f	namespace:taco
optional_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template<typename T> struct optional_caster {$/;"	s
options	python_bindings/pybind11/include/pybind11/options.h	/^    options() : previous_state(global_state()) {}$/;"	f	class:options
options	python_bindings/pybind11/include/pybind11/options.h	/^class options {$/;"	c
orInBit	python_bindings/src/pyFormat.cpp	/^static inline std::size_t orInBit(std::size_t currentValue, int bitToSet){$/;"	f	namespace:taco::pythonBindings
orange	src/ir/ir_printer.cpp	/^const std::string orange="\\033[38;5;214m";$/;"	m	namespace:taco::ir	file:
order	include/taco/coordinate.h	/^  size_t order() {$/;"	f	class:taco::Coordinate
order	include/taco/taco_tensor_t.h	/^  int32_t      order;         \/\/ tensor order (number of modes)$/;"	m	struct:taco_tensor_t
order	include/taco/tensor.h	/^      const size_t order;$/;"	m	class:taco::TensorBase::const_iterator::Coordinates
order	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def order(self):$/;"	m	class:tensor
ordering	src/index_notation/properties.cpp	/^const std::vector<int> & Commutative::ordering() const {$/;"	f	class:taco::Commutative
ordering_	include/taco/index_notation/property_pointers.h	/^  const std::vector<int> ordering_;$/;"	m	struct:taco::CommutativePtr
original_reporter_	test/gtest/gtest.h	/^  TestPartResultReporterInterface* original_reporter_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
original_working_dir	test/gtest/gtest-all.cc	/^const char* UnitTest::original_working_dir() const {$/;"	f	class:testing::UnitTest
original_working_dir_	test/gtest/gtest-all.cc	/^  internal::FilePath original_working_dir_;$/;"	m	class:testing::internal::UnitTestImpl	file:
os	include/taco/index_notation/index_notation_printer.h	/^  std::ostream& os;$/;"	m	class:taco::IndexNotationPrinter
os	include/taco/index_notation/iteration_algebra_printer.h	/^  std::ostream& os;$/;"	m	class:taco::IterationAlgebraPrinter
os	include/taco/target.h	/^  enum OS {OSUnknown=0, Linux, MacOS, Windows} os;$/;"	m	struct:taco::Target	typeref:enum:taco::Target::OS
os	python_bindings/pybind11/docs/benchmark.py	/^import os$/;"	i
os	python_bindings/pybind11/docs/conf.py	/^import os$/;"	i
os	python_bindings/pybind11/pybind11/commands.py	/^import os$/;"	i
os	python_bindings/pybind11/pybind11/setup_helpers.py	/^import os$/;"	i
os	python_bindings/pybind11/setup.py	/^import os$/;"	i
os	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^import os$/;"	i
os	python_bindings/pybind11/tests/extra_setuptools/test_setuphelper.py	/^import os$/;"	i
os	python_bindings/pybind11/tests/test_eval.py	/^import os$/;"	i
os	python_bindings/pybind11/tools/libsize.py	/^import os$/;"	i
os	python_bindings/source/conf.py	/^import os$/;"	i
os	python_bindings/unit_tests.py	/^import unittest, os, shutil, tempfile$/;"	i
osMap	src/target.cpp	/^map<string, Target::OS> osMap = {{"unknown", Target::OSUnknown},$/;"	m	namespace:taco::__anon19	file:
os_stack_trace_getter	test/gtest/gtest-all.cc	/^OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {$/;"	f	class:testing::internal::UnitTestImpl
os_stack_trace_getter_	test/gtest/gtest-all.cc	/^  OsStackTraceGetterInterface* os_stack_trace_getter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
other	include/taco/storage/typed_index.h	/^  TypedIndexRef(const TypedIndexRef& other) = default;$/;"	m	class:taco::TypedIndexRef
other	include/taco/storage/typed_value.h	/^  TypedComponentRef(const TypedComponentRef& other) = default;$/;"	m	class:taco::TypedComponentRef
other	python_bindings/pybind11/include/pybind11/iostream.h	/^    scoped_ostream_redirect(scoped_ostream_redirect &&other) = default;$/;"	m	class:scoped_ostream_redirect
other	python_bindings/pybind11/tests/test_copy_move.cpp	/^    lacking_copy_ctor(const lacking_copy_ctor& other) = delete;$/;"	m	struct:lacking_copy_ctor	file:
other	python_bindings/pybind11/tests/test_copy_move.cpp	/^    lacking_move_ctor(const lacking_move_ctor& other) = delete;$/;"	m	struct:lacking_move_ctor	file:
other	python_bindings/pybind11/tests/test_copy_move.cpp	/^    lacking_move_ctor(lacking_move_ctor&& other) = delete;$/;"	m	struct:lacking_move_ctor	file:
other	test/gtest/gtest.h	/^  ValueArray1(const ValueArray1& other) = default;$/;"	m	class:testing::internal::ValueArray1
other	test/gtest/gtest.h	/^  ValueArray16(const ValueArray16& other) = default;$/;"	m	class:testing::internal::ValueArray16
other	test/gtest/gtest.h	/^  ValueArray2(const ValueArray2& other) = default;$/;"	m	class:testing::internal::ValueArray2
other	test/gtest/gtest.h	/^  ValueArray3(const ValueArray3& other) = default;$/;"	m	class:testing::internal::ValueArray3
other	test/gtest/gtest.h	/^  ValueArray4(const ValueArray4& other) = default;$/;"	m	class:testing::internal::ValueArray4
other	test/gtest/gtest.h	/^  ValueArray5(const ValueArray5& other) = default;$/;"	m	class:testing::internal::ValueArray5
other	test/gtest/gtest.h	/^  ValueArray8(const ValueArray8& other) = default;$/;"	m	class:testing::internal::ValueArray8
otherwise	include/taco/ir/ir.h	/^  Stmt otherwise;$/;"	m	struct:taco::ir::IfThenElse
out	src/codegen/codegen_c.h	/^  std::ostream &out;$/;"	m	class:taco::ir::CodeGen_C
out	src/codegen/codegen_cuda.h	/^  std::ostream &out;$/;"	m	class:taco::ir::CodeGen_CUDA
outType	include/taco/parser/einsum_parser.h	/^  Datatype outType;$/;"	m	class:taco::parser::EinsumParser
outcome	test/gtest/gtest-all.cc	/^  DeathTestOutcome outcome() const { return outcome_; }$/;"	f	class:testing::internal::DeathTestImpl
outcome_	test/gtest/gtest-all.cc	/^  DeathTestOutcome outcome_;$/;"	m	class:testing::internal::DeathTestImpl	file:
outer	python_bindings/pytaco/pytensor/taco_tensor.py	/^def outer(t1, t2, out_format=default_mode, dtype=None):$/;"	f
outerParentVar	src/index_notation/provenance_graph.cpp	/^  IndexVar outerParentVar;$/;"	m	struct:taco::FuseRelNode::Content	file:
outerVar	src/index_notation/provenance_graph.cpp	/^  IndexVar outerVar;$/;"	m	struct:taco::DivideRelNode::Content	file:
outerVar	src/index_notation/provenance_graph.cpp	/^  IndexVar outerVar;$/;"	m	struct:taco::SplitRelNode::Content	file:
outer_stride	python_bindings/pybind11/include/pybind11/eigen.h	/^                                outer_stride = if_zero<StrideType::OuterStrideAtCompileTime,$/;"	m	struct:EigenProps
outputKind	src/codegen/codegen_c.h	/^  OutputKind outputKind;$/;"	m	class:taco::ir::CodeGen_C
outputKind	src/codegen/codegen_cuda.h	/^  OutputKind outputKind;$/;"	m	class:taco::ir::CodeGen_CUDA
outputProperties	src/codegen/codegen_c.cpp	/^  map<tuple<Expr, TensorProperty, int, int>, string> outputProperties;$/;"	m	class:taco::ir::CodeGen_C::FindVars	file:
outputProperties	src/codegen/codegen_cuda.cpp	/^  map<tuple<Expr, TensorProperty, int, int>, string> outputProperties;$/;"	m	class:taco::ir::CodeGen_CUDA::FindVars	file:
outputTensors	src/codegen/codegen_c.cpp	/^  vector<Expr> outputTensors;$/;"	m	class:taco::ir::CodeGen_C::FindVars	file:
outputTensors	src/codegen/codegen_cuda.cpp	/^  vector<Expr> outputTensors;$/;"	m	class:taco::ir::CodeGen_CUDA::FindVars	file:
output_	test/gtest/gtest-all.cc	/^  std::string output_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
output_file_	test/gtest/gtest-all.cc	/^  const std::string output_file_;$/;"	m	class:testing::internal::XmlUnitTestResultPrinter	file:
output_race_strategy	include/taco/index_notation/index_notation_nodes.h	/^  OutputRaceStrategy  output_race_strategy;$/;"	m	struct:taco::ForallNode
output_race_strategy	src/index_notation/transformations.cpp	/^  OutputRaceStrategy output_race_strategy;$/;"	m	struct:taco::Parallelize::Content	file:
outputs	include/taco/ir/ir.h	/^  std::vector<Expr> outputs;$/;"	m	struct:taco::ir::Function
overload_cast	python_bindings/pybind11/include/pybind11/detail/common.h	/^static constexpr detail::overload_cast_impl<Args...> overload_cast = {};$/;"	m	struct:overload_cast_impl
overload_cast	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename... Args> struct overload_cast {$/;"	s	struct:overload_cast_impl
overload_cast_impl	python_bindings/pybind11/include/pybind11/detail/common.h	/^    constexpr overload_cast_impl() {}; \/\/ NOLINT(modernize-use-equals-default):  MSVC 2015 needs this$/;"	f	struct:overload_cast_impl
overload_cast_impl	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct overload_cast_impl {$/;"	s
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded()             { return "()"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) const { return "(float, float) const"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) { return "(float, float)"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int)   const { return "(float, int) const"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int)   { return "(float, int)"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int)          const { return "(int) const"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int)          { return "(int)"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float)   const { return "(int, float) const"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float)   { return "(int, float)"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int)     const { return "(int, int) const"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int)     { return "(int, int)"; }$/;"	f	class:ExampleMandA
overloaded	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    static py::str overloaded(float) { return "static float"; }$/;"	f	class:ExampleMandA
override	include/taco/lower/mode_format_compressed.h	/^                                     Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^                                  Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^                                  int level) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^                              Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^                              ir::Expr parentPosEnd, Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^                          Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^                          ir::Expr posEnd, Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^  ModeFormat copy(std::vector<ModeFormat::Property> properties) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^  ModeFunction coordBounds(ir::Expr parentPos, Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^  ModeFunction posIterBounds(ir::Expr parentPos, Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^  bool equals(const ModeFormatImpl& other) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^  ir::Expr getSize(ir::Expr parentSize, Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_compressed.h	/^  ir::Expr getWidth(Mode mode) const override;$/;"	m	class:taco::CompressedModeFormat
override	include/taco/lower/mode_format_dense.h	/^                                  Mode mode) const override;$/;"	m	class:taco::DenseModeFormat
override	include/taco/lower/mode_format_dense.h	/^                                  int level) const override;$/;"	m	class:taco::DenseModeFormat
override	include/taco/lower/mode_format_dense.h	/^                               Mode mode) const override;$/;"	m	class:taco::DenseModeFormat
override	include/taco/lower/mode_format_dense.h	/^                              Mode mode) const override;$/;"	m	class:taco::DenseModeFormat
override	include/taco/lower/mode_format_dense.h	/^                          Mode mode) const override;$/;"	m	class:taco::DenseModeFormat
override	include/taco/lower/mode_format_dense.h	/^                      Mode mode) const override;$/;"	m	class:taco::DenseModeFormat
override	include/taco/lower/mode_format_dense.h	/^  ModeFormat copy(std::vector<ModeFormat::Property> properties) const override;$/;"	m	class:taco::DenseModeFormat
override	include/taco/lower/mode_format_dense.h	/^  ir::Expr getWidth(Mode mode) const override;$/;"	m	class:taco::DenseModeFormat
override	include/taco/lower/mode_format_singleton.h	/^                                  Mode mode) const override;$/;"	m	class:taco::SingletonModeFormat
override	include/taco/lower/mode_format_singleton.h	/^                                  int level) const override;$/;"	m	class:taco::SingletonModeFormat
override	include/taco/lower/mode_format_singleton.h	/^                              Mode mode) const override;$/;"	m	class:taco::SingletonModeFormat
override	include/taco/lower/mode_format_singleton.h	/^                             Mode mode) const override;$/;"	m	class:taco::SingletonModeFormat
override	include/taco/lower/mode_format_singleton.h	/^                          Mode mode) const override; $/;"	m	class:taco::SingletonModeFormat
override	include/taco/lower/mode_format_singleton.h	/^  ModeFormat copy(std::vector<ModeFormat::Property> properties) const override;$/;"	m	class:taco::SingletonModeFormat
override	include/taco/lower/mode_format_singleton.h	/^  ModeFunction posIterBounds(ir::Expr parentPos, Mode mode) const override;$/;"	m	class:taco::SingletonModeFormat
override	include/taco/lower/mode_format_singleton.h	/^  bool equals(const ModeFormatImpl& other) const override;$/;"	m	class:taco::SingletonModeFormat
override	include/taco/lower/mode_format_singleton.h	/^  ir::Expr getSize(ir::Expr parentSize, Mode mode) const override;$/;"	m	class:taco::SingletonModeFormat
override	python_bindings/pybind11/include/pybind11/pytypes.h	/^    inline ~error_already_set() override;$/;"	m	class:error_already_set
override_hash	python_bindings/pybind11/include/pybind11/detail/internals.h	/^struct override_hash {$/;"	s
override_unused	python_bindings/pybind11/include/pybind11/cast.h	/^struct override_unused {}; \/\/ Placeholder type for the unneeded (and dead code) static variable in the PYBIND11_OVERRIDE_OVERRIDE macro$/;"	s
owned	python_bindings/pybind11/include/pybind11/detail/common.h	/^    bool owned : 1;$/;"	m	struct:instance
owner_	test/gtest/gtest.h	/^  pthread_t owner_;  \/\/ The thread holding the mutex.$/;"	m	class:std::tr1::MutexBase
owner_thread_id_	test/gtest/gtest.h	/^  unsigned int owner_thread_id_;$/;"	m	class:std::tr1::Mutex
ownview	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    bool ownview = false;$/;"	m	struct:buffer_info
pack	include/taco/storage/pack.h	/^TensorStorage pack(std::vector<int> dimensions, Format format,$/;"	f	namespace:taco
pack	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def pack(self):$/;"	m	class:tensor
pack	src/storage/pack.cpp	/^TensorStorage pack(Datatype                             componentType,$/;"	f	namespace:taco
pack	src/tensor.cpp	/^void TensorBase::pack() {$/;"	f	class:taco::TensorBase
pack	test/tests-lower.cpp	/^  TensorStorage pack(Format format, const vector<int>& dims,$/;"	f	struct:taco::test::TestCase
packArguments	src/index_notation/kernel.cpp	/^vector<void*> packArguments(const vector<TensorStorage>& args) {$/;"	f	namespace:taco
packArguments	src/tensor.cpp	/^vector<void*> packArguments(const TensorBase& tensor) {$/;"	f	namespace:taco
packLoc	src/lower/mode.cpp	/^  size_t     packLoc;           \/\/\/ position within pack containing mode$/;"	m	struct:taco::Mode::Content	file:
packOperands	src/tensor.cpp	/^void packOperands(const TensorBase& tensor) {$/;"	f	namespace:taco
packTensor	src/storage/pack.cpp	/^static int packTensor(const vector<int>& dimensions,$/;"	f	namespace:taco
packTensorProperty	src/codegen/codegen.cpp	/^string CodeGen::packTensorProperty(string varname, Expr tnsr,$/;"	f	class:taco::ir::CodeGen
pack_element	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct pack_element { using type = typename pack_element<N - 1, Ts...>::type; };$/;"	s
pack_element	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct pack_element<0, T, Ts...> { using type = T; };$/;"	s
packageInputs	test/tests-format.cpp	/^std::vector<TensorData<double>> packageInputs(Ts... inputs) {$/;"	f
packageInputs	test/tests-parafac.cpp	/^std::vector<Tensor<double>> packageInputs(Ts... inputs) {$/;"	f
packageModifiers	include/taco/index_notation/index_notation_nodes.h	/^  std::map<int, std::shared_ptr<IndexVarIterationModifier>> packageModifiers() const {$/;"	f	struct:taco::AccessNode
packed_dtype	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def packed_dtype():$/;"	f
packed_dtype_fmt	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def packed_dtype_fmt():$/;"	f
padding	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    uint64_t padding[10];$/;"	m	class:huge_unique_ptr	file:
parafac	test/tests-parafac.cpp	/^struct parafac : public TestWithParam<TestData> {};$/;"	s	file:
parallelUnitIDVars	src/codegen/codegen_cuda.h	/^  std::map<ParallelUnit, Expr> parallelUnitIDVars;$/;"	m	class:taco::ir::CodeGen_CUDA
parallelUnitIndexVars	include/taco/lower/lowerer_impl.h	/^  std::map<ParallelUnit, IndexVar> parallelUnitIndexVars;$/;"	m	class:taco::LowererImpl
parallelUnitSizes	include/taco/lower/lowerer_impl.h	/^  std::map<ParallelUnit, ir::Expr> parallelUnitSizes;$/;"	m	class:taco::LowererImpl
parallelUnitSizes	src/codegen/codegen_cuda.h	/^  std::map<ParallelUnit, Expr> parallelUnitSizes;$/;"	m	class:taco::ir::CodeGen_CUDA
parallel_unit	include/taco/index_notation/index_notation_nodes.h	/^  ParallelUnit parallel_unit;$/;"	m	struct:taco::ForallNode
parallel_unit	include/taco/ir/ir.h	/^  ParallelUnit parallel_unit;$/;"	m	struct:taco::ir::For
parallel_unit	src/index_notation/transformations.cpp	/^  ParallelUnit  parallel_unit;$/;"	m	struct:taco::Parallelize::Content	file:
parallelize	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::parallelize(IndexVar i, ParallelUnit parallel_unit, OutputRaceStrategy output_race_strategy) const {$/;"	f	class:taco::IndexStmt
parallelizeOuterLoop	src/index_notation/transformations.cpp	/^IndexStmt parallelizeOuterLoop(IndexStmt stmt) {$/;"	f	namespace:taco
param_	test/gtest/gtest.h	/^    const T param_;$/;"	m	class:std::tr1::ThreadWithParam::RunnableImpl
param_	test/gtest/gtest.h	/^  const T param_;  \/\/ User-supplied parameter to the thread function.$/;"	m	class:std::tr1::ThreadWithParam
parameter_	test/gtest/gtest.h	/^  const ParamType parameter_;$/;"	m	class:testing::internal::ParameterizedTestFactory
parameter_	test/gtest/gtest.h	/^  static const ParamType* parameter_;$/;"	m	class:testing::WithParamInterface
parameter_	test/gtest/gtest.h	/^const T* WithParamInterface<T>::parameter_ = NULL;$/;"	m	class:testing::WithParamInterface
parameterized_test_registry	test/gtest/gtest-all.cc	/^  internal::ParameterizedTestCaseRegistry& parameterized_test_registry() {$/;"	f	class:testing::internal::UnitTestImpl
parameterized_test_registry_	test/gtest/gtest-all.cc	/^  internal::ParameterizedTestCaseRegistry parameterized_test_registry_;$/;"	m	class:testing::internal::UnitTestImpl	file:
parameterized_tests_registered_	test/gtest/gtest-all.cc	/^  bool parameterized_tests_registered_;$/;"	m	class:testing::internal::UnitTestImpl	file:
params	include/taco/ir/ir.h	/^  std::vector<Expr> params;$/;"	m	struct:taco::ir::Print
parent	python_bindings/pybind11/include/pybind11/cast.h	/^    handle parent;$/;"	m	struct:function_call
parent	python_bindings/pybind11/include/pybind11/stl.h	/^    handle parent;$/;"	m	struct:variant_caster_visitor
parent	src/lower/iterator.cpp	/^  Iterator               parent;  \/\/ Pointer to parent iterator$/;"	m	struct:taco::Iterator::Content	file:
parentModeFormat	src/lower/mode.cpp	/^  ModeFormat parentModeFormat;  \/\/\/ type of previous mode in the tensor$/;"	m	struct:taco::Mode::Content	file:
parentParallelUnits	src/codegen/codegen_cuda.h	/^  std::set<ParallelUnit> parentParallelUnits;$/;"	m	class:taco::ir::CodeGen_CUDA
parentPrecedence	include/taco/index_notation/index_notation_printer.h	/^  Precedence parentPrecedence;$/;"	m	class:taco::IndexNotationPrinter::Precedence
parentPrecedence	include/taco/index_notation/iteration_algebra_printer.h	/^  Precedence parentPrecedence;$/;"	m	class:taco::IterationAlgebraPrinter::Precedence
parentPrecedence	include/taco/ir/ir_printer.h	/^  Precedence parentPrecedence = BOTTOM;$/;"	m	class:taco::ir::IRPrinter
parentRelMap	include/taco/index_notation/provenance_graph.h	/^  std::map<IndexVar, IndexVarRel> parentRelMap;$/;"	m	class:taco::ProvenanceGraph
parentVar	src/index_notation/provenance_graph.cpp	/^  IndexVar parentVar;$/;"	m	struct:taco::BoundRelNode::Content	file:
parentVar	src/index_notation/provenance_graph.cpp	/^  IndexVar parentVar;$/;"	m	struct:taco::DivideRelNode::Content	file:
parentVar	src/index_notation/provenance_graph.cpp	/^  IndexVar parentVar;$/;"	m	struct:taco::PosRelNode::Content	file:
parentVar	src/index_notation/provenance_graph.cpp	/^  IndexVar parentVar;$/;"	m	struct:taco::PrecomputeRelNode::Content	file:
parentVar	src/index_notation/provenance_graph.cpp	/^  IndexVar parentVar;$/;"	m	struct:taco::SplitRelNode::Content	file:
parent_	test/gtest/gtest-all.cc	/^  UnitTest* const parent_;$/;"	m	class:testing::internal::UnitTestImpl	file:
parents	src/lower/iteration_forest.h	/^  std::map<IndexVar, IndexVar>              parents;$/;"	m	class:taco::IterationForest
parentsMap	include/taco/index_notation/provenance_graph.h	/^  std::map<IndexVar, std::vector<IndexVar>> parentsMap;$/;"	m	class:taco::ProvenanceGraph
parse	src/parser/einsum_parser.cpp	/^void EinsumParser::parse() {$/;"	f	class:taco::parser::EinsumParser
parse	src/parser/parser.cpp	/^void Parser::parse() {$/;"	f	class:taco::parser::Parser
parseAccess	src/parser/parser.cpp	/^Access Parser::parseAccess() {$/;"	f	class:taco::parser::Parser
parseAssign	src/parser/parser.cpp	/^TensorBase Parser::parseAssign() {$/;"	f	class:taco::parser::Parser
parseExpr	src/parser/parser.cpp	/^IndexExpr Parser::parseExpr() {$/;"	f	class:taco::parser::Parser
parseFactor	src/parser/parser.cpp	/^IndexExpr Parser::parseFactor() {$/;"	f	class:taco::parser::Parser
parseFinal	src/parser/parser.cpp	/^IndexExpr Parser::parseFinal() {$/;"	f	class:taco::parser::Parser
parseString	python_bindings/src/pyParsers.cpp	/^static TensorBase parseString(std::string& expr, py::list &tensors, py::object& fmt, Datatype dtype){$/;"	f	namespace:taco::pythonBindings
parseTargetString	src/target.cpp	/^bool parseTargetString(Target& target, string target_string) {$/;"	f	namespace:taco::__anon19
parseTerm	src/parser/parser.cpp	/^IndexExpr Parser::parseTerm() {$/;"	f	class:taco::parser::Parser
parseVar	src/parser/parser.cpp	/^IndexVar Parser::parseVar() {$/;"	f	class:taco::parser::Parser
parseVarList	src/parser/parser.cpp	/^vector<IndexVar> Parser::parseVarList() {$/;"	f	class:taco::parser::Parser
parser	include/taco/parser/einsum_parser.h	/^namespace parser {$/;"	n	namespace:taco
parser	include/taco/parser/lexer.h	/^namespace parser {$/;"	n	namespace:taco
parser	include/taco/parser/parser.h	/^namespace parser {$/;"	n	namespace:taco
parser	include/taco/parser/schedule_parser.h	/^namespace parser {$/;"	n	namespace:taco
parser	src/parser/einsum_parser.cpp	/^namespace parser{$/;"	n	namespace:taco	file:
parser	src/parser/lexer.cpp	/^namespace parser {$/;"	n	namespace:taco	file:
parser	src/parser/parser.cpp	/^namespace parser {$/;"	n	namespace:taco	file:
parser	src/parser/schedule_parser.cpp	/^namespace parser{$/;"	n	namespace:taco	file:
parsingLhs	src/parser/parser.cpp	/^  bool parsingLhs = false;$/;"	m	struct:taco::parser::Parser::Content	file:
partial	python_bindings/pybind11/tests/test_callbacks.py	/^    from functools import partial$/;"	i
partial_dtype_fmt	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def partial_dtype_fmt():$/;"	f
partial_ld_offset	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def partial_ld_offset():$/;"	f
partial_nested_fmt	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def partial_nested_fmt():$/;"	f
partial_regex_	test/gtest/gtest.h	/^  regex_t partial_regex_;  \/\/ For PartialMatch().$/;"	m	class:std::tr1::RE
passed	test/gtest/gtest.h	/^  bool passed() const { return type_ == kSuccess; }$/;"	f	class:testing::TestPartResult
path	src/lower/tensor_path.h	/^  TensorPath path;$/;"	m	class:taco::TensorPathStep
pathname_	test/gtest/gtest.h	/^  std::string pathname_;$/;"	m	class:testing::internal::FilePath
patients	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::unordered_map<const PyObject *, std::vector<PyObject *>> patients;$/;"	m	struct:internals
pattern	src/index_notation/transformations.cpp	/^  std::vector<IndexVar> pattern;$/;"	m	struct:taco::ForAllReplace::Content	file:
pattern	test/gtest/gtest.h	/^  const char* pattern() const { return pattern_; }$/;"	f	class:std::tr1::RE
pattern_	test/gtest/gtest.h	/^  const char* pattern_;$/;"	m	class:std::tr1::RE
pattern_ordered	src/index_notation/transformations.cpp	/^  bool pattern_ordered; \/\/ In case of Reorder(i, j) need to change replacePattern ordering to actually reorder$/;"	m	struct:taco::Reorder::Content	file:
per_thread_test_part_result_reporter_	test/gtest/gtest-all.cc	/^      per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
pets	python_bindings/pybind11/tests/local_bindings.h	/^namespace pets {$/;"	n
pickle	python_bindings/pybind11/include/pybind11/pybind11.h	/^detail::initimpl::pickle_factory<GetState, SetState> pickle(GetState &&g, SetState &&s) {$/;"	f
pickle	python_bindings/pybind11/tests/test_pickling.py	/^    import cPickle as pickle  # Use cPickle on Python 2.7$/;"	i
pickle	python_bindings/pybind11/tests/test_pickling.py	/^    import pickle$/;"	i
pickle_factory	python_bindings/pybind11/include/pybind11/detail/init.h	/^    pickle_factory(Get get, Set set)$/;"	f	struct:pickle_factory
pickle_factory	python_bindings/pybind11/include/pybind11/detail/init.h	/^struct pickle_factory<Get, Set, RetState(Self), NewInstance(ArgState)> {$/;"	s
platform	python_bindings/pybind11/pybind11/setup_helpers.py	/^import platform$/;"	i
platform	python_bindings/pybind11/tests/env.py	/^import platform$/;"	i
platform_lookup	python_bindings/pybind11/include/pybind11/numpy.h	/^constexpr int platform_lookup(int I, Ints... Is) {$/;"	f
platform_lookup	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename Concrete> constexpr int platform_lookup() { return -1; }$/;"	f
plus_impl	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr descr<N1 + N2, Ts1..., Ts2...> plus_impl(const descr<N1, Ts1...> &a, const descr<N2, Ts2...> &b,$/;"	f
pointTensorProperty	src/codegen/codegen.cpp	/^string CodeGen::pointTensorProperty(std::string varname) {$/;"	f	class:taco::ir::CodeGen
pointer	include/taco/storage/typed_vector.h	/^    typedef typename Typed::Ptr pointer;$/;"	t	class:taco::TypedVector::const_iterator
pointer	include/taco/storage/typed_vector.h	/^    typedef typename Typed::Ptr pointer;$/;"	t	class:taco::TypedVector::iterator
pointer	include/taco/tensor.h	/^    typedef std::pair<Coordinates,CType>* pointer;$/;"	t	class:taco::TensorBase::const_iterator
pointer	test/gtest/gtest.h	/^    T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
pointer	test/gtest/gtest.h	/^  T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	test/gtest/gtest.h	/^  T* pointer() { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
pointer	test/gtest/gtest.h	/^  const T* pointer() const { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	test/gtest/gtest.h	/^  const T* pointer() const { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
points	src/lower/merge_lattice.cpp	/^const vector<MergePoint>& MergeLattice::points() const {$/;"	f	class:taco::MergeLattice
points_	include/taco/lower/merge_lattice.h	/^  std::vector<MergePoint> points_;$/;"	m	class:taco::MergeLattice
policy	python_bindings/pybind11/include/pybind11/attr.h	/^    return_value_policy policy = return_value_policy::automatic;$/;"	m	struct:function_record
policy	python_bindings/pybind11/include/pybind11/cast.h	/^    static return_value_policy policy(return_value_policy p) { return p; }$/;"	f	struct:return_value_policy_override
policy	python_bindings/pybind11/include/pybind11/cast.h	/^    static return_value_policy policy(return_value_policy p) {$/;"	f	struct:return_value_policy_override
policy	python_bindings/pybind11/include/pybind11/stl.h	/^    return_value_policy policy;$/;"	m	struct:variant_caster_visitor
policy	src/storage/array.cpp	/^  Policy policy = Array::UserOwns;$/;"	m	struct:taco::Array::Content	file:
polymorphic_type_hook	python_bindings/pybind11/include/pybind11/cast.h	/^struct polymorphic_type_hook : public polymorphic_type_hook_base<itype> {};$/;"	s
polymorphic_type_hook	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    struct polymorphic_type_hook<itype, detail::enable_if_t<std::is_base_of<Animal, itype>::value>>$/;"	s	namespace:Animal::pybind11	file:
polymorphic_type_hook_base	python_bindings/pybind11/include/pybind11/cast.h	/^struct polymorphic_type_hook_base$/;"	s
polymorphic_type_hook_base	python_bindings/pybind11/include/pybind11/cast.h	/^struct polymorphic_type_hook_base<itype, detail::enable_if_t<std::is_polymorphic<itype>::value>>$/;"	s
port_num_	test/gtest/gtest-all.cc	/^    const string port_num_;$/;"	m	class:testing::internal::StreamingListener::SocketWriter	file:
pos	python_bindings/pybind11/include/pybind11/pytypes.h	/^    ssize_t pos = -1;$/;"	m	class:dict_readonly
pos	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::pos(IndexVar i, IndexVar ipos, Access access) const {$/;"	f	class:taco::IndexStmt
posAccess	src/lower/iterator.cpp	/^ModeFunction Iterator::posAccess(const ir::Expr& pos, $/;"	f	class:taco::Iterator
posBounds	src/lower/iterator.cpp	/^ModeFunction Iterator::posBounds(const ir::Expr& parentPos) const {$/;"	f	class:taco::Iterator
posIterAccess	src/lower/mode_format_compressed.cpp	/^ModeFunction CompressedModeFormat::posIterAccess(ir::Expr pos,$/;"	f	class:taco::CompressedModeFormat
posIterAccess	src/lower/mode_format_impl.cpp	/^ModeFunction ModeFormatImpl::posIterAccess(ir::Expr pos,$/;"	f	class:taco::ModeFormatImpl
posIterAccess	src/lower/mode_format_singleton.cpp	/^ModeFunction SingletonModeFormat::posIterAccess(ir::Expr pos,$/;"	f	class:taco::SingletonModeFormat
posIterBounds	src/lower/mode_format_compressed.cpp	/^ModeFunction CompressedModeFormat::posIterBounds(Expr parentPos, $/;"	f	class:taco::CompressedModeFormat
posIterBounds	src/lower/mode_format_impl.cpp	/^ModeFunction ModeFormatImpl::posIterBounds(ir::Expr parentPos, Mode mode) const {$/;"	f	class:taco::ModeFormatImpl
posIterBounds	src/lower/mode_format_singleton.cpp	/^ModeFunction SingletonModeFormat::posIterBounds(Expr parentPos, $/;"	f	class:taco::SingletonModeFormat
posVar	src/index_notation/provenance_graph.cpp	/^  IndexVar posVar;$/;"	m	struct:taco::PosRelNode::Content	file:
posVar	src/lower/iterator.cpp	/^  ir::Expr posVar;$/;"	m	struct:taco::Iterator::Content	file:
pos_only	python_bindings/pybind11/include/pybind11/cast.h	/^struct pos_only {};$/;"	s
positions	src/index_notation/properties.cpp	/^const std::vector<int> & Annihilator::positions() const {$/;"	f	class:taco::Annihilator
positions	src/index_notation/properties.cpp	/^const std::vector<int>& Identity::positions() const {$/;"	f	class:taco::Identity
positions	src/index_notation/property_pointers.cpp	/^  std::vector<int> positions;$/;"	m	struct:taco::AnnihilatorPtr::Content	file:
positions	src/index_notation/property_pointers.cpp	/^  std::vector<int> positions;$/;"	m	struct:taco::IdentityPtr::Content	file:
positions	src/index_notation/property_pointers.cpp	/^const std::vector<int> & AnnihilatorPtr::positions() const {$/;"	f	class:taco::AnnihilatorPtr
positions	src/index_notation/property_pointers.cpp	/^const std::vector<int> & IdentityPtr::positions() const {$/;"	f	class:taco::IdentityPtr
posix	test/gtest/gtest-all.cc	/^namespace posix {$/;"	n	namespace:testing::internal	file:
posix	test/gtest/gtest.h	/^namespace posix {$/;"	n	namespace:std::tr1
post_flag_parse_init_performed_	test/gtest/gtest-all.cc	/^  bool post_flag_parse_init_performed_;$/;"	m	class:testing::internal::UnitTestImpl	file:
postcall	python_bindings/pybind11/include/pybind11/attr.h	/^    static void postcall(function_call &, handle) { }$/;"	f	struct:process_attribute
postcall	python_bindings/pybind11/include/pybind11/attr.h	/^    static void postcall(function_call &, handle) { }$/;"	f	struct:process_attribute_default
postcall	python_bindings/pybind11/include/pybind11/attr.h	/^    static void postcall(function_call &call, handle fn_ret) {$/;"	f	struct:process_attributes
postcall	python_bindings/pybind11/include/pybind11/attr.h	/^    static void postcall(function_call &call, handle ret) { keep_alive_impl(Nurse, Patient, call, ret); }$/;"	f	struct:process_attribute
pow	src/index_notation/index_notation.cpp	/^IndexExpr pow(IndexExpr a, IndexExpr b) {$/;"	f	namespace:taco
precall	python_bindings/pybind11/include/pybind11/attr.h	/^    static void precall(function_call &) { }$/;"	f	struct:process_attribute
precall	python_bindings/pybind11/include/pybind11/attr.h	/^    static void precall(function_call &) { }$/;"	f	struct:process_attribute_default
precall	python_bindings/pybind11/include/pybind11/attr.h	/^    static void precall(function_call &call) { keep_alive_impl(Nurse, Patient, call, handle()); }$/;"	f	struct:process_attribute
precall	python_bindings/pybind11/include/pybind11/attr.h	/^    static void precall(function_call &call) {$/;"	f	struct:process_attributes
precompute	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::precompute(IndexExpr expr, IndexVar i, IndexVar iw, TensorVar workspace) const {$/;"	f	class:taco::IndexStmt
precomputeVar	src/index_notation/provenance_graph.cpp	/^  IndexVar precomputeVar;$/;"	m	struct:taco::PrecomputeRelNode::Content	file:
precomputes	src/index_notation/schedule.cpp	/^  map<IndexExpr, Precompute> precomputes;$/;"	m	struct:taco::Schedule::Content	file:
precondition	test/tests-transformation.cpp	/^struct precondition : public TestWithParam<PreconditionTest> {};$/;"	s	namespace:test	file:
predicate	include/taco/index_notation/index_notation_nodes.h	/^  std::vector<IndexVarRel> predicate;$/;"	m	struct:taco::SuchThatNode
predicates	src/index_notation/transformations.cpp	/^  std::vector<IndexVarRel> predicates;$/;"	m	struct:taco::AddSuchThatPredicates::Content	file:
prefix	python_bindings/pybind11/tools/check-style.sh	/^function prefix(filename, lineno) {$/;"	f
premature_exit_filepath_	test/gtest/gtest-all.cc	/^  const char* const premature_exit_filepath_;$/;"	m	class:testing::internal::ScopedPrematureExitFile	file:
prepare	python_bindings/pybind11/docs/conf.py	/^def prepare(app):$/;"	f
prepend	include/taco/util/collections.h	/^void prepend(std::vector<V>& vector, const C& container) {$/;"	f	namespace:taco::util
prepend	include/taco/util/collections.h	/^void prepend(std::vector<V>& vector, const std::initializer_list<V>& container){$/;"	f	namespace:taco::util
prepend	python_bindings/pybind11/include/pybind11/attr.h	/^    bool prepend : 1;$/;"	m	struct:function_record
prepend	python_bindings/pybind11/include/pybind11/attr.h	/^struct prepend { };$/;"	s
previous_state	python_bindings/pybind11/include/pybind11/options.h	/^    state previous_state;$/;"	m	class:options
primary_domain	python_bindings/pybind11/docs/conf.py	/^primary_domain = "cpp"$/;"	v
print	include/taco/index_notation/provenance_graph.h	/^  virtual void print(std::ostream& stream) const {$/;"	f	struct:taco::IndexVarRelNode
print	python_bindings/pybind11/include/pybind11/pybind11.h	/^PYBIND11_NOINLINE inline void print(tuple args, dict kwargs) {$/;"	f
print	python_bindings/pybind11/include/pybind11/pybind11.h	/^void print(Args &&...args) {$/;"	f
print	python_bindings/pybind11/tools/make_changelog.py	/^from rich import print$/;"	i
print	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::print(const IndexExpr& expr) {$/;"	f	class:taco::IndexNotationPrinter
print	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::print(const IndexStmt& expr) {$/;"	f	class:taco::IndexNotationPrinter
print	src/index_notation/iteration_algebra_printer.cpp	/^void IterationAlgebraPrinter::print(const IterationAlgebra& alg) {$/;"	f	class:taco::IterationAlgebraPrinter
print	src/index_notation/properties.cpp	/^std::ostream & Property::print(std::ostream& os) const {$/;"	f	class:taco::Property
print	src/index_notation/property_pointers.cpp	/^std::ostream& AnnihilatorPtr::print(std::ostream& os) const {$/;"	f	class:taco::AnnihilatorPtr
print	src/index_notation/property_pointers.cpp	/^std::ostream& AssociativePtr::print(std::ostream& os) const {$/;"	f	class:taco::AssociativePtr
print	src/index_notation/property_pointers.cpp	/^std::ostream& CommutativePtr::print(std::ostream& os) const {$/;"	f	class:taco::CommutativePtr
print	src/index_notation/property_pointers.cpp	/^std::ostream& IdentityPtr::print(std::ostream& os) const {$/;"	f	class:taco::IdentityPtr
print	src/index_notation/property_pointers.cpp	/^std::ostream& PropertyPtr::print(std::ostream& os) const {$/;"	f	class:taco::PropertyPtr
print	src/index_notation/provenance_graph.cpp	/^void BoundRelNode::print(std::ostream &stream) const {$/;"	f	class:taco::BoundRelNode
print	src/index_notation/provenance_graph.cpp	/^void DivideRelNode::print(std::ostream &stream) const {$/;"	f	class:taco::DivideRelNode
print	src/index_notation/provenance_graph.cpp	/^void FuseRelNode::print(std::ostream &stream) const {$/;"	f	class:taco::FuseRelNode
print	src/index_notation/provenance_graph.cpp	/^void IndexVarRel::print(std::ostream& stream) const {$/;"	f	class:taco::IndexVarRel
print	src/index_notation/provenance_graph.cpp	/^void PosRelNode::print(std::ostream &stream) const {$/;"	f	class:taco::PosRelNode
print	src/index_notation/provenance_graph.cpp	/^void PrecomputeRelNode::print(std::ostream &stream) const {$/;"	f	class:taco::PrecomputeRelNode
print	src/index_notation/provenance_graph.cpp	/^void SplitRelNode::print(std::ostream &stream) const {$/;"	f	class:taco::SplitRelNode
print	src/index_notation/transformations.cpp	/^void AddSuchThatPredicates::print(std::ostream& os) const {$/;"	f	class:taco::AddSuchThatPredicates
print	src/index_notation/transformations.cpp	/^void ForAllReplace::print(std::ostream& os) const {$/;"	f	class:taco::ForAllReplace
print	src/index_notation/transformations.cpp	/^void Parallelize::print(std::ostream& os) const {$/;"	f	class:taco::Parallelize
print	src/index_notation/transformations.cpp	/^void Precompute::print(std::ostream& os) const {$/;"	f	class:taco::Precompute
print	src/index_notation/transformations.cpp	/^void Reorder::print(std::ostream& os) const {$/;"	f	class:taco::Reorder
print	src/ir/ir_printer.cpp	/^void IRPrinter::print(Stmt stmt) {$/;"	f	class:taco::ir::IRPrinter
printAlloc	src/codegen/codegen.cpp	/^string CodeGen::printAlloc(string pointer, string size) {$/;"	f	class:taco::ir::CodeGen
printAsDot	src/lower/iteration_graph.cpp	/^void IterationGraph::printAsDot(std::ostream& os) {$/;"	f	class:taco::IterationGraph
printAssembleIR	src/tensor.cpp	/^void TensorBase::printAssembleIR(ostream& os, bool color, bool simplify) const {$/;"	f	class:taco::TensorBase
printBinCastedOp	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::printBinCastedOp(Expr a, Expr b, string op, Precedence precedence) {$/;"	f	class:taco::ir::CodeGen_CUDA
printBinOp	src/ir/ir_printer.cpp	/^void IRPrinter::printBinOp(Expr a, Expr b, string op, Precedence precedence) {$/;"	f	class:taco::ir::IRPrinter
printBlockIDVariable	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::printBlockIDVariable(pair<string, Expr> blockIDVar, Expr start, Expr increment) {$/;"	f	class:taco::ir::CodeGen_CUDA
printCAlloc	src/codegen/codegen.cpp	/^string CodeGen::printCAlloc(string pointer, string size) {$/;"	f	class:taco::ir::CodeGen
printCFree	src/codegen/codegen.cpp	/^string CodeGen::printCFree(string pointer) {$/;"	f	class:taco::ir::CodeGen
printCType	src/codegen/codegen.cpp	/^string CodeGen::printCType(Datatype type, bool is_ptr) {$/;"	f	class:taco::ir::CodeGen
printCUDAAlloc	src/codegen/codegen.cpp	/^string CodeGen::printCUDAAlloc(string pointer, string size) {$/;"	f	class:taco::ir::CodeGen
printCUDAFree	src/codegen/codegen.cpp	/^string CodeGen::printCUDAFree(string pointer) {$/;"	f	class:taco::ir::CodeGen
printCUDAType	src/codegen/codegen.cpp	/^string CodeGen::printCUDAType(Datatype type, bool is_ptr) {$/;"	f	class:taco::ir::CodeGen
printCommandLine	tools/taco.cpp	/^static void printCommandLine(ostream& os, int argc, char* argv[]) {$/;"	f	file:
printComputeIR	src/tensor.cpp	/^void TensorBase::printComputeIR(ostream& os, bool color, bool simplify) const {$/;"	f	class:taco::TensorBase
printContextDeclAndInit	src/codegen/codegen.cpp	/^string CodeGen::printContextDeclAndInit(map<Expr, string, ExprCompare> varMap,$/;"	f	class:taco::ir::CodeGen
printCoroutineFinish	src/codegen/codegen.cpp	/^string CodeGen::printCoroutineFinish(int numYields, string funcName) {$/;"	f	class:taco::ir::CodeGen
printData	src/storage/array.cpp	/^void printData(ostream& os, const Array& array) {$/;"	f	namespace:taco
printDecls	src/codegen/codegen.cpp	/^string CodeGen::printDecls(map<Expr, string, ExprCompare> varMap,$/;"	f	class:taco::ir::CodeGen
printDeviceFuncCall	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::printDeviceFuncCall(const vector<pair<string, Expr>> currentParameters, Expr blockSize, int index, Expr gridSize) {$/;"	f	class:taco::ir::CodeGen_CUDA
printDeviceFuncName	src/codegen/codegen_cuda.cpp	/^string CodeGen_CUDA::printDeviceFuncName(const vector<pair<string, Expr>> currentParameters, int index) {$/;"	f	class:taco::ir::CodeGen_CUDA
printDeviceFunctions	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::printDeviceFunctions(const Function* func) {$/;"	f	class:taco::ir::CodeGen_CUDA
printFlag	tools/taco.cpp	/^static void printFlag(string flag, string text) {$/;"	f	file:
printFree	src/codegen/codegen.cpp	/^string CodeGen::printFree(string pointer) {$/;"	f	class:taco::ir::CodeGen
printFuncName	src/codegen/codegen.cpp	/^string CodeGen::printFuncName(const Function *func, $/;"	f	class:taco::ir::CodeGen
printPack	src/codegen/codegen.cpp	/^string CodeGen::printPack(map<tuple<Expr, TensorProperty, int, int>,$/;"	f	class:taco::ir::CodeGen
printSchedulingHelp	tools/taco.cpp	/^static void printSchedulingHelp() {$/;"	f	file:
printTensorProperty	src/codegen/codegen.cpp	/^string CodeGen::printTensorProperty(string varname, const GetProperty* op, bool is_ptr) {$/;"	f	class:taco::ir::CodeGen
printThreadBoundCheck	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::printThreadBoundCheck(Expr end) {$/;"	f	class:taco::ir::CodeGen_CUDA
printThreadIDVariable	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::printThreadIDVariable(pair<string, Expr> threadIDVar, Expr start, Expr increment, Expr numThreads) {$/;"	f	class:taco::ir::CodeGen_CUDA
printToCout	test/tests-scheduling-eval.cpp	/^void printToCout(IndexStmt stmt) {$/;"	f
printToFile	test/tests-scheduling-eval.cpp	/^void printToFile(string filename, IndexStmt stmt) {$/;"	f
printType	src/codegen/codegen.cpp	/^string CodeGen::printType(Datatype type, bool is_ptr) {$/;"	f	class:taco::ir::CodeGen
printUsageInfo	tools/taco.cpp	/^static void printUsageInfo() {$/;"	f	file:
printWarpIDVariable	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::printWarpIDVariable(pair<string, Expr> warpIDVar, Expr start, Expr increment, Expr warpSize) {$/;"	f	class:taco::ir::CodeGen_CUDA
printYield	src/codegen/codegen.cpp	/^void CodeGen::printYield(const Yield* op, vector<Expr> localVars,$/;"	f	class:taco::ir::CodeGen
print_bytes	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^std::string print_bytes(py::bytes bytes) {$/;"	f
print_constr_details	python_bindings/pybind11/tests/constructor_stats.h	/^void print_constr_details(T *inst, const std::string &action, Output &&...output) {$/;"	f
print_copy_assigned	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_copy_assigned(T *inst, Values &&...values) {$/;"	f
print_copy_created	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_copy_created(T *inst, Values &&...values) { \/\/ NB: this prints, but doesn't store, given values$/;"	f
print_created	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_created(T *inst, Values &&...values) {$/;"	f
print_default_created	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_default_created(T *inst, Values &&...values) {$/;"	f
print_destroyed	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_destroyed(T *inst, Values &&...values) { \/\/ Prints but doesn't store given values$/;"	f
print_function	python_bindings/pybind11/pybind11/__main__.py	/^from __future__ import print_function$/;"	i
print_function	python_bindings/pybind11/tools/libsize.py	/^from __future__ import print_function, division$/;"	i
print_includes	python_bindings/pybind11/pybind11/__main__.py	/^def print_includes():$/;"	f
print_movable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    std::string print_movable(int a, int b) { return get_movable(a, b).get_value(); }$/;"	f	class:NCVirt
print_move_assigned	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_move_assigned(T *inst, Values &&...values) {$/;"	f
print_move_created	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_move_created(T *inst, Values &&...values) { \/\/ NB: this prints, but doesn't store, given values$/;"	f
print_nc	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    std::string print_nc(int a, int b) { return get_noncopyable(a, b).get_value(); }$/;"	f	class:NCVirt
print_recarray	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^py::list print_recarray(py::array_t<S, 0> arr) {$/;"	f	class:E1	file:
print_time_	test/gtest/gtest-all.cc	/^  bool print_time_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
print_values	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void print_values(T *inst, Values &&...values) {$/;"	f
private_ctr_tag	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    struct private_ctr_tag { };$/;"	s	struct:buffer_info
process	include/taco/index_notation/index_notation_visitor.h	/^  void process(IR ir, Patterns... patterns) {$/;"	f	class:taco::Matcher
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<T, enable_if_t<is_pyobject<T>::value>> : process_attribute_default<handle> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<arithmetic> : process_attribute_default<arithmetic> {};$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<base<T>> : process_attribute_default<base<T>> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<buffer_protocol> : process_attribute_default<buffer_protocol> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<call_guard<Ts...>> : process_attribute_default<call_guard<Ts...>> { };$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<dynamic_attr> : process_attribute_default<dynamic_attr> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<is_final> : process_attribute_default<is_final> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<metaclass> : process_attribute_default<metaclass> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<module_local> : process_attribute_default<module_local> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<multiple_inheritance> : process_attribute_default<multiple_inheritance> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^struct process_attribute<prepend> : process_attribute_default<prepend> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<arg> : process_attribute_default<arg> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<arg_v> : process_attribute_default<arg_v> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<char *> : process_attribute<const char *> { };$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<const char *> : process_attribute_default<const char *> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<doc> : process_attribute_default<doc> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<is_method> : process_attribute_default<is_method> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<is_new_style_constructor> : process_attribute_default<is_new_style_constructor> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<is_operator> : process_attribute_default<is_operator> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<kw_only> : process_attribute_default<kw_only> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<name> : process_attribute_default<name> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<pos_only> : process_attribute_default<pos_only> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<return_value_policy> : process_attribute_default<return_value_policy> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<scope> : process_attribute_default<scope> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <> struct process_attribute<sibling> : process_attribute_default<sibling> {$/;"	s
process_attribute	python_bindings/pybind11/include/pybind11/attr.h	/^template <size_t Nurse, size_t Patient> struct process_attribute<keep_alive<Nurse, Patient>> : public process_attribute_default<keep_alive<Nurse, Patient>> {$/;"	s
process_attribute_default	python_bindings/pybind11/include/pybind11/attr.h	/^template <typename T> struct process_attribute_default {$/;"	s
process_attributes	python_bindings/pybind11/include/pybind11/attr.h	/^template <typename... Args> struct process_attributes {$/;"	s
process_kw_only_arg	python_bindings/pybind11/include/pybind11/attr.h	/^inline void process_kw_only_arg(const arg &a, function_record *r) {$/;"	f
producer	include/taco/index_notation/index_notation_nodes.h	/^  IndexStmt producer;$/;"	m	struct:taco::WhereNode
product	include/taco/util/variadic.h	/^struct product <> {$/;"	s	namespace:taco::util
product	include/taco/util/variadic.h	/^struct product <val, rest...> {$/;"	s	namespace:taco::util
product	include/taco/util/variadic.h	/^struct product {$/;"	s	namespace:taco::util
productHelper	include/taco/util/variadic.h	/^struct productHelper<prod, val, rest...> {$/;"	s	namespace:taco::util::__anon8
productHelper	include/taco/util/variadic.h	/^struct productHelper<val> {$/;"	s	namespace:taco::util::__anon8
project	python_bindings/pybind11/docs/conf.py	/^project = "pybind11"$/;"	v
project	python_bindings/source/conf.py	/^project = 'Taco'$/;"	v
projectCanonicalSpaceToWindowedPosition	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::projectCanonicalSpaceToWindowedPosition(Iterator iterator, ir::Expr expr) {$/;"	f	class:taco::LowererImpl
projectWindowedPositionToCanonicalSpace	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::projectWindowedPositionToCanonicalSpace(Iterator iterator, ir::Expr expr) {$/;"	f	class:taco::LowererImpl
promote	include/taco/ir/ir.h	/^  Expr promote(Datatype dt) const {$/;"	f	struct:taco::ir::Literal
properties	include/taco/index_notation/index_notation_nodes.h	/^  std::vector<Property> properties;$/;"	m	struct:taco::CallNode
properties	include/taco/index_notation/tensor_operator.h	/^  std::vector<Property> properties;$/;"	m	class:taco::Func
property	include/taco/ir/ir.h	/^  TensorProperty property;$/;"	m	struct:taco::ir::GetProperty
proto2	test/gtest/gtest.h	/^namespace proto2 { class Message; }$/;"	n
provGraph	include/taco/lower/lowerer_impl.h	/^  ProvenanceGraph provGraph;$/;"	m	class:taco::LowererImpl
provGraph	src/index_notation/index_notation.cpp	/^  ProvenanceGraph provGraph;$/;"	m	struct:taco::GetIndexVars	file:
provGraph	src/lower/merge_lattice.cpp	/^  ProvenanceGraph provGraph;$/;"	m	class:taco::MergeLatticeBuilder	file:
pt	python_bindings/unit_tests.py	/^import pytaco as pt$/;"	i
ptr	include/taco/storage/typed_index.h	/^  IndexTypeUnion *ptr;$/;"	m	class:taco::TypedIndexRef
ptr	include/taco/storage/typed_index.h	/^  void *ptr;$/;"	m	class:taco::TypedIndexPtr
ptr	include/taco/storage/typed_value.h	/^  ComponentTypeUnion *ptr;$/;"	m	class:taco::TypedComponentRef
ptr	include/taco/storage/typed_value.h	/^  void *ptr;$/;"	m	class:taco::TypedComponentPtr
ptr	include/taco/util/intrusive_ptr.h	/^  T *ptr;$/;"	m	class:taco::util::IntrusivePtr
ptr	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    void *ptr = nullptr;          \/\/ Pointer to the underlying storage$/;"	m	struct:buffer_info
ptr	python_bindings/pybind11/include/pybind11/numpy.h	/^        Py_intptr_t *ptr;$/;"	m	struct:npy_api::__anon11
ptr	python_bindings/pybind11/include/pybind11/pytypes.h	/^    PyObject *&ptr() { return m_ptr; }$/;"	f	class:handle
ptr	python_bindings/pybind11/include/pybind11/pytypes.h	/^    PyObject **ptr;$/;"	m	class:sequence_fast_readonly
ptr	python_bindings/pybind11/include/pybind11/pytypes.h	/^    PyObject *ptr() const { return get_cache().ptr(); }$/;"	f	class:accessor
ptr	python_bindings/pybind11/include/pybind11/pytypes.h	/^    PyObject *ptr() const { return m_ptr; }$/;"	f	class:handle
ptr	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> ptr;$/;"	m	class:huge_unique_ptr	file:
ptr_	include/taco/storage/typed_vector.h	/^    pointer ptr_;$/;"	m	class:taco::TypedVector::const_iterator
ptr_	include/taco/storage/typed_vector.h	/^    pointer ptr_;$/;"	m	class:taco::TypedVector::iterator
ptr_	python_bindings/pybind11/tests/test_sequences_and_iterators.cpp	/^    const T* ptr_;$/;"	m	class:NonZeroIterator	file:
ptr_	test/gtest/gtest.h	/^  T* ptr_;$/;"	m	struct:std::tr1::tuple_element
pure_virtual	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def pure_virtual(self):$/;"	m	class:test_override.ExtendedExampleVirt
pure_virtual_func	python_bindings/pybind11/tests/test_gil_scoped.py	/^        def pure_virtual_func(self):$/;"	m	class:_python_to_cpp_to_python.ExtendedVirtClass
purr	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    std::string purr() const { return "mrowr"; }$/;"	f	struct:Animal::Cat
purr	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    std::string purr() const { return "mrrrRRRRRR"; }$/;"	f	struct:Animal::Panther
push_back	include/taco/storage/typed_vector.h	/^  void push_back(T constant) {$/;"	f	class:taco::TypedVector
push_back	include/taco/storage/typed_vector.h	/^  void push_back(Typed value) {$/;"	f	class:taco::TypedVector
push_back	include/taco/storage/typed_vector.h	/^  void push_back(typename Typed::Ref value) {$/;"	f	class:taco::TypedVector
push_back	include/taco/storage/typed_vector.h	/^  void push_back(void *value) {$/;"	f	class:taco::TypedVector
push_back_vector	include/taco/storage/typed_vector.h	/^  void push_back_vector(TypedVector vector) {$/;"	f	class:taco::TypedVector
push_back_vector	include/taco/storage/typed_vector.h	/^  void push_back_vector(std::vector<T> v) {$/;"	f	class:taco::TypedVector
py_files	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^py_files = {$/;"	v
pybind11	python_bindings/pybind11/pybind11/setup_helpers.py	/^                import pybind11$/;"	i
pybind11	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^namespace pybind11 { namespace detail {$/;"	n	file:
pybind11	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^namespace pybind11 { namespace detail {$/;"	n	file:
pybind11	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^namespace pybind11 {$/;"	n	struct:Animal	file:
pybind11_clear	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline int pybind11_clear(PyObject *self) {$/;"	f
pybind11_fail	python_bindings/pybind11/include/pybind11/detail/common.h	/^[[noreturn]] PYBIND11_NOINLINE inline void pybind11_fail(const char *reason) { throw std::runtime_error(reason); }$/;"	f
pybind11_fail	python_bindings/pybind11/include/pybind11/detail/common.h	/^[[noreturn]] PYBIND11_NOINLINE inline void pybind11_fail(const std::string &reason) { throw std::runtime_error(reason); }$/;"	f
pybind11_get_dict	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_get_dict(PyObject *self, void *) {$/;"	f
pybind11_getbuffer	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline int pybind11_getbuffer(PyObject *obj, Py_buffer *view, int flags) {$/;"	f
pybind11_meta_call	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_meta_call(PyObject *type, PyObject *args, PyObject *kwargs) {$/;"	f
pybind11_meta_dealloc	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline void pybind11_meta_dealloc(PyObject *obj) {$/;"	f
pybind11_meta_getattro	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_meta_getattro(PyObject *obj, PyObject *name) {$/;"	f
pybind11_meta_setattro	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline int pybind11_meta_setattro(PyObject* obj, PyObject* name, PyObject* value) {$/;"	f
pybind11_object_dealloc	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline void pybind11_object_dealloc(PyObject *self) {$/;"	f
pybind11_object_init	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline int pybind11_object_init(PyObject *self, PyObject *, PyObject *) {$/;"	f
pybind11_object_new	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_object_new(PyTypeObject *type, PyObject *, PyObject *) {$/;"	f
pybind11_releasebuffer	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline void pybind11_releasebuffer(PyObject *, Py_buffer *view) {$/;"	f
pybind11_set_dict	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline int pybind11_set_dict(PyObject *self, PyObject *new_dict, void *) {$/;"	f
pybind11_static_get	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_static_get(PyObject *self, PyObject * \/*ob*\/, PyObject *cls) {$/;"	f
pybind11_static_set	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline int pybind11_static_set(PyObject *self, PyObject *obj, PyObject *value) {$/;"	f
pybind11_tests	python_bindings/pybind11/tests/conftest.py	/^import pybind11_tests  # noqa: F401$/;"	i
pybind11_tests	python_bindings/pybind11/tests/test_local_bindings.py	/^    import pybind11_tests$/;"	i
pybind11_tests	python_bindings/pybind11/tests/test_modules.py	/^    import pybind11_tests$/;"	i
pybind11_tests	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^    import pybind11_tests.sequences_and_iterators as m$/;"	i
pybind11_traverse	python_bindings/pybind11/include/pybind11/detail/class.h	/^extern "C" inline int pybind11_traverse(PyObject *self, visitproc visit, void *arg) {$/;"	f
pycatch	python_bindings/pybind11/tests/test_exceptions.py	/^    def pycatch(exctype, f, *args):$/;"	f	function:test_nested_throws
pydoc	python_bindings/pybind11/tests/test_modules.py	/^    import pydoc$/;"	i
pyflush	python_bindings/pybind11/include/pybind11/iostream.h	/^    object pyflush;$/;"	m	class:pythonbuf
pyobject_caster	python_bindings/pybind11/include/pybind11/cast.h	/^struct pyobject_caster {$/;"	s
pyobject_tag	python_bindings/pybind11/include/pybind11/pytypes.h	/^class pyobject_tag { };$/;"	c
pytest	python_bindings/pybind11/tests/conftest.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/extra_setuptools/test_setuphelper.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_async.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_buffers.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_builtin_casters.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_call_policies.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_callbacks.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_chrono.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_class.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_constants_and_functions.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_copy_move.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_custom_type_casters.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_eigen.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_enum.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_eval.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_exceptions.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_factory_constructors.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_local_bindings.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_numpy_array.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_opaque_types.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_operator_overloading.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_pickling.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_pytypes.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_smart_ptr.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_stl.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_stl_binders.py	/^import pytest$/;"	i
pytest	python_bindings/pybind11/tests/test_virtual_functions.py	/^import pytest$/;"	i
pytest_assertrepr_compare	python_bindings/pybind11/tests/conftest.py	/^def pytest_assertrepr_compare(op, left, right):$/;"	f
pytest_configure	python_bindings/pybind11/tests/conftest.py	/^def pytest_configure():$/;"	f
pythonBindings	python_bindings/include/pyDatatypes.h	/^namespace pythonBindings{$/;"	n	namespace:taco
pythonBindings	python_bindings/include/pyFormat.h	/^namespace pythonBindings{$/;"	n	namespace:taco
pythonBindings	python_bindings/include/pyIndexNotation.h	/^namespace pythonBindings{$/;"	n	namespace:taco
pythonBindings	python_bindings/include/pyParsers.h	/^namespace pythonBindings{$/;"	n	namespace:taco
pythonBindings	python_bindings/include/pyTensor.h	/^namespace pythonBindings{$/;"	n	namespace:taco
pythonBindings	python_bindings/include/pyTensorIO.h	/^namespace pythonBindings{$/;"	n	namespace:taco
pythonBindings	python_bindings/src/pyDatatypes.cpp	/^namespace pythonBindings{$/;"	n	namespace:taco	file:
pythonBindings	python_bindings/src/pyFormat.cpp	/^namespace pythonBindings{$/;"	n	namespace:taco	file:
pythonBindings	python_bindings/src/pyIndexNotation.cpp	/^namespace pythonBindings{$/;"	n	namespace:taco	file:
pythonBindings	python_bindings/src/pyParsers.cpp	/^namespace pythonBindings{$/;"	n	namespace:taco	file:
pythonBindings	python_bindings/src/pyTensor.cpp	/^namespace pythonBindings{$/;"	n	namespace:taco	file:
pythonBindings	python_bindings/src/pyTensorIO.cpp	/^namespace pythonBindings {$/;"	n	namespace:taco	file:
pythonbuf	python_bindings/pybind11/include/pybind11/iostream.h	/^    pythonbuf(object pyostream, size_t buffer_size = 1024)$/;"	f	class:pythonbuf
pythonbuf	python_bindings/pybind11/include/pybind11/iostream.h	/^class pythonbuf : public std::streambuf {$/;"	c
pywrite	python_bindings/pybind11/include/pybind11/iostream.h	/^    object pywrite;$/;"	m	class:pythonbuf
qcdTestData	test/tests-qcd.cpp	/^static string qcdTestData(string name) {$/;"	f	file:
qnxnto	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.23.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
random	python_bindings/pybind11/docs/benchmark.py	/^import random$/;"	i
random	test/gtest/gtest-all.cc	/^  internal::Random* random() { return &random_; }$/;"	f	class:testing::internal::UnitTestImpl
random_	test/gtest/gtest-all.cc	/^  internal::Random random_;$/;"	m	class:testing::internal::UnitTestImpl	file:
random_seed	test/gtest/gtest-all.cc	/^  int random_seed() const { return random_seed_; }$/;"	f	class:testing::internal::UnitTestImpl
random_seed	test/gtest/gtest-all.cc	/^int UnitTest::random_seed() const { return impl_->random_seed(); }$/;"	f	class:testing::UnitTest
random_seed_	test/gtest/gtest-all.cc	/^  int random_seed_;$/;"	m	class:testing::internal::UnitTestImpl	file:
random_seed_	test/gtest/gtest-all.cc	/^  internal::Int32 random_seed_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
rangers	src/lower/merge_lattice.cpp	/^std::vector<Iterator> MergePoint::rangers() const {$/;"	f	class:taco::MergePoint
raw_bool	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static PyObject *raw_bool(PyObject *op) {$/;"	f	class:bool_
raw_dict	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static PyObject *raw_dict(PyObject *op) {$/;"	f	class:dict
raw_str	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static PyObject *raw_str(PyObject *op) {$/;"	f	class:str
rcurly	include/taco/parser/lexer.h	/^  rcurly,$/;"	m	class:taco::parser::Token
rd	test/tests-merge_lattice.cpp	/^static Access rd = r1t(i);$/;"	m	namespace:tests	file:
re	python_bindings/pybind11/docs/conf.py	/^import re$/;"	i
re	python_bindings/pybind11/setup.py	/^import re$/;"	i
re	python_bindings/pybind11/tests/conftest.py	/^import re$/;"	i
re	python_bindings/pybind11/tests/test_class.py	/^    import re$/;"	i
re	python_bindings/pybind11/tests/test_factory_constructors.py	/^import re$/;"	i
re	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^import re$/;"	i
re	python_bindings/pybind11/tools/make_changelog.py	/^import re$/;"	i
read	python_bindings/pytaco/pytensor/tensorIO.py	/^def read(filename, fmt, pack=True):$/;"	f
read	src/tensor.cpp	/^TensorBase read(istream& stream, FileType filetype, Format format, bool pack) {$/;"	f	namespace:taco
read	src/tensor.cpp	/^TensorBase read(istream& stream, FileType filetype, ModeFormat modetype,$/;"	f	namespace:taco
read	src/tensor.cpp	/^TensorBase read(std::string filename, Format format, bool pack) {$/;"	f	namespace:taco
read	src/tensor.cpp	/^TensorBase read(std::string filename, ModeFormat modetype, bool pack) {$/;"	f	namespace:taco
read	src/tensor.cpp	/^TensorBase read(string filename, FileType filetype, Format format, bool pack) {$/;"	f	namespace:taco
read	src/tensor.cpp	/^TensorBase read(string filename, FileType filetype, ModeFormat modetype,$/;"	f	namespace:taco
readDense	src/storage/file_io_mtx.cpp	/^TensorBase readDense(std::istream& stream, const Format& format, bool symm) {$/;"	f	namespace:taco
readDense	src/storage/file_io_mtx.cpp	/^TensorBase readDense(std::istream& stream, const ModeFormat& modetype, $/;"	f	namespace:taco
readFile	src/storage/file_io_rb.cpp	/^void readFile(std::istream &hbfile,$/;"	f	namespace:taco
readHeader	src/storage/file_io_rb.cpp	/^void readHeader(std::istream &hbfile,$/;"	f	namespace:taco
readIndices	src/storage/file_io_rb.cpp	/^void readIndices(std::istream &hbfile, int linesize, int indices[]){$/;"	f	namespace:taco
readMTX	src/storage/file_io_mtx.cpp	/^TensorBase readMTX(std::istream& stream, const Format& format, bool pack) {$/;"	f	namespace:taco
readMTX	src/storage/file_io_mtx.cpp	/^TensorBase readMTX(std::istream& stream, const ModeFormat& modetype, bool pack) {$/;"	f	namespace:taco
readMTX	src/storage/file_io_mtx.cpp	/^TensorBase readMTX(std::string filename, const Format& format, bool pack) {$/;"	f	namespace:taco
readMTX	src/storage/file_io_mtx.cpp	/^TensorBase readMTX(std::string filename, const ModeFormat& modetype, bool pack) {$/;"	f	namespace:taco
readRB	src/storage/file_io_rb.cpp	/^TensorBase readRB(std::istream& stream, const Format& format, bool pack) {$/;"	f	namespace:taco
readRB	src/storage/file_io_rb.cpp	/^TensorBase readRB(std::istream& stream, const ModeFormat& modetype, bool pack) {$/;"	f	namespace:taco
readRB	src/storage/file_io_rb.cpp	/^TensorBase readRB(std::string filename, const Format& format, bool pack) {$/;"	f	namespace:taco
readRB	src/storage/file_io_rb.cpp	/^TensorBase readRB(std::string filename, const ModeFormat& modetype, bool pack) {$/;"	f	namespace:taco
readRHS	src/storage/file_io_rb.cpp	/^void readRHS(){  }$/;"	f	namespace:taco
readSparse	src/storage/file_io_mtx.cpp	/^TensorBase readSparse(std::istream& stream, const Format& format, bool symm) {$/;"	f	namespace:taco
readSparse	src/storage/file_io_mtx.cpp	/^TensorBase readSparse(std::istream& stream, const ModeFormat& modetype, $/;"	f	namespace:taco
readTNS	src/storage/file_io_tns.cpp	/^TensorBase readTNS(std::istream& stream, const Format& format, bool pack) {$/;"	f	namespace:taco
readTNS	src/storage/file_io_tns.cpp	/^TensorBase readTNS(std::istream& stream, const ModeFormat& modetype, bool pack) {$/;"	f	namespace:taco
readTNS	src/storage/file_io_tns.cpp	/^TensorBase readTNS(std::string filename, const Format& format, bool pack) {$/;"	f	namespace:taco
readTNS	src/storage/file_io_tns.cpp	/^TensorBase readTNS(std::string filename, const ModeFormat& modetype, bool pack) {$/;"	f	namespace:taco
readTestTensor	test/test_tensors.cpp	/^TensorBase readTestTensor(std::string filename, Format format) {$/;"	f	namespace:taco::test
readValues	src/storage/file_io_rb.cpp	/^void readValues(std::istream &hbfile, int linesize, double values[]){$/;"	f	namespace:taco
read_fd	test/gtest/gtest-all.cc	/^  int read_fd() const { return read_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
read_fd_	test/gtest/gtest-all.cc	/^  int read_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
readonly	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    bool readonly = false;        \/\/ flag to indicate if the underlying storage may be written to$/;"	m	struct:buffer_info
recoverChild	src/index_notation/provenance_graph.cpp	/^ir::Stmt BoundRelNode::recoverChild(taco::IndexVar indexVar,$/;"	f	class:taco::BoundRelNode
recoverChild	src/index_notation/provenance_graph.cpp	/^ir::Stmt DivideRelNode::recoverChild(taco::IndexVar indexVar,$/;"	f	class:taco::DivideRelNode
recoverChild	src/index_notation/provenance_graph.cpp	/^ir::Stmt FuseRelNode::recoverChild(taco::IndexVar indexVar,$/;"	f	class:taco::FuseRelNode
recoverChild	src/index_notation/provenance_graph.cpp	/^ir::Stmt IndexVarRelNode::recoverChild(IndexVar indexVar, std::map<IndexVar, ir::Expr> variableNames, bool emitVarDecl, Iterators iterators, ProvenanceGraph provGraph) const {$/;"	f	class:taco::IndexVarRelNode
recoverChild	src/index_notation/provenance_graph.cpp	/^ir::Stmt PosRelNode::recoverChild(taco::IndexVar indexVar,$/;"	f	class:taco::PosRelNode
recoverChild	src/index_notation/provenance_graph.cpp	/^ir::Stmt PrecomputeRelNode::recoverChild(taco::IndexVar indexVar,$/;"	f	class:taco::PrecomputeRelNode
recoverChild	src/index_notation/provenance_graph.cpp	/^ir::Stmt ProvenanceGraph::recoverChild(taco::IndexVar indexVar,$/;"	f	class:taco::ProvenanceGraph
recoverChild	src/index_notation/provenance_graph.cpp	/^ir::Stmt SplitRelNode::recoverChild(taco::IndexVar indexVar,$/;"	f	class:taco::SplitRelNode
recoverVariable	src/index_notation/provenance_graph.cpp	/^ir::Expr BoundRelNode::recoverVariable(taco::IndexVar indexVar,$/;"	f	class:taco::BoundRelNode
recoverVariable	src/index_notation/provenance_graph.cpp	/^ir::Expr DivideRelNode::recoverVariable(taco::IndexVar indexVar,$/;"	f	class:taco::DivideRelNode
recoverVariable	src/index_notation/provenance_graph.cpp	/^ir::Expr FuseRelNode::recoverVariable(taco::IndexVar indexVar,$/;"	f	class:taco::FuseRelNode
recoverVariable	src/index_notation/provenance_graph.cpp	/^ir::Expr IndexVarRelNode::recoverVariable(IndexVar indexVar, std::map<IndexVar, ir::Expr> variableNames, Iterators iterators, std::map<IndexVar, std::vector<ir::Expr>> parentIterBounds, std::map<IndexVar, std::vector<ir::Expr>> parentCoordBounds, ProvenanceGraph provGraph) const {$/;"	f	class:taco::IndexVarRelNode
recoverVariable	src/index_notation/provenance_graph.cpp	/^ir::Expr PosRelNode::recoverVariable(taco::IndexVar indexVar,$/;"	f	class:taco::PosRelNode
recoverVariable	src/index_notation/provenance_graph.cpp	/^ir::Expr PrecomputeRelNode::recoverVariable(taco::IndexVar indexVar,$/;"	f	class:taco::PrecomputeRelNode
recoverVariable	src/index_notation/provenance_graph.cpp	/^ir::Expr ProvenanceGraph::recoverVariable(taco::IndexVar indexVar,$/;"	f	class:taco::ProvenanceGraph
recoverVariable	src/index_notation/provenance_graph.cpp	/^ir::Expr SplitRelNode::recoverVariable(taco::IndexVar indexVar,$/;"	f	class:taco::SplitRelNode
redirect_stderr	python_bindings/pybind11/include/pybind11/iostream.h	/^    std::unique_ptr<scoped_estream_redirect> redirect_stderr;$/;"	m	class:OstreamRedirect
redirect_stderr	python_bindings/pybind11/tests/test_iostream.py	/^    def redirect_stderr(target):$/;"	f
redirect_stderr	python_bindings/pybind11/tests/test_iostream.py	/^    from contextlib import redirect_stderr$/;"	i
redirect_stdout	python_bindings/pybind11/include/pybind11/iostream.h	/^    std::unique_ptr<scoped_ostream_redirect> redirect_stdout;$/;"	m	class:OstreamRedirect
redirect_stdout	python_bindings/pybind11/tests/test_iostream.py	/^    def redirect_stdout(target):$/;"	f
redirect_stdout	python_bindings/pybind11/tests/test_iostream.py	/^    from contextlib import redirect_stdout$/;"	i
reduceDuplicateCoordinates	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::reduceDuplicateCoordinates(Expr coordinate, $/;"	f	class:taco::LowererImpl
reducedValueVars	include/taco/lower/lowerer_impl.h	/^  std::map<Access, ir::Expr> reducedValueVars;$/;"	m	class:taco::LowererImpl
reduction	test/tests-index_notation.cpp	/^  IndexStmt reduction;$/;"	m	struct:ConcreteTest	file:
ref	include/taco/ir/ir.h	/^  mutable long ref = 0;$/;"	m	struct:taco::ir::IRNode
ref	include/taco/util/intrusive_ptr.h	/^  mutable long ref = 0;$/;"	m	class:taco::util::Manageable
ref	python_bindings/pybind11/include/pybind11/eigen.h	/^    std::unique_ptr<Type> ref;$/;"	m	struct:type_caster
ref	python_bindings/pybind11/tests/object.h	/^    ref() : m_ptr(nullptr) { print_default_created(this); track_default_created((ref_tag*) this); }$/;"	f	class:ref
ref	python_bindings/pybind11/tests/object.h	/^    ref(T *ptr) : m_ptr(ptr) {$/;"	f	class:ref
ref	python_bindings/pybind11/tests/object.h	/^    ref(const ref &r) : m_ptr(r.m_ptr) {$/;"	f	class:ref
ref	python_bindings/pybind11/tests/object.h	/^    ref(ref &&r) : m_ptr(r.m_ptr) {$/;"	f	class:ref
ref	python_bindings/pybind11/tests/object.h	/^template <typename T> class ref {$/;"	c
ref	python_bindings/pybind11/tests/test_eigen.py	/^ref = np.array($/;"	v
refQualified	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void refQualified(int other) & { value += other; }$/;"	f	struct:RefQualified
ref_count	python_bindings/pybind11/include/pybind11/pytypes.h	/^    int ref_count() const { return static_cast<int>(Py_REFCNT(derived().ptr())); }$/;"	f	class:object_api
ref_tag	python_bindings/pybind11/tests/object.h	/^class ref_tag {};$/;"	c
refcount_1	python_bindings/pybind11/tests/test_class.py	/^        refcount_1 = getrefcount(cls)$/;"	v	class:test_class_refcount.PyDog
refcount_2	python_bindings/pybind11/tests/test_class.py	/^        refcount_2 = getrefcount(cls)$/;"	v	class:test_class_refcount.PyDog
refcount_3	python_bindings/pybind11/tests/test_class.py	/^        refcount_3 = getrefcount(cls)$/;"	v	class:test_class_refcount.PyDog
reference	include/taco/storage/typed_vector.h	/^    typedef typename Typed::Ref reference;$/;"	t	class:taco::TypedVector::const_iterator
reference	include/taco/storage/typed_vector.h	/^    typedef typename Typed::Ref reference;$/;"	t	class:taco::TypedVector::iterator
reference	include/taco/tensor.h	/^    typedef std::pair<Coordinates,CType>& reference;$/;"	t	class:taco::TensorBase::const_iterator
reference	python_bindings/pybind11/include/pybind11/detail/common.h	/^    reference,$/;"	m	class:return_value_policy
reference	test/gtest/gtest.h	/^  typedef const T& reference;$/;"	t	class:testing::internal::ParamIterator
regex	test/gtest/gtest-all.cc	/^  const RE* regex() const { return regex_; }$/;"	f	class:testing::internal::DeathTestImpl
regex_	test/gtest/gtest-all.cc	/^  const RE* const regex_;$/;"	m	class:testing::internal::DeathTestImpl	file:
regionDefinitions	include/taco/index_notation/index_notation_nodes.h	/^  std::map<std::vector<int>, OpImpl> regionDefinitions;$/;"	m	struct:taco::CallNode
regionDefinitions	include/taco/index_notation/tensor_operator.h	/^  std::map<std::vector<int>, FuncBodyGenerator> regionDefinitions;$/;"	m	class:taco::Func
regionsToKeep	include/taco/lower/merge_lattice.h	/^  std::set<std::set<Iterator>> regionsToKeep;$/;"	m	class:taco::MergeLattice
register_exception	python_bindings/pybind11/include/pybind11/pybind11.h	/^exception<CppException> &register_exception(handle scope,$/;"	f
register_exception_translator	python_bindings/pybind11/include/pybind11/pybind11.h	/^void register_exception_translator(ExceptionTranslator&& translator) {$/;"	f
register_instance	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline void register_instance(instance *self, void *valptr, const type_info *tinfo) {$/;"	f
register_instance_impl	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline bool register_instance_impl(void *ptr, instance *self) {$/;"	f
registered_	test/gtest/gtest.h	/^  bool registered_;$/;"	m	class:testing::internal::TypedTestCasePState
registered_dtypes	python_bindings/pybind11/include/pybind11/numpy.h	/^    std::unordered_map<std::type_index, numpy_type_info> registered_dtypes;$/;"	m	struct:numpy_internals
registered_exception_translators	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::forward_list<void (*) (std::exception_ptr)> registered_exception_translators;$/;"	m	struct:internals
registered_instances	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::unordered_multimap<const void *, instance*> registered_instances; \/\/ void * -> instance*$/;"	m	struct:internals
registered_local_types_cpp	python_bindings/pybind11/include/pybind11/detail/internals.h	/^inline type_map<type_info *> &registered_local_types_cpp() {$/;"	f
registered_types_cpp	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    type_map<type_info *> registered_types_cpp; \/\/ std::type_index -> pybind11's type information$/;"	m	struct:internals
registered_types_py	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::unordered_map<PyTypeObject *, std::vector<type_info *>> registered_types_py; \/\/ PyTypeObject* -> base type_info(s)$/;"	m	struct:internals
reinsertPackedComponents	include/taco/tensor.h	/^void TensorBase::reinsertPackedComponents() {$/;"	f	class:taco::TensorBase
reinterpret_borrow	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename T> T reinterpret_borrow(handle h) { return {h, object::borrowed_t{}}; }$/;"	f
reinterpret_steal	python_bindings/pybind11/include/pybind11/pytypes.h	/^template <typename T> T reinterpret_steal(handle h) { return {h, object::stolen_t{}}; }$/;"	f
relType	include/taco/index_notation/provenance_graph.h	/^  IndexVarRelType relType;$/;"	m	struct:taco::IndexVarRelNode
release	include/taco/ir/ir.h	/^  friend void release(const IRNode* node) {$/;"	f	struct:taco::ir::IRNode
release	include/taco/util/intrusive_ptr.h	/^  friend void release(const Data *data) { if (--data->ref == 0) delete data; }$/;"	f	class:taco::util::Manageable
release	python_bindings/pybind11/include/pybind11/pybind11.h	/^        void release() {$/;"	f	class:cpp_function::strdup_guard
release	python_bindings/pybind11/include/pybind11/pybind11.h	/^    bool release = true;$/;"	m	class:gil_scoped_acquire
release	python_bindings/pybind11/include/pybind11/pytypes.h	/^    handle release() {$/;"	f	class:object
release	test/gtest/gtest.h	/^  T* release() {$/;"	f	struct:std::tr1::tuple_element
release_ptr	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    T* release_ptr() { return impl.release(); }$/;"	f	class:custom_unique_ptr
release_ptr	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    T* release_ptr() { return impl.release(); }$/;"	f	class:unique_ptr_with_addressof_operator
reload	python_bindings/pybind11/include/pybind11/pybind11.h	/^    void reload() {$/;"	f	class:module_
remove	include/taco/util/collections.h	/^std::vector<V> remove(const std::vector<V>& vector, $/;"	f	namespace:taco::util
remove	include/taco/util/scopedmap.h	/^  void remove(const Key& key) {$/;"	f	class:taco::util::ScopedMap
remove	include/taco/util/scopedset.h	/^  void remove(const Key& key) {$/;"	f	class:taco::util::ScopedSet
removeDependentTensor	src/tensor.cpp	/^void TensorBase::removeDependentTensor(TensorBase& tensor) {$/;"	f	class:taco::TensorBase
removeDimensionIterators	src/lower/merge_lattice.cpp	/^  removeDimensionIterators(const vector<Iterator>& iterators)$/;"	f	class:taco::MergeLatticeBuilder	file:
removeDuplicatedTensorRegions	src/lower/merge_lattice.cpp	/^  removeDuplicatedTensorRegions(const vector<MergePoint>& points, bool preserveOmitters) {$/;"	f	class:taco::MergeLatticeBuilder	file:
removeDuplicates	include/taco/util/collections.h	/^std::vector<V> removeDuplicates(const std::vector<V>& vector) {$/;"	f	namespace:taco::util
removeExplicitFillValues	include/taco/tensor.h	/^Tensor<CType> Tensor<CType>::removeExplicitFillValues(Format format, int value) const {$/;"	f	class:taco::Tensor
removeExplicitZeros	include/taco/tensor.h	/^Tensor<CType> Tensor<CType>::removeExplicitZeros(Format format) const {$/;"	f	class:taco::Tensor
removeFirst	include/taco/util/variadic.h	/^struct removeFirst {$/;"	s	namespace:taco::util
removePointsThatLackFullIterators	src/lower/merge_lattice.cpp	/^MergeLattice::removePointsThatLackFullIterators(const std::vector<MergePoint>& points)$/;"	f	class:taco::MergeLattice
removePointsWithIdenticalIterators	src/lower/merge_lattice.cpp	/^MergeLattice::removePointsWithIdenticalIterators(const std::vector<MergePoint>& points)$/;"	f	class:taco::MergeLattice
removeUnnecessaryOmitterPoints	src/lower/merge_lattice.cpp	/^  removeUnnecessaryOmitterPoints(const vector<MergePoint>& points) {$/;"	f	class:taco::MergeLatticeBuilder	file:
remove_class	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename C, typename R, typename... A> struct remove_class<R (C::*)(A...) const> { using type = R (A...); };$/;"	s
remove_class	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename C, typename R, typename... A> struct remove_class<R (C::*)(A...)> { using type = R (A...); };$/;"	s
remove_class	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T> struct remove_class { };$/;"	s
remove_explicit_zeros	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def remove_explicit_zeros(self, new_fmt=None, new_dtype=None):$/;"	m	class:tensor
remove_explicit_zeros	python_bindings/pytaco/pytensor/taco_tensor.py	/^def remove_explicit_zeros(t, new_fmt=None, new_dtype=None):$/;"	f
remove_output	python_bindings/pybind11/setup.py	/^def remove_output(*sources):$/;"	f
reorder	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::reorder(std::vector<IndexVar> reorderedvars) const {$/;"	f	class:taco::IndexStmt
reorder	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::reorder(taco::IndexVar i, taco::IndexVar j) const {$/;"	f	class:taco::IndexStmt
reorderLoopsTopologically	src/index_notation/transformations.cpp	/^IndexStmt reorderLoopsTopologically(IndexStmt stmt) {$/;"	f	namespace:taco
reorderLoopsTopologically	test/tests-transformation.cpp	/^struct reorderLoopsTopologically : public TestWithParam<NotationTest> {};$/;"	s	namespace:test	file:
repeat	src/util/strings.cpp	/^std::string repeat(std::string text, size_t n) {$/;"	f	namespace:taco::util
repeat_	test/gtest/gtest-all.cc	/^  internal::Int32 repeat_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
repeater	test/gtest/gtest-all.cc	/^TestEventListener* TestEventListeners::repeater() { return repeater_; }$/;"	f	class:testing::TestEventListeners
repeater_	test/gtest/gtest.h	/^  internal::TestEventRepeater* repeater_;$/;"	m	class:testing::TestEventListeners
replace	src/index_notation/index_notation_rewriter.cpp	/^IndexExpr replace(IndexExpr expr,$/;"	f	namespace:taco
replace	src/index_notation/index_notation_rewriter.cpp	/^IndexStmt replace(IndexStmt stmt,$/;"	f	namespace:taco
replaceAlgIndexExprs	src/index_notation/iteration_algebra.cpp	/^IterationAlgebra replaceAlgIndexExprs(IterationAlgebra alg, const std::map<IndexExpr, IndexExpr>& substitutions) {$/;"	f	namespace:taco
replaceEllipse	src/parser/einsum_parser.cpp	/^std::string EinsumParser::replaceEllipse(std::string inp, std::string &newString){$/;"	f	class:taco::parser::EinsumParser
replacePattern	src/index_notation/transformations.cpp	/^  std::vector<IndexVar> replacePattern;$/;"	m	struct:taco::Reorder::Content	file:
replacement	src/index_notation/transformations.cpp	/^  std::vector<IndexVar> replacement;$/;"	m	struct:taco::ForAllReplace::Content	file:
reportError	tools/taco.cpp	/^static int reportError(string errorMessage, int errorCode) {$/;"	f	file:
report_status	python_bindings/pybind11/tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:CustomGuard
report_status	python_bindings/pybind11/tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:DependentGuard
reportable_disabled_test_count	test/gtest/gtest-all.cc	/^int TestCase::reportable_disabled_test_count() const {$/;"	f	class:testing::TestCase
reportable_disabled_test_count	test/gtest/gtest-all.cc	/^int UnitTest::reportable_disabled_test_count() const {$/;"	f	class:testing::UnitTest
reportable_disabled_test_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::reportable_disabled_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
reportable_test_count	test/gtest/gtest-all.cc	/^int TestCase::reportable_test_count() const {$/;"	f	class:testing::TestCase
reportable_test_count	test/gtest/gtest-all.cc	/^int UnitTest::reportable_test_count() const {$/;"	f	class:testing::UnitTest
reportable_test_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::reportable_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
repr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline str repr(handle h) {$/;"	f
request	python_bindings/pybind11/include/pybind11/pytypes.h	/^    buffer_info request(bool writable = false) const {$/;"	f	class:buffer
require_implicit	python_bindings/pybind11/tests/test_builtin_casters.py	/^    def require_implicit(v):$/;"	f	function:test_bool_caster
require_implicit	python_bindings/pybind11/tests/test_builtin_casters.py	/^    def require_implicit(v):$/;"	f	function:test_numpy_int_convert
require_size	python_bindings/pybind11/include/pybind11/stl.h	/^    bool require_size(enable_if_t<!R, size_t> size) {$/;"	f	struct:array_caster
require_size	python_bindings/pybind11/include/pybind11/stl.h	/^    bool require_size(enable_if_t<R, size_t> size) {$/;"	f	struct:array_caster
requires_col_major	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr bool requires_col_major = !dynamic_stride && !vector && (row_major ? outer_stride : inner_stride) == 1;$/;"	m	struct:EigenProps
requires_conversion	python_bindings/pybind11/tests/test_builtin_casters.py	/^    def requires_conversion(v):$/;"	f	function:test_int_convert
requires_matrix	src/error/error_messages.cpp	/^const std::string requires_matrix =$/;"	m	namespace:taco::error	file:
requires_row_major	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr bool requires_row_major = !dynamic_stride && !vector && (row_major ? inner_stride : outer_stride) == 1;$/;"	m	struct:EigenProps
reserve	src/tensor.cpp	/^void TensorBase::reserve(size_t numCoordinates) {$/;"	f	class:taco::TensorBase
reserve_maybe	python_bindings/pybind11/include/pybind11/stl.h	/^    void reserve_maybe(sequence s, Type *) { value.reserve(s.size()); }$/;"	f	struct:list_caster
reserve_maybe	python_bindings/pybind11/include/pybind11/stl.h	/^    void reserve_maybe(sequence, void *) { }$/;"	f	struct:list_caster
reset	test/gtest/gtest.h	/^  void reset(T* p = NULL) {$/;"	f	struct:std::tr1::tuple_element
reset	test/gtest/gtest.h	/^  void reset(T* ptr = NULL) {$/;"	f	class:testing::internal::linked_ptr
resetNameCounters	src/ir/ir_printer.cpp	/^void IRPrinter::resetNameCounters() {$/;"	f	class:taco::ir::IRPrinter
resetNames	python_bindings/src/pyParsers.cpp	/^static void resetNames(std::vector<std::string> oldNames, py::list &tensors){$/;"	f	namespace:taco::pythonBindings
resetUniqueNameCounters	src/codegen/codegen.cpp	/^void CodeGen::resetUniqueNameCounters() {$/;"	f	class:taco::ir::CodeGen
reset_ref	python_bindings/pybind11/tests/test_eigen.cpp	/^template <typename M> void reset_ref(M &x) {$/;"	f
reset_refs	python_bindings/pybind11/tests/test_eigen.cpp	/^void reset_refs() {$/;"	f
resize	include/taco/storage/typed_vector.h	/^  void resize(size_t size) {$/;"	f	class:taco::TypedVector
resizeAndInitValues	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::resizeAndInitValues(const std::vector<Iterator>& appenders,$/;"	f	class:taco::LowererImpl
resolveCoordinate	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::resolveCoordinate(std::vector<Iterator> mergers, ir::Expr coordinate, bool emitVarDecl) {$/;"	f	class:taco::LowererImpl
restore	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void restore() { PyErr_Restore(m_type.release().ptr(), m_value.release().ptr(), m_trace.release().ptr()); }$/;"	f	class:error_already_set
restrictKeyword	src/codegen/codegen.h	/^  virtual std::string restrictKeyword() const { return ""; }$/;"	f	class:taco::ir::CodeGen
restrictKeyword	src/codegen/codegen_c.h	/^  virtual std::string restrictKeyword() const { return "restrict"; }$/;"	f	class:taco::ir::CodeGen_C
restrictKeyword	src/codegen/codegen_cuda.h	/^  virtual std::string restrictKeyword() const { return "__restrict__"; }$/;"	f	class:taco::ir::CodeGen_CUDA
result	test/gtest/gtest.h	/^  const TestResult* result() const { return &result_; }$/;"	f	class:testing::TestInfo
resultTensor	include/taco/parser/einsum_parser.h	/^  TensorBase resultTensor;$/;"	m	class:taco::parser::EinsumParser
resultTensor	src/parser/parser.cpp	/^  TensorBase             resultTensor;$/;"	m	struct:taco::parser::Parser::Content	file:
resultTensorPath	src/lower/iteration_graph.cpp	/^  TensorPath                resultTensorPath;$/;"	m	struct:taco::IterationGraph::Content	file:
result_	test/gtest/gtest-all.cc	/^  TestPartResultArray* const result_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter	file:
result_	test/gtest/gtest.h	/^  TestResult result_;$/;"	m	class:testing::TestInfo
results	src/lower/merge_lattice.cpp	/^  std::vector<Iterator> results;$/;"	m	struct:taco::MergePoint::Content	file:
results	src/lower/merge_lattice.cpp	/^const std::vector<Iterator>& MergeLattice::results() const {$/;"	f	class:taco::MergeLattice
results	src/lower/merge_lattice.cpp	/^const std::vector<Iterator>& MergePoint::results() const {$/;"	f	class:taco::MergePoint
results	src/lower/mode_format_impl.cpp	/^  vector<Expr> results;$/;"	m	struct:taco::ModeFunction::Content	file:
results_	test/gtest/gtest-all.cc	/^  const TestPartResultArray* const results_;$/;"	m	class:testing::internal::SingleFailureChecker	file:
retrieveRegionIteratorsToOmit	src/lower/merge_lattice.cpp	/^std::vector<Iterator> MergeLattice::retrieveRegionIteratorsToOmit(const MergePoint &point) const {$/;"	f	class:taco::MergeLattice
return_bytes	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^py::bytes return_bytes() {$/;"	f
return_value_policy	python_bindings/pybind11/include/pybind11/detail/common.h	/^enum class return_value_policy : uint8_t {$/;"	c
return_value_policy_override	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename Return, typename SFINAE = void> struct return_value_policy_override {$/;"	s
return_value_policy_override	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename Return> struct return_value_policy_override<Return,$/;"	s
reverse	include/taco/util/collections.h	/^ReverseConstIterable<C> reverse(const C &collection) {$/;"	f	namespace:taco::util
reverse	include/taco/util/collections.h	/^ReverseIterable<C> reverse(C &collection) {$/;"	f	namespace:taco::util
reverse_iterator	include/taco/util/collections.h	/^  typedef typename Collection::reverse_iterator reverse_iterator;$/;"	t	class:taco::util::ReverseIterable
rewrite	src/index_notation/index_notation_rewriter.cpp	/^IndexExpr IndexExprRewriterStrict::rewrite(IndexExpr e) {$/;"	f	class:taco::IndexExprRewriterStrict
rewrite	src/index_notation/index_notation_rewriter.cpp	/^IndexStmt IndexStmtRewriterStrict::rewrite(IndexStmt s) {$/;"	f	class:taco::IndexStmtRewriterStrict
rewrite	src/index_notation/iteration_algebra.cpp	/^IterationAlgebra IterationAlgebraRewriterStrict::rewrite(IterationAlgebra iter_alg) {$/;"	f	class:taco::IterationAlgebraRewriterStrict
rewrite	src/ir/ir_rewriter.cpp	/^Expr IRRewriter::rewrite(Expr e) {$/;"	f	class:taco::ir::IRRewriter
rewrite	src/ir/ir_rewriter.cpp	/^Stmt IRRewriter::rewrite(Stmt s) {$/;"	f	class:taco::ir::IRRewriter
rhs	include/taco/index_notation/index_notation_nodes.h	/^  IndexExpr rhs;$/;"	m	struct:taco::AssignmentNode
rhs	include/taco/ir/ir.h	/^  Expr rhs;$/;"	m	struct:taco::ir::Assign
rhs	include/taco/ir/ir.h	/^  Expr rhs;$/;"	m	struct:taco::ir::VarDecl
rich_compare	python_bindings/pybind11/include/pybind11/pytypes.h	/^bool object_api<D>::rich_compare(object_api const &other, int value) const {$/;"	f	class:object_api
rightShiftAlgebra	test/tests-lower.cpp	/^struct rightShiftAlgebra {$/;"	s	namespace:taco::test	file:
ro_value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    double ro_value = 1.25;$/;"	m	class:UnregisteredBase	file:
roots	src/lower/iteration_forest.h	/^  std::vector<IndexVar>                     roots;$/;"	m	class:taco::IterationForest
rowMajor	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr bool rowMajor = Type::IsRowMajor;$/;"	m	struct:type_caster
row_major	python_bindings/pybind11/include/pybind11/eigen.h	/^        row_major = Type::IsRowMajor,$/;"	m	struct:EigenProps
rows	python_bindings/pybind11/include/pybind11/eigen.h	/^        rows = Type::RowsAtCompileTime,$/;"	m	struct:EigenProps
rows	python_bindings/pybind11/include/pybind11/eigen.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable
rparen	include/taco/parser/lexer.h	/^  rparen,$/;"	m	class:taco::parser::Token
rs	test/tests-merge_lattice.cpp	/^static Access rs = r2t(i);$/;"	m	namespace:tests	file:
run	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    virtual int run(int value) {$/;"	f	class:ExampleVirt
run	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def run(self, value):$/;"	m	class:test_override.ExtendedExampleVirt
run_bool	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def run_bool(self):$/;"	m	class:test_override.ExtendedExampleVirt
runnable_	test/gtest/gtest-all.cc	/^    scoped_ptr<Runnable> runnable_;$/;"	m	struct:testing::internal::__anon6::ThreadWithParamSupport::ThreadMainParam	file:
rw_value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int rw_value = 42;$/;"	m	class:UnregisteredBase	file:
s	python_bindings/pybind11/tests/test_exceptions.cpp	/^    py::str s;$/;"	m	struct:PythonAlreadySetInDestructor	file:
s1	test/tests-merge_lattice.cpp	/^static Access s1 = s1t(i);$/;"	m	namespace:tests	file:
s2	test/tests-merge_lattice.cpp	/^static Access s2 = s2t(i);$/;"	m	namespace:tests	file:
s3	test/tests-merge_lattice.cpp	/^static Access s3 = s3t(i);$/;"	m	namespace:tests	file:
s4	test/tests-merge_lattice.cpp	/^static Access s4 = s4t(i);$/;"	m	namespace:tests	file:
sameSize	src/storage/pack.cpp	/^inline bool sameSize(const std::vector<TypedIndexVector>& coordinates) {$/;"	f	namespace:taco
same_size	python_bindings/pybind11/include/pybind11/numpy.h	/^template <typename T> struct same_size {$/;"	s
same_type	python_bindings/pybind11/include/pybind11/detail/internals.h	/^inline bool same_type(const std::type_info &lhs, const std::type_info &rhs) { return lhs == rhs; }$/;"	f
sanitizePath	src/util/files.cpp	/^std::string sanitizePath(std::string path) {$/;"	f	namespace:taco::util
save	python_bindings/pybind11/tools/libsize.py	/^save = sys.argv[2]$/;"	v
say_something	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.BT
say_something	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.DT
say_something	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.DT2
scalarEquals	src/tensor.cpp	/^bool scalarEquals(T a, T b) {$/;"	f	namespace:taco
scalarEquals	src/tensor.cpp	/^bool scalarEquals(std::complex<T> a, std::complex<T> b) {$/;"	f	namespace:taco
scalarFormat	test/tests-parafac.cpp	/^const Format scalarFormat;$/;"	v
scalarPromote	src/index_notation/transformations.cpp	/^IndexStmt scalarPromote(IndexStmt stmt) {$/;"	f	namespace:taco
scalarPromote	src/index_notation/transformations.cpp	/^IndexStmt scalarPromote(IndexStmt stmt, ProvenanceGraph provGraph, $/;"	f	namespace:taco
scalarVarsPassedToDeviceFunction	src/codegen/codegen_cuda.h	/^  std::set<Expr> scalarVarsPassedToDeviceFunction; \/\/ need to be allocated in uvm$/;"	m	class:taco::ir::CodeGen_CUDA
schedule	src/index_notation/index_notation.cpp	/^  Schedule schedule;$/;"	m	struct:taco::TensorVar::Content	file:
scheduleMTTKRP4CPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleMTTKRP4CPU(IndexStmt stmt, Tensor<double> B, int CHUNK_SIZE=16, int UNROLL_FACTOR=8) {$/;"	f
scheduleMTTKRP5CPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleMTTKRP5CPU(IndexStmt stmt, Tensor<double> B, int CHUNK_SIZE=16, int UNROLL_FACTOR=8) {$/;"	f
scheduleMTTKRPCPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleMTTKRPCPU(IndexStmt stmt, Tensor<double> B, int CHUNK_SIZE=16, int UNROLL_FACTOR=8) {$/;"	f
scheduleMTTKRPGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleMTTKRPGPU(IndexStmt stmt, Tensor<double> B, int NNZ_PER_WARP=16, int BLOCK_SIZE=256) {$/;"	f
scheduleMTTKRPPrecomputedCPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleMTTKRPPrecomputedCPU(IndexStmt stmt, Tensor<double> B, int CHUNK_SIZE=16, int UNROLL_FACTOR=8) {$/;"	f
scheduleSDDMMCPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSDDMMCPU(IndexStmt stmt, Tensor<double> B, int CHUNK_SIZE=16, int UNROLL_FACTOR=8) {$/;"	f
scheduleSDDMMGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSDDMMGPU(IndexStmt stmt, Tensor<double> B, int NNZ_PER_WARP=8*32, int BLOCK_SIZE=256, int CO_FACTOR=4) {$/;"	f
scheduleSpMMCPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMMCPU(IndexStmt stmt, Tensor<double> A, int CHUNK_SIZE=16, int UNROLL_FACTOR=8) {$/;"	f
scheduleSpMMCPUNoVec	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMMCPUNoVec(IndexStmt stmt, Tensor<double> A, int CHUNK_SIZE=16, int UNROLL_FACTOR=8) {$/;"	f
scheduleSpMMGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMMGPU(IndexStmt stmt, Tensor<double> A, IndexExpr precomputedExpr, int NNZ_PER_WARP=8, int BLOCK_SIZE=256) {$/;"	f
scheduleSpMMNZRowsGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMMNZRowsGPU(IndexStmt stmt, Tensor<double> A, int NZ_ROWS_PER_WARP=4, int BLOCK_SIZE=256) {$/;"	f
scheduleSpMMRowsGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMMRowsGPU(IndexStmt stmt, Tensor<double> A, int ROWS_PER_WARP=4, int BLOCK_SIZE=256) {$/;"	f
scheduleSpMVCPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMVCPU(IndexStmt stmt, int CHUNK_SIZE=16) {$/;"	f
scheduleSpMVGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMVGPU(IndexStmt stmt, Tensor<double> A, IndexExpr precomputedExpr, int NNZ_PER_THREAD=8, int BLOCK_SIZE=256) {$/;"	f
scheduleSpMVRowsGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMVRowsGPU(IndexStmt stmt, Tensor<double> A, IndexExpr precomputedExpr, int ROWS_PER_WARP=1, int BLOCK_SIZE=256) {$/;"	f
scheduleSpMVSplitPosGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMVSplitPosGPU(IndexStmt stmt, Tensor<double> A, IndexExpr precomputedExpr, int NNZ_PER_THREAD=8, int BLOCK_SIZE=256) {$/;"	f
scheduleSpMVThreadPerRowGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleSpMVThreadPerRowGPU(IndexStmt stmt, Tensor<double> A, IndexExpr precomputedExpr, int BLOCK_SIZE=256) {$/;"	f
scheduleTTMCPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleTTMCPU(IndexStmt stmt, Tensor<double> B, int CHUNK_SIZE=16, int UNROLL_FACTOR=8) {$/;"	f
scheduleTTMGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleTTMGPU(IndexStmt stmt, Tensor<double> B, int NNZ_PER_WARP=8*32, int BLOCK_SIZE=256, int CO_FACTOR=4) {$/;"	f
scheduleTTVCPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleTTVCPU(IndexStmt stmt, Tensor<double> B, int CHUNK_SIZE=16) {$/;"	f
scheduleTTVGPU	test/tests-scheduling-eval.cpp	/^IndexStmt scheduleTTVGPU(IndexStmt stmt, Tensor<double> B, IndexExpr precomputedExpr, int NNZ_PER_WARP=8*32, int BLOCK_SIZE=256) {$/;"	f
scope	include/taco/util/scopedmap.h	/^  void scope() {$/;"	f	class:taco::util::ScopedMap
scope	include/taco/util/scopedset.h	/^  void scope() {$/;"	f	class:taco::util::ScopedSet
scope	python_bindings/pybind11/include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:function_record
scope	python_bindings/pybind11/include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:type_record
scope	python_bindings/pybind11/include/pybind11/attr.h	/^struct scope { handle value; scope(const handle &s) : value(s) { } };$/;"	f	struct:scope
scope	python_bindings/pybind11/include/pybind11/attr.h	/^struct scope { handle value; scope(const handle &s) : value(s) { } };$/;"	s
scopeMap	src/codegen/codegen_cuda.cpp	/^  map<Expr, string, ExprCompare> scopeMap;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
scope_exit	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^struct scope_exit {$/;"	s	file:
scopedStmt	include/taco/ir/ir.h	/^  Stmt scopedStmt;$/;"	m	struct:taco::ir::Scope
scoped_estream_redirect	python_bindings/pybind11/include/pybind11/iostream.h	/^    scoped_estream_redirect($/;"	f	class:scoped_estream_redirect
scoped_estream_redirect	python_bindings/pybind11/include/pybind11/iostream.h	/^class scoped_estream_redirect : public scoped_ostream_redirect {$/;"	c
scoped_interpreter	python_bindings/pybind11/include/pybind11/embed.h	/^    scoped_interpreter(bool init_signal_handlers = true) {$/;"	f	class:scoped_interpreter
scoped_interpreter	python_bindings/pybind11/include/pybind11/embed.h	/^class scoped_interpreter {$/;"	c
scoped_ostream_redirect	python_bindings/pybind11/include/pybind11/iostream.h	/^    scoped_ostream_redirect($/;"	f	class:scoped_ostream_redirect
scoped_ostream_redirect	python_bindings/pybind11/include/pybind11/iostream.h	/^class scoped_ostream_redirect {$/;"	c
scopes	include/taco/util/scopedmap.h	/^  std::list<std::map<Key, Value>> scopes;$/;"	m	class:taco::util::ScopedMap
scopes	include/taco/util/scopedset.h	/^  std::list<std::set<Key>> scopes;$/;"	m	class:taco::util::ScopedSet
sdist	python_bindings/pybind11/setup.py	/^import setuptools.command.sdist$/;"	i
sdist_files	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^sdist_files = {$/;"	v
searchForEndOfWindowPosition	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::searchForEndOfWindowPosition(Iterator iterator, ir::Expr start, ir::Expr end) {$/;"	f	class:taco::LowererImpl
searchForFusedPositionStart	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::searchForFusedPositionStart(Forall forall, Iterator posIterator) {$/;"	f	class:taco::LowererImpl
searchForStartOfWindowPosition	src/lower/lowerer_impl.cpp	/^Expr LowererImpl::searchForStartOfWindowPosition(Iterator iterator, ir::Expr start, ir::Expr end) {$/;"	f	class:taco::LowererImpl
seen	src/index_notation/index_notation.cpp	/^  set<IndexVar> seen;$/;"	m	struct:taco::GetIndexVars	file:
seenMergePoints	src/lower/merge_lattice.cpp	/^  map<Access, MergePoint> seenMergePoints;$/;"	m	class:taco::MergeLatticeBuilder	file:
segendVar	src/lower/iterator.cpp	/^  ir::Expr segendVar;$/;"	m	struct:taco::Iterator::Content	file:
select_indices_impl	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <size_t... IPrev, size_t I, bool B, bool... Bs> struct select_indices_impl<index_sequence<IPrev...>, I, B, Bs...>$/;"	s
select_indices_impl	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename ISeq, size_t, bool...> struct select_indices_impl { using type = ISeq; };$/;"	s
self	python_bindings/pybind11/include/pybind11/operators.h	/^static const self_t self = self_t();$/;"	v
self1	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA self1() { return *this; }                          \/\/ return by value$/;"	f	class:ExampleMandA
self2	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA &self2() { return *this; }                         \/\/ return by reference$/;"	f	class:ExampleMandA
self3	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    const ExampleMandA &self3() { return *this; }                   \/\/ return by const reference$/;"	f	class:ExampleMandA
self4	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    ExampleMandA *self4() { return this; }                          \/\/ return by pointer$/;"	f	class:ExampleMandA
self5	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    const ExampleMandA *self5() { return this; }                    \/\/ return by const pointer$/;"	f	class:ExampleMandA
self_t	python_bindings/pybind11/include/pybind11/operators.h	/^struct self_t { };$/;"	s
self_type	include/taco/storage/typed_vector.h	/^    typedef const_iterator self_type;$/;"	t	class:taco::TypedVector::const_iterator
self_type	include/taco/storage/typed_vector.h	/^    typedef iterator self_type;$/;"	t	class:taco::TypedVector::iterator
self_type	include/taco/tensor.h	/^    typedef const_iterator self_type;$/;"	t	class:taco::TensorBase::const_iterator
sentinel	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static iterator sentinel() { return {}; }$/;"	f	class:iterator
seq	include/taco/util/variadic.h	/^template <int...> struct seq {};$/;"	s	namespace:taco::util
sequence	python_bindings/pybind11/include/pybind11/pytypes.h	/^class sequence : public object {$/;"	c
sequence	src/index_notation/index_notation.cpp	/^Sequence sequence(IndexStmt definition, IndexStmt mutation) {$/;"	f	namespace:taco
sequence_fast_readonly	python_bindings/pybind11/include/pybind11/pytypes.h	/^    sequence_fast_readonly(handle obj, ssize_t n) : ptr(PySequence_Fast_ITEMS(obj.ptr()) + n) { }$/;"	f	class:sequence_fast_readonly
sequence_fast_readonly	python_bindings/pybind11/include/pybind11/pytypes.h	/^class sequence_fast_readonly {$/;"	c
sequence_item	python_bindings/pybind11/include/pybind11/pytypes.h	/^struct sequence_item {$/;"	s
sequence_slow_readwrite	python_bindings/pybind11/include/pybind11/pytypes.h	/^    sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) { }$/;"	f	class:sequence_slow_readwrite
sequence_slow_readwrite	python_bindings/pybind11/include/pybind11/pytypes.h	/^class sequence_slow_readwrite {$/;"	c
serializeParsedSchedule	src/parser/schedule_parser.cpp	/^string serializeParsedSchedule(vector<vector<string>> parsed) {$/;"	f	namespace:taco::parser
set	include/taco/index_notation/index_notation_nodes.h	/^  std::shared_ptr<std::vector<int>> set;$/;"	m	struct:taco::IndexSet
set	include/taco/storage/typed_vector.h	/^  void set(size_t index, T constant) {$/;"	f	class:taco::TypedVector
set	include/taco/storage/typed_vector.h	/^  void set(size_t index, T* value) {$/;"	f	class:taco::TypedVector
set	include/taco/storage/typed_vector.h	/^  void set(size_t index, Typed value) {$/;"	f	class:taco::TypedVector
set	include/taco/storage/typed_vector.h	/^  void set(size_t index, typename Typed::Ref value) {$/;"	f	class:taco::TypedVector
set	python_bindings/pybind11/docs/conf.py	/^if not on_rtd:  # only import and set the theme if we're building docs locally$/;"	i
set	python_bindings/pybind11/include/pybind11/detail/init.h	/^    remove_reference_t<Set> set;$/;"	m	struct:pickle_factory
set	python_bindings/pybind11/include/pybind11/pytypes.h	/^    set() : object(PySet_New(nullptr), stolen_t{}) {$/;"	f	class:set
set	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, const char *key, handle val) { setattr(obj, key, val); }$/;"	f	struct:str_attr
set	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) { setattr(obj, key, val); }$/;"	f	struct:obj_attr
set	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) {$/;"	f	struct:generic_item
set	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, size_t index, handle val) {$/;"	f	struct:list_item
set	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, size_t index, handle val) {$/;"	f	struct:sequence_item
set	python_bindings/pybind11/include/pybind11/pytypes.h	/^    static void set(handle obj, size_t index, handle val) {$/;"	f	struct:tuple_item
set	python_bindings/pybind11/include/pybind11/pytypes.h	/^class set : public object {$/;"	c
set	python_bindings/pybind11/tests/pybind11_tests.h	/^    void set(int set) { i = set; }$/;"	f	class:UserType
set	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void set(int v) { value = v; }$/;"	f	struct:TestProperties
set	src/storage/typed_index.cpp	/^void TypedIndex::set(IndexTypeUnion& mem, const IndexTypeUnion& value) {$/;"	f	class:taco::TypedIndex
set	src/storage/typed_index.cpp	/^void TypedIndexRef::set(TypedIndexVal value) {$/;"	f	class:taco::TypedIndexRef
set	src/storage/typed_index.cpp	/^void TypedIndexVal::set(TypedComponentRef value) {$/;"	f	class:taco::TypedIndexVal
set	src/storage/typed_index.cpp	/^void TypedIndexVal::set(TypedComponentVal value) {$/;"	f	class:taco::TypedIndexVal
set	src/storage/typed_index.cpp	/^void TypedIndexVal::set(TypedIndexRef value) {$/;"	f	class:taco::TypedIndexVal
set	src/storage/typed_index.cpp	/^void TypedIndexVal::set(TypedIndexVal value) {$/;"	f	class:taco::TypedIndexVal
set	src/storage/typed_index.cpp	/^void TypedIndexVal::set(int constant) {$/;"	f	class:taco::TypedIndexVal
set	src/storage/typed_value.cpp	/^void TypedComponent::set(ComponentTypeUnion& mem, const ComponentTypeUnion& value) {$/;"	f	class:taco::TypedComponent
set	src/storage/typed_value.cpp	/^void TypedComponentRef::set(TypedComponentVal value) {$/;"	f	class:taco::TypedComponentRef
set	src/storage/typed_value.cpp	/^void TypedComponentVal::set(TypedComponentRef value) {$/;"	f	class:taco::TypedComponentVal
set	src/storage/typed_value.cpp	/^void TypedComponentVal::set(TypedComponentVal value) {$/;"	f	class:taco::TypedComponentVal
set	src/storage/typed_value.cpp	/^void TypedComponentVal::set(int constant) {$/;"	f	class:taco::TypedComponentVal
set	test/gtest/gtest.h	/^  void set(const T& value) { *pointer() = value; }$/;"	f	class:std::tr1::ThreadLocal
set	test/gtest/gtest.h	/^  void set(const T& value) { value_ = value; }$/;"	f	class:std::tr1::ThreadLocal
set1	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void set1(int v) { v1.set(v); }$/;"	f	struct:TestPropRVP
set2	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void set2(int v) { v2.set(v); }$/;"	f	struct:TestPropRVP
setAllocSize	src/tensor.cpp	/^void TensorBase::setAllocSize(size_t allocSize) {$/;"	f	class:taco::TensorBase
setAssembleWhileCompute	src/tensor.cpp	/^void TensorBase::setAssembleWhileCompute(bool assembleWhileCompute) {$/;"	f	class:taco::TensorBase
setAssignment	include/taco/index_notation/index_notation_nodes.h	/^  virtual void setAssignment(const Assignment& assignment) {}$/;"	f	struct:taco::AccessNode
setAssignment	src/tensor.cpp	/^  virtual void setAssignment(const Assignment& assignment) {$/;"	f	struct:taco::AccessTensorNode
setAssignment	src/tensor.cpp	/^void TensorBase::setAssignment(Assignment assignment) {$/;"	f	class:taco::TensorBase
setChild	src/lower/iterator.cpp	/^void Iterator::setChild(const Iterator& iterator) const {$/;"	f	class:taco::Iterator
setColor	src/ir/ir_printer.cpp	/^void IRPrinter::setColor(bool color) {$/;"	f	class:taco::ir::IRPrinter
setFill	src/index_notation/index_notation.cpp	/^void TensorVar::setFill(const Literal &fill) {$/;"	f	class:taco::TensorVar
setFromComponents	include/taco/tensor.h	/^void TensorBase::setFromComponents(const InputIterators& begin, const InputIterators& end) {$/;"	f	class:taco::TensorBase
setIndex	src/storage/storage.cpp	/^void TensorStorage::setIndex(const Index& index) {$/;"	f	class:taco::TensorStorage
setIndexSetIterator	src/lower/iterator.cpp	/^void Iterator::setIndexSetIterator(Iterator iter) {$/;"	f	class:taco::Iterator
setInt	src/storage/typed_index.cpp	/^void TypedIndex::setInt(IndexTypeUnion& mem, const int value) {$/;"	f	class:taco::TypedIndex
setInt	src/storage/typed_value.cpp	/^void TypedComponent::setInt(ComponentTypeUnion& mem, const int value) {$/;"	f	class:taco::TypedComponent
setJITLibname	src/codegen/module.cpp	/^void Module::setJITLibname() {$/;"	f	class:taco::ir::Module
setJITTmpdir	src/codegen/module.cpp	/^void Module::setJITTmpdir() {$/;"	f	class:taco::ir::Module
setLevelArrayTypes	src/format.cpp	/^void Format::setLevelArrayTypes(std::vector<std::vector<Datatype>> levelArrayTypes) {$/;"	f	class:taco::Format
setName	src/index_notation/index_notation.cpp	/^void TensorVar::setName(std::string name) {$/;"	f	class:taco::TensorVar
setName	src/tensor.cpp	/^void TensorBase::setName(std::string name) const {$/;"	f	class:taco::TensorBase
setNeedsAssemble	src/tensor.cpp	/^void TensorBase::setNeedsAssemble(bool needsAssemble) {$/;"	f	class:taco::TensorBase
setNeedsCompile	src/tensor.cpp	/^void TensorBase::setNeedsCompile(bool needsCompile) {$/;"	f	class:taco::TensorBase
setNeedsCompute	src/tensor.cpp	/^void TensorBase::setNeedsCompute(bool needsCompute) {$/;"	f	class:taco::TensorBase
setNeedsPack	src/tensor.cpp	/^void TensorBase::setNeedsPack(bool needsPack) {$/;"	f	class:taco::TensorBase
setSchedulingCommands	tools/taco.cpp	/^static bool setSchedulingCommands(vector<vector<string>> scheduleCommands, parser::Parser& parser, IndexStmt& stmt) {$/;"	f	file:
setSource	src/codegen/module.cpp	/^void Module::setSource(string source) {$/;"	f	class:taco::ir::Module
setStorage	src/tensor.cpp	/^void TensorBase::setStorage(TensorStorage storage) {$/;"	f	class:taco::TensorBase
setUp	python_bindings/unit_tests.py	/^    def setUp(self):$/;"	m	class:TestIO
setUp	python_bindings/unit_tests.py	/^    def setUp(self):$/;"	m	class:TestSchedulingCommands
setUp	python_bindings/unit_tests.py	/^    def setUp(self):$/;"	m	class:TestTensorCreation
setValues	src/storage/storage.cpp	/^void TensorStorage::setValues(const Array& values) {$/;"	f	class:taco::TensorStorage
setWindowBounds	src/lower/iterator.cpp	/^void Iterator::setWindowBounds(ir::Expr lo, ir::Expr hi, ir::Expr stride) {$/;"	f	class:taco::Iterator
setWorkspace	src/index_notation/index_notation_nodes_abstract.cpp	/^void IndexExprNode::setWorkspace(IndexVar i, IndexVar iw,$/;"	f	class:taco::IndexExprNode
set_CUDA_codegen_enabled	src/cuda.cpp	/^void set_CUDA_codegen_enabled(bool enabled) {$/;"	f	namespace:taco
set_CUDA_unified_memory_enabled	src/cuda.cpp	/^void set_CUDA_unified_memory_enabled(bool enabled) {$/;"	f	namespace:taco
set_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Key> struct set_caster {$/;"	s
set_catch_exceptions	test/gtest/gtest-all.cc	/^  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }$/;"	f	class:testing::internal::UnitTestImpl	file:
set_child_pid	test/gtest/gtest-all.cc	/^  void set_child_pid(pid_t child_pid) { child_pid_ = child_pid; }$/;"	f	class:testing::internal::ForkingDeathTest
set_current_test_case	test/gtest/gtest-all.cc	/^  void set_current_test_case(TestCase* a_current_test_case) {$/;"	f	class:testing::internal::UnitTestImpl
set_current_test_info	test/gtest/gtest-all.cc	/^  void set_current_test_info(TestInfo* a_current_test_info) {$/;"	f	class:testing::internal::UnitTestImpl
set_elapsed_time	test/gtest/gtest.h	/^  void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }$/;"	f	class:testing::TestResult
set_forwarding_enabled	test/gtest/gtest-all.cc	/^  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }$/;"	f	class:testing::internal::TestEventRepeater
set_holder_constructed	python_bindings/pybind11/include/pybind11/cast.h	/^    void set_holder_constructed(bool v = true) {$/;"	f	struct:value_and_holder
set_instance_registered	python_bindings/pybind11/include/pybind11/cast.h	/^    void set_instance_registered(bool v = true) {$/;"	f	struct:value_and_holder
set_int	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    void set_int(int v) { rw_value = v; }$/;"	f	class:UnregisteredBase
set_last_death_test_message	test/gtest/gtest-all.cc	/^void DeathTest::set_last_death_test_message(const std::string& message) {$/;"	f	class:testing::internal::DeathTest
set_operator_new	python_bindings/pybind11/include/pybind11/pybind11.h	/^template <typename> void set_operator_new(...) { }$/;"	f
set_operator_new	python_bindings/pybind11/include/pybind11/pybind11.h	/^void set_operator_new(type_record *r) { r->operator_new = &T::operator new; }$/;"	f
set_os_stack_trace_getter	test/gtest/gtest-all.cc	/^void UnitTestImpl::set_os_stack_trace_getter($/;"	f	class:testing::internal::UnitTestImpl
set_outcome	test/gtest/gtest-all.cc	/^  void set_outcome(DeathTestOutcome an_outcome) { outcome_ = an_outcome; }$/;"	f	class:testing::internal::DeathTestImpl
set_pointer	python_bindings/pybind11/include/pybind11/pytypes.h	/^    void set_pointer(const void *value) {$/;"	f	class:capsule
set_read_fd	test/gtest/gtest-all.cc	/^  void set_read_fd(int fd) { read_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
set_shared_data	python_bindings/pybind11/include/pybind11/detail/internals.h	/^inline PYBIND11_NOINLINE void *set_shared_data(const std::string &name, void *data) {$/;"	f
set_should_run	test/gtest/gtest.h	/^  void set_should_run(bool should) { should_run_ = should; }$/;"	f	class:testing::TestCase
set_spawned	test/gtest/gtest-all.cc	/^  void set_spawned(bool is_spawned) { spawned_ = is_spawned; }$/;"	f	class:testing::internal::DeathTestImpl
set_status	test/gtest/gtest-all.cc	/^  void set_status(int a_status) { status_ = a_status; }$/;"	f	class:testing::internal::DeathTestImpl
set_udf_dir	python_bindings/pytaco/pytensor/taco_tensor.py	/^def set_udf_dir(dir_to_search):$/;"	f
set_up_tc_	test/gtest/gtest.h	/^  Test::SetUpTestCaseFunc set_up_tc_;$/;"	m	class:testing::TestCase
set_write_fd	test/gtest/gtest-all.cc	/^  void set_write_fd(int fd) { write_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
setattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline void setattr(handle obj, const char *name, handle value) {$/;"	f
setattr	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline void setattr(handle obj, handle name, handle value) {$/;"	f
setstate	python_bindings/pybind11/include/pybind11/detail/init.h	/^void setstate(value_and_holder &v_h, T &&result, bool need_alias) {$/;"	f
setstate	python_bindings/pybind11/include/pybind11/detail/init.h	/^void setstate(value_and_holder &v_h, std::pair<T, O> &&result, bool need_alias) {$/;"	f
setup	python_bindings/pybind11/docs/conf.py	/^def setup(app):$/;"	f
setup_py	python_bindings/pybind11/setup.py	/^setup_py = "tools\/setup_global.py.in" if global_sdist else "tools\/setup_main.py.in"$/;"	v
setuptools	python_bindings/pybind11/setup.py	/^import setuptools.command.sdist$/;"	i
severity_	test/gtest/gtest.h	/^  const GTestLogSeverity severity_;$/;"	m	class:std::tr1::GTestLog
shape	include/taco/type.h	/^  Shape shape;$/;"	m	class:taco::Type
shape	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    std::vector<ssize_t> shape;   \/\/ Shape of the tensor (1 entry per dimension)$/;"	m	struct:buffer_info
shape	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def shape(self):$/;"	m	class:tensor
shared_data	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::unordered_map<std::string, void *> shared_data; \/\/ Custom data to be shared across extensions$/;"	m	struct:internals
shared_ptr_with_addressof_operator	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    shared_ptr_with_addressof_operator(T* p) : impl(p) { }$/;"	f	class:shared_ptr_with_addressof_operator
shared_ptr_with_addressof_operator	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^class shared_ptr_with_addressof_operator {$/;"	c	file:
shlex	python_bindings/pybind11/docs/conf.py	/^import shlex$/;"	i
should_run	test/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestCase
should_run	test/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestInfo
should_run_	test/gtest/gtest.h	/^  bool should_run_;                 \/\/ True iff this test should run$/;"	m	class:testing::TestInfo
should_run_	test/gtest/gtest.h	/^  bool should_run_;$/;"	m	class:testing::TestCase
should_use_CUDA_codegen	src/cuda.cpp	/^bool should_use_CUDA_codegen() {$/;"	f	namespace:taco
should_use_CUDA_unified_memory	src/cuda.cpp	/^bool should_use_CUDA_unified_memory() {$/;"	f	namespace:taco
show_c_contiguous	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr bool show_c_contiguous = show_order && requires_row_major;$/;"	m	struct:EigenProps
show_f_contiguous	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr bool show_f_contiguous = !show_c_contiguous && show_order && requires_col_major;$/;"	m	struct:EigenProps
show_function_signatures	python_bindings/pybind11/include/pybind11/options.h	/^        bool show_function_signatures = true;      \/\/< Include auto-generated function signatures in docstrings.$/;"	m	struct:options::state
show_function_signatures	python_bindings/pybind11/include/pybind11/options.h	/^    static bool show_function_signatures() { return global_state().show_function_signatures; }$/;"	f	class:options
show_order	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr bool show_order = is_eigen_dense_map<Type>::value;$/;"	m	struct:EigenProps
show_user_defined_docstrings	python_bindings/pybind11/include/pybind11/options.h	/^        bool show_user_defined_docstrings = true;  \/\/< Include user-supplied texts in docstrings.$/;"	m	struct:options::state
show_user_defined_docstrings	python_bindings/pybind11/include/pybind11/options.h	/^    static bool show_user_defined_docstrings() { return global_state().show_user_defined_docstrings; }$/;"	f	class:options
show_writeable	python_bindings/pybind11/include/pybind11/eigen.h	/^    static constexpr bool show_writeable = is_eigen_dense_map<Type>::value && is_eigen_mutable_map<Type>::value;$/;"	m	struct:EigenProps
shuffle_	test/gtest/gtest-all.cc	/^  bool shuffle_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
shutil	python_bindings/pybind11/pybind11/setup_helpers.py	/^import shutil$/;"	i
shutil	python_bindings/pybind11/setup.py	/^import shutil$/;"	i
shutil	python_bindings/unit_tests.py	/^import unittest, os, shutil, tempfile$/;"	i
sibling	python_bindings/pybind11/include/pybind11/attr.h	/^    handle sibling;$/;"	m	struct:function_record
sibling	python_bindings/pybind11/include/pybind11/attr.h	/^struct sibling { handle value; sibling(const handle &value) : value(value.ptr()) { } };$/;"	f	struct:sibling
sibling	python_bindings/pybind11/include/pybind11/attr.h	/^struct sibling { handle value; sibling(const handle &value) : value(value.ptr()) { } };$/;"	s
sign_bit	test/gtest/gtest.h	/^  Bits sign_bit() const { return kSignBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
signature	python_bindings/pybind11/include/pybind11/attr.h	/^    char *signature = nullptr;$/;"	m	struct:function_record
signum_	test/gtest/gtest.h	/^  const int signum_;$/;"	m	class:testing::KilledBySignal
simple_ancestors	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    bool simple_ancestors : 1;$/;"	m	struct:type_info
simple_dtype	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def simple_dtype():$/;"	f
simple_dtype_fmt	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def simple_dtype_fmt():$/;"	f
simple_holder_constructed	python_bindings/pybind11/include/pybind11/detail/common.h	/^    bool simple_holder_constructed : 1;$/;"	m	struct:instance
simple_instance_registered	python_bindings/pybind11/include/pybind11/detail/common.h	/^    bool simple_instance_registered : 1;$/;"	m	struct:instance
simple_layout	python_bindings/pybind11/include/pybind11/detail/common.h	/^    bool simple_layout : 1;$/;"	m	struct:instance
simple_type	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    bool simple_type : 1;$/;"	m	struct:type_info
simple_value_holder	python_bindings/pybind11/include/pybind11/detail/common.h	/^        void *simple_value_holder[1 + instance_simple_holder_in_ptrs()];$/;"	m	union:instance::__anon13
simplify	include/taco/ir/ir_printer.h	/^  bool simplify;$/;"	m	class:taco::ir::IRPrinter
simplify	src/index_notation/properties.cpp	/^IndexExpr Identity::simplify(const std::vector<IndexExpr>& exprs) const {$/;"	f	class:taco::Identity
simplify	src/ir/simplify.cpp	/^ir::Expr simplify(const ir::Expr& expr) {$/;"	f	namespace:taco::ir
simplify	src/ir/simplify.cpp	/^ir::Stmt simplify(const ir::Stmt& stmt) {$/;"	f	namespace:taco::ir
simplify	src/lower/merge_lattice.cpp	/^vector<Iterator> simplify(const vector<Iterator>& iterators) {$/;"	f	namespace:taco
simplifyFunctionBodies	src/codegen/codegen_cuda.cpp	/^Stmt CodeGen_CUDA::simplifyFunctionBodies(Stmt stmt) {$/;"	f	class:taco::ir::CodeGen_CUDA
sin	src/index_notation/index_notation.cpp	/^IndexExpr sin(IndexExpr a) {$/;"	f	namespace:taco
singleElementSetter	python_bindings/src/pyTensor.cpp	/^static inline void singleElementSetter(Tensor<CType> &tensor, int coord, pyType value) {$/;"	f	namespace:taco::pythonBindings
singleton	include/taco/format.h	/^  static ModeFormat singleton;   \/\/\/ e.g., second mode in COO$/;"	m	class:taco::ModeFormat
singleton	src/format.cpp	/^ModeFormat ModeFormat::singleton = ModeFormat::Singleton;$/;"	m	class:taco::ModeFormat	file:
singleton	src/format.cpp	/^const ModeFormat singleton = ModeFormat::Singleton;$/;"	m	namespace:taco	file:
sinh	src/index_notation/index_notation.cpp	/^IndexExpr sinh(IndexExpr a) {$/;"	f	namespace:taco
size	include/taco/ir/ir.h	/^  Expr size;$/;"	m	struct:taco::ir::Malloc
size	include/taco/storage/typed_vector.h	/^  size_t size() const {$/;"	f	class:taco::TypedVector
size	include/taco/util/timers.h	/^  int size;$/;"	m	struct:taco::util::TimeResults
size	python_bindings/pybind11/docs/benchmark.py	/^        size = os.stat("test.so").st_size$/;"	v
size	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    ssize_t size = 0;             \/\/ Total number of entries$/;"	m	struct:buffer_info
size	python_bindings/pybind11/include/pybind11/cast.h	/^    size_t size() { return tinfo.size(); }$/;"	f	struct:values_and_holders
size	python_bindings/pybind11/include/pybind11/cast.h	/^    static constexpr auto size = sizeof...(Ts);$/;"	m	class:tuple_caster
size	python_bindings/pybind11/include/pybind11/eigen.h	/^        size = Type::SizeAtCompileTime;$/;"	m	struct:EigenProps
size	python_bindings/pybind11/include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyDict_Size(m_ptr); }$/;"	f	class:dict
size	python_bindings/pybind11/include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyList_Size(m_ptr); }$/;"	f	class:list
size	python_bindings/pybind11/include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PySet_Size(m_ptr); }$/;"	f	class:set
size	python_bindings/pybind11/include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyTuple_Size(m_ptr); }$/;"	f	class:tuple
size	python_bindings/pybind11/include/pybind11/pytypes.h	/^    size_t size() const {$/;"	f	class:sequence
size	src/lower/mode.cpp	/^  Dimension  size;              \/\/\/ the size of the mode$/;"	m	struct:taco::Mode::Content	file:
size	src/storage/array.cpp	/^  size_t size;$/;"	m	struct:taco::Array::Content	file:
size	src/type.cpp	/^  size_t size;$/;"	m	struct:taco::Dimension::Content	file:
size	test/gtest/gtest-all.cc	/^int TestPartResultArray::size() const {$/;"	f	class:testing::TestPartResultArray
size	test/gtest/gtest.h	/^  size_t size() const { return size_; }$/;"	f	class:testing::internal::NativeArray
sizeName	src/codegen/codegen.cpp	/^const std::string sizeName = "size";$/;"	m	namespace:taco::ir	file:
size_	test/gtest/gtest.h	/^  size_t size_;$/;"	m	class:testing::internal::NativeArray
size_in_ptrs	python_bindings/pybind11/include/pybind11/detail/common.h	/^inline static constexpr size_t size_in_ptrs(size_t s) { return 1 + ((s - 1) >> log2(sizeof(void *))); }$/;"	f
size_t	python_bindings/pybind11/include/pybind11/options.h	/^    void* operator new(size_t) = delete;$/;"	m	class:options
sizeof	python_bindings/pybind11/include/pybind11/numpy.h	/^static_assert(sizeof(::pybind11::ssize_t) == sizeof(Py_intptr_t), "ssize_t != Py_intptr_t");$/;"	v
sizeofType	include/taco/ir/ir.h	/^  Type sizeofType;$/;"	m	struct:taco::ir::Sizeof
sleep	python_bindings/pybind11/tests/test_callbacks.py	/^    from time import sleep$/;"	i
sleep	python_bindings/pybind11/tests/test_iostream.cpp	/^    void sleep() {$/;"	f	struct:TestThread
slice	python_bindings/pybind11/include/pybind11/pytypes.h	/^    slice(ssize_t start_, ssize_t stop_, ssize_t step_) {$/;"	f	class:slice
slice	python_bindings/pybind11/include/pybind11/pytypes.h	/^class slice : public object {$/;"	c
slicedOutput	test/tests-windowing.cpp	/^struct slicedOutput : public TestWithParam<std::tuple<ModeFormat, ModeFormat>> {};$/;"	s	file:
socket_writer_	test/gtest/gtest-all.cc	/^  const scoped_ptr<AbstractSocketWriter> socket_writer_;$/;"	m	class:testing::internal::StreamingListener	file:
sockfd_	test/gtest/gtest-all.cc	/^    int sockfd_;  \/\/ socket file descriptor$/;"	m	class:testing::internal::StreamingListener::SocketWriter	file:
sortProps	src/codegen/codegen.cpp	/^static vector<const GetProperty*> sortProps(std::map<Expr, std::string, ExprCompare> map) {$/;"	f	namespace:taco::ir
sound	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^    std::string sound = "WOOF!";$/;"	m	struct:Animal::Dog	file:
source	include/taco/codegen/module.h	/^  std::stringstream source;$/;"	m	class:taco::ir::Module
source_suffix	python_bindings/pybind11/docs/conf.py	/^source_suffix = ".rst"$/;"	v
sparse	include/taco/format.h	/^  static ModeFormat sparse;      \/\/\/ alias for compressed$/;"	m	class:taco::ModeFormat
sparse	src/format.cpp	/^ModeFormat ModeFormat::sparse = ModeFormat::Compressed;$/;"	m	class:taco::ModeFormat	file:
sparse	src/format.cpp	/^const ModeFormat sparse = ModeFormat::Compressed;$/;"	m	namespace:taco	file:
spawned	test/gtest/gtest-all.cc	/^  bool spawned() const { return spawned_; }$/;"	f	class:testing::internal::DeathTestImpl
spawned_	test/gtest/gtest-all.cc	/^  bool spawned_;$/;"	m	class:testing::internal::DeathTestImpl	file:
sphinx_rtd_theme	python_bindings/pybind11/docs/conf.py	/^    import sphinx_rtd_theme$/;"	i
split	include/taco/util/collections.h	/^std::pair<std::vector<V>,std::vector<V>> split(const std::vector<V>& vector,$/;"	f	namespace:taco::util
split	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::split(IndexVar i, IndexVar i1, IndexVar i2, size_t splitFactor) const {$/;"	f	class:taco::IndexStmt
split	src/util/strings.cpp	/^vector<string> split(const string &str, const string &delim, bool keepDelim) {$/;"	f	namespace:taco::util
splitAppenderAndInserters	src/lower/lowerer_impl.cpp	/^splitAppenderAndInserters(const vector<Iterator>& results) {$/;"	f	namespace:taco
splitFactor	src/index_notation/provenance_graph.cpp	/^  size_t splitFactor;$/;"	m	struct:taco::SplitRelNode::Content	file:
splitSubscriptInput	src/parser/einsum_parser.cpp	/^std::vector<std::string> EinsumParser::splitSubscriptInput(std::string &input) {$/;"	f	class:taco::parser::EinsumParser
sqrt	src/index_notation/index_notation.cpp	/^IndexExpr sqrt(IndexExpr a) {$/;"	f	namespace:taco
square	src/index_notation/index_notation.cpp	/^IndexExpr square(IndexExpr a) {$/;"	f	namespace:taco
src_and_type	python_bindings/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE static std::pair<const void *, const type_info *> src_and_type($/;"	f	class:type_caster_generic
src_and_type	python_bindings/pybind11/include/pybind11/cast.h	/^    static std::pair<const void *, const type_info *> src_and_type(const itype *src) {$/;"	f	class:type_caster_base
src_files	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^src_files = headers | cmake_files$/;"	v
ss_	test/gtest/gtest.h	/^  const internal::scoped_ptr< ::std::stringstream> ss_;$/;"	m	class:testing::Message
stack_trace_depth_	test/gtest/gtest-all.cc	/^  internal::Int32 stack_trace_depth_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
start	include/taco/ir/ir.h	/^  Expr start;$/;"	m	struct:taco::ir::For
start	include/taco/util/timers.h	/^  void start() {$/;"	f	class:taco::util::Timer
start	include/taco/util/timers.h	/^  void start(const string& name) {$/;"	f	class:taco::util::LapTimer
start_timestamp	test/gtest/gtest-all.cc	/^  TimeInMillis start_timestamp() const { return start_timestamp_; }$/;"	f	class:testing::internal::UnitTestImpl
start_timestamp	test/gtest/gtest-all.cc	/^internal::TimeInMillis UnitTest::start_timestamp() const {$/;"	f	class:testing::UnitTest
start_timestamp_	test/gtest/gtest-all.cc	/^  TimeInMillis start_timestamp_;$/;"	m	class:testing::internal::UnitTestImpl	file:
state	python_bindings/pybind11/include/pybind11/options.h	/^    struct state {$/;"	s	class:options
state	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PyGILState_STATE state;$/;"	m	class:gil_scoped_acquire
state	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PyThreadState *state;$/;"	m	class:gil_scoped_release
state	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    int state;$/;"	m	class:ExampleVirt	file:
stateName	src/codegen/codegen.cpp	/^const std::string stateName = "state";$/;"	m	namespace:taco::ir	file:
state_	test/gtest/gtest.h	/^  UInt32 state_;$/;"	m	class:testing::internal::Random
statement	test/gtest/gtest-all.cc	/^  const char* statement() const { return statement_; }$/;"	f	class:testing::internal::DeathTestImpl
statement_	test/gtest/gtest-all.cc	/^  const char* const statement_;$/;"	m	class:testing::internal::DeathTestImpl	file:
static_func	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix1"; }$/;"	f	struct:VanillaStaticMix1
static_func	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix2"; }$/;"	f	struct:VanillaStaticMix2
static_func1	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    static std::string static_func1() { return "WithStatic1"; };$/;"	f	struct:WithStatic1
static_func2	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    static std::string static_func2() { return "WithStatic2"; };$/;"	f	struct:WithStatic2
static_get	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    static int static_get() { return static_value; }$/;"	f	struct:TestProperties
static_property_type	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    PyTypeObject *static_property_type;$/;"	m	struct:internals
static_set	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    static void static_set(int v) { static_value = v; }$/;"	f	struct:TestProperties
static_strings	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    std::forward_list<std::string> static_strings; \/\/ Stores the std::strings backing detail::c_str()$/;"	m	struct:internals
static_value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestProperties	file:
static_value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestPropertiesOverride	file:
static_value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^int TestProperties::static_value = 1;$/;"	m	class:TestProperties	file:
static_value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^int TestPropertiesOverride::static_value = 99;$/;"	m	class:TestPropertiesOverride	file:
static_value	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:VanillaStaticMix1	file:
static_value	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:VanillaStaticMix2	file:
static_value	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix1::static_value = 12;$/;"	m	class:VanillaStaticMix1	file:
static_value	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix2::static_value = 12;$/;"	m	class:VanillaStaticMix2	file:
static_value1	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    static int static_value1;$/;"	m	struct:WithStatic1	file:
static_value1	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^int WithStatic1::static_value1 = 1;$/;"	m	class:WithStatic1	file:
static_value2	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    static int static_value2;$/;"	m	struct:WithStatic2	file:
static_value2	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^int WithStatic2::static_value2 = 2;$/;"	m	class:WithStatic2	file:
staticmethod	python_bindings/pybind11/include/pybind11/pytypes.h	/^class staticmethod : public object {$/;"	c
status	python_bindings/pybind11/include/pybind11/detail/common.h	/^    uint8_t *status;$/;"	m	struct:nonsimple_values_and_holders
status	test/gtest/gtest-all.cc	/^  int status() const { return status_; }$/;"	f	class:testing::internal::DeathTestImpl
status_	test/gtest/gtest-all.cc	/^  int status_;$/;"	m	class:testing::internal::DeathTestImpl	file:
status_holder_constructed	python_bindings/pybind11/include/pybind11/detail/common.h	/^    static constexpr uint8_t status_holder_constructed  = 1;$/;"	m	struct:instance
status_instance_registered	python_bindings/pybind11/include/pybind11/detail/common.h	/^    static constexpr uint8_t status_instance_registered = 2;$/;"	m	struct:instance
std	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^namespace std {$/;"	n	file:
std	python_bindings/pybind11/tests/test_stl.cpp	/^namespace std {$/;"	n	file:
std	test/gtest/gtest.h	/^namespace std {$/;"	n
stderr	python_bindings/pybind11/tests/conftest.py	/^    def stderr(self):$/;"	m	class:Capture
stdev	include/taco/util/timers.h	/^  double stdev;$/;"	m	struct:taco::util::TimeResults
step	src/lower/tensor_path.h	/^  int step;$/;"	m	class:taco::TensorPathStep
step_	test/gtest/gtest.h	/^    const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
step_	test/gtest/gtest.h	/^  const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator
stmt	include/taco/index_notation/index_notation_nodes.h	/^  IndexStmt stmt;$/;"	m	struct:taco::ForallNode
stmt	include/taco/index_notation/index_notation_nodes.h	/^  IndexStmt stmt;$/;"	m	struct:taco::SuchThatNode
stmt	include/taco/index_notation/index_notation_rewriter.h	/^  IndexStmt stmt;$/;"	m	class:taco::IndexStmtRewriterStrict
stmt	include/taco/ir/ir_rewriter.h	/^  Stmt stmt;$/;"	m	class:taco::ir::IRRewriter
stmt	src/lower/lowerer_impl.cpp	/^  Stmt stmt;$/;"	m	class:taco::LowererImpl::Visitor	file:
stmt	test/tests-lower.cpp	/^  IndexStmt stmt;$/;"	m	struct:taco::test::Test	file:
stmt	test/tests-transformation.cpp	/^  IndexStmt stmt;$/;"	m	struct:test::TransformationTest	file:
stmt1	include/taco/index_notation/index_notation_nodes.h	/^  IndexStmt stmt1;$/;"	m	struct:taco::MultiNode
stmt2	include/taco/index_notation/index_notation_nodes.h	/^  IndexStmt stmt2;$/;"	m	struct:taco::MultiNode
stmtSubstitutions	src/index_notation/index_notation_rewriter.cpp	/^  const std::map<IndexStmt,IndexStmt>& stmtSubstitutions;$/;"	m	struct:taco::ReplaceRewriter	file:
stolen_t	python_bindings/pybind11/include/pybind11/pytypes.h	/^    struct stolen_t { };$/;"	s	class:object
stop	include/taco/util/timers.h	/^  void stop() {$/;"	f	class:taco::util::LapTimer
stop	include/taco/util/timers.h	/^  void stop() {$/;"	f	class:taco::util::Timer
stop	python_bindings/pybind11/tests/test_iostream.cpp	/^    void stop() { stop_ = true; }$/;"	f	struct:TestThread
stopAtDeviceFunction	src/codegen/codegen_cuda.cpp	/^  bool stopAtDeviceFunction;$/;"	m	class:taco::ir::CodeGen_CUDA::FindVars	file:
stop_	python_bindings/pybind11/tests/test_iostream.cpp	/^    std::atomic<bool> stop_;$/;"	m	struct:TestThread	file:
storage	include/taco/tensor.h	/^  TensorStorage      storage;$/;"	m	struct:taco::TensorBase::Content
storage	test/tests-storage.cpp	/^struct storage : public TestWithParam<TestData> {};$/;"	s	file:
storage_alloc_tests	test/tests-storage_alloc.cpp	/^namespace storage_alloc_tests {$/;"	n	file:
str	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit str(handle h) : object(raw_str(h.ptr()), stolen_t{}) { if (!m_ptr) throw error_already_set(); }$/;"	f	class:str
str	python_bindings/pybind11/include/pybind11/pytypes.h	/^    str(const char *c = "")$/;"	f	class:str
str	python_bindings/pybind11/include/pybind11/pytypes.h	/^    str(const char *c, size_t n)$/;"	f	class:str
str	python_bindings/pybind11/include/pybind11/pytypes.h	/^    str(const std::string &s) : str(s.data(), s.size()) { }$/;"	f	class:str
str	python_bindings/pybind11/include/pybind11/pytypes.h	/^class str : public object {$/;"	c
str	python_bindings/pybind11/include/pybind11/pytypes.h	/^inline str::str(const bytes& b) {$/;"	f	class:str
str	python_bindings/pybind11/include/pybind11/pytypes.h	/^pybind11::str object_api<D>::str() const { return pybind11::str(derived()); }$/;"	f	class:object_api
strEnd	include/taco/ir/ir.h	/^  std::string strEnd = "";$/;"	m	struct:taco::ir::BinOp
strMid	include/taco/ir/ir.h	/^  std::string strMid = "";$/;"	m	struct:taco::ir::BinOp
strStart	include/taco/ir/ir.h	/^  std::string strStart = "";$/;"	m	struct:taco::ir::BinOp
str_attr	python_bindings/pybind11/include/pybind11/pytypes.h	/^struct str_attr {$/;"	s
strdup_guard	python_bindings/pybind11/include/pybind11/pybind11.h	/^    class strdup_guard {$/;"	c	class:cpp_function
stream	include/taco/ir/ir_printer.h	/^  std::ostream &stream;$/;"	m	class:taco::ir::IRPrinter
stream_result_to_	test/gtest/gtest-all.cc	/^  std::string stream_result_to_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
stride	include/taco/index_notation/index_notation.h	/^  int stride;$/;"	m	struct:taco::WindowedIndexVar::Content
stride	include/taco/index_notation/index_notation_nodes.h	/^  int stride;$/;"	m	struct:taco::AccessWindow
stride	src/lower/iterator.cpp	/^    ir::Expr stride;$/;"	m	struct:taco::Iterator::Content::Window	file:
stride	test/tests-windowing.cpp	/^struct stride : public TestWithParam<std::tuple<ModeFormat, ModeFormat>> {};$/;"	s	file:
strideBoundsGuard	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::strideBoundsGuard(Iterator iterator, ir::Expr access, bool incrementPosVar) {$/;"	f	class:taco::LowererImpl
stride_compatible	python_bindings/pybind11/include/pybind11/eigen.h	/^    template <typename props> bool stride_compatible() const {$/;"	f	struct:EigenConformable
strides	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    std::vector<ssize_t> strides; \/\/ Number of bytes between adjacent entries (for each per dimension)$/;"	m	struct:buffer_info
strides	python_bindings/pybind11/include/pybind11/numpy.h	/^    ssize_t *strides;$/;"	m	struct:PyArray_Proxy
string	python_bindings/pybind11/setup.py	/^import string$/;"	i
string	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^import string$/;"	i
string	test/gtest/gtest.h	/^  const std::string& string() const { return pathname_; }$/;"	f	class:testing::internal::FilePath
string_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename StringType, bool IsView = false> struct string_caster {$/;"	s
strings	python_bindings/pybind11/include/pybind11/pybind11.h	/^        std::vector<char *> strings;$/;"	m	class:cpp_function::strdup_guard
strip_comments	python_bindings/pybind11/tests/test_factory_constructors.py	/^def strip_comments(s):$/;"	f
strip_function_object	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename F> struct strip_function_object {$/;"	s
strip_padding	python_bindings/pybind11/include/pybind11/numpy.h	/^    dtype strip_padding(ssize_t itemsize) {$/;"	f
struct	python_bindings/pybind11/tests/test_buffers.py	/^import struct$/;"	i
sub	include/taco/parser/lexer.h	/^  sub,$/;"	m	class:taco::parser::Token
sub	python_bindings/pybind11/tests/test_pytypes.py	/^        sub = SubTestObject()$/;"	v	class:test_accessors.TestObject
subExpr	src/lower/expr_tools.cpp	/^  IndexExpr     subExpr;$/;"	m	class:taco::SubExprVisitor	file:
subLattice	src/lower/merge_lattice.cpp	/^MergeLattice MergeLattice::subLattice(MergePoint lp) const {$/;"	f	class:taco::MergeLattice
subarray	python_bindings/pybind11/include/pybind11/numpy.h	/^    char *subarray;$/;"	m	struct:PyArrayDescr_Proxy
subcasters	python_bindings/pybind11/include/pybind11/cast.h	/^    Tuple<make_caster<Ts>...> subcasters;$/;"	m	class:tuple_caster
subprocess	python_bindings/pybind11/docs/conf.py	/^import subprocess$/;"	i
subprocess	python_bindings/pybind11/setup.py	/^import subprocess$/;"	i
subprocess	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^import subprocess$/;"	i
subprocess	python_bindings/pybind11/tests/extra_setuptools/test_setuphelper.py	/^import subprocess$/;"	i
subscripts	include/taco/parser/einsum_parser.h	/^  std::string subscripts;$/;"	m	class:taco::parser::EinsumParser
substitutions	src/index_notation/index_notation_rewriter.cpp	/^  const std::map<IndexVar,IndexVar>& substitutions;$/;"	m	struct:taco::ReplaceIndexVars	file:
substitutions	src/index_notation/index_notation_rewriter.cpp	/^  const std::map<TensorVar,TensorVar>& substitutions;$/;"	m	struct:taco::ReplaceTensorVars	file:
substitutions	src/index_notation/iteration_algebra.cpp	/^  const std::map<IndexExpr, IndexExpr> substitutions;$/;"	m	class:taco::IndexExprReplacer	file:
substitutions	src/index_notation/transformations.cpp	/^  const std::map<Access,Access>& substitutions;$/;"	m	struct:taco::ReplaceReductionExpr	file:
substr_	test/gtest/gtest-all.cc	/^  const string substr_;$/;"	m	class:testing::internal::SingleFailureChecker	file:
success_	test/gtest/gtest.h	/^  bool success_;$/;"	m	class:testing::AssertionResult
successful_test_case_count	test/gtest/gtest-all.cc	/^int UnitTest::successful_test_case_count() const {$/;"	f	class:testing::UnitTest
successful_test_case_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::successful_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
successful_test_count	test/gtest/gtest-all.cc	/^int TestCase::successful_test_count() const {$/;"	f	class:testing::TestCase
successful_test_count	test/gtest/gtest-all.cc	/^int UnitTest::successful_test_count() const {$/;"	f	class:testing::UnitTest
successful_test_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::successful_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
suchthat	src/index_notation/index_notation.cpp	/^SuchThat suchthat(IndexStmt stmt, std::vector<IndexVarRel> predicate) {$/;"	f	namespace:taco
sum	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    double sum() const { return rw_value + ro_value; }$/;"	f	class:RegisteredDerived
sum	src/index_notation/index_notation.cpp	/^Reduction sum(IndexVar i, IndexExpr expr) {$/;"	f	namespace:taco
summary	test/gtest/gtest.h	/^  const char* summary() const { return summary_.c_str(); }$/;"	f	class:testing::TestPartResult
summary_	test/gtest/gtest.h	/^  std::string summary_;  \/\/ The test failure summary.$/;"	m	class:testing::TestPartResult
suppress	python_bindings/pybind11/tests/conftest.py	/^def suppress(exception):$/;"	f
sv1	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    static UserType sv1;$/;"	m	struct:TestPropRVP	file:
sv2	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    static UserType sv2;$/;"	m	struct:TestPropRVP	file:
swap	test/gtest/gtest-all.cc	/^void AssertionResult::swap(AssertionResult& other) {$/;"	f	class:testing::AssertionResult
swap	test/gtest/gtest.h	/^  friend void swap(scoped_ptr& a, scoped_ptr& b) {$/;"	f	struct:std::tr1::tuple_element
syncDependentTensors	src/tensor.cpp	/^void TensorBase::syncDependentTensors() {$/;"	f	class:taco::TensorBase
syncValues	src/tensor.cpp	/^void TensorBase::syncValues() {$/;"	f	class:taco::TensorBase
sys	python_bindings/pybind11/docs/conf.py	/^import sys$/;"	i
sys	python_bindings/pybind11/pybind11/__main__.py	/^import sys$/;"	i
sys	python_bindings/pybind11/pybind11/setup_helpers.py	/^import sys$/;"	i
sys	python_bindings/pybind11/setup.py	/^import sys$/;"	i
sys	python_bindings/pybind11/tests/env.py	/^import sys$/;"	i
sys	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^import sys$/;"	i
sys	python_bindings/pybind11/tests/extra_setuptools/test_setuphelper.py	/^import sys$/;"	i
sys	python_bindings/pybind11/tests/test_builtin_casters.py	/^    import sys$/;"	i
sys	python_bindings/pybind11/tests/test_cmake_build/test.py	/^import sys$/;"	i
sys	python_bindings/pybind11/tests/test_exceptions.py	/^import sys$/;"	i
sys	python_bindings/pybind11/tests/test_iostream.py	/^import sys$/;"	i
sys	python_bindings/pybind11/tests/test_pytypes.py	/^import sys$/;"	i
sys	python_bindings/pybind11/tools/libsize.py	/^import sys$/;"	i
sys	python_bindings/source/conf.py	/^import sys$/;"	i
sys	python_bindings/unit_tests.py	/^import sys$/;"	i
sysconfig	python_bindings/pybind11/pybind11/__main__.py	/^import sysconfig$/;"	i
t_	python_bindings/pybind11/tests/test_iostream.cpp	/^    std::thread * t_;$/;"	m	struct:TestThread	file:
taco	include/taco/codegen/module.h	/^namespace taco {$/;"	n
taco	include/taco/component.h	/^namespace taco {$/;"	n
taco	include/taco/coordinate.h	/^namespace taco {$/;"	n
taco	include/taco/cuda.h	/^namespace taco {$/;"	n
taco	include/taco/error.h	/^namespace taco {$/;"	n
taco	include/taco/error/error_messages.h	/^namespace taco {$/;"	n
taco	include/taco/format.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/index_notation.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/index_notation_nodes.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/index_notation_nodes_abstract.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/index_notation_printer.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/index_notation_rewriter.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/index_notation_visitor.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/intrinsic.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/iteration_algebra.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/iteration_algebra_printer.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/kernel.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/properties.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/property_pointers.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/provenance_graph.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/schedule.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/tensor_operator.h	/^namespace taco {$/;"	n
taco	include/taco/index_notation/transformations.h	/^namespace taco {$/;"	n
taco	include/taco/ir/ir.h	/^namespace taco {$/;"	n
taco	include/taco/ir/ir_printer.h	/^namespace taco {$/;"	n
taco	include/taco/ir/ir_rewriter.h	/^namespace taco {$/;"	n
taco	include/taco/ir/ir_verifier.h	/^namespace taco {$/;"	n
taco	include/taco/ir/ir_visitor.h	/^namespace taco {$/;"	n
taco	include/taco/ir/simplify.h	/^namespace taco {$/;"	n
taco	include/taco/ir_tags.h	/^namespace taco {$/;"	n
taco	include/taco/lower/iterator.h	/^namespace taco {$/;"	n
taco	include/taco/lower/lower.h	/^namespace taco {$/;"	n
taco	include/taco/lower/lowerer_impl.h	/^namespace taco {$/;"	n
taco	include/taco/lower/merge_lattice.h	/^namespace taco {$/;"	n
taco	include/taco/lower/mode.h	/^namespace taco {$/;"	n
taco	include/taco/lower/mode_format_compressed.h	/^namespace taco {$/;"	n
taco	include/taco/lower/mode_format_dense.h	/^namespace taco {$/;"	n
taco	include/taco/lower/mode_format_impl.h	/^namespace taco {$/;"	n
taco	include/taco/lower/mode_format_singleton.h	/^namespace taco {$/;"	n
taco	include/taco/parser/einsum_parser.h	/^namespace taco {$/;"	n
taco	include/taco/parser/lexer.h	/^namespace taco {$/;"	n
taco	include/taco/parser/parser.h	/^namespace taco {$/;"	n
taco	include/taco/parser/schedule_parser.h	/^namespace taco {$/;"	n
taco	include/taco/storage/array.h	/^namespace taco {$/;"	n
taco	include/taco/storage/coordinate.h	/^namespace taco {$/;"	n
taco	include/taco/storage/file_io_mtx.h	/^namespace taco {$/;"	n
taco	include/taco/storage/file_io_rb.h	/^namespace taco {$/;"	n
taco	include/taco/storage/file_io_tns.h	/^namespace taco {$/;"	n
taco	include/taco/storage/index.h	/^namespace taco {$/;"	n
taco	include/taco/storage/pack.h	/^namespace taco {$/;"	n
taco	include/taco/storage/storage.h	/^namespace taco {$/;"	n
taco	include/taco/storage/typed_index.h	/^namespace taco {$/;"	n
taco	include/taco/storage/typed_value.h	/^namespace taco {$/;"	n
taco	include/taco/storage/typed_vector.h	/^namespace taco {$/;"	n
taco	include/taco/target.h	/^namespace taco {$/;"	n
taco	include/taco/tensor.h	/^namespace taco {$/;"	n
taco	include/taco/type.h	/^namespace taco {$/;"	n
taco	include/taco/util/collections.h	/^namespace taco {$/;"	n
taco	include/taco/util/comparable.h	/^namespace taco {$/;"	n
taco	include/taco/util/env.h	/^namespace taco {$/;"	n
taco	include/taco/util/files.h	/^namespace taco {$/;"	n
taco	include/taco/util/fill.h	/^namespace taco {$/;"	n
taco	include/taco/util/functions.h	/^namespace taco {$/;"	n
taco	include/taco/util/intrusive_ptr.h	/^namespace taco {$/;"	n
taco	include/taco/util/name_generator.h	/^namespace taco {$/;"	n
taco	include/taco/util/printable.h	/^namespace taco {$/;"	n
taco	include/taco/util/scopedmap.h	/^namespace taco {$/;"	n
taco	include/taco/util/scopedset.h	/^namespace taco {$/;"	n
taco	include/taco/util/strings.h	/^namespace taco {$/;"	n
taco	include/taco/util/timers.h	/^namespace taco {$/;"	n
taco	include/taco/util/uncopyable.h	/^namespace taco {$/;"	n
taco	include/taco/util/variadic.h	/^namespace taco {$/;"	n
taco	python_bindings/include/pyDatatypes.h	/^namespace taco{$/;"	n
taco	python_bindings/include/pyFormat.h	/^namespace taco{$/;"	n
taco	python_bindings/include/pyIndexNotation.h	/^namespace taco{$/;"	n
taco	python_bindings/include/pyParsers.h	/^namespace taco{$/;"	n
taco	python_bindings/include/pyTensor.h	/^namespace taco{$/;"	n
taco	python_bindings/include/pyTensorIO.h	/^namespace taco{$/;"	n
taco	python_bindings/src/pyDatatypes.cpp	/^namespace taco{$/;"	n	file:
taco	python_bindings/src/pyFormat.cpp	/^namespace taco{$/;"	n	file:
taco	python_bindings/src/pyIndexNotation.cpp	/^namespace taco{$/;"	n	file:
taco	python_bindings/src/pyParsers.cpp	/^namespace taco{$/;"	n	file:
taco	python_bindings/src/pyTensor.cpp	/^namespace taco{$/;"	n	file:
taco	python_bindings/src/pyTensorIO.cpp	/^namespace taco{$/;"	n	file:
taco	src/codegen/codegen.cpp	/^namespace taco {$/;"	n	file:
taco	src/codegen/codegen.h	/^namespace taco {$/;"	n
taco	src/codegen/codegen_c.cpp	/^namespace taco {$/;"	n	file:
taco	src/codegen/codegen_c.h	/^namespace taco {$/;"	n
taco	src/codegen/codegen_cuda.cpp	/^namespace taco {$/;"	n	file:
taco	src/codegen/codegen_cuda.h	/^namespace taco {$/;"	n
taco	src/codegen/module.cpp	/^namespace taco {$/;"	n	file:
taco	src/cuda.cpp	/^namespace taco {$/;"	n	file:
taco	src/error.cpp	/^namespace taco {$/;"	n	file:
taco	src/error/error_checks.cpp	/^namespace taco {$/;"	n	file:
taco	src/error/error_checks.h	/^namespace taco {$/;"	n
taco	src/error/error_messages.cpp	/^namespace taco {$/;"	n	file:
taco	src/format.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/index_notation.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/index_notation_nodes.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/index_notation_nodes_abstract.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/index_notation_printer.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/index_notation_rewriter.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/index_notation_visitor.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/intrinsic.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/iteration_algebra.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/iteration_algebra_printer.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/kernel.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/properties.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/property_pointers.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/provenance_graph.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/schedule.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/tensor_operator.cpp	/^namespace taco {$/;"	n	file:
taco	src/index_notation/transformations.cpp	/^namespace taco {$/;"	n	file:
taco	src/ir/ir.cpp	/^namespace taco {$/;"	n	file:
taco	src/ir/ir_generators.cpp	/^namespace taco {$/;"	n	file:
taco	src/ir/ir_generators.h	/^namespace taco {$/;"	n
taco	src/ir/ir_printer.cpp	/^namespace taco {$/;"	n	file:
taco	src/ir/ir_rewriter.cpp	/^namespace taco {$/;"	n	file:
taco	src/ir/ir_verifier.cpp	/^namespace taco {$/;"	n	file:
taco	src/ir/ir_visitor.cpp	/^namespace taco {$/;"	n	file:
taco	src/ir/simplify.cpp	/^namespace taco {$/;"	n	file:
taco	src/ir_tags.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/expr_tools.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/expr_tools.h	/^namespace taco {$/;"	n
taco	src/lower/iteration_forest.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/iteration_forest.h	/^namespace taco {$/;"	n
taco	src/lower/iteration_graph.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/iteration_graph.h	/^namespace taco {$/;"	n
taco	src/lower/iterator.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/lower.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/lowerer_impl.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/merge_lattice.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/mode.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/mode_access.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/mode_access.h	/^namespace taco {$/;"	n
taco	src/lower/mode_format_compressed.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/mode_format_dense.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/mode_format_impl.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/mode_format_singleton.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/tensor_path.cpp	/^namespace taco {$/;"	n	file:
taco	src/lower/tensor_path.h	/^namespace taco {$/;"	n
taco	src/parser/einsum_parser.cpp	/^namespace taco{$/;"	n	file:
taco	src/parser/lexer.cpp	/^namespace taco {$/;"	n	file:
taco	src/parser/parser.cpp	/^namespace taco {$/;"	n	file:
taco	src/parser/schedule_parser.cpp	/^namespace taco{$/;"	n	file:
taco	src/storage/array.cpp	/^namespace taco {$/;"	n	file:
taco	src/storage/file_io_mtx.cpp	/^namespace taco {$/;"	n	file:
taco	src/storage/file_io_rb.cpp	/^namespace taco {$/;"	n	file:
taco	src/storage/file_io_tns.cpp	/^namespace taco {$/;"	n	file:
taco	src/storage/index.cpp	/^namespace taco {$/;"	n	file:
taco	src/storage/pack.cpp	/^namespace taco {$/;"	n	file:
taco	src/storage/storage.cpp	/^namespace taco {$/;"	n	file:
taco	src/storage/typed_index.cpp	/^namespace taco {$/;"	n	file:
taco	src/storage/typed_value.cpp	/^namespace taco {$/;"	n	file:
taco	src/target.cpp	/^namespace taco {$/;"	n	file:
taco	src/tensor.cpp	/^namespace taco {$/;"	n	file:
taco	src/type.cpp	/^namespace taco {$/;"	n	file:
taco	src/util/env.cpp	/^namespace taco {$/;"	n	file:
taco	src/util/files.cpp	/^namespace taco {$/;"	n	file:
taco	src/util/name_generator.cpp	/^namespace taco {$/;"	n	file:
taco	src/util/strings.cpp	/^namespace taco {$/;"	n	file:
taco	test/expr_factory.cpp	/^namespace taco {$/;"	n	file:
taco	test/expr_factory.h	/^namespace taco {$/;"	n
taco	test/op_factory.h	/^namespace taco {$/;"	n
taco	test/test.cpp	/^namespace taco {$/;"	n	file:
taco	test/test.h	/^namespace taco { namespace test {} }$/;"	n
taco	test/test.h	/^namespace taco {$/;"	n
taco	test/test_tensors.cpp	/^namespace taco {$/;"	n	file:
taco	test/test_tensors.h	/^namespace taco {$/;"	n
taco	test/tests-lower.cpp	/^namespace taco {$/;"	n	file:
taco_chunk_size	src/tensor.cpp	/^static int taco_chunk_size = 0;$/;"	m	namespace:taco	file:
taco_get_num_threads	src/tensor.cpp	/^int taco_get_num_threads() {$/;"	f	namespace:taco
taco_get_parallel_schedule	src/tensor.cpp	/^void taco_get_parallel_schedule(ParallelSchedule *sched, int *chunk_size) {$/;"	f	namespace:taco
taco_iassert	include/taco/error.h	/^  #define taco_iassert(/;"	d
taco_ierror	include/taco/error.h	/^  #define taco_ierror /;"	d
taco_mode_dense	include/taco/taco_tensor_t.h	/^typedef enum { taco_mode_dense, taco_mode_sparse } taco_mode_t;$/;"	e	enum:__anon9
taco_mode_sparse	include/taco/taco_tensor_t.h	/^typedef enum { taco_mode_dense, taco_mode_sparse } taco_mode_t;$/;"	e	enum:__anon9
taco_mode_t	include/taco/taco_tensor_t.h	/^typedef enum { taco_mode_dense, taco_mode_sparse } taco_mode_t;$/;"	t	typeref:enum:__anon9
taco_not_supported_yet	include/taco/error.h	/^#define taco_not_supported_yet /;"	d
taco_num_threads	src/tensor.cpp	/^static int taco_num_threads = 1;$/;"	m	namespace:taco	file:
taco_parallel_sched	src/tensor.cpp	/^static ParallelSchedule taco_parallel_sched = ParallelSchedule::Static;$/;"	m	namespace:taco	file:
taco_set_num_threads	src/tensor.cpp	/^void taco_set_num_threads(int num_threads) {$/;"	f	namespace:taco
taco_set_parallel_schedule	src/tensor.cpp	/^void taco_set_parallel_schedule(ParallelSchedule sched, int chunk_size) {$/;"	f	namespace:taco
taco_tassert	include/taco/error.h	/^#define taco_tassert(/;"	d
taco_tensor_t	include/taco/taco_tensor_t.h	/^typedef struct taco_tensor_t {$/;"	s
taco_tensor_t	include/taco/taco_tensor_t.h	/^} taco_tensor_t;$/;"	t	typeref:struct:taco_tensor_t
taco_terror	include/taco/error.h	/^#define taco_terror /;"	d
taco_uassert	include/taco/error.h	/^#define taco_uassert(/;"	d
taco_uerror	include/taco/error.h	/^#define taco_uerror /;"	d
taco_unreachable	include/taco/error.h	/^#define taco_unreachable /;"	d
taco_uwarning	include/taco/error.h	/^#define taco_uwarning /;"	d
tag	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^  int tag;$/;"	m	struct:ConstRefCasted	file:
tag	python_bindings/pybind11/tests/test_factory_constructors.py	/^from pybind11_tests.factory_constructors import tag$/;"	i
take_ownership	python_bindings/pybind11/include/pybind11/detail/common.h	/^    take_ownership,$/;"	m	class:return_value_policy
tan	src/index_notation/index_notation.cpp	/^IndexExpr tan(IndexExpr a) {$/;"	f	namespace:taco
tanh	src/index_notation/index_notation.cpp	/^IndexExpr tanh(IndexExpr a) {$/;"	f	namespace:taco
tarfile	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^import tarfile$/;"	i
target	include/taco/codegen/module.h	/^  Target target;$/;"	m	class:taco::ir::Module
targetPtrEqual	include/taco/util/functions.h	/^bool targetPtrEqual(std::function<T(U...)> f, std::function<R(A...)> g) {$/;"	f	namespace:taco::util
tearDown	python_bindings/unit_tests.py	/^    def tearDown(self):$/;"	m	class:TestIO
tearDown	python_bindings/unit_tests.py	/^    def tearDown(self):$/;"	m	class:TestSchedulingCommands
tear_down_tc_	test/gtest/gtest.h	/^  Test::TearDownTestCaseFunc tear_down_tc_;$/;"	m	class:testing::TestCase
tempToBitGuard	include/taco/lower/lowerer_impl.h	/^  std::map<TensorVar, ir::Expr> tempToBitGuard;$/;"	m	class:taco::LowererImpl
tempToIndexList	include/taco/lower/lowerer_impl.h	/^  std::map<TensorVar, ir::Expr> tempToIndexList;$/;"	m	class:taco::LowererImpl
tempToIndexListSize	include/taco/lower/lowerer_impl.h	/^  std::map<TensorVar, ir::Expr> tempToIndexListSize;$/;"	m	class:taco::LowererImpl
tempfile	python_bindings/pybind11/pybind11/setup_helpers.py	/^import tempfile$/;"	i
tempfile	python_bindings/pybind11/setup.py	/^import tempfile$/;"	i
tempfile	python_bindings/unit_tests.py	/^import unittest, os, shutil, tempfile$/;"	i
templates_path	python_bindings/pybind11/docs/conf.py	/^templates_path = [".templates"]$/;"	v
templates_path	python_bindings/source/conf.py	/^templates_path = ['_templates']$/;"	v
temporaryArrays	include/taco/lower/lowerer_impl.h	/^  std::map<TensorVar, TemporaryArrays> temporaryArrays;$/;"	m	class:taco::LowererImpl
temporaryInitialization	include/taco/lower/lowerer_impl.h	/^  std::map<Forall, Where> temporaryInitialization;$/;"	m	class:taco::LowererImpl
tenSquaredNorm	test/tests-parafac.cpp	/^TensorSquaredNormFactory            tenSquaredNorm;$/;"	v
tensor	include/taco/index_notation/index_notation_nodes.h	/^  TensorBase tensor;$/;"	m	struct:taco::IndexSet
tensor	include/taco/ir/ir.h	/^  Expr tensor;$/;"	m	struct:taco::ir::GetProperty
tensor	include/taco/tensor.h	/^    const TensorBase*              tensor;$/;"	m	class:taco::TensorBase::const_iterator
tensor	include/taco/tensor.h	/^    const TensorBase* tensor;$/;"	m	class:taco::TensorBase::iterator_wrapper
tensor	include/taco/tensor.h	/^  TensorBase * tensor;$/;"	m	struct:taco::ScalarAccess
tensor	python_bindings/pytaco/pytensor/taco_tensor.py	/^class tensor:$/;"	c
tensor	python_bindings/pytaco/pytensor/tensorIO.py	/^from ..pytensor.taco_tensor import tensor$/;"	i
tensor	src/lower/iterator.cpp	/^  ir::Expr tensor;$/;"	m	struct:taco::Iterator::Content	file:
tensor	src/lower/mode.cpp	/^  ir::Expr   tensor;            \/\/\/ the tensor containing mode$/;"	m	struct:taco::Mode::Content	file:
tensor	src/tensor.cpp	/^  TensorBase tensor;$/;"	m	struct:taco::AccessTensorNode	file:
tensor	test/tests-api.cpp	/^  TensorBase     tensor;$/;"	m	class:APIMatrixStorageTestData	file:
tensor	test/tests-api.cpp	/^  TensorBase tensor;$/;"	m	class:APIFileTestData	file:
tensor	test/tests-expr_storage.cpp	/^  Tensor<double> tensor;$/;"	m	struct:expr_storage_tests::TestData	file:
tensor	test/tests-storage.cpp	/^  Tensor<double> tensor;$/;"	m	struct:TestData	file:
tensor	test/tests-storage_alloc.cpp	/^  Tensor<double> tensor;$/;"	m	struct:storage_alloc_tests::TestData	file:
tensorData	src/storage/storage.cpp	/^  taco_tensor_t *tensorData;$/;"	m	struct:taco::TensorStorage::Content	file:
tensorDimensions	src/parser/parser.cpp	/^  map<string,std::vector<int>> tensorDimensions;$/;"	m	struct:taco::parser::Parser::Content	file:
tensorOrder	include/taco/tensor.h	/^    const int                      tensorOrder;$/;"	m	class:taco::TensorBase::const_iterator
tensorPaths	src/lower/iteration_graph.cpp	/^  vector<TensorPath>        tensorPaths;$/;"	m	struct:taco::IterationGraph::Content	file:
tensorRead	python_bindings/src/pyTensorIO.cpp	/^static Tensor<double> tensorRead(std::string filename, T modeType, bool pack = true){$/;"	f	namespace:taco::pythonBindings
tensorRegion	src/lower/merge_lattice.cpp	/^const std::set<Iterator> MergePoint::tensorRegion() const {$/;"	f	class:taco::MergePoint
tensorStorage	include/taco/tensor.h	/^    const taco_tensor_t*           tensorStorage;$/;"	m	class:taco::TensorBase::const_iterator
tensorVar	include/taco/index_notation/index_notation_nodes.h	/^  TensorVar tensorVar;$/;"	m	struct:taco::AccessNode
tensorVar	include/taco/tensor.h	/^  TensorVar          tensorVar;$/;"	m	struct:taco::TensorBase::Content
tensorVars	include/taco/lower/lowerer_impl.h	/^  std::map<TensorVar, ir::Expr> tensorVars;$/;"	m	class:taco::LowererImpl
tensor_abs	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_abs(t1, out_format, dtype=None):$/;"	f
tensor_acos	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_acos(t1, out_format, dtype=None):$/;"	f
tensor_acosh	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_acosh(t1, out_format, dtype=None):$/;"	f
tensor_add	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_add(t1, t2, out_format, dtype=None):$/;"	f
tensor_asin	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_asin(t1, out_format, dtype=None):$/;"	f
tensor_asinh	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_asinh(t1, out_format, dtype=None):$/;"	f
tensor_atan	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_atan(t1, out_format, dtype=None):$/;"	f
tensor_atan2	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_atan2(t1, out_format, dtype=None):$/;"	f
tensor_atanh	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_atanh(t1, out_format, dtype=None):$/;"	f
tensor_cos	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_cos(t1, out_format, dtype=None):$/;"	f
tensor_cosh	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_cosh(t1, out_format, dtype=None):$/;"	f
tensor_cube	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_cube(t1, out_format, dtype=None):$/;"	f
tensor_cube_root	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_cube_root(t1, out_format, dtype=None):$/;"	f
tensor_div	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_div(t1, t2, out_format, dtype=None):$/;"	f
tensor_eq	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_eq(t1, t2, out_format, dtype=_cm.bool):$/;"	f
tensor_exp	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_exp(t1, out_format, dtype=None):$/;"	f
tensor_floordiv	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_floordiv(t1, t2, out_format, dtype=_cm.int64):$/;"	f
tensor_ge	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_ge(t1, t2, out_format, dtype=_cm.bool):$/;"	f
tensor_gt	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_gt(t1, t2, out_format, dtype=_cm.bool):$/;"	f
tensor_heaviside	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_heaviside(t1, t2, out_format, dtype=None):$/;"	f
tensor_le	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_le(t1, t2, out_format, dtype=_cm.bool):$/;"	f
tensor_log	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_log(t1, out_format, dtype=None):$/;"	f
tensor_log10	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_log10(t1, out_format, dtype=None):$/;"	f
tensor_logical_not	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_logical_not(t1, out_format, dtype=None):$/;"	f
tensor_lt	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_lt(t1, t2, out_format, dtype=_cm.bool):$/;"	f
tensor_max	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_max(t1, t2, out_format, dtype=None):$/;"	f
tensor_min	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_min(t1, t2, out_format, dtype=None):$/;"	f
tensor_mul	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_mul(t1, t2, out_format, dtype=None):$/;"	f
tensor_ne	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_ne(t1, t2, out_format, dtype=_cm.bool):$/;"	f
tensor_neg	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_neg(t1, out_format, dtype=None):$/;"	f
tensor_pow	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_pow(t1, t2, out_format, dtype=None):$/;"	f
tensor_sin	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_sin(t1, out_format, dtype=None):$/;"	f
tensor_sinh	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_sinh(t1, out_format, dtype=None):$/;"	f
tensor_sqrt	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_sqrt(t1, out_format, dtype=None):$/;"	f
tensor_square	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_square(t1, out_format, dtype=None):$/;"	f
tensor_sub	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_sub(t1, t2, out_format, dtype=None):$/;"	f
tensor_sum	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_sum(t1, axis=None, out_format=default_mode, dtype=None):$/;"	f
tensor_tan	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_tan(t1, out_format, dtype=None):$/;"	f
tensor_tanh	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensor_tanh(t1, out_format, dtype=None):$/;"	f
tensor_type	test/tests-format-mm-permute.cpp	/^enum tensor_type {$/;"	g	file:
tensor_type_coo	test/tests-format-mm-permute.cpp	/^    tensor_type_coo,$/;"	e	enum:tensor_type	file:
tensor_type_csc	test/tests-format-mm-permute.cpp	/^    tensor_type_csc,$/;"	e	enum:tensor_type	file:
tensor_type_csr	test/tests-format-mm-permute.cpp	/^    tensor_type_csr,$/;"	e	enum:tensor_type	file:
tensor_type_dense	test/tests-format-mm-permute.cpp	/^    tensor_type_dense = 0,$/;"	e	enum:tensor_type	file:
tensor_type_names	test/tests-format-mm-permute.cpp	/^static map<int, const char*> tensor_type_names = {$/;"	v	file:
tensordot	python_bindings/pytaco/pytensor/taco_tensor.py	/^def tensordot(t1, t2, axes=2, out_format=default_mode, dtype = None):$/;"	f
tensors	include/taco/parser/einsum_parser.h	/^  std::vector<TensorBase> &tensors;$/;"	m	class:taco::parser::EinsumParser
tensors	src/parser/parser.cpp	/^  map<string,TensorBase> tensors;$/;"	m	struct:taco::parser::Parser::Content	file:
test	test/expr_factory.cpp	/^namespace test {$/;"	n	namespace:taco	file:
test	test/expr_factory.h	/^namespace test {$/;"	n	namespace:taco
test	test/test.cpp	/^namespace test {$/;"	n	namespace:taco	file:
test	test/test.h	/^namespace taco { namespace test {} }$/;"	n	namespace:taco
test	test/test.h	/^namespace test {$/;"	n	namespace:taco
test	test/test_tensors.cpp	/^namespace test {$/;"	n	namespace:taco	file:
test	test/test_tensors.h	/^namespace test {$/;"	n	namespace:taco
test	test/tests-lower.cpp	/^namespace test {$/;"	n	namespace:taco	file:
test	test/tests-transformation.cpp	/^namespace test {$/;"	n	file:
testCases	test/tests-lower.cpp	/^  vector<TestCase> testCases;$/;"	m	struct:taco::test::Test	file:
testDataDirectory	test/test.cpp	/^std::string testDataDirectory() {$/;"	f	namespace:taco::test
testDirectory	test/test.cpp	/^std::string testDirectory() {$/;"	f	namespace:taco::test
testFill	test/tests-tensor.cpp	/^void testFill(T fillVal) {$/;"	f
testParsers	python_bindings/unit_tests.py	/^class testParsers(unittest.TestCase):$/;"	c
test_	test/gtest/gtest.h	/^    DeathTest* const test_;$/;"	m	class:testing::internal::DeathTest::ReturnSentinel
test_accepts_none	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_accepts_none(msg):$/;"	f
test_accessors	python_bindings/pybind11/tests/test_pytypes.py	/^def test_accessors():$/;"	f
test_alias_delay_initialization1	python_bindings/pybind11/tests/test_virtual_functions.py	/^def test_alias_delay_initialization1(capture):$/;"	f
test_alias_delay_initialization2	python_bindings/pybind11/tests/test_virtual_functions.py	/^def test_alias_delay_initialization2(capture):$/;"	f
test_aligned	python_bindings/pybind11/tests/test_class.py	/^def test_aligned():$/;"	f
test_alive_gc	python_bindings/pybind11/tests/test_call_policies.py	/^def test_alive_gc(capture):$/;"	f
test_alive_gc_derived	python_bindings/pybind11/tests/test_call_policies.py	/^def test_alive_gc_derived(capture):$/;"	f
test_alive_gc_multi_derived	python_bindings/pybind11/tests/test_call_policies.py	/^def test_alive_gc_multi_derived(capture):$/;"	f
test_arg_and_kwargs	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^def test_arg_and_kwargs():$/;"	f
test_args_refcount	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^def test_args_refcount():$/;"	f
test_argument_conversions	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_argument_conversions(forcecast, contiguity, noconvert):$/;"	f
test_array	python_bindings/pybind11/tests/test_stl.py	/^def test_array(doc):$/;"	f
test_array_array	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_array_array():$/;"	f
test_array_attributes	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_array_attributes():$/;"	f
test_array_cast_sequence	python_bindings/pybind11/tests/test_stl.py	/^def test_array_cast_sequence():$/;"	f
test_array_collapse	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^def test_array_collapse():$/;"	f
test_array_constructors	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_array_constructors():$/;"	f
test_array_copy_C_and_F_style	python_bindings/unit_tests.py	/^    def test_array_copy_C_and_F_style(self):$/;"	m	class:TestTensorCreation
test_array_create_and_resize	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_array_create_and_resize(msg):$/;"	f
test_array_ctors	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^py::array_t<int32_t, 0> test_array_ctors(int i) {$/;"	f	class:E1	file:
test_array_failure	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_array_failure():$/;"	f
test_array_resize	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_array_resize(msg):$/;"	f
test_array_unchecked_dyn_dims	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_array_unchecked_dyn_dims(msg):$/;"	f
test_array_unchecked_fixed_dims	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_array_unchecked_fixed_dims(msg):$/;"	f
test_as_type_py	python_bindings/pybind11/tests/test_class.py	/^def test_as_type_py():$/;"	f
test_async_async_callbacks	python_bindings/pybind11/tests/test_callbacks.py	/^def test_async_async_callbacks():$/;"	f
test_async_callbacks	python_bindings/pybind11/tests/test_callbacks.py	/^def test_async_callbacks():$/;"	f
test_at	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_at(arr):$/;"	f
test_at_fail	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_at_fail(arr, dim):$/;"	f
test_automatic_upcasting	python_bindings/pybind11/tests/test_class.py	/^def test_automatic_upcasting():$/;"	f
test_await	python_bindings/pybind11/tests/test_async.py	/^def test_await(event_loop):$/;"	f
test_await_missing	python_bindings/pybind11/tests/test_async.py	/^def test_await_missing(event_loop):$/;"	f
test_bad_arg_default	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_bad_arg_default(msg):$/;"	f
test_base_and_derived_nested_scope	python_bindings/pybind11/tests/test_class.py	/^def test_base_and_derived_nested_scope():$/;"	f
test_base_name	test/gtest/gtest.h	/^    const string test_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_binary_operators	python_bindings/pybind11/tests/test_enum.py	/^def test_binary_operators():$/;"	f
test_bind_protected_functions	python_bindings/pybind11/tests/test_class.py	/^def test_bind_protected_functions():$/;"	f
test_bool_caster	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_bool_caster():$/;"	f
test_both_ref_mutators	python_bindings/pybind11/tests/test_eigen.py	/^def test_both_ref_mutators():$/;"	f
test_bound_method_callback	python_bindings/pybind11/tests/test_callbacks.py	/^def test_bound_method_callback():$/;"	f
test_bounds_check	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_bounds_check(arr):$/;"	f
test_brace_initialization	python_bindings/pybind11/tests/test_class.py	/^def test_brace_initialization():$/;"	f
test_build_global_dist	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^def test_build_global_dist(monkeypatch, tmpdir):$/;"	f
test_build_sdist	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^def test_build_sdist(monkeypatch, tmpdir):$/;"	f
test_builtin_functions	python_bindings/pybind11/tests/test_pytypes.py	/^def test_builtin_functions():$/;"	f
test_builtin_key_type	python_bindings/pybind11/tests/test_modules.py	/^def test_builtin_key_type():$/;"	f
test_builtins_cast_return_none	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_builtins_cast_return_none():$/;"	f
test_bytes	python_bindings/pybind11/tests/test_constants_and_functions.py	/^def test_bytes():$/;"	f
test_bytes	python_bindings/pybind11/tests/test_pytypes.py	/^def test_bytes(doc):$/;"	f
test_bytes_to_string	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_bytes_to_string():$/;"	f
test_call_guard	python_bindings/pybind11/tests/test_call_policies.py	/^def test_call_guard():$/;"	f
test_callbacks	python_bindings/pybind11/tests/test_callbacks.py	/^def test_callbacks():$/;"	f
test_capsule	python_bindings/pybind11/tests/test_pytypes.py	/^def test_capsule(capture):$/;"	f
test_captured	python_bindings/pybind11/tests/test_iostream.py	/^def test_captured(capsys):$/;"	f
test_captured_large_string	python_bindings/pybind11/tests/test_iostream.py	/^def test_captured_large_string(capsys):$/;"	f
test_case_base_name	test/gtest/gtest.h	/^    const string test_case_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_indices_	test/gtest/gtest-all.cc	/^  std::vector<int> test_case_indices_;$/;"	m	class:testing::internal::UnitTestImpl	file:
test_case_infos_	test/gtest/gtest.h	/^  TestCaseInfoContainer test_case_infos_;$/;"	m	class:testing::internal::ParameterizedTestCaseRegistry
test_case_name	test/gtest/gtest.h	/^  const char* test_case_name() const { return test_case_name_.c_str(); }$/;"	f	class:testing::TestInfo
test_case_name_	test/gtest/gtest.h	/^  const std::string test_case_name_;     \/\/ Test case name$/;"	m	class:testing::TestInfo
test_case_name_	test/gtest/gtest.h	/^  const string test_case_name_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
test_case_to_run_count	test/gtest/gtest-all.cc	/^int UnitTest::test_case_to_run_count() const {$/;"	f	class:testing::UnitTest
test_case_to_run_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::test_case_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
test_cases_	test/gtest/gtest-all.cc	/^  std::vector<TestCase*> test_cases_;$/;"	m	class:testing::internal::UnitTestImpl	file:
test_cast_numpy_int64_to_uint64	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_cast_numpy_int64_to_uint64():$/;"	f
test_chrono_different_resolutions	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_different_resolutions():$/;"	f
test_chrono_duration_roundtrip	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_duration_roundtrip():$/;"	f
test_chrono_duration_subtraction_equivalence	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_duration_subtraction_equivalence():$/;"	f
test_chrono_duration_subtraction_equivalence_date	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_duration_subtraction_equivalence_date():$/;"	f
test_chrono_steady_clock	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_steady_clock():$/;"	f
test_chrono_steady_clock_roundtrip	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_steady_clock_roundtrip():$/;"	f
test_chrono_system_clock	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_system_clock():$/;"	f
test_chrono_system_clock_roundtrip	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip():$/;"	f
test_chrono_system_clock_roundtrip_date	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip_date():$/;"	f
test_chrono_system_clock_roundtrip_time	python_bindings/pybind11/tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip_time(time1, tz, monkeypatch):$/;"	f
test_class_refcount	python_bindings/pybind11/tests/test_class.py	/^def test_class_refcount():$/;"	f
test_cls_and_dtype_conversion	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_cls_and_dtype_conversion(simple_dtype):$/;"	f
test_cmake_build	python_bindings/pybind11/tests/test_cmake_build/test.py	/^import test_cmake_build$/;"	i
test_compare_buffer_info	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_compare_buffer_info():$/;"	f
test_complex_array	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_complex_array():$/;"	f
test_complex_cast	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_complex_cast():$/;"	f
test_const_ref_caster	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_const_ref_caster():$/;"	f
test_constants	python_bindings/pybind11/tests/test_constants_and_functions.py	/^def test_constants():$/;"	f
test_constructors	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_constructors():$/;"	f
test_constructors	python_bindings/pybind11/tests/test_pytypes.py	/^def test_constructors():$/;"	f
test_copy_method	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_copy_method():$/;"	f
test_cpp_casting	python_bindings/pybind11/tests/test_eigen.py	/^def test_cpp_casting():$/;"	f
test_cpp_function_roundtrip	python_bindings/pybind11/tests/test_callbacks.py	/^def test_cpp_function_roundtrip():$/;"	f
test_cross_module_calls	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_cross_module_calls():$/;"	f
test_cross_module_exceptions	python_bindings/pybind11/tests/test_exceptions.py	/^def test_cross_module_exceptions():$/;"	f
test_cross_module_gil	python_bindings/pybind11/tests/test_gil_scoped.py	/^def test_cross_module_gil():$/;"	f
test_ctypes_array_1d	python_bindings/pybind11/tests/test_buffers.py	/^def test_ctypes_array_1d():$/;"	f
test_ctypes_array_2d	python_bindings/pybind11/tests/test_buffers.py	/^def test_ctypes_array_2d():$/;"	f
test_ctypes_from_buffer	python_bindings/pybind11/tests/test_buffers.py	/^def test_ctypes_from_buffer():$/;"	f
test_custom	python_bindings/pybind11/tests/test_exceptions.py	/^def test_custom(msg):$/;"	f
test_custom_caster_destruction	python_bindings/pybind11/tests/test_custom_type_casters.py	/^def test_custom_caster_destruction():$/;"	f
test_custom_operator_new	python_bindings/pybind11/tests/test_eigen.py	/^def test_custom_operator_new():$/;"	f
test_cyclic_gc	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_cyclic_gc():$/;"	f
test_data	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_data(arr, args, ret):$/;"	f
test_dense	python_bindings/pybind11/tests/test_eigen.py	/^def test_dense():$/;"	f
test_dense_signature	python_bindings/pybind11/tests/test_eigen.py	/^def test_dense_signature(doc):$/;"	f
test_deque	python_bindings/pybind11/tests/test_stl.py	/^def test_deque(doc):$/;"	f
test_diamond_inheritance	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_diamond_inheritance():$/;"	f
test_dict	python_bindings/pybind11/tests/test_pytypes.py	/^def test_dict(capture, doc):$/;"	f
test_dim_check_fail	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_dim_check_fail(arr):$/;"	f
test_dispatch_issue	python_bindings/pybind11/tests/test_virtual_functions.py	/^def test_dispatch_issue(msg):$/;"	f
test_docs	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^def test_docs(doc):$/;"	f
test_docstring_options	python_bindings/pybind11/tests/test_docstring_options.py	/^def test_docstring_options():$/;"	f
test_docstring_signatures	python_bindings/pybind11/tests/test_enum.py	/^def test_docstring_signatures():$/;"	f
test_docstrings	python_bindings/pybind11/tests/test_class.py	/^def test_docstrings(doc):$/;"	f
test_downcast	python_bindings/pybind11/tests/test_tagbased_polymorphic.py	/^def test_downcast():$/;"	f
test_dtype	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_dtype(simple_dtype):$/;"	f
test_dtype_conversion	python_bindings/unit_tests.py	/^    def test_dtype_conversion(self):$/;"	m	class:TestDataTypeMethods
test_dtype_ctors	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^py::list test_dtype_ctors() {$/;"	f	class:E1	file:
test_dtype_equality	python_bindings/unit_tests.py	/^    def test_dtype_equality(self):$/;"	m	class:TestDataTypeMethods
test_dtype_inspectors	python_bindings/unit_tests.py	/^    def test_dtype_inspectors(self):$/;"	m	class:TestDataTypeMethods
test_dtype_refcount_leak	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_dtype_refcount_leak():$/;"	f
test_dtypes	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_dtypes():$/;"	f
test_dual	python_bindings/pybind11/tests/test_iostream.py	/^def test_dual(capsys):$/;"	f
test_duplicate_enum_name	python_bindings/pybind11/tests/test_enum.py	/^def test_duplicate_enum_name():$/;"	f
test_duplicate_local	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_duplicate_local():$/;"	f
test_duplicate_registration	python_bindings/pybind11/tests/test_modules.py	/^def test_duplicate_registration():$/;"	f
test_dynamic_attributes	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_dynamic_attributes():$/;"	f
test_eigen_keepalive	python_bindings/pybind11/tests/test_eigen.py	/^def test_eigen_keepalive():$/;"	f
test_eigen_ref_life_support	python_bindings/pybind11/tests/test_eigen.py	/^def test_eigen_ref_life_support():$/;"	f
test_eigen_ref_mutators	python_bindings/pybind11/tests/test_eigen.py	/^def test_eigen_ref_mutators():$/;"	f
test_eigen_ref_to_python	python_bindings/pybind11/tests/test_eigen.py	/^def test_eigen_ref_to_python():$/;"	f
test_eigen_return_references	python_bindings/pybind11/tests/test_eigen.py	/^def test_eigen_return_references():$/;"	f
test_enum_array	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_enum_array():$/;"	f
test_enum_pickle	python_bindings/pybind11/tests/test_pickling.py	/^def test_enum_pickle():$/;"	f
test_enum_to_int	python_bindings/pybind11/tests/test_enum.py	/^def test_enum_to_int():$/;"	f
test_err	python_bindings/pybind11/tests/test_iostream.py	/^def test_err(capfd):$/;"	f
test_error_after_conversions	python_bindings/pybind11/tests/test_class.py	/^def test_error_after_conversions():$/;"	f
test_error_already_set	python_bindings/pybind11/tests/test_exceptions.py	/^def test_error_already_set(msg):$/;"	f
test_eval_empty_globals	python_bindings/pybind11/tests/test_eval.py	/^def test_eval_empty_globals():$/;"	f
test_eval_file	python_bindings/pybind11/tests/test_eval.py	/^def test_eval_file():$/;"	f
test_evals	python_bindings/pybind11/tests/test_eval.py	/^def test_evals(capture):$/;"	f
test_evaluate	python_bindings/unit_tests.py	/^    def test_evaluate(self):$/;"	m	class:testParsers
test_exc_sp	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^namespace test_exc_sp {$/;"	n	file:
test_exception_matches	python_bindings/pybind11/tests/test_exceptions.py	/^def test_exception_matches():$/;"	f
test_exception_rvalue_abort	python_bindings/pybind11/tests/test_class.py	/^def test_exception_rvalue_abort():$/;"	f
test_exception_specifiers	python_bindings/pybind11/tests/test_constants_and_functions.py	/^def test_exception_specifiers():$/;"	f
test_exp_optional	python_bindings/pybind11/tests/test_stl.py	/^def test_exp_optional():$/;"	f
test_final	python_bindings/pybind11/tests/test_class.py	/^def test_final():$/;"	f
test_fixed	python_bindings/pybind11/tests/test_eigen.py	/^def test_fixed():$/;"	f
test_floating_point_duration	python_bindings/pybind11/tests/test_chrono.py	/^def test_floating_point_duration():$/;"	f
test_flush	python_bindings/pybind11/tests/test_iostream.py	/^def test_flush(capfd):$/;"	f
test_format_descriptors	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_format_descriptors():$/;"	f
test_format_methods	python_bindings/unit_tests.py	/^    def test_format_methods(self):$/;"	m	class:TestFormatMethods
test_from_python	python_bindings/pybind11/tests/test_buffers.py	/^def test_from_python():$/;"	f
test_function1	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^std::string test_function1() {$/;"	f
test_function2	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^std::string test_function2(MyEnum k) {$/;"	f
test_function3	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^std::string test_function3(int i) {$/;"	f
test_function4	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^py::str test_function4()           { return "test_function()"; }$/;"	f
test_function4	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^py::str test_function4(char *)     { return "test_function(char *)"; }$/;"	f
test_function4	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^py::str test_function4(float, int) { return "test_function(float, int)"; }$/;"	f
test_function4	python_bindings/pybind11/tests/test_constants_and_functions.cpp	/^py::str test_function4(int, float) { return "test_function(int, float)"; }$/;"	f
test_function_overloading	python_bindings/pybind11/tests/test_constants_and_functions.py	/^def test_function_overloading():$/;"	f
test_function_record_leaks	python_bindings/pybind11/tests/test_constants_and_functions.py	/^def test_function_record_leaks():$/;"	f
test_function_signatures	python_bindings/pybind11/tests/test_callbacks.py	/^def test_function_signatures(doc):$/;"	f
test_function_signatures	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^def test_function_signatures(doc):$/;"	f
test_function_with_string_and_vector_string_arg	python_bindings/pybind11/tests/test_stl.py	/^def test_function_with_string_and_vector_string_arg():$/;"	f
test_generalized_iterators	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def test_generalized_iterators():$/;"	f
test_get_and_set_threads	python_bindings/unit_tests.py	/^    def test_get_and_set_threads(self):$/;"	m	class:TestSchedulingCommands
test_gil	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^static void test_gil() {$/;"	f	file:
test_gil_from_thread	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^static void test_gil_from_thread() {$/;"	f	file:
test_greedy_string_overload	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_greedy_string_overload():$/;"	f
test_guard_capture	python_bindings/pybind11/tests/test_iostream.py	/^def test_guard_capture(capsys):$/;"	f
test_hash	python_bindings/pybind11/tests/test_pytypes.py	/^def test_hash():$/;"	f
test_holder_with_addressof_operator	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_holder_with_addressof_operator():$/;"	f
test_implicit_casting	python_bindings/pybind11/tests/test_pytypes.py	/^def test_implicit_casting():$/;"	f
test_implicit_conversion	python_bindings/pybind11/tests/test_enum.py	/^def test_implicit_conversion():$/;"	f
test_implicit_conversion_life_support	python_bindings/pybind11/tests/test_class.py	/^def test_implicit_conversion_life_support():$/;"	f
test_importing	python_bindings/pybind11/tests/test_modules.py	/^def test_importing():$/;"	f
test_index_offset	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_index_offset(arr, args, ret):$/;"	f
test_index_using_ellipsis	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_index_using_ellipsis():$/;"	f
test_indices_	test/gtest/gtest.h	/^  std::vector<int> test_indices_;$/;"	m	class:testing::TestCase
test_info_list	test/gtest/gtest.h	/^  const std::vector<TestInfo*>& test_info_list() const {$/;"	f	class:testing::TestCase
test_info_list	test/gtest/gtest.h	/^  std::vector<TestInfo*>& test_info_list() { return test_info_list_; }$/;"	f	class:testing::TestCase
test_info_list_	test/gtest/gtest.h	/^  std::vector<TestInfo*> test_info_list_;$/;"	m	class:testing::TestCase
test_inheritance	python_bindings/pybind11/tests/test_class.py	/^def test_inheritance(msg):$/;"	f
test_inheritance_init	python_bindings/pybind11/tests/test_class.py	/^def test_inheritance_init(msg):$/;"	f
test_inherited_protocol	python_bindings/pybind11/tests/test_buffers.py	/^def test_inherited_protocol():$/;"	f
test_inherited_virtuals	python_bindings/pybind11/tests/test_virtual_functions.py	/^def test_inherited_virtuals():$/;"	f
test_init_factory_alias	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_init_factory_alias():$/;"	f
test_init_factory_basic	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_init_factory_basic():$/;"	f
test_init_factory_casting	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_init_factory_casting():$/;"	f
test_init_factory_dual	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_init_factory_dual():$/;"	f
test_init_factory_signature	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_init_factory_signature(msg):$/;"	f
test_initializer	python_bindings/pybind11/tests/pybind11_tests.cpp	/^test_initializer::test_initializer(Initializer init) {$/;"	f	class:test_initializer
test_initializer	python_bindings/pybind11/tests/pybind11_tests.cpp	/^test_initializer::test_initializer(const char *submodule_name, Initializer init) {$/;"	f	class:test_initializer
test_initializer	python_bindings/pybind11/tests/pybind11_tests.h	/^class test_initializer {$/;"	c
test_initializer_list	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_initializer_list():$/;"	f
test_instance	python_bindings/pybind11/tests/test_class.py	/^def test_instance(msg):$/;"	f
test_int	python_bindings/pybind11/tests/test_pytypes.py	/^def test_int(doc):$/;"	f
test_int_convert	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_int_convert():$/;"	f
test_int_long	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_int_long():$/;"	f
test_integer_casting	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_integer_casting():$/;"	f
test_internal_locals_differ	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_internal_locals_differ():$/;"	f
test_invalid_repr	python_bindings/pybind11/tests/test_exceptions.py	/^def test_invalid_repr():$/;"	f
test_invalid_self	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_invalid_self():$/;"	f
test_isinstance	python_bindings/pybind11/tests/test_class.py	/^def test_isinstance():$/;"	f
test_isinstance	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_isinstance():$/;"	f
test_issue1105	python_bindings/pybind11/tests/test_eigen.py	/^def test_issue1105():$/;"	f
test_issue2361	python_bindings/pybind11/tests/test_pytypes.py	/^def test_issue2361():$/;"	f
test_issue738	python_bindings/pybind11/tests/test_eigen.py	/^def test_issue738():$/;"	f
test_issue_1454	python_bindings/pybind11/tests/test_virtual_functions.py	/^def test_issue_1454():$/;"	f
test_issue_1561	python_bindings/pybind11/tests/test_stl.py	/^def test_issue_1561():$/;"	f
test_iterable	python_bindings/pybind11/tests/test_pytypes.py	/^def test_iterable(doc):$/;"	f
test_iterator	python_bindings/pybind11/tests/test_pytypes.py	/^def test_iterator(doc):$/;"	f
test_iterator	python_bindings/unit_tests.py	/^    def test_iterator(self):$/;"	m	class:TestIO
test_iterator_passthrough	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def test_iterator_passthrough():$/;"	f
test_iterator_rvp	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def test_iterator_rvp():$/;"	f
test_keep_alive_argument	python_bindings/pybind11/tests/test_call_policies.py	/^def test_keep_alive_argument(capture):$/;"	f
test_keep_alive_constructor	python_bindings/pybind11/tests/test_call_policies.py	/^def test_keep_alive_constructor(capture):$/;"	f
test_keep_alive_return_value	python_bindings/pybind11/tests/test_call_policies.py	/^def test_keep_alive_return_value(capture):$/;"	f
test_keyword_args_and_generalized_unpacking	python_bindings/pybind11/tests/test_callbacks.py	/^def test_keyword_args_and_generalized_unpacking():$/;"	f
test_keyword_only_args	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^def test_keyword_only_args(msg):$/;"	f
test_lacking_copy_ctor	python_bindings/pybind11/tests/test_copy_move.py	/^def test_lacking_copy_ctor():$/;"	f
test_lacking_move_ctor	python_bindings/pybind11/tests/test_copy_move.py	/^def test_lacking_move_ctor():$/;"	f
test_lambda_closure_cleanup	python_bindings/pybind11/tests/test_callbacks.py	/^def test_lambda_closure_cleanup():$/;"	f
test_large_holder	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_large_holder():$/;"	f
test_list	python_bindings/pybind11/tests/test_pytypes.py	/^def test_list(capture, doc):$/;"	f
test_list_slicing	python_bindings/pybind11/tests/test_pytypes.py	/^def test_list_slicing():$/;"	f
test_load_external	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_load_external():$/;"	f
test_local_bindings	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_local_bindings():$/;"	f
test_make_c_f_array	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_make_c_f_array():$/;"	f
test_make_empty_shaped_array	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_make_empty_shaped_array():$/;"	f
test_map	python_bindings/pybind11/tests/test_stl.py	/^def test_map(doc):$/;"	f
test_map_delitem	python_bindings/pybind11/tests/test_stl_binders.py	/^def test_map_delitem():$/;"	f
test_map_iterator	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def test_map_iterator():$/;"	f
test_map_string_double	python_bindings/pybind11/tests/test_stl_binders.py	/^def test_map_string_double():$/;"	f
test_map_string_double_const	python_bindings/pybind11/tests/test_stl_binders.py	/^def test_map_string_double_const():$/;"	f
test_memoryview	python_bindings/pybind11/tests/test_pytypes.py	/^def test_memoryview(method, args, fmt, expected_view):$/;"	f
test_memoryview_from_buffer_empty_shape	python_bindings/pybind11/tests/test_pytypes.py	/^def test_memoryview_from_buffer_empty_shape():$/;"	f
test_memoryview_from_memory	python_bindings/pybind11/tests/test_pytypes.py	/^def test_memoryview_from_memory():$/;"	f
test_memoryview_refcount	python_bindings/pybind11/tests/test_pytypes.py	/^def test_memoryview_refcount(method):$/;"	f
test_meta_factory	test/gtest/gtest.h	/^    const scoped_ptr<TestMetaFactoryBase<ParamType> > test_meta_factory;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_metaclass_override	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_metaclass_override():$/;"	f
test_method_vectorization	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^def test_method_vectorization():$/;"	f
test_methods_and_attributes	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_methods_and_attributes():$/;"	f
test_mi_base_return	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_mi_base_return():$/;"	f
test_mi_dynamic_attributes	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_mi_dynamic_attributes():$/;"	f
test_mi_static_properties	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_mi_static_properties():$/;"	f
test_mi_unaligned_base	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_mi_unaligned_base():$/;"	f
test_mismatched_holder	python_bindings/pybind11/tests/test_class.py	/^def test_mismatched_holder():$/;"	f
test_missing_header_message	python_bindings/pybind11/tests/test_stl.py	/^def test_missing_header_message():$/;"	f
test_mixed_args_and_kwargs	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^def test_mixed_args_and_kwargs(msg):$/;"	f
test_mixed_local_global	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_mixed_local_global():$/;"	f
test_mod	python_bindings/unit_tests.py	/^    def test_mod(self):$/;"	m	class:TestIndexFuncs
test_mode_format_methods	python_bindings/unit_tests.py	/^    def test_mode_format_methods(self):$/;"	m	class:TestFormatMethods
test_movable_object	python_bindings/pybind11/tests/test_callbacks.py	/^def test_movable_object():$/;"	f
test_move_and_copy_casts	python_bindings/pybind11/tests/test_copy_move.py	/^def test_move_and_copy_casts():$/;"	f
test_move_and_copy_load_optional	python_bindings/pybind11/tests/test_copy_move.py	/^def test_move_and_copy_load_optional():$/;"	f
test_move_and_copy_loads	python_bindings/pybind11/tests/test_copy_move.py	/^def test_move_and_copy_loads():$/;"	f
test_move_fallback	python_bindings/pybind11/tests/test_copy_move.py	/^def test_move_fallback():$/;"	f
test_move_only_holder	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_move_only_holder():$/;"	f
test_move_only_holder_with_addressof_operator	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_move_only_holder_with_addressof_operator():$/;"	f
test_move_out_container	python_bindings/pybind11/tests/test_stl.py	/^def test_move_out_container():$/;"	f
test_move_support	python_bindings/pybind11/tests/test_virtual_functions.py	/^def test_move_support():$/;"	f
test_multi_captured	python_bindings/pybind11/tests/test_iostream.py	/^def test_multi_captured(capfd):$/;"	f
test_multiple_inheritance	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_multiple_inheritance():$/;"	f
test_multiple_inheritance_cpp	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_cpp():$/;"	f
test_multiple_inheritance_mix1	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_mix1():$/;"	f
test_multiple_inheritance_mix2	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_mix2():$/;"	f
test_multiple_inheritance_python	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_python():$/;"	f
test_multiple_inheritance_python_many_bases	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_python_many_bases():$/;"	f
test_multiple_inheritance_virtbase	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_virtbase():$/;"	f
test_multiple_instances_with_same_pointer	python_bindings/pybind11/tests/test_class.py	/^def test_multiple_instances_with_same_pointer(capture):$/;"	f
test_mutate_data	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_mutate_data(arr):$/;"	f
test_mutate_readonly	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_mutate_readonly(arr):$/;"	f
test_mutator_descriptors	python_bindings/pybind11/tests/test_eigen.py	/^def test_mutator_descriptors():$/;"	f
test_named_arguments	python_bindings/pybind11/tests/test_eigen.py	/^def test_named_arguments():$/;"	f
test_named_arguments	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^def test_named_arguments(msg):$/;"	f
test_nano_timepoint	python_bindings/pybind11/tests/test_chrono.py	/^def test_nano_timepoint():$/;"	f
test_neg	python_bindings/unit_tests.py	/^    def test_neg(self):$/;"	m	class:TestIndexFuncs
test_negative_stride_from_python	python_bindings/pybind11/tests/test_eigen.py	/^def test_negative_stride_from_python(msg):$/;"	f
test_nested	python_bindings/pybind11/tests/test_operator_overloading.py	/^def test_nested():$/;"	f
test_nested_modules	python_bindings/pybind11/tests/test_modules.py	/^def test_nested_modules():$/;"	f
test_nested_throws	python_bindings/pybind11/tests/test_exceptions.py	/^def test_nested_throws(capture):$/;"	f
test_no_mixed_overloads	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_no_mixed_overloads():$/;"	f
test_no_placement_new	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_no_placement_new(capture):$/;"	f
test_noconvert_args	python_bindings/pybind11/tests/test_custom_type_casters.py	/^def test_noconvert_args(msg):$/;"	f
test_nocopy_wrapper	python_bindings/pybind11/tests/test_eigen.py	/^def test_nocopy_wrapper():$/;"	f
test_non_converting_constructors	python_bindings/pybind11/tests/test_pytypes.py	/^def test_non_converting_constructors():$/;"	f
test_non_final_final	python_bindings/pybind11/tests/test_class.py	/^def test_non_final_final():$/;"	f
test_noncopyable_containers	python_bindings/pybind11/tests/test_stl_binders.py	/^def test_noncopyable_containers():$/;"	f
test_none	python_bindings/pybind11/tests/test_pytypes.py	/^def test_none(capture, doc):$/;"	f
test_none_deferred	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_none_deferred():$/;"	f
test_nonlocal_failure	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_nonlocal_failure():$/;"	f
test_nonunit_stride_from_python	python_bindings/pybind11/tests/test_eigen.py	/^def test_nonunit_stride_from_python():$/;"	f
test_nonunit_stride_to_python	python_bindings/pybind11/tests/test_eigen.py	/^def test_nonunit_stride_to_python():$/;"	f
test_not_captured	python_bindings/pybind11/tests/test_iostream.py	/^def test_not_captured(capfd):$/;"	f
test_number_protocol	python_bindings/pybind11/tests/test_pytypes.py	/^def test_number_protocol():$/;"	f
test_numpy_bool	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_numpy_bool():$/;"	f
test_numpy_int_convert	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_numpy_int_convert():$/;"	f
test_numpy_ref_mutators	python_bindings/pybind11/tests/test_eigen.py	/^def test_numpy_ref_mutators():$/;"	f
test_numpy_view	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_numpy_view(capture):$/;"	f
test_operator_new_delete	python_bindings/pybind11/tests/test_class.py	/^def test_operator_new_delete(capture):$/;"	f
test_operator_overloading	python_bindings/pybind11/tests/test_operator_overloading.py	/^def test_operator_overloading():$/;"	f
test_operators_notimplemented	python_bindings/pybind11/tests/test_operator_overloading.py	/^def test_operators_notimplemented():$/;"	f
test_optional	python_bindings/pybind11/tests/test_stl.py	/^def test_optional():$/;"	f
test_overload_ordering	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_overload_ordering():$/;"	f
test_overload_resolution	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_overload_resolution(msg):$/;"	f
test_override	python_bindings/pybind11/tests/test_virtual_functions.py	/^def test_override(capture, msg):$/;"	f
test_override_ref	python_bindings/pybind11/tests/test_virtual_functions.py	/^def test_override_ref():$/;"	f
test_override_static	python_bindings/pybind11/tests/test_class.py	/^def test_override_static():$/;"	f
test_overriding_eq_reset_hash	python_bindings/pybind11/tests/test_operator_overloading.py	/^def test_overriding_eq_reset_hash():$/;"	f
test_parallel_sched	python_bindings/unit_tests.py	/^    def test_parallel_sched(self):$/;"	m	class:TestSchedulingCommands
test_part_results	test/gtest/gtest-all.cc	/^  static const std::vector<testing::TestPartResult>& test_part_results($/;"	f	class:testing::internal::TestResultAccessor
test_part_results	test/gtest/gtest.h	/^  const std::vector<TestPartResult>& test_part_results() const {$/;"	f	class:testing::TestResult
test_part_results_	test/gtest/gtest.h	/^  std::vector<TestPartResult> test_part_results_;$/;"	m	class:testing::TestResult
test_partially_fixed	python_bindings/pybind11/tests/test_eigen.py	/^def test_partially_fixed():$/;"	f
test_pass_readonly_array	python_bindings/pybind11/tests/test_eigen.py	/^def test_pass_readonly_array():$/;"	f
test_passthrough_arguments	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^def test_passthrough_arguments(doc):$/;"	f
test_pointer_to_member_fn	python_bindings/pybind11/tests/test_buffers.py	/^def test_pointer_to_member_fn():$/;"	f
test_pointers	python_bindings/pybind11/tests/test_opaque_types.py	/^def test_pointers(msg):$/;"	f
test_positional_only_args	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^def test_positional_only_args(msg):$/;"	f
test_print	python_bindings/pybind11/tests/test_pytypes.py	/^def test_print(capture):$/;"	f
test_private_op_new	python_bindings/pybind11/tests/test_copy_move.py	/^def test_private_op_new():$/;"	f
test_properites_mutex_	test/gtest/gtest.h	/^  internal::Mutex test_properites_mutex_;$/;"	m	class:testing::TestResult
test_properties	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_properties():$/;"	f
test_properties	test/gtest/gtest.h	/^  const std::vector<TestProperty>& test_properties() const {$/;"	f	class:testing::TestResult
test_properties_	test/gtest/gtest.h	/^  std::vector<TestProperty> test_properties_;$/;"	m	class:testing::TestResult
test_property_count	test/gtest/gtest-all.cc	/^int TestResult::test_property_count() const {$/;"	f	class:testing::TestResult
test_property_return_value_policies	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_property_return_value_policies(access):$/;"	f
test_property_rvalue_policy	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_property_rvalue_policy():$/;"	f
test_pybind11_str_raw_str	python_bindings/pybind11/tests/test_pytypes.py	/^def test_pybind11_str_raw_str():$/;"	f
test_pydoc	python_bindings/pybind11/tests/test_modules.py	/^def test_pydoc():$/;"	f
test_python_alreadyset_in_destructor	python_bindings/pybind11/tests/test_exceptions.py	/^def test_python_alreadyset_in_destructor(monkeypatch, capsys):$/;"	f
test_python_call_in_catch	python_bindings/pybind11/tests/test_exceptions.py	/^def test_python_call_in_catch():$/;"	f
test_python_iterator_in_cpp	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def test_python_iterator_in_cpp():$/;"	f
test_python_to_cpp_to_python_from_process	python_bindings/pybind11/tests/test_gil_scoped.py	/^def test_python_to_cpp_to_python_from_process():$/;"	f
test_python_to_cpp_to_python_from_thread	python_bindings/pybind11/tests/test_gil_scoped.py	/^def test_python_to_cpp_to_python_from_thread():$/;"	f
test_python_to_cpp_to_python_from_thread_multiple_parallel	python_bindings/pybind11/tests/test_gil_scoped.py	/^def test_python_to_cpp_to_python_from_thread_multiple_parallel():$/;"	f
test_python_to_cpp_to_python_from_thread_multiple_sequential	python_bindings/pybind11/tests/test_gil_scoped.py	/^def test_python_to_cpp_to_python_from_thread_multiple_sequential():$/;"	f
test_qualname	python_bindings/pybind11/tests/test_class.py	/^def test_qualname(doc):$/;"	f
test_random_access_iterator	python_bindings/pybind11/tests/test_sequences_and_iterators.cpp	/^py::list test_random_access_iterator(PythonType x) {$/;"	f
test_readonly_buffer	python_bindings/pybind11/tests/test_buffers.py	/^def test_readonly_buffer():$/;"	f
test_reallocation_a	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_reallocation_a(capture, msg):$/;"	f
test_reallocation_b	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_reallocation_b(capture, msg):$/;"	f
test_reallocation_c	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_reallocation_c(capture, msg):$/;"	f
test_reallocation_d	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_reallocation_d(capture, msg):$/;"	f
test_reallocation_e	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_reallocation_e(capture, msg):$/;"	f
test_reallocation_f	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_reallocation_f(capture, msg):$/;"	f
test_reallocation_g	python_bindings/pybind11/tests/test_factory_constructors.py	/^def test_reallocation_g(capture, msg):$/;"	f
test_recarray	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_recarray(simple_dtype, packed_dtype):$/;"	f
test_recursive_casting	python_bindings/pybind11/tests/test_stl.py	/^def test_recursive_casting():$/;"	f
test_redirect	python_bindings/pybind11/tests/test_iostream.py	/^def test_redirect(capfd):$/;"	f
test_redirect_both	python_bindings/pybind11/tests/test_iostream.py	/^def test_redirect_both(capfd):$/;"	f
test_redirect_err	python_bindings/pybind11/tests/test_iostream.py	/^def test_redirect_err(capfd):$/;"	f
test_reduce	python_bindings/unit_tests.py	/^    def test_reduce(self):$/;"	m	class:TestIndexFuncs
test_reentrant_implicit_conversion_failure	python_bindings/pybind11/tests/test_class.py	/^def test_reentrant_implicit_conversion_failure(msg):$/;"	f
test_ref_qualified	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_ref_qualified():$/;"	f
test_reference_internal	python_bindings/pybind11/tests/test_modules.py	/^def test_reference_internal():$/;"	f
test_reference_wrapper	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_reference_wrapper():$/;"	f
test_register_dtype	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_register_dtype():$/;"	f
test_register_duplicate_class	python_bindings/pybind11/tests/test_class.py	/^def test_register_duplicate_class():$/;"	f
test_repr	python_bindings/pybind11/tests/test_class.py	/^def test_repr():$/;"	f
test_reshaped_array	python_bindings/unit_tests.py	/^    def test_reshaped_array(self):$/;"	m	class:TestTensorCreation
test_return_none	python_bindings/pybind11/tests/test_call_policies.py	/^def test_return_none(capture):$/;"	f
test_roundtrip	python_bindings/pybind11/tests/test_pickling.py	/^def test_roundtrip(cls_name):$/;"	f
test_roundtrip_with_dict	python_bindings/pybind11/tests/test_pickling.py	/^def test_roundtrip_with_dict(cls_name):$/;"	f
test_scalar_conversion	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_scalar_conversion():$/;"	f
test_scoped_enum	python_bindings/pybind11/tests/test_enum.py	/^def test_scoped_enum():$/;"	f
test_selective_readonly_buffer	python_bindings/pybind11/tests/test_buffers.py	/^def test_selective_readonly_buffer():$/;"	f
test_sequence	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def test_sequence():$/;"	f
test_sequence_length	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def test_sequence_length():$/;"	f
test_series_captured	python_bindings/pybind11/tests/test_iostream.py	/^def test_series_captured(capture):$/;"	f
test_set	python_bindings/pybind11/tests/test_pytypes.py	/^def test_set(capture, doc):$/;"	f
test_set	python_bindings/pybind11/tests/test_stl.py	/^def test_set(doc):$/;"	f
test_shared_ptr_and_references	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_shared_ptr_and_references():$/;"	f
test_shared_ptr_from_this_and_references	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_shared_ptr_from_this_and_references():$/;"	f
test_shared_ptr_gc	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_shared_ptr_gc():$/;"	f
test_signature	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_signature(doc):$/;"	f
test_signatures	python_bindings/pybind11/tests/test_kwargs_and_defaults.py	/^def test_signatures():$/;"	f
test_simple_setup_py	python_bindings/pybind11/tests/extra_setuptools/test_setuphelper.py	/^def test_simple_setup_py(monkeypatch, tmpdir, parallel, std):$/;"	f
test_simple_string	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_simple_string():$/;"	f
test_single_char_arguments	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_single_char_arguments():$/;"	f
test_sliceable	python_bindings/pybind11/tests/test_sequences_and_iterators.py	/^def test_sliceable():$/;"	f
test_smart_ptr	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_smart_ptr(capture):$/;"	f
test_smart_ptr_from_default	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_smart_ptr_from_default():$/;"	f
test_smart_ptr_refcounting	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_smart_ptr_refcounting():$/;"	f
test_sparse	python_bindings/pybind11/tests/test_eigen.py	/^def test_sparse():$/;"	f
test_sparse_signature	python_bindings/pybind11/tests/test_eigen.py	/^def test_sparse_signature(doc):$/;"	f
test_special_matrix_objects	python_bindings/pybind11/tests/test_eigen.py	/^def test_special_matrix_objects():$/;"	f
test_static_cls	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_static_cls():$/;"	f
test_static_properties	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_static_properties():$/;"	f
test_std_exception	python_bindings/pybind11/tests/test_exceptions.py	/^def test_std_exception(msg):$/;"	f
test_stl_bind_global	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_stl_bind_global():$/;"	f
test_stl_bind_local	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_stl_bind_local():$/;"	f
test_stl_caster_vs_stl_bind	python_bindings/pybind11/tests/test_local_bindings.py	/^def test_stl_caster_vs_stl_bind(msg):$/;"	f
test_stl_ownership	python_bindings/pybind11/tests/test_stl.py	/^def test_stl_ownership():$/;"	f
test_stl_pass_by_pointer	python_bindings/pybind11/tests/test_stl.py	/^def test_stl_pass_by_pointer(msg):$/;"	f
test_str	python_bindings/pybind11/tests/test_pytypes.py	/^def test_str(doc):$/;"	f
test_str_issue	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_str_issue(msg):$/;"	f
test_str_leak	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_str_leak():$/;"	f
test_string_array	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_string_array():$/;"	f
test_string_list	python_bindings/pybind11/tests/test_opaque_types.py	/^def test_string_list():$/;"	f
test_string_view	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_string_view(capture):$/;"	f
test_tensor_from_numpy	python_bindings/unit_tests.py	/^    def test_tensor_from_numpy(self):$/;"	m	class:TestTensorCreation
test_test_memoryview_from_buffer_invalid_strides	python_bindings/pybind11/tests/test_pytypes.py	/^def test_test_memoryview_from_buffer_invalid_strides():$/;"	f
test_test_memoryview_from_buffer_nullptr	python_bindings/pybind11/tests/test_pytypes.py	/^def test_test_memoryview_from_buffer_nullptr():$/;"	f
test_threading	python_bindings/pybind11/tests/test_iostream.py	/^def test_threading():$/;"	f
test_to_and_from_np_and_sp	python_bindings/unit_tests.py	/^    def test_to_and_from_np_and_sp(self):$/;"	m	class:TestIO
test_to_python	python_bindings/pybind11/tests/test_buffers.py	/^def test_to_python():$/;"	f
test_to_run_count	test/gtest/gtest-all.cc	/^int TestCase::test_to_run_count() const {$/;"	f	class:testing::TestCase
test_to_run_count	test/gtest/gtest-all.cc	/^int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }$/;"	f	class:testing::UnitTest
test_to_run_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::test_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
test_trivial_broadcasting	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^def test_trivial_broadcasting():$/;"	f
test_tuple	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_tuple(doc):$/;"	f
test_type	python_bindings/pybind11/tests/test_class.py	/^def test_type():$/;"	f
test_type_of_classic	python_bindings/pybind11/tests/test_class.py	/^def test_type_of_classic():$/;"	f
test_type_of_py	python_bindings/pybind11/tests/test_class.py	/^def test_type_of_py():$/;"	f
test_type_of_py_nodelete	python_bindings/pybind11/tests/test_class.py	/^def test_type_of_py_nodelete():$/;"	f
test_type_selection	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^def test_type_selection():$/;"	f
test_unicode_conversion	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_unicode_conversion():$/;"	f
test_union	python_bindings/pybind11/tests/test_union.py	/^def test_union():$/;"	f
test_unions	python_bindings/pybind11/tests/test_opaque_types.py	/^def test_unions():$/;"	f
test_unique_deleter	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_unique_deleter():$/;"	f
test_unique_nodelete	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_unique_nodelete():$/;"	f
test_unique_nodelete4a	python_bindings/pybind11/tests/test_smart_ptr.py	/^def test_unique_nodelete4a():$/;"	f
test_unregistered_base_implementations	python_bindings/pybind11/tests/test_methods_and_attributes.py	/^def test_unregistered_base_implementations():$/;"	f
test_unscoped_enum	python_bindings/pybind11/tests/test_enum.py	/^def test_unscoped_enum():$/;"	f
test_valarray	python_bindings/pybind11/tests/test_stl.py	/^def test_valarray(doc):$/;"	f
test_values_correctly_set	python_bindings/unit_tests.py	/^    def test_values_correctly_set(self):$/;"	m	class:TestTensorCreation
test_variant	python_bindings/pybind11/tests/test_stl.py	/^def test_variant(doc):$/;"	f
test_vec_of_reference_wrapper	python_bindings/pybind11/tests/test_stl.py	/^def test_vec_of_reference_wrapper():$/;"	f
test_vector	python_bindings/pybind11/tests/test_stl.py	/^def test_vector(doc):$/;"	f
test_vector_bool	python_bindings/pybind11/tests/test_stl_binders.py	/^def test_vector_bool():$/;"	f
test_vector_buffer	python_bindings/pybind11/tests/test_stl_binders.py	/^def test_vector_buffer():$/;"	f
test_vector_buffer_numpy	python_bindings/pybind11/tests/test_stl_binders.py	/^def test_vector_buffer_numpy():$/;"	f
test_vector_custom	python_bindings/pybind11/tests/test_stl_binders.py	/^def test_vector_custom():$/;"	f
test_vector_int	python_bindings/pybind11/tests/test_stl_binders.py	/^def test_vector_int():$/;"	f
test_vectorize	python_bindings/pybind11/tests/test_numpy_dtypes.py	/^def test_vectorize():$/;"	f
test_vectorize	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^def test_vectorize(capture):$/;"	f
test_vectorized_noreturn	python_bindings/pybind11/tests/test_numpy_vectorize.py	/^def test_vectorized_noreturn():$/;"	f
test_void_caster	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_void_caster():$/;"	f
test_void_caster_2	python_bindings/pybind11/tests/test_builtin_casters.py	/^def test_void_caster_2():$/;"	f
test_wrap	python_bindings/pybind11/tests/test_numpy_array.py	/^def test_wrap():$/;"	f
test_write_then_read_compressed	python_bindings/unit_tests.py	/^    def test_write_then_read_compressed(self):$/;"	m	class:TestIO
test_write_then_read_dense	python_bindings/unit_tests.py	/^    def test_write_then_read_dense(self):$/;"	m	class:TestIO
testing	test/gtest/gtest-all.cc	/^namespace testing {$/;"	n	file:
testing	test/gtest/gtest.h	/^namespace testing {$/;"	n
testing_internal	test/gtest/gtest.h	/^namespace testing_internal {$/;"	n
tests	test/tests-merge_lattice.cpp	/^namespace tests {$/;"	n	file:
tests_	test/gtest/gtest.h	/^  TestInfoContainer tests_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
tests_build_global_wheel	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^def tests_build_global_wheel(monkeypatch, tmpdir):$/;"	f
tests_build_wheel	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^def tests_build_wheel(monkeypatch, tmpdir):$/;"	f
texinfo_documents	python_bindings/pybind11/docs/conf.py	/^texinfo_documents = [$/;"	v
text	include/taco/ir/ir.h	/^  std::string text;$/;"	m	struct:taco::ir::Comment
text	python_bindings/pybind11/include/pybind11/detail/descr.h	/^    char text[N + 1];$/;"	m	struct:descr
textwrap	python_bindings/pybind11/tests/conftest.py	/^import textwrap$/;"	i
the	python_bindings/pybind11/docs/conf.py	/^if not on_rtd:  # only import and set the theme if we're building docs locally$/;"	i
the_answer	python_bindings/pybind11/tests/test_embed/test_interpreter.py	/^    def the_answer(self):$/;"	m	class:DerivedWidget
the_message	python_bindings/pybind11/tests/test_embed/test_interpreter.cpp	/^    std::string the_message() const { return message; }$/;"	f	class:Widget
theme	python_bindings/pybind11/docs/conf.py	/^if not on_rtd:  # only import and set the theme if we're building docs locally$/;"	i
then	include/taco/ir/ir.h	/^  Stmt then;$/;"	m	struct:taco::ir::IfThenElse
threadFors	src/codegen/codegen_cuda.cpp	/^  vector<Stmt> threadFors; \/\/ contents is device function$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
threadIDVars	src/codegen/codegen_cuda.cpp	/^  vector<pair<string, Expr>> threadIDVars;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
thread_	test/gtest/gtest.h	/^  AutoHandle thread_;$/;"	m	class:std::tr1::ThreadWithParamBase
thread_	test/gtest/gtest.h	/^  pthread_t thread_;  \/\/ The native thread object.$/;"	m	class:std::tr1::ThreadWithParam
thread_can_start_	test/gtest/gtest-all.cc	/^    Notification* thread_can_start_;$/;"	m	struct:testing::internal::__anon6::ThreadWithParamSupport::ThreadMainParam	file:
thread_can_start_	test/gtest/gtest.h	/^  Notification* const thread_can_start_;$/;"	m	class:std::tr1::ThreadWithParam
thread_map_mutex_	test/gtest/gtest-all.cc	/^  static Mutex thread_map_mutex_;$/;"	m	class:testing::internal::ThreadLocalRegistryImpl	file:
threading	python_bindings/pybind11/pybind11/setup_helpers.py	/^import threading$/;"	i
threading	python_bindings/pybind11/tests/test_gil_scoped.py	/^import threading$/;"	i
throw_myex	python_bindings/pybind11/tests/test_exceptions.py	/^    def throw_myex():$/;"	f	function:test_nested_throws
throw_myex5	python_bindings/pybind11/tests/test_exceptions.py	/^    def throw_myex5():$/;"	f	function:test_nested_throws
throw_on_failure_	test/gtest/gtest-all.cc	/^  bool throw_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
time	python_bindings/pybind11/docs/benchmark.py	/^import time$/;"	i
timerGroup	include/taco/util/timers.h	/^  bool timerGroup;$/;"	m	class:taco::util::LapTimer
times	include/taco/util/timers.h	/^  vector<double> times;$/;"	m	class:taco::util::Timer
times_hundred	python_bindings/pybind11/tests/test_stl_binders.cpp	/^template <class NestMap> NestMap *times_hundred(int n) {$/;"	f
times_ten	python_bindings/pybind11/tests/test_stl_binders.cpp	/^template <class Map> Map *times_ten(int n) {$/;"	f
timestamp_m	python_bindings/pybind11/tests/test_chrono.cpp	/^    time_point_m timestamp_m;$/;"	m	struct:different_resolutions	file:
timestamp_ms	python_bindings/pybind11/tests/test_chrono.cpp	/^    time_point_ms timestamp_ms;$/;"	m	struct:different_resolutions	file:
timestamp_s	python_bindings/pybind11/tests/test_chrono.cpp	/^    time_point_s timestamp_s;$/;"	m	struct:different_resolutions	file:
timestamp_us	python_bindings/pybind11/tests/test_chrono.cpp	/^    time_point_us timestamp_us;$/;"	m	struct:different_resolutions	file:
timingName	include/taco/util/timers.h	/^  string timingName;$/;"	m	class:taco::util::LapTimer
tinfo	python_bindings/pybind11/include/pybind11/cast.h	/^    const type_vec &tinfo;$/;"	m	struct:values_and_holders
tmp_chdir	python_bindings/pybind11/pybind11/setup_helpers.py	/^def tmp_chdir():$/;"	f
tmp_chdir_lock	python_bindings/pybind11/pybind11/setup_helpers.py	/^tmp_chdir_lock = threading.Lock()$/;"	v
tmpdir	include/taco/codegen/module.h	/^  std::string tmpdir;$/;"	m	class:taco::ir::Module
tns	include/taco/tensor.h	/^  tns,$/;"	m	class:taco::FileType
to	include/taco/index_notation/index_notation_nodes.h	/^inline const E* to(const IndexExprNode* e) {$/;"	f	namespace:taco
to	include/taco/index_notation/index_notation_nodes.h	/^inline const SubType* to(const IndexStmtNode* s) {$/;"	f	namespace:taco
to	include/taco/index_notation/iteration_algebra.h	/^inline const E* to(const IterationAlgebraNode* e) {$/;"	f	namespace:taco
to	include/taco/index_notation/property_pointers.h	/^inline const P* to(const PropertyPtr* p) {$/;"	f	namespace:taco
to	include/taco/ir/ir.h	/^inline const E* to(Expr e) {$/;"	f	namespace:taco::ir
to	include/taco/ir/ir.h	/^inline const S* to(Stmt s) {$/;"	f	namespace:taco::ir
to	src/index_notation/index_notation.cpp	/^template <> Access to<Access>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Add to<Add>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Assignment to<Assignment>(IndexStmt s) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Call to<Call>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> CallIntrinsic to<CallIntrinsic>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Cast to<Cast>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Div to<Div>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Forall to<Forall>(IndexStmt s) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> IndexVar to<IndexVar>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Literal to<Literal>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Mul to<Mul>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Multi to<Multi>(IndexStmt s) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Neg to<Neg>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Reduction to<Reduction>(IndexExpr s) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Sequence to<Sequence>(IndexStmt s) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Sqrt to<Sqrt>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Sub to<Sub>(IndexExpr e) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> SuchThat to<SuchThat>(IndexStmt s) {$/;"	f	namespace:taco
to	src/index_notation/index_notation.cpp	/^template <> Where to<Where>(IndexStmt s) {$/;"	f	namespace:taco
to	src/index_notation/iteration_algebra.cpp	/^template <> Complement to<Complement>(IterationAlgebra alg) {$/;"	f	namespace:taco
to	src/index_notation/iteration_algebra.cpp	/^template <> Intersect to<Intersect>(IterationAlgebra alg) {$/;"	f	namespace:taco
to	src/index_notation/iteration_algebra.cpp	/^template <> Region to<Region>(IterationAlgebra alg) {$/;"	f	namespace:taco
to	src/index_notation/iteration_algebra.cpp	/^template <> Union to<Union>(IterationAlgebra alg) {$/;"	f	namespace:taco
to	src/index_notation/properties.cpp	/^template<> Annihilator to<Annihilator>(const Property& p) {$/;"	f	namespace:taco
to	src/index_notation/properties.cpp	/^template<> Associative to<Associative>(const Property& p) {$/;"	f	namespace:taco
to	src/index_notation/properties.cpp	/^template<> Commutative to<Commutative>(const Property& p) {$/;"	f	namespace:taco
to	src/index_notation/properties.cpp	/^template<> Identity to<Identity>(const Property& p) {$/;"	f	namespace:taco
toSet	include/taco/util/collections.h	/^std::set<T> toSet(const std::vector<T>& collection) {$/;"	f	namespace:taco::util
toSpMatrix	python_bindings/src/pyTensor.cpp	/^static py::tuple toSpMatrix(Tensor<T> &tensor, bool tocsr) {$/;"	f	namespace:taco::pythonBindings
toString	include/taco/util/strings.h	/^toString(const T &val) {$/;"	f	namespace:taco::util
toString	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    std::string toString() {$/;"	f	class:ExampleMandA
toString	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    std::string toString() const { return "[" + std::to_string(x) + ", " + std::to_string(y) + "]"; }$/;"	f	class:Vector2
toVector	include/taco/tensor.h	/^      std::vector<T> toVector() const {$/;"	f	class:taco::TensorBase::const_iterator::Coordinates
to_array	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def to_array(self):$/;"	m	class:tensor
to_array	python_bindings/pytaco/pytensor/taco_tensor.py	/^def to_array(t):$/;"	f
to_bytes	python_bindings/pybind11/tests/test_builtin_casters.py	/^    def to_bytes(s):$/;"	f	function:test_bytes_to_string
to_dense	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def to_dense(self):$/;"	m	class:tensor
to_sp_csc	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def to_sp_csc(self):$/;"	m	class:tensor
to_sp_csc	python_bindings/pytaco/pytensor/taco_tensor.py	/^def to_sp_csc(t):$/;"	f
to_sp_csr	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def to_sp_csr(self):$/;"	m	class:tensor
to_sp_csr	python_bindings/pytaco/pytensor/taco_tensor.py	/^def to_sp_csr(t):$/;"	f
to_src	python_bindings/pybind11/setup.py	/^to_src = ($/;"	v
toarray	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def toarray(self):$/;"	m	class:tensor
todo_include_todos	python_bindings/pybind11/docs/conf.py	/^todo_include_todos = False$/;"	v
tokenString	src/parser/lexer.cpp	/^std::string Lexer::tokenString(const Token& token) {$/;"	f	class:taco::parser::Lexer
tolower	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  undef tolower$/;"	d
toobig_message	python_bindings/pybind11/tests/test_builtin_casters.py	/^    def toobig_message(r):$/;"	f	function:test_single_char_arguments
topologicallySort	src/index_notation/transformations.cpp	/^topologicallySort(map<IndexVar,set<IndexVar>> hardDeps,$/;"	f	namespace:taco
total_part_count	test/gtest/gtest-all.cc	/^int TestResult::total_part_count() const {$/;"	f	class:testing::TestResult
total_test_case_count	test/gtest/gtest-all.cc	/^int UnitTest::total_test_case_count() const {$/;"	f	class:testing::UnitTest
total_test_case_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::total_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
total_test_count	test/gtest/gtest-all.cc	/^int TestCase::total_test_count() const {$/;"	f	class:testing::TestCase
total_test_count	test/gtest/gtest-all.cc	/^int UnitTest::total_test_count() const { return impl()->total_test_count(); }$/;"	f	class:testing::UnitTest
total_test_count	test/gtest/gtest-all.cc	/^int UnitTestImpl::total_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
toupper	python_bindings/pybind11/include/pybind11/detail/common.h	/^#  undef toupper$/;"	d
tr1	test/gtest/gtest.h	/^namespace tr1 {$/;"	n	namespace:std
trace	python_bindings/pybind11/include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope
trace	python_bindings/pybind11/include/pybind11/pytypes.h	/^    const object& trace() const { return m_trace; }$/;"	f	class:error_already_set
track_copy_assigned	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_copy_assigned(T *, Values &&...values) {$/;"	f
track_copy_created	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T> void track_copy_created(T *inst) { ConstructorStats::get<T>().copy_created(inst); }$/;"	f
track_created	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_created(T *inst, Values &&...values) {$/;"	f
track_default_created	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_default_created(T *inst, Values &&...values) {$/;"	f
track_destroyed	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_destroyed(T *inst) {$/;"	f
track_move_assigned	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_move_assigned(T *, Values &&...values) {$/;"	f
track_move_created	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T> void track_move_created(T *inst) { ConstructorStats::get<T>().move_created(inst); }$/;"	f
track_values	python_bindings/pybind11/tests/constructor_stats.h	/^template <class T, typename... Values> void track_values(T *, Values &&...values) {$/;"	f
transformation	include/taco/index_notation/transformations.h	/^  std::shared_ptr<const TransformationInterface> transformation;$/;"	m	class:taco::Transformation
transformation	test/tests-transformation.cpp	/^  Transformation transformation;$/;"	m	struct:test::PreconditionTest	file:
transformation	test/tests-transformation.cpp	/^  Transformation transformation;$/;"	m	struct:test::TransformationTest	file:
translate_exception	python_bindings/pybind11/include/pybind11/detail/internals.h	/^inline void translate_exception(std::exception_ptr p) {$/;"	f
translate_local_exception	python_bindings/pybind11/include/pybind11/detail/internals.h	/^inline void translate_local_exception(std::exception_ptr p) {$/;"	f
transpose	include/taco/tensor.h	/^Tensor<CType> Tensor<CType>::transpose(std::string name, std::vector<int> newModeOrdering) const {$/;"	f	class:taco::Tensor
transpose	include/taco/tensor.h	/^Tensor<CType> Tensor<CType>::transpose(std::string name, std::vector<int> newModeOrdering, Format format) const {$/;"	f	class:taco::Tensor
transpose	include/taco/tensor.h	/^Tensor<CType> Tensor<CType>::transpose(std::vector<int> newModeOrdering) const {$/;"	f	class:taco::Tensor
transpose	include/taco/tensor.h	/^Tensor<CType> Tensor<CType>::transpose(std::vector<int> newModeOrdering, Format format) const {$/;"	f	class:taco::Tensor
transpose	python_bindings/pytaco/pytensor/taco_tensor.py	/^    def transpose(self, new_ordering, new_format=None, name=None):$/;"	m	class:tensor
traverse_offset_bases	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline void traverse_offset_bases(void *valueptr, const detail::type_info *tinfo, instance *self,$/;"	f
true_type	test/gtest/gtest.h	/^typedef bool_constant<true> true_type;$/;"	t	namespace:std::tr1
try_direct_conversions	python_bindings/pybind11/include/pybind11/cast.h	/^    bool try_direct_conversions(handle src) {$/;"	f	class:type_caster_generic
try_direct_conversions	python_bindings/pybind11/include/pybind11/cast.h	/^    static bool try_direct_conversions(handle) { return false; }$/;"	f	struct:copyable_holder_caster
try_implicit_casts	python_bindings/pybind11/include/pybind11/cast.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	class:type_caster_generic
try_implicit_casts	python_bindings/pybind11/include/pybind11/cast.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster
try_implicit_casts	python_bindings/pybind11/include/pybind11/cast.h	/^    bool try_implicit_casts(handle, bool) { return false; }$/;"	f	struct:copyable_holder_caster
try_load_foreign_module_local	python_bindings/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE bool try_load_foreign_module_local(handle src) {$/;"	f	class:type_caster_generic
try_sparse_output_permutation	test/tests-format-mm-permute.cpp	/^bool try_sparse_output_permutation(int A_type, int B_type, int C_type, Tensor<double> &expected) {$/;"	f
tstate	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PyThreadState *tstate = nullptr;$/;"	m	class:gil_scoped_acquire
tstate	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PyThreadState *tstate;$/;"	m	class:gil_scoped_release
ttx	include/taco/tensor.h	/^  ttx,$/;"	m	class:taco::FileType
tuple	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit tuple(size_t size = 0) : object(PyTuple_New((ssize_t) size), stolen_t{}) {$/;"	f	class:tuple
tuple	python_bindings/pybind11/include/pybind11/pytypes.h	/^class tuple : public object {$/;"	c
tuple	test/gtest/gtest.h	/^  tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_(), f8_(),$/;"	f	class:std::tr1::tuple
tuple	test/gtest/gtest.h	/^  tuple() {}$/;"	f	class:std::tr1::tuple
tuple	test/gtest/gtest.h	/^  tuple(const tuple& \/* t *\/)  {}$/;"	f	class:std::tr1::tuple
tuple	test/gtest/gtest.h	/^  tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_),$/;"	f	class:std::tr1::tuple
tuple	test/gtest/gtest.h	/^class tuple {$/;"	c	namespace:std::tr1
tuple	test/gtest/gtest.h	/^class tuple<> {$/;"	c	namespace:std::tr1
tuple_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <template<typename...> class Tuple, typename... Ts> class tuple_caster {$/;"	c
tuple_element	test/gtest/gtest.h	/^  struct tuple_element : ::std::tr1::tuple_element<I, Tuple> {};$/;"	s	struct:testing::internal::TuplePolicy
tuple_element	test/gtest/gtest.h	/^  struct tuple_element : ::std::tuple_element<I, Tuple> {};$/;"	s	struct:testing::internal::TuplePolicy
tuple_element	test/gtest/gtest.h	/^struct tuple_element {$/;"	s	namespace:std::tr1
tuple_item	python_bindings/pybind11/include/pybind11/pytypes.h	/^struct tuple_item {$/;"	s
tuple_size	test/gtest/gtest.h	/^  static const size_t tuple_size = ::std::tr1::tuple_size<Tuple>::value;$/;"	m	struct:testing::internal::TuplePolicy
tuple_size	test/gtest/gtest.h	/^  static const size_t tuple_size = ::std::tuple_size<Tuple>::value;$/;"	m	struct:testing::internal::TuplePolicy
tuple_size	test/gtest/gtest.h	/^const size_t TuplePolicy< ::std::tuple<Types...> >::tuple_size;$/;"	m	class:testing::internal::TuplePolicy
tuple_size	test/gtest/gtest.h	/^const size_t TuplePolicy<TupleT>::tuple_size;$/;"	m	class:testing::internal::TuplePolicy
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_0_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_1_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_2_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_3_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_4_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_5_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_6_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_7_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_8_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	test/gtest/gtest.h	/^struct tuple_size<GTEST_9_TUPLE_(T) > {$/;"	s	namespace:std::tr1
type	include/taco/index_notation/index_notation_nodes_abstract.h	/^  Type type;$/;"	m	struct:taco::IndexStmtNode
type	include/taco/ir/ir.h	/^  Datatype type = Float();$/;"	m	struct:taco::ir::BaseExprNode
type	include/taco/ir/ir.h	/^  Datatype type() const {$/;"	f	class:taco::ir::Expr
type	include/taco/storage/typed_index.h	/^  Datatype type;$/;"	m	class:taco::TypedIndexPtr
type	include/taco/storage/typed_value.h	/^  Datatype type;$/;"	m	class:taco::TypedComponentPtr
type	include/taco/storage/typed_vector.h	/^    Datatype type;$/;"	m	class:taco::TypedVector::const_iterator
type	include/taco/storage/typed_vector.h	/^    Datatype type;$/;"	m	class:taco::TypedVector::iterator
type	include/taco/storage/typed_vector.h	/^  Datatype type;$/;"	m	class:taco::TypedVector
type	include/taco/type.h	/^template<> inline Datatype type<bool>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<char>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<double>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<float>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<int8_t>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<int>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<long long>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<long>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<short>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<std::complex<double>>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<std::complex<float>>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<unsigned char>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<unsigned int>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<unsigned long long>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<unsigned long>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<> inline Datatype type<unsigned short>() {$/;"	f	namespace:taco
type	include/taco/type.h	/^template<typename T> inline Datatype type() {$/;"	f	namespace:taco
type	include/taco/util/variadic.h	/^  typedef seq<rest...> type;$/;"	t	struct:taco::util::removeFirst
type	python_bindings/pybind11/include/pybind11/attr.h	/^    const std::type_info *type = nullptr;$/;"	m	struct:type_record
type	python_bindings/pybind11/include/pybind11/attr.h	/^    struct type {$/;"	s	struct:call_guard
type	python_bindings/pybind11/include/pybind11/cast.h	/^    const detail::type_info *type = nullptr;$/;"	m	struct:value_and_holder
type	python_bindings/pybind11/include/pybind11/cast.h	/^    std::string type;$/;"	m	struct:arg_v
type	python_bindings/pybind11/include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope
type	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    PyTypeObject *type;$/;"	m	struct:type_info
type	python_bindings/pybind11/include/pybind11/numpy.h	/^    char type;$/;"	m	struct:PyArrayDescr_Proxy
type	python_bindings/pybind11/include/pybind11/pytypes.h	/^    const object& type() const { return m_type; }$/;"	f	class:error_already_set
type	python_bindings/pybind11/include/pybind11/pytypes.h	/^class type : public object {$/;"	c
type	src/index_notation/index_notation.cpp	/^  Type type;$/;"	m	struct:taco::TensorVar::Content	file:
type	src/storage/array.cpp	/^  Datatype   type;$/;"	m	struct:taco::Array::Content	file:
type	test/gtest/gtest.h	/^      T12> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16, T17> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15, T16> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14, T15> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13, T14> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T13> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16, T17> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15, T16> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14, T15> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T14> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T26> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30, T31> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29, T30> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28, T29> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27, T28> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T27> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30, T31> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29, T30> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28, T29> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T28> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T40> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>::type type;$/;"	t	struct:testing::internal::TypeList
type	test/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41, T42, T43, T44, T45> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41, T42, T43, T44> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41, T42, T43> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41, T42> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^      T41> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T42, T43, T44, T45> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T42, T43, T44> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T42, T43> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^      T42> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^    TestPartResult::Type const type;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::TestPartResult
type	test/gtest/gtest.h	/^    typedef Tmpl<T> type;$/;"	t	struct:testing::internal::TemplateSel::Bind
type	test/gtest/gtest.h	/^  Type type() const { return type_; }$/;"	f	class:testing::TestPartResult
type	test/gtest/gtest.h	/^  typedef T0 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef T1 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef T2 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef T3 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef T4 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef T5 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef T6 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef T7 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef T8 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef T9 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	test/gtest/gtest.h	/^  typedef Templates0 type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates1<T1> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates2<T1, T2> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates3<T1, T2, T3> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates4<T1, T2, T3, T4> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Templates9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::internal::Templates
type	test/gtest/gtest.h	/^  typedef Types1<T> type;$/;"	t	struct:testing::internal::TypeList
type	test/gtest/gtest.h	/^  typedef bool type;$/;"	t	struct:testing::internal::AssertTypeEq
type	test/gtest/gtest.h	/^  typedef bool_constant<bool_value> type;$/;"	t	struct:std::tr1::bool_constant
type	test/gtest/gtest.h	/^  typedef internal::Types0 type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types1<T1> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types2<T1, T2> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types3<T1, T2, T3> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types4<T1, T2, T3, T4> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef internal::Types9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::Types
type	test/gtest/gtest.h	/^  typedef typename RemoveConst<T>::type type[N];$/;"	t	struct:testing::internal::RemoveConst
type	test/gtest/gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	test/gtest/gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	test/gtest/gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	test/gtest/gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	test/gtest/gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	test/gtest/gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	test/gtest/gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	test/gtest/gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	test/gtest/gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	test/gtest/gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	test/gtest/gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::EnableIf
type_	test/gtest/gtest-all.cc	/^  const TestPartResult::Type type_;$/;"	m	class:testing::internal::SingleFailureChecker	file:
type_	test/gtest/gtest.h	/^  MutexType type_;$/;"	m	class:std::tr1::Mutex
type_	test/gtest/gtest.h	/^  Type type_;$/;"	m	class:testing::TestPartResult
type_align	python_bindings/pybind11/include/pybind11/attr.h	/^    size_t type_align = 0;$/;"	m	struct:type_record
type_align	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info
type_bitwidt	src/error/error_messages.cpp	/^const std::string type_bitwidt =$/;"	m	namespace:taco::error	file:
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^class type_caster<T, enable_if_t<is_pyobject<T>::value>> : public pyobject_caster<T> { };$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^class type_caster<std::shared_ptr<T>> : public copyable_holder_caster<T, std::shared_ptr<T>> { };$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^class type_caster<std::unique_ptr<type, deleter>>$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^struct type_caster<T, enable_if_t<std::is_arithmetic<T>::value && !is_std_char_type<T>::value>> {$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^struct type_caster<std::basic_string<CharT, Traits, Allocator>, enable_if_t<is_std_char_type<CharT>::value>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^struct type_caster<std::basic_string_view<CharT, Traits>, enable_if_t<is_std_char_type<CharT>::value>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <> class type_caster<bool> {$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <> class type_caster<std::nullptr_t> : public void_caster<std::nullptr_t> { };$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <> class type_caster<void> : public type_caster<void_type> {$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <> class type_caster<void_type> : public void_caster<void_type> {};$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename CharT> struct type_caster<CharT, enable_if_t<is_std_char_type<CharT>::value>> {$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T1, typename T2> class type_caster<std::pair<T1, T2>>$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename type, typename SFINAE = void> class type_caster : public type_caster_base<type> { };$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename type> class type_caster<std::reference_wrapper<type>> {$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename... Ts> class type_caster<std::tuple<Ts...>>$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/chrono.h	/^template <typename Clock, typename Duration> class type_caster<std::chrono::time_point<Clock, Duration>>$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/chrono.h	/^template <typename Duration> class type_caster<std::chrono::time_point<std::chrono::system_clock, Duration>> {$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/chrono.h	/^template <typename Rep, typename Period> class type_caster<std::chrono::duration<Rep, Period>>$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/complex.h	/^template <typename T> class type_caster<std::complex<T>> {$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/detail/init.h	/^class type_caster<value_and_holder> {$/;"	c
type_caster	python_bindings/pybind11/include/pybind11/eigen.h	/^struct type_caster<$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/eigen.h	/^struct type_caster<Type, enable_if_t<is_eigen_dense_plain<Type>::value>> {$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/eigen.h	/^struct type_caster<Type, enable_if_t<is_eigen_other<Type>::value>> {$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/eigen.h	/^struct type_caster<Type, enable_if_t<is_eigen_sparse<Type>::value>> {$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/eigen.h	/^template <typename Type> struct type_caster<Type, enable_if_t<is_eigen_dense_map<Type>::value>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/functional.h	/^struct type_caster<std::function<Return(Args...)>> {$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^struct type_caster<std::variant<Ts...>> : variant_caster<std::variant<Ts...>> { };$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Key, typename Compare, typename Alloc> struct type_caster<std::set<Key, Compare, Alloc>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Key, typename Hash, typename Equal, typename Alloc> struct type_caster<std::unordered_set<Key, Hash, Equal, Alloc>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Key, typename Value, typename Compare, typename Alloc> struct type_caster<std::map<Key, Value, Compare, Alloc>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Key, typename Value, typename Hash, typename Equal, typename Alloc> struct type_caster<std::unordered_map<Key, Value, Hash, Equal, Alloc>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Type, size_t Size> struct type_caster<std::array<Type, Size>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Alloc> struct type_caster<std::deque<Type, Alloc>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Alloc> struct type_caster<std::list<Type, Alloc>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Type, typename Alloc> struct type_caster<std::vector<Type, Alloc>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template <typename Type> struct type_caster<std::valarray<Type>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template<> struct type_caster<std::experimental::nullopt_t>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template<> struct type_caster<std::nullopt_t>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template<typename T> struct type_caster<std::experimental::optional<T>>$/;"	s
type_caster	python_bindings/pybind11/include/pybind11/stl.h	/^template<typename T> struct type_caster<std::optional<T>>$/;"	s
type_caster	python_bindings/pybind11/tests/pybind11_tests.h	/^template<> class type_caster<RValueCaster> {$/;"	c
type_caster	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^class type_caster<ConstRefCasted> {$/;"	c	file:
type_caster	python_bindings/pybind11/tests/test_copy_move.cpp	/^template <> struct type_caster<CopyOnlyInt> {$/;"	s	file:
type_caster	python_bindings/pybind11/tests/test_copy_move.cpp	/^template <> struct type_caster<MoveOnlyInt> {$/;"	s	file:
type_caster	python_bindings/pybind11/tests/test_copy_move.cpp	/^template <> struct type_caster<MoveOrCopyInt> {$/;"	s	file:
type_caster	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^template <> struct type_caster<ArgAlwaysConverts> {$/;"	s	namespace:pybind11::detail	file:
type_caster	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^template <> struct type_caster<ArgInspector1> {$/;"	s	namespace:pybind11::detail	file:
type_caster	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^template <> struct type_caster<ArgInspector2> {$/;"	s	namespace:pybind11::detail	file:
type_caster	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^template <> struct type_caster<DestructionTester> {$/;"	s	namespace:pybind11::detail	file:
type_caster_base	python_bindings/pybind11/include/pybind11/cast.h	/^    explicit type_caster_base(const std::type_info &info) : type_caster_generic(info) { }$/;"	f	class:type_caster_base
type_caster_base	python_bindings/pybind11/include/pybind11/cast.h	/^    type_caster_base() : type_caster_base(typeid(type)) { }$/;"	f	class:type_caster_base
type_caster_base	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename type> class type_caster_base : public type_caster_generic {$/;"	c
type_caster_generic	python_bindings/pybind11/include/pybind11/cast.h	/^    PYBIND11_NOINLINE type_caster_generic(const std::type_info &type_info)$/;"	f	class:type_caster_generic
type_caster_generic	python_bindings/pybind11/include/pybind11/cast.h	/^    type_caster_generic(const type_info *typeinfo)$/;"	f	class:type_caster_generic
type_caster_generic	python_bindings/pybind11/include/pybind11/cast.h	/^class type_caster_generic {$/;"	c
type_descr	python_bindings/pybind11/include/pybind11/detail/descr.h	/^constexpr descr<N + 2, Ts...> type_descr(const descr<N, Ts...> &descr) {$/;"	f
type_id	python_bindings/pybind11/include/pybind11/detail/typeid.h	/^template <typename T> static std::string type_id() {$/;"	f
type_incref	python_bindings/pybind11/include/pybind11/detail/class.h	/^inline PyTypeObject *type_incref(PyTypeObject *type) {$/;"	f
type_info	include/taco/ir/ir.h	/^  virtual IRNodeType type_info() const { return T::_type_info; }$/;"	f	struct:taco::ir::ExprNode
type_info	include/taco/ir/ir.h	/^  virtual IRNodeType type_info() const { return T::_type_info; }$/;"	f	struct:taco::ir::StmtNode
type_info	python_bindings/pybind11/include/pybind11/detail/internals.h	/^struct type_info {$/;"	s
type_list	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename...> struct type_list { };$/;"	s
type_mismatch	src/error/error_messages.cpp	/^const std::string type_mismatch =$/;"	m	namespace:taco::error	file:
type_num	python_bindings/pybind11/include/pybind11/numpy.h	/^    int type_num;$/;"	m	struct:PyArrayDescr_Proxy
type_of_kind	python_bindings/pybind11/tests/test_tagbased_polymorphic.cpp	/^const std::type_info* Animal::type_of_kind(Kind kind)$/;"	f	class:Animal::Animal
type_param	test/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestCase
type_param	test/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestInfo
type_param_	test/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestCase
type_param_	test/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestInfo
type_record	python_bindings/pybind11/include/pybind11/attr.h	/^    PYBIND11_NOINLINE type_record()$/;"	f	struct:type_record
type_record	python_bindings/pybind11/include/pybind11/attr.h	/^struct type_record {$/;"	s
type_size	python_bindings/pybind11/include/pybind11/attr.h	/^    size_t type_size = 0;$/;"	m	struct:type_record
type_size	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info
typeinfo	python_bindings/pybind11/include/pybind11/cast.h	/^    const type_info *typeinfo = nullptr;$/;"	m	class:type_caster_generic
typeobj	python_bindings/pybind11/include/pybind11/numpy.h	/^    PyObject *typeobj;$/;"	m	struct:PyArrayDescr_Proxy
types	python_bindings/pybind11/include/pybind11/cast.h	/^        const type_vec *types = nullptr;$/;"	m	struct:values_and_holders::iterator
types	python_bindings/pybind11/include/pybind11/detail/descr.h	/^    static constexpr std::array<const std::type_info *, sizeof...(Ts) + 1> types() {$/;"	f	struct:descr
types	python_bindings/pybind11/tests/test_class.py	/^    import types$/;"	i
types	python_bindings/unit_tests.py	/^types = [pt.bool, pt.float32, pt.float64, pt.int8, pt.int16, pt.int32, pt.int64,$/;"	v
u_	test/gtest/gtest.h	/^  FloatingPointUnion u_;$/;"	m	class:testing::internal::FloatingPoint
uint128Value	include/taco/type.h	/^  unsigned long long uint128Value;$/;"	m	union:taco::ComponentTypeUnion
uint16Value	include/taco/type.h	/^  uint16_t uint16Value;$/;"	m	union:taco::ComponentTypeUnion
uint16Value	include/taco/type.h	/^  uint16_t uint16Value;$/;"	m	union:taco::IndexTypeUnion
uint32Value	include/taco/type.h	/^  uint32_t uint32Value;$/;"	m	union:taco::ComponentTypeUnion
uint32Value	include/taco/type.h	/^  uint32_t uint32Value;$/;"	m	union:taco::IndexTypeUnion
uint64Value	include/taco/type.h	/^  uint64_t uint64Value;$/;"	m	union:taco::ComponentTypeUnion
uint64Value	include/taco/type.h	/^  uint64_t uint64Value;$/;"	m	union:taco::IndexTypeUnion
uint8Value	include/taco/type.h	/^  uint8_t uint8Value;$/;"	m	union:taco::ComponentTypeUnion
uint8Value	include/taco/type.h	/^  uint8_t uint8Value;$/;"	m	union:taco::IndexTypeUnion
uint_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:PartialStruct	file:
uint_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:SimpleStruct	file:
uint_	python_bindings/pybind11/tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:SimpleStructReordered	file:
uint_scalar	include/taco/parser/lexer.h	/^  uint_scalar,$/;"	m	class:taco::parser::Token
unaryEquals	src/index_notation/index_notation.cpp	/^  bool unaryEquals(const T* anode, IndexExpr b) {$/;"	f	struct:taco::Equals
unaryIsomorphic	src/index_notation/index_notation.cpp	/^  bool unaryIsomorphic(const T* anode, IndexExpr b) {$/;"	f	struct:taco::Isomorphic
unarySubExpr	src/lower/expr_tools.cpp	/^  IndexExpr unarySubExpr(const T* op) {$/;"	f	class:taco::SubExprVisitor	file:
uncaptured_fd_	test/gtest/gtest-all.cc	/^  int uncaptured_fd_;$/;"	m	class:testing::internal::CapturedStream	file:
unchecked_reference	python_bindings/pybind11/include/pybind11/numpy.h	/^class unchecked_reference {$/;"	c
undefined_t	python_bindings/pybind11/include/pybind11/operators.h	/^struct undefined_t { };$/;"	s
underivedBounds	include/taco/lower/lowerer_impl.h	/^  std::map<IndexVar, std::vector<ir::Expr>> underivedBounds;$/;"	m	class:taco::LowererImpl
underscore	include/taco/parser/lexer.h	/^  underscore,$/;"	m	class:taco::parser::Token
unionEdge	test/op_factory.h	/^struct unionEdge {$/;"	s	namespace:taco
unionLattices	src/lower/merge_lattice.cpp	/^  static MergeLattice unionLattices(MergeLattice left, MergeLattice right)$/;"	f	class:taco::MergeLatticeBuilder	file:
unionPoints	src/lower/merge_lattice.cpp	/^  static MergePoint unionPoints(MergePoint left, MergePoint right)$/;"	f	class:taco::MergeLatticeBuilder	file:
uniqueCount	src/util/name_generator.cpp	/^static inline int uniqueCount() {$/;"	f	namespace:taco::util
uniqueId	include/taco/tensor.h	/^  unsigned int       uniqueId;$/;"	m	struct:taco::TensorBase::Content
uniqueName	src/util/name_generator.cpp	/^string uniqueName(char prefix) {$/;"	f	namespace:taco::util
uniqueName	src/util/name_generator.cpp	/^string uniqueName(const string& prefix) {$/;"	f	namespace:taco::util
uniqueNameCounter	src/util/name_generator.cpp	/^atomic<int> uniqueNameCounter;$/;"	m	namespace:taco::util	file:
uniqueNameCounters	src/codegen/codegen.cpp	/^map<string, int> uniqueNameCounters;$/;"	m	namespace:taco::ir	file:
unique_ptr_with_addressof_operator	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^    unique_ptr_with_addressof_operator(T* p) : impl(p) { }$/;"	f	class:unique_ptr_with_addressof_operator
unique_ptr_with_addressof_operator	python_bindings/pybind11/tests/test_smart_ptr.cpp	/^class unique_ptr_with_addressof_operator {$/;"	c	file:
unit_test_	test/gtest/gtest-all.cc	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultGlobalTestPartResultReporter	file:
unit_test_	test/gtest/gtest-all.cc	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultPerThreadTestPartResultReporter	file:
unittest	python_bindings/unit_tests.py	/^import unittest, os, shutil, tempfile$/;"	i
unlink_cb	src/util/env.cpp	/^static int unlink_cb(const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftwbuf)$/;"	f	namespace:taco::util
unlucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.AR
unlucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.AT
unlucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.BT
unlucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DR
unlucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DT
unlucky_number	python_bindings/pybind11/tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DT2
unordered	python_bindings/pybind11/tests/conftest.py	/^    def unordered(self):$/;"	m	class:Capture
unpack	include/taco/index_notation/index_notation_visitor.h	/^  void unpack(First first, Rest... rest) {$/;"	f	class:taco::Matcher
unpackResults	src/index_notation/kernel.cpp	/^void unpackResults(size_t numResults, const vector<void*> arguments,$/;"	f	namespace:taco
unpackTensorData	src/tensor.cpp	/^static size_t unpackTensorData(const taco_tensor_t& tensorData,$/;"	f	namespace:taco
unpackTensorProperty	src/codegen/codegen.cpp	/^string CodeGen::unpackTensorProperty(string varname, const GetProperty* op,$/;"	f	class:taco::ir::CodeGen
unroll	src/index_notation/index_notation.cpp	/^IndexStmt IndexStmt::unroll(IndexVar i, size_t unrollFactor) const {$/;"	f	class:taco::IndexStmt
unrollFactor	include/taco/index_notation/index_notation_nodes.h	/^  size_t unrollFactor = 0;$/;"	m	struct:taco::ForallNode
unrollFactor	include/taco/ir/ir.h	/^  size_t unrollFactor;$/;"	m	struct:taco::ir::For
unscope	include/taco/util/scopedmap.h	/^  void unscope() {$/;"	f	class:taco::util::ScopedMap
unscope	include/taco/util/scopedset.h	/^  void unscope() {$/;"	f	class:taco::util::ScopedSet
unsetNeverPacked	src/tensor.cpp	/^void TensorBase::unsetNeverPacked() {$/;"	f	class:taco::TensorBase
upperBoundGuardForWindowPosition	src/lower/lowerer_impl.cpp	/^Stmt LowererImpl::upperBoundGuardForWindowPosition(Iterator iterator, ir::Expr access) {$/;"	f	class:taco::LowererImpl
use_atomics	include/taco/ir/ir.h	/^  bool use_atomics;$/;"	m	struct:taco::ir::Assign
use_atomics	include/taco/ir/ir.h	/^  bool use_atomics;$/;"	m	struct:taco::ir::Store
util	include/taco/util/collections.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/comparable.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/env.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/files.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/fill.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/functions.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/intrusive_ptr.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/name_generator.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/printable.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/scopedmap.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/scopedset.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/strings.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/timers.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/uncopyable.h	/^namespace util {$/;"	n	namespace:taco
util	include/taco/util/variadic.h	/^namespace util {$/;"	n	namespace:taco
util	src/util/env.cpp	/^namespace util {$/;"	n	namespace:taco	file:
util	src/util/files.cpp	/^namespace util {$/;"	n	namespace:taco	file:
util	src/util/name_generator.cpp	/^namespace util {$/;"	n	namespace:taco	file:
util	src/util/strings.cpp	/^namespace util {$/;"	n	namespace:taco	file:
v	python_bindings/pybind11/include/pybind11/detail/common.h	/^    std::vector<T> v;$/;"	m	class:overload_cast_impl::any_container
v	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B1
v	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B2
v	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B3
v	python_bindings/pybind11/tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B4
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray10
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray11
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray12
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray13
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray14
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray15
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray16
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray17
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray18
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray19
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray20
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray21
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray22
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray23
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray24
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray25
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray26
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray27
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray28
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray29
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray30
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray31
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray32
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray33
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray34
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray35
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray36
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray37
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray38
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray39
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray40
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray41
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray42
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray43
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray44
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray45
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray46
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray47
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray48
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray49
v10_	test/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray50
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray11
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray12
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray13
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray14
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray15
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray16
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray17
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray18
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray19
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray20
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray21
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray22
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray23
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray24
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray25
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray26
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray27
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray28
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray29
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray30
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray31
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray32
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray33
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray34
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray35
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray36
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray37
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray38
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray39
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray40
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray41
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray42
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray43
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray44
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray45
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray46
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray47
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray48
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray49
v11_	test/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray50
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray12
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray13
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray14
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray15
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray16
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray17
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray18
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray19
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray20
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray21
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray22
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray23
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray24
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray25
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray26
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray27
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray28
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray29
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray30
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray31
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray32
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray33
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray34
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray35
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray36
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray37
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray38
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray39
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray40
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray41
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray42
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray43
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray44
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray45
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray46
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray47
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray48
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray49
v12_	test/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray50
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray13
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray14
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray15
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray16
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray17
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray18
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray19
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray20
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray21
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray22
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray23
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray24
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray25
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray26
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray27
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray28
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray29
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray30
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray31
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray32
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray33
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray34
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray35
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray36
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray37
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray38
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray39
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray40
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray41
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray42
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray43
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray44
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray45
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray46
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray47
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray48
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray49
v13_	test/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray50
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray14
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray15
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray16
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray17
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray18
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray19
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray20
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray21
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray22
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray23
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray24
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray25
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray26
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray27
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray28
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray29
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray30
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray31
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray32
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray33
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray34
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray35
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray36
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray37
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray38
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray39
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray40
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray41
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray42
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray43
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray44
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray45
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray46
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray47
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray48
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray49
v14_	test/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray50
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray15
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray16
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray17
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray18
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray19
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray20
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray21
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray22
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray23
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray24
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray25
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray26
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray27
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray28
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray29
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray30
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray31
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray32
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray33
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray34
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray35
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray36
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray37
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray38
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray39
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray40
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray41
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray42
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray43
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray44
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray45
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray46
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray47
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray48
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray49
v15_	test/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray50
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray16
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray17
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray18
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray19
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray20
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray21
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray22
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray23
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray24
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray25
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray26
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray27
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray28
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray29
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray30
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray31
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray32
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray33
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray34
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray35
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray36
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray37
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray38
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray39
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray40
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray41
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray42
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray43
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray44
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray45
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray46
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray47
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray48
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray49
v16_	test/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray50
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray17
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray18
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray19
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray20
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray21
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray22
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray23
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray24
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray25
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray26
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray27
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray28
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray29
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray30
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray31
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray32
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray33
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray34
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray35
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray36
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray37
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray38
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray39
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray40
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray41
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray42
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray43
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray44
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray45
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray46
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray47
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray48
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray49
v17_	test/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray50
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray18
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray19
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray20
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray21
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray22
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray23
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray24
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray25
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray26
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray27
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray28
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray29
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray30
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray31
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray32
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray33
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray34
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray35
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray36
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray37
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray38
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray39
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray40
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray41
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray42
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray43
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray44
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray45
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray46
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray47
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray48
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray49
v18_	test/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray50
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray19
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray20
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray21
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray22
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray23
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray24
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray25
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray26
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray27
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray28
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray29
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray30
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray31
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray32
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray33
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray34
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray35
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray36
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray37
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray38
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray39
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray40
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray41
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray42
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray43
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray44
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray45
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray46
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray47
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray48
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray49
v19_	test/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray50
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray1
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray10
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray11
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray12
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray13
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray14
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray15
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray16
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray17
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray18
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray19
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray2
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray20
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray21
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray22
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray23
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray24
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray25
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray26
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray27
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray28
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray29
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray3
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray30
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray31
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray32
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray33
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray34
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray35
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray36
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray37
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray38
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray39
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray4
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray40
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray41
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray42
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray43
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray44
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray45
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray46
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray47
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray48
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray49
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray5
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray50
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray6
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray7
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray8
v1_	test/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray9
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray20
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray21
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray22
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray23
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray24
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray25
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray26
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray27
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray28
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray29
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray30
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray31
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray32
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray33
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray34
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray35
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray36
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray37
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray38
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray39
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray40
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray41
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray42
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray43
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray44
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray45
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray46
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray47
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray48
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray49
v20_	test/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray50
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray21
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray22
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray23
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray24
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray25
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray26
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray27
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray28
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray29
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray30
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray31
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray32
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray33
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray34
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray35
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray36
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray37
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray38
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray39
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray40
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray41
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray42
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray43
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray44
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray45
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray46
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray47
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray48
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray49
v21_	test/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray50
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray22
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray23
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray24
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray25
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray26
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray27
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray28
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray29
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray30
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray31
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray32
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray33
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray34
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray35
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray36
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray37
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray38
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray39
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray40
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray41
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray42
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray43
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray44
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray45
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray46
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray47
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray48
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray49
v22_	test/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray50
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray23
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray24
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray25
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray26
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray27
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray28
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray29
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray30
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray31
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray32
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray33
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray34
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray35
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray36
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray37
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray38
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray39
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray40
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray41
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray42
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray43
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray44
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray45
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray46
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray47
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray48
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray49
v23_	test/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray50
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray24
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray25
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray26
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray27
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray28
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray29
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray30
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray31
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray32
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray33
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray34
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray35
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray36
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray37
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray38
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray39
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray40
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray41
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray42
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray43
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray44
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray45
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray46
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray47
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray48
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray49
v24_	test/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray50
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray25
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray26
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray27
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray28
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray29
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray30
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray31
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray32
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray33
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray34
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray35
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray36
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray37
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray38
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray39
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray40
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray41
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray42
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray43
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray44
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray45
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray46
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray47
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray48
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray49
v25_	test/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray50
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray26
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray27
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray28
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray29
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray30
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray31
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray32
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray33
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray34
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray35
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray36
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray37
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray38
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray39
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray40
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray41
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray42
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray43
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray44
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray45
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray46
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray47
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray48
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray49
v26_	test/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray50
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray27
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray28
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray29
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray30
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray31
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray32
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray33
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray34
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray35
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray36
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray37
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray38
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray39
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray40
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray41
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray42
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray43
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray44
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray45
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray46
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray47
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray48
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray49
v27_	test/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray50
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray28
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray29
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray30
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray31
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray32
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray33
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray34
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray35
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray36
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray37
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray38
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray39
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray40
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray41
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray42
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray43
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray44
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray45
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray46
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray47
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray48
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray49
v28_	test/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray50
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray29
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray30
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray31
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray32
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray33
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray34
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray35
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray36
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray37
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray38
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray39
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray40
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray41
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray42
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray43
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray44
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray45
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray46
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray47
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray48
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray49
v29_	test/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray50
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray10
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray11
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray12
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray13
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray14
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray15
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray16
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray17
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray18
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray19
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray2
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray20
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray21
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray22
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray23
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray24
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray25
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray26
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray27
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray28
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray29
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray3
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray30
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray31
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray32
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray33
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray34
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray35
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray36
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray37
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray38
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray39
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray4
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray40
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray41
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray42
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray43
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray44
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray45
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray46
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray47
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray48
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray49
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray5
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray50
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray6
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray7
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray8
v2_	test/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray9
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray30
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray31
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray32
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray33
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray34
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray35
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray36
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray37
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray38
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray39
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray40
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray41
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray42
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray43
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray44
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray45
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray46
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray47
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray48
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray49
v30_	test/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray50
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray31
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray32
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray33
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray34
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray35
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray36
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray37
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray38
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray39
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray40
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray41
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray42
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray43
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray44
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray45
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray46
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray47
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray48
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray49
v31_	test/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray50
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray32
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray33
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray34
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray35
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray36
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray37
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray38
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray39
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray40
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray41
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray42
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray43
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray44
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray45
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray46
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray47
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray48
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray49
v32_	test/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray50
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray33
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray34
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray35
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray36
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray37
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray38
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray39
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray40
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray41
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray42
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray43
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray44
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray45
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray46
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray47
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray48
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray49
v33_	test/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray50
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray34
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray35
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray36
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray37
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray38
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray39
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray40
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray41
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray42
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray43
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray44
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray45
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray46
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray47
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray48
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray49
v34_	test/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray50
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray35
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray36
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray37
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray38
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray39
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray40
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray41
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray42
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray43
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray44
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray45
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray46
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray47
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray48
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray49
v35_	test/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray50
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray36
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray37
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray38
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray39
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray40
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray41
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray42
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray43
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray44
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray45
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray46
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray47
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray48
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray49
v36_	test/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray50
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray37
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray38
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray39
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray40
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray41
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray42
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray43
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray44
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray45
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray46
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray47
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray48
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray49
v37_	test/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray50
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray38
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray39
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray40
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray41
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray42
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray43
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray44
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray45
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray46
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray47
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray48
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray49
v38_	test/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray50
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray39
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray40
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray41
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray42
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray43
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray44
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray45
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray46
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray47
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray48
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray49
v39_	test/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray50
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray10
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray11
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray12
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray13
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray14
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray15
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray16
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray17
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray18
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray19
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray20
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray21
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray22
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray23
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray24
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray25
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray26
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray27
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray28
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray29
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray3
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray30
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray31
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray32
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray33
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray34
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray35
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray36
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray37
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray38
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray39
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray4
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray40
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray41
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray42
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray43
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray44
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray45
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray46
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray47
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray48
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray49
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray5
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray50
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray6
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray7
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray8
v3_	test/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray9
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray40
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray41
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray42
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray43
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray44
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray45
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray46
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray47
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray48
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray49
v40_	test/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray50
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray41
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray42
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray43
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray44
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray45
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray46
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray47
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray48
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray49
v41_	test/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray50
v42_	test/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray42
v42_	test/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray43
v42_	test/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray44
v42_	test/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray45
v42_	test/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray46
v42_	test/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray47
v42_	test/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray48
v42_	test/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray49
v42_	test/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray50
v43_	test/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray43
v43_	test/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray44
v43_	test/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray45
v43_	test/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray46
v43_	test/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray47
v43_	test/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray48
v43_	test/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray49
v43_	test/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray50
v44_	test/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray44
v44_	test/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray45
v44_	test/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray46
v44_	test/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray47
v44_	test/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray48
v44_	test/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray49
v44_	test/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray50
v45_	test/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray45
v45_	test/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray46
v45_	test/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray47
v45_	test/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray48
v45_	test/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray49
v45_	test/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray50
v46_	test/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray46
v46_	test/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray47
v46_	test/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray48
v46_	test/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray49
v46_	test/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray50
v47_	test/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray47
v47_	test/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray48
v47_	test/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray49
v47_	test/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray50
v48_	test/gtest/gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray48
v48_	test/gtest/gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray49
v48_	test/gtest/gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray50
v49_	test/gtest/gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray49
v49_	test/gtest/gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray50
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray10
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray11
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray12
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray13
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray14
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray15
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray16
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray17
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray18
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray19
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray20
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray21
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray22
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray23
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray24
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray25
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray26
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray27
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray28
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray29
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray30
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray31
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray32
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray33
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray34
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray35
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray36
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray37
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray38
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray39
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray4
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray40
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray41
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray42
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray43
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray44
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray45
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray46
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray47
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray48
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray49
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray5
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray50
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray6
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray7
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray8
v4_	test/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray9
v50_	test/gtest/gtest.h	/^  const T50 v50_;$/;"	m	class:testing::internal::ValueArray50
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray10
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray11
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray12
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray13
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray14
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray15
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray16
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray17
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray18
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray19
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray20
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray21
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray22
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray23
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray24
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray25
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray26
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray27
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray28
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray29
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray30
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray31
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray32
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray33
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray34
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray35
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray36
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray37
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray38
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray39
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray40
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray41
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray42
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray43
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray44
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray45
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray46
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray47
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray48
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray49
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray5
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray50
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray6
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray7
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray8
v5_	test/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray9
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray10
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray11
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray12
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray13
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray14
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray15
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray16
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray17
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray18
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray19
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray20
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray21
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray22
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray23
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray24
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray25
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray26
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray27
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray28
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray29
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray30
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray31
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray32
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray33
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray34
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray35
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray36
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray37
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray38
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray39
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray40
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray41
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray42
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray43
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray44
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray45
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray46
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray47
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray48
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray49
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray50
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray6
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray7
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray8
v6_	test/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray9
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray10
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray11
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray12
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray13
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray14
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray15
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray16
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray17
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray18
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray19
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray20
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray21
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray22
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray23
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray24
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray25
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray26
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray27
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray28
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray29
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray30
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray31
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray32
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray33
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray34
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray35
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray36
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray37
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray38
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray39
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray40
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray41
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray42
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray43
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray44
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray45
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray46
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray47
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray48
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray49
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray50
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray7
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray8
v7_	test/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray9
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray10
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray11
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray12
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray13
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray14
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray15
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray16
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray17
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray18
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray19
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray20
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray21
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray22
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray23
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray24
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray25
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray26
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray27
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray28
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray29
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray30
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray31
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray32
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray33
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray34
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray35
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray36
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray37
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray38
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray39
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray40
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray41
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray42
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray43
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray44
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray45
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray46
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray47
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray48
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray49
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray50
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray8
v8_	test/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray9
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray10
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray11
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray12
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray13
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray14
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray15
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray16
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray17
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray18
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray19
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray20
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray21
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray22
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray23
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray24
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray25
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray26
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray27
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray28
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray29
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray30
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray31
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray32
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray33
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray34
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray35
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray36
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray37
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray38
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray39
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray40
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray41
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray42
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray43
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray44
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray45
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray46
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray47
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray48
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray49
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray50
v9_	test/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray9
val	include/taco/component.h	/^  CType val;$/;"	m	class:taco::Component
val	include/taco/index_notation/index_notation_nodes.h	/^  void* val;$/;"	m	struct:taco::LiteralNode
val	include/taco/ir/ir.h	/^  Expr val;$/;"	m	struct:taco::ir::Yield
val	include/taco/storage/typed_index.h	/^  IndexTypeUnion val;$/;"	m	class:taco::TypedIndexVal
val	include/taco/storage/typed_value.h	/^  ComponentTypeUnion val;$/;"	m	class:taco::TypedComponentVal
val	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int val = -1;$/;"	m	struct:StrIssue	file:
valBuffer	include/taco/tensor.h	/^      CType* valBuffer;$/;"	m	struct:taco::TensorBase::const_iterator::Context
valBuffer	include/taco/tensor.h	/^    const CType*                   valBuffer;$/;"	m	class:taco::TensorBase::const_iterator
valName	src/codegen/codegen.cpp	/^const std::string valName = "__val__";$/;"	m	namespace:taco::ir	file:
validVar	src/lower/iterator.cpp	/^  ir::Expr validVar;$/;"	m	struct:taco::Iterator::Content	file:
validateTargetString	src/target.cpp	/^bool Target::validateTargetString(const string &s) {$/;"	f	class:taco::Target
vals	include/taco/taco_tensor_t.h	/^  uint8_t*     vals;          \/\/ tensor values$/;"	m	struct:taco_tensor_t
valsIterated	include/taco/tensor.h	/^    int64_t valsIterated() const {$/;"	f	class:taco::TensorBase::const_iterator
vals_size	include/taco/taco_tensor_t.h	/^  int32_t      vals_size;     \/\/ values array size$/;"	m	struct:taco_tensor_t
value	include/taco/component.h	/^  const CType& value() const { return val; }$/;"	f	class:taco::Component
value	include/taco/ir/ir.h	/^  TypedComponentPtr value;$/;"	m	struct:taco::ir::Literal
value	include/taco/util/variadic.h	/^  static const int value = product<vals...>::value;$/;"	m	struct:taco::util::product
value	include/taco/util/variadic.h	/^  static const int value = productHelper<1, val, rest...>::value;$/;"	m	struct:taco::util::product
value	include/taco/util/variadic.h	/^  static const int value = productHelper<prod * val, rest...>::value;$/;"	m	struct:taco::util::__anon8::productHelper
value	include/taco/util/variadic.h	/^  static const int value = val;$/;"	m	struct:taco::util::__anon8::productHelper
value	include/taco/util/variadic.h	/^  static constexpr int value = 1;$/;"	m	struct:taco::util::product
value	python_bindings/pybind11/include/pybind11/attr.h	/^    handle value;      \/\/\/< Associated Python object$/;"	m	struct:argument_record
value	python_bindings/pybind11/include/pybind11/attr.h	/^    handle value;$/;"	m	struct:metaclass
value	python_bindings/pybind11/include/pybind11/attr.h	/^struct doc { const char *value; doc(const char *value) : value(value) { } };$/;"	m	struct:doc
value	python_bindings/pybind11/include/pybind11/attr.h	/^struct module_local { const bool value; constexpr module_local(bool v = true) : value(v) { } };$/;"	m	struct:module_local
value	python_bindings/pybind11/include/pybind11/attr.h	/^struct name { const char *value; name(const char *value) : value(value) { } };$/;"	m	struct:name
value	python_bindings/pybind11/include/pybind11/attr.h	/^struct scope { handle value; scope(const handle &s) : value(s) { } };$/;"	m	struct:scope
value	python_bindings/pybind11/include/pybind11/attr.h	/^struct sibling { handle value; sibling(const handle &value) : value(value.ptr()) { } };$/;"	m	struct:sibling
value	python_bindings/pybind11/include/pybind11/cast.h	/^    object value;$/;"	m	struct:arg_v
value	python_bindings/pybind11/include/pybind11/cast.h	/^    void *value = nullptr;$/;"	m	class:type_caster
value	python_bindings/pybind11/include/pybind11/cast.h	/^    void *value = nullptr;$/;"	m	class:type_caster_generic
value	python_bindings/pybind11/include/pybind11/cast.h	/^template <typename T, bool Value = false> struct always_construct_holder { static constexpr bool value = Value; };$/;"	m	struct:always_construct_holder
value	python_bindings/pybind11/include/pybind11/complex.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric
value	python_bindings/pybind11/include/pybind11/complex.h	/^    static constexpr const char value[3] = { 'Z', c, '\\0' };$/;"	m	struct:format_descriptor
value	python_bindings/pybind11/include/pybind11/complex.h	/^    std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>>::value[3];$/;"	m	class:format_descriptor
value	python_bindings/pybind11/include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope
value	python_bindings/pybind11/include/pybind11/detail/common.h	/^    T, detail::enable_if_t<std::is_arithmetic<T>::value>>::value[2];$/;"	m	class:format_descriptor
value	python_bindings/pybind11/include/pybind11/detail/common.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric
value	python_bindings/pybind11/include/pybind11/detail/common.h	/^    static constexpr const char value[2] = { c, '\\0' };$/;"	m	struct:format_descriptor
value	python_bindings/pybind11/include/pybind11/detail/common.h	/^    struct _Py_atomic_address { void *value; };$/;"	m	struct:_Py_atomic_address
value	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename T, typename SFINAE = void> struct is_fmt_numeric { static constexpr bool value = false; };$/;"	m	struct:is_fmt_numeric
value	python_bindings/pybind11/include/pybind11/detail/init.h	/^    value_and_holder *value = nullptr;$/;"	m	class:type_caster
value	python_bindings/pybind11/include/pybind11/eigen.h	/^    Type value;$/;"	m	struct:type_caster
value	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void value(char const* name_, object value, const char *doc = nullptr) {$/;"	f	struct:enum_base
value	python_bindings/pybind11/include/pybind11/pybind11.h	/^    enum_& value(char const* name, Type value, const char *doc = nullptr) {$/;"	f	class:enum_
value	python_bindings/pybind11/include/pybind11/pytypes.h	/^    PyObject *key = nullptr, *value = nullptr;$/;"	m	class:dict_readonly
value	python_bindings/pybind11/include/pybind11/pytypes.h	/^    T value;$/;"	m	struct:arrow_proxy
value	python_bindings/pybind11/include/pybind11/pytypes.h	/^    const object& value() const { return m_value; }$/;"	f	class:error_already_set
value	python_bindings/pybind11/include/pybind11/pytypes.h	/^    object value = {};$/;"	m	class:iterator
value	python_bindings/pybind11/include/pybind11/stl_bind.h	/^    static constexpr const bool value =$/;"	m	struct:is_comparable
value	python_bindings/pybind11/tests/constructor_stats.h	/^    template <typename T, typename... Tmore> void value(const T &v, Tmore &&...args) {$/;"	f	class:ConstructorStats
value	python_bindings/pybind11/tests/constructor_stats.h	/^    void value() {} \/\/ Recursion terminator$/;"	f	class:ConstructorStats
value	python_bindings/pybind11/tests/pybind11_tests.h	/^    int value() const { return i; }$/;"	f	class:UserType
value	python_bindings/pybind11/tests/test_builtin_casters.cpp	/^  ConstRefCasted value = {0};$/;"	m	class:type_caster	file:
value	python_bindings/pybind11/tests/test_copy_move.cpp	/^    CopyOnlyInt value;$/;"	m	struct:type_caster	file:
value	python_bindings/pybind11/tests/test_copy_move.cpp	/^    int value;$/;"	m	class:CopyOnlyInt	file:
value	python_bindings/pybind11/tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOnlyInt	file:
value	python_bindings/pybind11/tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOrCopyInt	file:
value	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    int value;$/;"	m	class:TestFactory6	file:
value	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    int value;$/;"	m	class:TestFactory7	file:
value	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory1	file:
value	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory2	file:
value	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory3	file:
value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int value = 0;$/;"	m	class:ExampleMandA	file:
value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int value = 0;$/;"	m	struct:RefQualified	file:
value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int value = 1;$/;"	m	struct:TestProperties	file:
value	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    int value = 99;$/;"	m	struct:TestPropertiesOverride	file:
value	python_bindings/pybind11/tests/test_stl_binders.cpp	/^    int value;$/;"	m	class:E_nc	file:
value	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    int value;$/;"	m	class:Movable	file:
value	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    std::unique_ptr<int> value;$/;"	m	class:NonCopyable	file:
value	test/gtest/gtest.h	/^  const char* value() const {$/;"	f	class:testing::TestProperty
value	test/gtest/gtest.h	/^  const char* value;$/;"	m	struct:testing::internal::ConstCharPtr
value	test/gtest/gtest.h	/^  static const bool value = __is_convertible(From, To);$/;"	m	class:testing::internal::ImplicitlyConvertible
value	test/gtest/gtest.h	/^  static const bool value = bool_value;$/;"	m	struct:std::tr1::bool_constant
value	test/gtest/gtest.h	/^  static const bool value =$/;"	m	class:testing::internal::ImplicitlyConvertible
value	test/gtest/gtest.h	/^  static const int value = 0;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 10;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 1;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 2;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 3;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 4;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 5;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 6;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 7;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 8;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^  static const int value = 9;$/;"	m	struct:std::tr1::tuple_size
value	test/gtest/gtest.h	/^const bool ImplicitlyConvertible<From, To>::value;$/;"	m	class:testing::internal::ImplicitlyConvertible
value	test/gtest/gtest.h	/^template <bool bool_value> const bool bool_constant<bool_value>::value;$/;"	m	class:std::tr1::bool_constant
value_	test/gtest/gtest.h	/^    RawType value_;  \/\/ The raw floating-point number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
value_	test/gtest/gtest.h	/^    T value_;$/;"	m	class:std::tr1::ThreadLocal::ValueHolder
value_	test/gtest/gtest.h	/^    T value_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
value_	test/gtest/gtest.h	/^    mutable scoped_ptr<const T> value_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
value_	test/gtest/gtest.h	/^  T value_;$/;"	m	class:std::tr1::ThreadLocal
value_	test/gtest/gtest.h	/^  T* value_;$/;"	m	class:testing::internal::linked_ptr
value_	test/gtest/gtest.h	/^  std::string value_;$/;"	m	class:testing::TestProperty
value_and_holder	python_bindings/pybind11/include/pybind11/cast.h	/^    value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index) :$/;"	f	struct:value_and_holder
value_and_holder	python_bindings/pybind11/include/pybind11/cast.h	/^    value_and_holder(size_t index) : index{index} {}$/;"	f	struct:value_and_holder
value_and_holder	python_bindings/pybind11/include/pybind11/cast.h	/^struct value_and_holder {$/;"	s
value_param	test/gtest/gtest.h	/^  const char* value_param() const {$/;"	f	class:testing::TestInfo
value_param_	test/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> value_param_;$/;"	m	class:testing::TestInfo
value_ptr	python_bindings/pybind11/include/pybind11/cast.h	/^    template <typename V = void> V *&value_ptr() const {$/;"	f	struct:value_and_holder
value_type	include/taco/storage/typed_vector.h	/^    typedef Typed value_type;$/;"	t	class:taco::TypedVector::const_iterator
value_type	include/taco/storage/typed_vector.h	/^    typedef Typed value_type;$/;"	t	class:taco::TypedVector::iterator
value_type	include/taco/tensor.h	/^    typedef std::pair<Coordinates,CType>  value_type;$/;"	t	class:taco::TensorBase::const_iterator
value_type	test/gtest/gtest.h	/^  typedef Element value_type;$/;"	t	class:testing::internal::NativeArray
value_type	test/gtest/gtest.h	/^  typedef T value_type;$/;"	t	class:testing::internal::ParamIterator
value_type	test/gtest/gtest.h	/^  typedef T value_type;$/;"	t	struct:std::tr1::IteratorTraits
value_type	test/gtest/gtest.h	/^  typedef typename Iterator::value_type value_type;$/;"	t	struct:std::tr1::IteratorTraits
value_type1	include/taco/util/collections.h	/^  typedef typename C1::value_type value_type1;$/;"	t	class:taco::util::ZipConstIterable
value_type2	include/taco/util/collections.h	/^  typedef typename C2::value_type value_type2;$/;"	t	class:taco::util::ZipConstIterable
values	include/taco/lower/lowerer_impl.h	/^    ir::Expr values;$/;"	m	struct:taco::LowererImpl::TemporaryArrays
values	python_bindings/pybind11/tests/constructor_stats.h	/^    py::list values() {$/;"	f	class:ConstructorStats
values	src/storage/storage.cpp	/^  Array         values;$/;"	m	struct:taco::TensorStorage::Content	file:
values	test/test_tensors.h	/^  std::vector<std::pair<std::vector<int>,T>> values;$/;"	m	struct:taco::test::TensorData
valuesSize	include/taco/tensor.h	/^  size_t             valuesSize;$/;"	m	struct:taco::TensorBase::Content
values_and_holders	python_bindings/pybind11/include/pybind11/cast.h	/^    values_and_holders(instance *inst) : inst{inst}, tinfo(all_type_info(Py_TYPE(inst))) {}$/;"	f	struct:values_and_holders
values_and_holders	python_bindings/pybind11/include/pybind11/cast.h	/^struct values_and_holders {$/;"	s
values_and_holders	python_bindings/pybind11/include/pybind11/detail/common.h	/^    void **values_and_holders;$/;"	m	struct:nonsimple_values_and_holders
vanilla	python_bindings/pybind11/tests/test_multiple_inheritance.cpp	/^    std::string vanilla() { return "Vanilla"; };$/;"	f	struct:Vanilla
var	include/taco/index_notation/index_notation_nodes.h	/^  IndexVar var;$/;"	m	struct:taco::ReductionNode
var	include/taco/ir/ir.h	/^  Expr var;$/;"	m	struct:taco::ir::Allocate
var	include/taco/ir/ir.h	/^  Expr var;$/;"	m	struct:taco::ir::For
var	include/taco/ir/ir.h	/^  Expr var;$/;"	m	struct:taco::ir::Free
var	include/taco/ir/ir.h	/^  Expr var;$/;"	m	struct:taco::ir::VarDecl
varDecls	src/codegen/codegen_c.cpp	/^  map<Expr, string, ExprCompare> varDecls;$/;"	m	class:taco::ir::CodeGen_C::FindVars	file:
varDecls	src/codegen/codegen_cuda.cpp	/^  map<Expr, string, ExprCompare> varDecls;$/;"	m	class:taco::ir::CodeGen_CUDA::FindVars	file:
varMap	src/codegen/codegen_c.cpp	/^  map<Expr, string, ExprCompare> varMap;$/;"	m	class:taco::ir::CodeGen_C::FindVars	file:
varMap	src/codegen/codegen_c.h	/^  std::map<Expr, std::string, ExprCompare> varMap;$/;"	m	class:taco::ir::CodeGen_C
varMap	src/codegen/codegen_cuda.cpp	/^  map<Expr, string, ExprCompare> varMap;$/;"	m	class:taco::ir::CodeGen_CUDA::FindVars	file:
varMap	src/codegen/codegen_cuda.h	/^  std::map<Expr, std::string, ExprCompare> varMap;$/;"	m	class:taco::ir::CodeGen_CUDA
varNameGenerator	include/taco/ir/ir_printer.h	/^  util::NameGenerator varNameGenerator;$/;"	m	class:taco::ir::IRPrinter
varNames	include/taco/ir/ir_printer.h	/^  util::ScopedMap<Expr, std::string> varNames;$/;"	m	class:taco::ir::IRPrinter
varOrderFromTensorLevels	src/index_notation/transformations.cpp	/^varOrderFromTensorLevels(set<pair<IndexVar, pair<int, bool>>> tensorLevelVars) {$/;"	f	namespace:taco
variablesDeclaredInKernel	src/codegen/codegen_cuda.cpp	/^  set<Expr> variablesDeclaredInKernel;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
variant_caster	python_bindings/pybind11/include/pybind11/stl.h	/^struct variant_caster<V<Ts...>> {$/;"	s
variant_caster_visitor	python_bindings/pybind11/include/pybind11/stl.h	/^struct variant_caster_visitor {$/;"	s
vars	src/lower/expr_tools.cpp	/^  set<IndexVar> vars;$/;"	m	class:taco::SubExprVisitor	file:
vars	src/lower/mode.cpp	/^  std::map<std::string, ir::Expr> vars;$/;"	m	struct:taco::Mode::Content	file:
vars	src/lower/tensor_path.cpp	/^  vector<IndexVar> vars;$/;"	m	struct:taco::TensorPath::Content	file:
vec	python_bindings/pybind11/tests/test_class.cpp	/^    std::vector<int> vec;$/;"	m	struct:NoBraceInitialization	file:
vecElwiseSqrt	test/tests-parafac.cpp	/^VectorElwiseSqrtFactory             vecElwiseSqrt;$/;"	v
vec_width	include/taco/ir/ir.h	/^  int vec_width;  \/\/ vectorization width$/;"	m	struct:taco::ir::For
vec_width	include/taco/ir/ir.h	/^  int vec_width;  \/\/ vectorization width$/;"	m	struct:taco::ir::While
vector	python_bindings/pybind11/include/pybind11/eigen.h	/^        vector = Type::IsVectorAtCompileTime, \/\/ At least one dimension has fixed size 1$/;"	m	struct:EigenProps
vector	python_bindings/pybind11/tests/test_opaque_types.cpp	/^PYBIND11_MAKE_OPAQUE(std::vector<std::string, std::allocator<std::string>>);$/;"	v
vector_accessor	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void vector_accessor(enable_if_t<!vector_needs_copy<Vector>::value, Class_> &cl) {$/;"	f
vector_accessor	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void vector_accessor(enable_if_t<vector_needs_copy<Vector>::value, Class_> &cl) {$/;"	f
vector_buffer	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void vector_buffer(Class_& cl) {$/;"	f
vector_buffer_impl	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void vector_buffer_impl(Class_& cl, std::true_type) {$/;"	f
vector_buffer_impl	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void vector_buffer_impl(Class_&, std::false_type) {}$/;"	f
vector_has_data_and_format	python_bindings/pybind11/include/pybind11/stl_bind.h	/^struct vector_has_data_and_format : std::false_type {};$/;"	s
vector_has_data_and_format	python_bindings/pybind11/include/pybind11/stl_bind.h	/^struct vector_has_data_and_format<Vector, enable_if_t<std::is_same<decltype(format_descriptor<typename Vector::value_type>::format(), std::declval<Vector>().data()), typename Vector::value_type*>::value>> : std::true_type {};$/;"	s
vector_if_copy_constructible	python_bindings/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void vector_if_copy_constructible(const Args &...) { }$/;"	f
vector_if_copy_constructible	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void vector_if_copy_constructible(enable_if_t<is_copy_constructible<Vector>::value, Class_> &cl) {$/;"	f
vector_if_equal_operator	python_bindings/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void vector_if_equal_operator(const Args &...) { }$/;"	f
vector_if_equal_operator	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void vector_if_equal_operator(enable_if_t<is_comparable<Vector>::value, Class_> &cl) {$/;"	f
vector_if_insertion_operator	python_bindings/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void vector_if_insertion_operator(const Args &...) { }$/;"	f
vector_modifiers	python_bindings/pybind11/include/pybind11/stl_bind.h	/^template <typename, typename, typename... Args> void vector_modifiers(const Args &...) { }$/;"	f
vector_modifiers	python_bindings/pybind11/include/pybind11/stl_bind.h	/^void vector_modifiers(enable_if_t<is_copy_constructible<typename Vector::value_type>::value, Class_> &cl) {$/;"	f
verify	src/ir/ir_verifier.cpp	/^  void verify(const Expr e) {$/;"	f	class:taco::ir::__anon15::IRVerifier
verify	src/ir/ir_verifier.cpp	/^  void verify(const Stmt s) {$/;"	f	class:taco::ir::__anon15::IRVerifier
verify	src/ir/ir_verifier.cpp	/^bool verify(const Expr e, std::string *messages) {$/;"	f	namespace:taco::ir
verify	src/ir/ir_verifier.cpp	/^bool verify(const Stmt s, std::string *messages) {$/;"	f	namespace:taco::ir
verifyResults	test/tests-lower.cpp	/^static void verifyResults(const vector<TensorVar>& results,$/;"	f	namespace:taco::test
verifyResultsInt	test/tests-lower.cpp	/^static void verifyResultsInt(const vector<TensorVar>& results,$/;"	f	namespace:taco::test
verify_operand_types_consistent	src/ir/ir_verifier.cpp	/^  void verify_operand_types_consistent(C op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
verify_operand_types_consistent_with_result	src/ir/ir_verifier.cpp	/^  void verify_operand_types_consistent_with_result(C op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
version	python_bindings/pybind11/docs/conf.py	/^version = loc["__version__"]$/;"	v
version	python_bindings/pybind11/setup.py	/^version = loc["__version__"]$/;"	v
version_info	python_bindings/pybind11/pybind11/__init__.py	/^from ._version import version_info, __version__$/;"	i
version_info	python_bindings/pybind11/pybind11/_version.py	/^version_info = tuple(_to_int(s) for s in __version__.split("."))$/;"	v
vh	python_bindings/pybind11/include/pybind11/cast.h	/^    void **vh = nullptr;$/;"	m	struct:value_and_holder
view	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    Py_buffer *&view() { return m_view; }$/;"	f	struct:buffer_info
view	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    Py_buffer *view() const { return m_view; }$/;"	f	struct:buffer_info
virtual_func	python_bindings/pybind11/tests/test_gil_scoped.cpp	/^    virtual void virtual_func() {}$/;"	f	class:VirtClass
virtual_func	python_bindings/pybind11/tests/test_gil_scoped.py	/^        def virtual_func(self):$/;"	m	class:_python_to_cpp_to_python.ExtendedVirtClass
visit	python_bindings/pybind11/include/pybind11/stl.h	/^    static auto call(Args &&...args) -> decltype(visit(std::forward<Args>(args)...)) {$/;"	f	struct:visit_helper
visit	src/codegen/codegen_c.cpp	/^  virtual void visit(const For *op) {$/;"	f	class:taco::ir::CodeGen_C::FindVars
visit	src/codegen/codegen_c.cpp	/^  virtual void visit(const GetProperty *op) {$/;"	f	class:taco::ir::CodeGen_C::FindVars
visit	src/codegen/codegen_c.cpp	/^  virtual void visit(const Var *op) {$/;"	f	class:taco::ir::CodeGen_C::FindVars
visit	src/codegen/codegen_c.cpp	/^  virtual void visit(const VarDecl *op) {$/;"	f	class:taco::ir::CodeGen_C::FindVars
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const Allocate* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const Assign* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const For* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const Function* func) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const GetProperty* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const Max* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const Min* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const Sqrt* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const Store* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const Var* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const VarDecl* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const While* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_c.cpp	/^void CodeGen_C::visit(const Yield* op) {$/;"	f	class:taco::ir::CodeGen_C
visit	src/codegen/codegen_cuda.cpp	/^  virtual void visit(const For *op) {$/;"	f	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector
visit	src/codegen/codegen_cuda.cpp	/^  virtual void visit(const For *op) {$/;"	f	class:taco::ir::CodeGen_CUDA::FindVars
visit	src/codegen/codegen_cuda.cpp	/^  virtual void visit(const GetProperty *op) {$/;"	f	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector
visit	src/codegen/codegen_cuda.cpp	/^  virtual void visit(const GetProperty *op) {$/;"	f	class:taco::ir::CodeGen_CUDA::FindVars
visit	src/codegen/codegen_cuda.cpp	/^  virtual void visit(const Var *op) {$/;"	f	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector
visit	src/codegen/codegen_cuda.cpp	/^  virtual void visit(const Var *op) {$/;"	f	class:taco::ir::CodeGen_CUDA::FindVars
visit	src/codegen/codegen_cuda.cpp	/^  virtual void visit(const VarDecl *op) {$/;"	f	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector
visit	src/codegen/codegen_cuda.cpp	/^  virtual void visit(const VarDecl *op) {$/;"	f	class:taco::ir::CodeGen_CUDA::FindVars
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Add* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Allocate* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Assign* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Call* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Continue*) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Div* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const For* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Free* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Function* func) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const GetProperty* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Literal* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Max* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Min* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Mul* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Sqrt* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Store* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Sub* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Var* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const VarDecl* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const While* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/codegen/codegen_cuda.cpp	/^void CodeGen_CUDA::visit(const Yield* op) {$/;"	f	class:taco::ir::CodeGen_CUDA
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const AccessNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const AddNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const CallIntrinsicNode*) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const CallNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const CastNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const DivNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const IndexVarNode*) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const LiteralNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const MulNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const NegNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const ReductionNode*) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const SqrtNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^    virtual void visit(const SubNode* op) {$/;"	f	struct:taco::fillValueInferrer
visit	src/index_notation/index_notation.cpp	/^  void visit(const AccessNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const AccessNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const AccessNode* node) {$/;"	f	struct:taco::GetIndexVars
visit	src/index_notation/index_notation.cpp	/^  void visit(const AccessNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const AddNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const AddNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const AddNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const AssignmentNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const AssignmentNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const AssignmentNode* node) {$/;"	f	struct:taco::GetIndexVars
visit	src/index_notation/index_notation.cpp	/^  void visit(const AssignmentNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const CallIntrinsicNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const CallIntrinsicNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const CallIntrinsicNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const CallNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const CallNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const CallNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const CastNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const CastNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const CastNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const DivNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const DivNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const DivNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const ForallNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const ForallNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const ForallNode* node) {$/;"	f	struct:taco::GetIndexVars
visit	src/index_notation/index_notation.cpp	/^  void visit(const ForallNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const IndexVarNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const IndexVarNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const IndexVarNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const LiteralNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const LiteralNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const LiteralNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const MulNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const MulNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const MulNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const MultiNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const MultiNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const MultiNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const NegNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const NegNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const NegNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const ReductionNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const ReductionNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const ReductionNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const SequenceNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const SequenceNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const SequenceNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const SqrtNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const SqrtNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const SqrtNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const SubNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const SubNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const SubNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const SuchThatNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const SuchThatNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const SuchThatNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const WhereNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const WhereNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const WhereNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation.cpp	/^  void visit(const YieldNode* anode) {$/;"	f	struct:taco::Equals
visit	src/index_notation/index_notation.cpp	/^  void visit(const YieldNode* anode) {$/;"	f	struct:taco::Isomorphic
visit	src/index_notation/index_notation.cpp	/^  void visit(const YieldNode* op) {$/;"	f	struct:taco::Zero	file:
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const AccessNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const AddNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const AssignmentNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const CallIntrinsicNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const CallNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const CastNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const DivNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const ForallNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const IndexVarNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const LiteralNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const MulNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const MultiNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const NegNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const ReductionNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const SequenceNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const SqrtNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const SubNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const SuchThatNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const WhereNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visit(const YieldNode* op) {$/;"	f	class:taco::IndexNotationPrinter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const AccessNode* op) {$/;"	f	struct:taco::ReplaceIndexVars
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const AccessNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const AccessNode* op) {$/;"	f	struct:taco::ReplaceTensorVars
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const AddNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const AssignmentNode* node) {$/;"	f	struct:taco::ReplaceTensorVars
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const AssignmentNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const CallIntrinsicNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const CallNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const DivNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const ForallNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const IndexVarNode* op) {$/;"	f	struct:taco::ReplaceIndexVars
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const IndexVarNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const LiteralNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const MulNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const MultiNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const NegNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const ReductionNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const SequenceNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const SqrtNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const SubNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const SuchThatNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const WhereNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^  void visit(const YieldNode* op) {$/;"	f	struct:taco::ReplaceRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const AccessNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const AddNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const AssignmentNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const CallIntrinsicNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const CallNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const CastNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const DivNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const ForallNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const IndexVarNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const LiteralNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const MulNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const MultiNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const NegNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const ReductionNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const SequenceNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const SqrtNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const SubNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const SuchThatNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const WhereNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_rewriter.cpp	/^void IndexNotationRewriter::visit(const YieldNode* op) {$/;"	f	class:taco::IndexNotationRewriter
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexExprVisitorStrict::visit(const IndexExpr& expr) {$/;"	f	class:taco::IndexExprVisitorStrict
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const AccessNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const AddNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const AssignmentNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const BinaryExprNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const CallIntrinsicNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const CallNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const CastNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const DivNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const ForallNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const IndexVarNode *op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const LiteralNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const MulNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const MultiNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const NegNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const ReductionNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const SequenceNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const SqrtNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const SubNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const SuchThatNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const UnaryExprNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const WhereNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexNotationVisitor::visit(const YieldNode* op) {$/;"	f	class:taco::IndexNotationVisitor
visit	src/index_notation/index_notation_visitor.cpp	/^void IndexStmtVisitorStrict::visit(const IndexStmt& stmt) {$/;"	f	class:taco::IndexStmtVisitorStrict
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const ComplementNode *n) {$/;"	f	struct:taco::DeMorganDispatcher
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const ComplementNode* n) {$/;"	f	class:taco::DeMorganApplier	file:
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const ComplementNode* node) {$/;"	f	struct:taco::AlgComparer
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const IntersectNode* n) {$/;"	f	class:taco::DeMorganApplier	file:
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const IntersectNode* node) {$/;"	f	struct:taco::AlgComparer
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const RegionNode* n) {$/;"	f	class:taco::DeMorganApplier	file:
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const RegionNode* node) {$/;"	f	class:taco::IndexExprReplacer	file:
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const RegionNode* node) {$/;"	f	struct:taco::AlgComparer
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const UnionNode* n) {$/;"	f	class:taco::DeMorganApplier	file:
visit	src/index_notation/iteration_algebra.cpp	/^  void visit(const UnionNode* node) {$/;"	f	struct:taco::AlgComparer
visit	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebraRewriter::visit(const ComplementNode *n) {$/;"	f	class:taco::IterationAlgebraRewriter
visit	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebraRewriter::visit(const IntersectNode *n) {$/;"	f	class:taco::IterationAlgebraRewriter
visit	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebraRewriter::visit(const RegionNode *n) {$/;"	f	class:taco::IterationAlgebraRewriter
visit	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebraRewriter::visit(const UnionNode *n) {$/;"	f	class:taco::IterationAlgebraRewriter
visit	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebraVisitor::visit(const ComplementNode *n) {$/;"	f	class:taco::IterationAlgebraVisitor
visit	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebraVisitor::visit(const IntersectNode *n) {$/;"	f	class:taco::IterationAlgebraVisitor
visit	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebraVisitor::visit(const RegionNode *n) {$/;"	f	class:taco::IterationAlgebraVisitor
visit	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebraVisitor::visit(const UnionNode *n) {$/;"	f	class:taco::IterationAlgebraVisitor
visit	src/index_notation/iteration_algebra.cpp	/^void IterationAlgebraVisitorStrict::visit(const IterationAlgebra &alg) {$/;"	f	class:taco::IterationAlgebraVisitorStrict
visit	src/index_notation/iteration_algebra_printer.cpp	/^void IterationAlgebraPrinter::visit(const ComplementNode* n) {$/;"	f	class:taco::IterationAlgebraPrinter
visit	src/index_notation/iteration_algebra_printer.cpp	/^void IterationAlgebraPrinter::visit(const IntersectNode* n) {$/;"	f	class:taco::IterationAlgebraPrinter
visit	src/index_notation/iteration_algebra_printer.cpp	/^void IterationAlgebraPrinter::visit(const RegionNode* n) {$/;"	f	class:taco::IterationAlgebraPrinter
visit	src/index_notation/iteration_algebra_printer.cpp	/^void IterationAlgebraPrinter::visit(const UnionNode* n) {$/;"	f	class:taco::IterationAlgebraPrinter
visit	src/index_notation/transformations.cpp	/^  void visit(const AssignmentNode* node) {$/;"	f	struct:taco::ReplaceReductionExpr
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Add* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Allocate* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const And* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Assign* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const BinOp* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const BitAnd* op){$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const BitOr* op){$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const BlankLine*) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Block* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Break*) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Call* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Case* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Cast* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Comment* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Continue*) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Div* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Eq* op){$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const For* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Free* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Function* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const GetProperty* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Gt* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Gte* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const IfThenElse* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Literal* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Load* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Lt* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Lte* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Malloc* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Max* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Min* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Mul* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Neg* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Neq* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Or* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Print* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Rem* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Scope* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Sizeof* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Sort* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Sqrt* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Store* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Sub* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Switch* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Var* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const VarDecl* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const While* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_printer.cpp	/^void IRPrinter::visit(const Yield* op) {$/;"	f	class:taco::ir::IRPrinter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Add* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Allocate* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const And* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Assign* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const BinOp* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const BitAnd* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const BitOr* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const BlankLine* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Block* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Break* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Call* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Case* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Cast* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Comment* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Continue* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Div* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Eq* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const For* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Free* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Function* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const GetProperty* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Gt* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Gte* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const IfThenElse* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Literal* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Load* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Lt* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Lte* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Malloc* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Max* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Min* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Mul* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Neg* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Neq* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Or* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Print* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Rem* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Scope* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Sizeof* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Sort* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Sqrt* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Store* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Sub* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Switch* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Var* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const VarDecl* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const While* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_rewriter.cpp	/^void IRRewriter::visit(const Yield* op) {$/;"	f	class:taco::ir::IRRewriter
visit	src/ir/ir_verifier.cpp	/^  void visit(const Add *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Allocate *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const And *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Assign *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const BitAnd *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const BitOr *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Case *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Div *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Eq *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const For *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const GetProperty *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Gt *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Gte *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const IfThenElse *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Load *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Lt *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Lte* op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Max *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Min *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Mul *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Neq *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Or *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Print *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Rem *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Store *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Sub *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const Switch *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const VarDecl *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_verifier.cpp	/^  void visit(const While *op) {$/;"	f	class:taco::ir::__anon15::IRVerifier
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Add* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Allocate* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const And* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Assign* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const BinOp* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const BitAnd* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const BitOr* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const BlankLine*) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Block* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Break*) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Call* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Case* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Cast* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Comment*) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Continue*) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Div* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Eq* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const For* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Free* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Function* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const GetProperty* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Gt* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Gte* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const IfThenElse* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Literal*) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Load* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Lt* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Lte* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Malloc* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Max* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Min* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Mul* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Neg* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Neq* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Or* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Print* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Rem* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Scope* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Sizeof* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Sort* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Sqrt* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Store* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Sub* op){$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Switch* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Var*) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const VarDecl* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const While* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/ir_visitor.cpp	/^void IRVisitor::visit(const Yield* op) {$/;"	f	class:taco::ir::IRVisitor
visit	src/ir/simplify.cpp	/^  void visit(const Add* op) {$/;"	f	struct:taco::ir::ExpressionSimplifier
visit	src/ir/simplify.cpp	/^  void visit(const And* op) {$/;"	f	struct:taco::ir::ExpressionSimplifier
visit	src/ir/simplify.cpp	/^  void visit(const Div* op) {$/;"	f	struct:taco::ir::ExpressionSimplifier
visit	src/ir/simplify.cpp	/^  void visit(const Mul* op) {$/;"	f	struct:taco::ir::ExpressionSimplifier
visit	src/ir/simplify.cpp	/^  void visit(const Or* op) {$/;"	f	struct:taco::ir::ExpressionSimplifier
visit	src/ir/simplify.cpp	/^  void visit(const Sub* op) {$/;"	f	struct:taco::ir::ExpressionSimplifier
visit	src/lower/expr_tools.cpp	/^  void visit(const AccessNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const AddNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const AssignmentNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const CallIntrinsicNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const CallNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const CastNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const DivNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const ForallNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const IndexVarNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const LiteralNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const MulNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const NegNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const ReductionNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const SqrtNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const SubNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/expr_tools.cpp	/^  void visit(const WhereNode* op) {$/;"	f	class:taco::SubExprVisitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const AccessNode* node)        { expr = impl->lowerAccess(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const AddNode* node)           { expr = impl->lowerAdd(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const AssignmentNode* node)    { stmt = impl->lowerAssignment(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const CallIntrinsicNode* node) { expr = impl->lowerCallIntrinsic(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const CallNode* node)      { expr = impl->lowerTensorOp(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const CastNode* node)          { expr = impl->lowerCast(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const DivNode* node)           { expr = impl->lowerDiv(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const ForallNode* node)        { stmt = impl->lowerForall(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const IndexVarNode* node)       { expr = impl->lowerIndexVar(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const LiteralNode* node)       { expr = impl->lowerLiteral(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const MulNode* node)           { expr = impl->lowerMul(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const MultiNode* node)         { stmt = impl->lowerMulti(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const NegNode* node)           { expr = impl->lowerNeg(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const ReductionNode* node)  {$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const SequenceNode* node)      { stmt = impl->lowerSequence(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const SqrtNode* node)          { expr = impl->lowerSqrt(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const SubNode* node)           { expr = impl->lowerSub(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const SuchThatNode* node)      { stmt = impl->lowerSuchThat(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const WhereNode* node)         { stmt = impl->lowerWhere(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/lowerer_impl.cpp	/^  void visit(const YieldNode* node)         { stmt = impl->lowerYield(node); }$/;"	f	class:taco::LowererImpl::Visitor	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const AccessNode* access)$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const AddNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const AssignmentNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const CallIntrinsicNode* expr) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const CallNode* expr) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const CastNode* expr) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const ComplementNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const DivNode* expr) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const ForallNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const IndexVarNode* varNode) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const IntersectNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const LiteralNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const MulNode* expr) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const MultiNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const NegNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const ReductionNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const RegionNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const SequenceNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const SqrtNode* expr) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const SubNode* expr) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const SuchThatNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const UnionNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const WhereNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visit	src/lower/merge_lattice.cpp	/^  void visit(const YieldNode* node) {$/;"	f	class:taco::MergeLatticeBuilder	file:
visitBinary	src/index_notation/index_notation_printer.cpp	/^void IndexNotationPrinter::visitBinary(Node op, Precedence precedence) {$/;"	f	class:taco::IndexNotationPrinter
visitBinary	src/index_notation/iteration_algebra_printer.cpp	/^void IterationAlgebraPrinter::visitBinary(Node n, Precedence precedence) {$/;"	f	class:taco::IterationAlgebraPrinter
visitBinaryOp	src/index_notation/index_notation_rewriter.cpp	/^IndexExpr visitBinaryOp(const T *op, IndexNotationRewriter *rw) {$/;"	f	namespace:taco
visitBinaryOp	src/ir/ir_rewriter.cpp	/^Expr visitBinaryOp(const T *op, IRRewriter *rw) {$/;"	f	namespace:taco::ir
visitConjunctionOp	src/index_notation/index_notation.cpp	/^  IndexExpr visitConjunctionOp(const T *op) {$/;"	f	struct:taco::Zero	file:
visitDisjunctionOp	src/index_notation/index_notation.cpp	/^  IndexExpr visitDisjunctionOp(const T *op) {$/;"	f	struct:taco::Zero	file:
visitUnaryOp	src/index_notation/index_notation.cpp	/^  IndexExpr visitUnaryOp(const T *op) {$/;"	f	struct:taco::Zero	file:
visitUnaryOp	src/index_notation/index_notation_rewriter.cpp	/^IndexExpr visitUnaryOp(const T *op, IndexNotationRewriter *rw) {$/;"	f	namespace:taco
visitUnaryOp	src/ir/ir_rewriter.cpp	/^Expr visitUnaryOp(const T *op, IRRewriter *rw) {$/;"	f	namespace:taco::ir
visit_helper	python_bindings/pybind11/include/pybind11/stl.h	/^struct visit_helper {$/;"	s
visitor	include/taco/lower/lowerer_impl.h	/^  std::shared_ptr<Visitor> visitor;$/;"	m	class:taco::LowererImpl
void_caster	python_bindings/pybind11/include/pybind11/cast.h	/^template<typename T> struct void_caster {$/;"	s
void_t_impl	python_bindings/pybind11/include/pybind11/detail/common.h	/^template <typename...> struct void_t_impl { using type = void; };$/;"	s
void_type	python_bindings/pybind11/include/pybind11/detail/common.h	/^struct void_type { };$/;"	s
volatile	build/CMakeFiles/3.23.2/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
vsnprintf	test/gtest/gtest-all.cc	/^# define vsnprintf /;"	d	file:
warning	include/taco/error.h	/^  bool warning;$/;"	m	struct:taco::ErrorReport
warnings	python_bindings/pybind11/pybind11/setup_helpers.py	/^import warnings$/;"	i
warpFors	src/codegen/codegen_cuda.cpp	/^  vector<Stmt> warpFors;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
warpIDVars	src/codegen/codegen_cuda.cpp	/^  vector<pair<string, Expr>> warpIDVars;$/;"	m	class:taco::ir::CodeGen_CUDA::DeviceFunctionCollector	file:
we	python_bindings/pybind11/docs/conf.py	/^if not on_rtd:  # only import and set the theme if we're building docs locally$/;"	i
weakref	python_bindings/pybind11/include/pybind11/pytypes.h	/^    explicit weakref(handle obj, handle callback = {})$/;"	f	class:weakref
weakref	python_bindings/pybind11/include/pybind11/pytypes.h	/^class weakref : public object {$/;"	c
weakrefs	python_bindings/pybind11/include/pybind11/detail/common.h	/^    PyObject *weakrefs;$/;"	m	struct:instance
where	src/index_notation/index_notation.cpp	/^Where where(IndexStmt consumer, IndexStmt producer) {$/;"	f	namespace:taco
whereConsumers	include/taco/lower/lowerer_impl.h	/^  std::vector<ir::Stmt> whereConsumers;$/;"	m	class:taco::LowererImpl
whereTemps	include/taco/lower/lowerer_impl.h	/^  std::vector<TensorVar> whereTemps;$/;"	m	class:taco::LowererImpl
whereTempsToResult	include/taco/lower/lowerer_impl.h	/^  std::map<TensorVar, const AccessNode *> whereTempsToResult;$/;"	m	class:taco::LowererImpl
whereTempsToResult	src/lower/merge_lattice.cpp	/^  std::map<TensorVar, const AccessNode *> whereTempsToResult;$/;"	m	class:taco::MergeLatticeBuilder	file:
window	src/lower/iterator.cpp	/^  std::unique_ptr<Window> window;$/;"	m	struct:taco::Iterator::Content	file:
windowVar	src/lower/iterator.cpp	/^    ir::Expr windowVar;$/;"	m	struct:taco::Iterator::Content::Window	file:
windowedModes	include/taco/index_notation/index_notation_nodes.h	/^  std::map<int, AccessWindow> windowedModes;$/;"	m	struct:taco::AccessNode
workspace	include/taco/index_notation/index_notation_nodes_abstract.h	/^  mutable std::shared_ptr<std::tuple<IndexVar,IndexVar,TensorVar>> workspace;$/;"	m	struct:taco::IndexExprNode
workspace	src/index_notation/index_notation.cpp	/^void IndexExpr::workspace(IndexVar i, IndexVar iw, Format format, string name) {$/;"	f	class:taco::IndexExpr
workspace	src/index_notation/index_notation.cpp	/^void IndexExpr::workspace(IndexVar i, IndexVar iw, TensorVar workspace) {$/;"	f	class:taco::IndexExpr
workspace	src/index_notation/index_notation.cpp	/^void IndexExpr::workspace(IndexVar i, IndexVar iw, std::string name) {$/;"	f	class:taco::IndexExpr
workspace	src/index_notation/transformations.cpp	/^  TensorVar workspace;$/;"	m	struct:taco::Precompute::Content	file:
workspace	test/tests-windowing.cpp	/^struct workspace : public TestWithParam<std::tuple<ModeFormat, ModeFormat>> {};$/;"	s	file:
workspaces	src/lower/iteration_graph.cpp	/^  vector<TensorVar>         workspaces;$/;"	m	struct:taco::IterationGraph::Content	file:
write	python_bindings/pytaco/pytensor/tensorIO.py	/^def write(filename, t):$/;"	f
write	src/tensor.cpp	/^void write(ofstream& stream, FileType filetype, const TensorBase& tensor) {$/;"	f	namespace:taco
write	src/tensor.cpp	/^void write(string filename, FileType filetype, const TensorBase& tensor) {$/;"	f	namespace:taco
write	src/tensor.cpp	/^void write(string filename, const TensorBase& tensor) {$/;"	f	namespace:taco
writeCharTNS	src/storage/file_io_tns.cpp	/^static void writeCharTNS(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeDense	src/storage/file_io_mtx.cpp	/^void writeDense(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeDenseCharTyped	src/storage/file_io_mtx.cpp	/^void writeDenseCharTyped(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeDenseTyped	src/storage/file_io_mtx.cpp	/^void writeDenseTyped(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeFile	src/storage/file_io_rb.cpp	/^void writeFile(std::ostream &hbfile, std::string key,$/;"	f	namespace:taco
writeHeader	src/storage/file_io_rb.cpp	/^void writeHeader(std::ostream &hbfile,$/;"	f	namespace:taco
writeIndices	src/storage/file_io_rb.cpp	/^void writeIndices(std::ostream &hbfile, int indsize,$/;"	f	namespace:taco
writeMTX	src/storage/file_io_mtx.cpp	/^void writeMTX(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeMTX	src/storage/file_io_mtx.cpp	/^void writeMTX(std::string filename, const TensorBase& tensor) {$/;"	f	namespace:taco
writeRB	src/storage/file_io_rb.cpp	/^void writeRB(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeRB	src/storage/file_io_rb.cpp	/^void writeRB(std::string filename, const TensorBase& tensor) {$/;"	f	namespace:taco
writeRBTyped	src/storage/file_io_rb.cpp	/^void writeRBTyped(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeRHS	src/storage/file_io_rb.cpp	/^void writeRHS(){  }$/;"	f	namespace:taco
writeShims	src/codegen/module.cpp	/^void writeShims(vector<Stmt> funcs, string path, string prefix) {$/;"	f	namespace:taco::ir::__anon16
writeSparse	src/storage/file_io_mtx.cpp	/^void writeSparse(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeSparseCharTyped	src/storage/file_io_mtx.cpp	/^static void writeSparseCharTyped(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeSparseTyped	src/storage/file_io_mtx.cpp	/^static void writeSparseTyped(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeTNS	src/storage/file_io_tns.cpp	/^void writeTNS(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeTNS	src/storage/file_io_tns.cpp	/^void writeTNS(std::string filename, const TensorBase& tensor) {$/;"	f	namespace:taco
writeTypedTNS	src/storage/file_io_tns.cpp	/^static void writeTypedTNS(std::ostream& stream, const TensorBase& tensor) {$/;"	f	namespace:taco
writeValues	src/storage/file_io_rb.cpp	/^void writeValues(std::ostream &hbfile, int valuesize,$/;"	f	namespace:taco
write_fd	test/gtest/gtest-all.cc	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
write_fd	test/gtest/gtest.h	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
write_fd_	test/gtest/gtest-all.cc	/^  int write_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
write_fd_	test/gtest/gtest.h	/^  int write_fd_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
write_handle_	test/gtest/gtest-all.cc	/^  AutoHandle write_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
x	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	file:
xorGen	test/op_factory.h	/^struct xorGen {$/;"	s	namespace:taco
y	python_bindings/pybind11/tests/test_enum.py	/^    y = m.UnscopedEnum.ETwo$/;"	v
y	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	file:
zero	src/index_notation/index_notation.cpp	/^IndexExpr zero(IndexExpr expr, const set<Access>& zeroed) {$/;"	f	namespace:taco
zero	src/index_notation/index_notation.cpp	/^IndexStmt zero(IndexStmt stmt, const std::set<Access>& zeroed) {$/;"	f	namespace:taco
zero	src/index_notation/index_notation.cpp	/^Literal Literal::zero(Datatype type) {$/;"	f	class:taco::Literal
zero	src/ir/ir.cpp	/^Expr Literal::zero(Datatype datatype) {$/;"	f	class:taco::ir::Literal
zero	src/storage/array.cpp	/^void Array::zero() {$/;"	f	class:taco::Array
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^AbsIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::AbsIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^AcosIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::AcosIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^AcoshIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::AcoshIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^AsinIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::AsinIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^AsinhIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::AsinhIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^Atan2Intrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::Atan2Intrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^AtanIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::AtanIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^AtanhIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::AtanhIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^CbrtIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::CbrtIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^CosIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::CosIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^CoshIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::CoshIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^CubeIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::CubeIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^EqIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::EqIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^ExpIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::ExpIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^GtIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::GtIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^GteIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::GteIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^HeavisideIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::HeavisideIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^Log10Intrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::Log10Intrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^LogIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::LogIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^LtIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::LtIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^LteIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::LteIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^MaxIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::MaxIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^MinIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::MinIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^ModIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::ModIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^NeqIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::NeqIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^NotIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::NotIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^PowIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::PowIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^SinIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::SinIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^SinhIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::SinhIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^SqrtIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::SqrtIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^SquareIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::SquareIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^TanIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::TanIntrinsic
zeroPreservingArgs	src/index_notation/intrinsic.cpp	/^TanhIntrinsic::zeroPreservingArgs(const std::vector<IndexExpr>& args) const {$/;"	f	class:taco::TanhIntrinsic
zeroedVars	src/index_notation/index_notation.cpp	/^  set<TensorVar> zeroedVars;$/;"	m	struct:taco::Zero	file:
zip	include/taco/util/collections.h	/^ZipConstIterable<C1, C2> zip(const C1 &collection1, const C2 &collection2) {$/;"	f	namespace:taco::util
zipToMap	include/taco/util/collections.h	/^std::map<K, V> zipToMap(const std::vector<K>& keys, const std::vector<V>& values) {$/;"	f	namespace:taco::util
zipfile	python_bindings/pybind11/tests/extra_python_package/test_files.py	/^import zipfile$/;"	i
~AbstractSocketWriter	test/gtest/gtest-all.cc	/^    virtual ~AbstractSocketWriter() {}$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
~Arguments	test/gtest/gtest-all.cc	/^  ~Arguments() {$/;"	f	class:testing::internal::Arguments
~AssertHelper	test/gtest/gtest-all.cc	/^AssertHelper::~AssertHelper() {$/;"	f	class:testing::internal::AssertHelper
~AutoHandle	test/gtest/gtest-all.cc	/^AutoHandle::~AutoHandle() {$/;"	f	class:testing::internal::AutoHandle
~CapturedStream	test/gtest/gtest-all.cc	/^  ~CapturedStream() {$/;"	f	class:testing::internal::CapturedStream
~CartesianProductGenerator10	test/gtest/gtest.h	/^  virtual ~CartesianProductGenerator10() {}$/;"	f	class:testing::internal::CartesianProductGenerator10
~CartesianProductGenerator2	test/gtest/gtest.h	/^  virtual ~CartesianProductGenerator2() {}$/;"	f	class:testing::internal::CartesianProductGenerator2
~CartesianProductGenerator3	test/gtest/gtest.h	/^  virtual ~CartesianProductGenerator3() {}$/;"	f	class:testing::internal::CartesianProductGenerator3
~CartesianProductGenerator4	test/gtest/gtest.h	/^  virtual ~CartesianProductGenerator4() {}$/;"	f	class:testing::internal::CartesianProductGenerator4
~CartesianProductGenerator5	test/gtest/gtest.h	/^  virtual ~CartesianProductGenerator5() {}$/;"	f	class:testing::internal::CartesianProductGenerator5
~CartesianProductGenerator6	test/gtest/gtest.h	/^  virtual ~CartesianProductGenerator6() {}$/;"	f	class:testing::internal::CartesianProductGenerator6
~CartesianProductGenerator7	test/gtest/gtest.h	/^  virtual ~CartesianProductGenerator7() {}$/;"	f	class:testing::internal::CartesianProductGenerator7
~CartesianProductGenerator8	test/gtest/gtest.h	/^  virtual ~CartesianProductGenerator8() {}$/;"	f	class:testing::internal::CartesianProductGenerator8
~CartesianProductGenerator9	test/gtest/gtest.h	/^  virtual ~CartesianProductGenerator9() {}$/;"	f	class:testing::internal::CartesianProductGenerator9
~CodeGen_C	src/codegen/codegen_c.cpp	/^CodeGen_C::~CodeGen_C() {}$/;"	f	class:taco::ir::CodeGen_C
~CodeGen_CUDA	src/codegen/codegen_cuda.cpp	/^CodeGen_CUDA::~CodeGen_CUDA() {}$/;"	f	class:taco::ir::CodeGen_CUDA
~Content	src/storage/array.cpp	/^  ~Content() {$/;"	f	struct:taco::Array::Content
~Content	src/storage/storage.cpp	/^  ~Content() {$/;"	f	struct:taco::TensorStorage::Content
~Context	include/taco/tensor.h	/^      ~Context() {$/;"	f	struct:taco::TensorBase::const_iterator::Context
~CopyOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    ~CopyOnlyInt() { print_destroyed(this); }$/;"	f	class:CopyOnlyInt
~CustomGuard	python_bindings/pybind11/tests/test_call_policies.cpp	/^    ~CustomGuard() { enabled = false; }$/;"	f	struct:CustomGuard
~DeathTest	test/gtest/gtest.h	/^  virtual ~DeathTest() { }$/;"	f	class:testing::internal::DeathTest
~DeathTestFactory	test/gtest/gtest.h	/^  virtual ~DeathTestFactory() { }$/;"	f	class:testing::internal::DeathTestFactory
~DeathTestImpl	test/gtest/gtest-all.cc	/^  ~DeathTestImpl() { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }$/;"	f	class:testing::internal::DeathTestImpl
~DependentGuard	python_bindings/pybind11/tests/test_call_policies.cpp	/^    ~DependentGuard() { enabled = false; }$/;"	f	struct:DependentGuard
~DestructionTester	python_bindings/pybind11/tests/test_custom_type_casters.cpp	/^    ~DestructionTester() { print_destroyed(this); }$/;"	f	class:DestructionTester
~Environment	test/gtest/gtest.h	/^  virtual ~Environment() {}$/;"	f	class:testing::Environment
~ExampleMandA	python_bindings/pybind11/tests/test_methods_and_attributes.cpp	/^    ~ExampleMandA() { print_destroyed(this); }$/;"	f	class:ExampleMandA
~ExampleVirt	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    virtual ~ExampleVirt() { print_destroyed(this); }$/;"	f	class:ExampleVirt
~ExprFactory	test/expr_factory.h	/^  virtual ~ExprFactory() {};$/;"	f	struct:taco::test::ExprFactory
~FactorizedTensorInnerProductFactory	test/expr_factory.h	/^  virtual ~FactorizedTensorInnerProductFactory() {};$/;"	f	struct:taco::test::FactorizedTensorInnerProductFactory
~FactorizedTensorSquaredNormFactory	test/expr_factory.h	/^  virtual ~FactorizedTensorSquaredNormFactory() {};$/;"	f	struct:taco::test::FactorizedTensorSquaredNormFactory
~GTestFlagSaver	test/gtest/gtest-all.cc	/^  ~GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
~GTestLog	test/gtest/gtest-all.cc	/^GTestLog::~GTestLog() {$/;"	f	class:testing::internal::GTestLog
~GTestMutexLock	test/gtest/gtest.h	/^  ~GTestMutexLock() { mutex_->Unlock(); }$/;"	f	class:std::tr1::GTestMutexLock
~HasNewFatalFailureHelper	test/gtest/gtest-all.cc	/^HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {$/;"	f	class:testing::internal::HasNewFatalFailureHelper
~IRNode	include/taco/ir/ir.h	/^  virtual ~IRNode() {}$/;"	f	struct:taco::ir::IRNode
~IRPrinter	src/ir/ir_printer.cpp	/^IRPrinter::~IRPrinter() {$/;"	f	class:taco::ir::IRPrinter
~IRRewriter	src/ir/ir_rewriter.cpp	/^IRRewriter::~IRRewriter() {$/;"	f	class:taco::ir::IRRewriter
~IRVisitor	src/ir/ir_visitor.cpp	/^IRVisitor::~IRVisitor() {$/;"	f	class:taco::ir::IRVisitor
~IRVisitorStrict	src/ir/ir_visitor.cpp	/^IRVisitorStrict::~IRVisitorStrict() {$/;"	f	class:taco::ir::IRVisitorStrict
~IndexExprRewriterStrict	include/taco/index_notation/index_notation_rewriter.h	/^  virtual ~IndexExprRewriterStrict() {}$/;"	f	class:taco::IndexExprRewriterStrict
~IndexExprVisitorStrict	src/index_notation/index_notation_visitor.cpp	/^IndexExprVisitorStrict::~IndexExprVisitorStrict() {$/;"	f	class:taco::IndexExprVisitorStrict
~IndexNotationRewriter	include/taco/index_notation/index_notation_rewriter.h	/^  virtual ~IndexNotationRewriter() {}$/;"	f	class:taco::IndexNotationRewriter
~IndexNotationRewriterStrict	include/taco/index_notation/index_notation_rewriter.h	/^  virtual ~IndexNotationRewriterStrict() {}$/;"	f	class:taco::IndexNotationRewriterStrict
~IndexNotationVisitor	src/index_notation/index_notation_visitor.cpp	/^IndexNotationVisitor::~IndexNotationVisitor() {$/;"	f	class:taco::IndexNotationVisitor
~IndexNotationVisitorStrict	src/index_notation/index_notation_visitor.cpp	/^IndexNotationVisitorStrict::~IndexNotationVisitorStrict() {$/;"	f	class:taco::IndexNotationVisitorStrict
~IndexStmtRewriterStrict	include/taco/index_notation/index_notation_rewriter.h	/^  virtual ~IndexStmtRewriterStrict() {}$/;"	f	class:taco::IndexStmtRewriterStrict
~IndexStmtVisitorStrict	src/index_notation/index_notation_visitor.cpp	/^IndexStmtVisitorStrict::~IndexStmtVisitorStrict() {$/;"	f	class:taco::IndexStmtVisitorStrict
~InternalRunDeathTestFlag	test/gtest/gtest.h	/^  ~InternalRunDeathTestFlag() {$/;"	f	class:testing::internal::InternalRunDeathTestFlag
~Intrinsic	include/taco/index_notation/intrinsic.h	/^  virtual ~Intrinsic() {}$/;"	f	class:taco::Intrinsic
~IntrusivePtr	include/taco/util/intrusive_ptr.h	/^  virtual ~IntrusivePtr() {$/;"	f	class:taco::util::IntrusivePtr
~IterationAlgebraRewriter	include/taco/index_notation/iteration_algebra.h	/^  virtual ~IterationAlgebraRewriter() {}$/;"	f	class:taco::IterationAlgebraRewriter
~IterationAlgebraRewriterStrict	include/taco/index_notation/iteration_algebra.h	/^  virtual ~IterationAlgebraRewriterStrict() {}$/;"	f	class:taco::IterationAlgebraRewriterStrict
~IterationAlgebraVisitor	include/taco/index_notation/iteration_algebra.h	/^  virtual ~IterationAlgebraVisitor() {}$/;"	f	class:taco::IterationAlgebraVisitor
~IterationAlgebraVisitorStrict	include/taco/index_notation/iteration_algebra.h	/^  virtual ~IterationAlgebraVisitorStrict() {}$/;"	f	class:taco::IterationAlgebraVisitorStrict
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::RangeGenerator::Iterator
~Iterator	test/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
~KroneckerFactory	test/expr_factory.h	/^  virtual ~KroneckerFactory() {};$/;"	f	struct:taco::test::KroneckerFactory
~Literal	src/ir/ir.cpp	/^Literal::~Literal() {$/;"	f	class:taco::ir::Literal
~LiteralNode	include/taco/index_notation/index_notation_nodes.h	/^  ~LiteralNode() {$/;"	f	struct:taco::LiteralNode
~MTTKRP1Factory	test/expr_factory.h	/^  virtual ~MTTKRP1Factory() {};$/;"	f	struct:taco::test::MTTKRP1Factory
~MTTKRP2Factory	test/expr_factory.h	/^  virtual ~MTTKRP2Factory() {};$/;"	f	struct:taco::test::MTTKRP2Factory
~MTTKRP3Factory	test/expr_factory.h	/^  virtual ~MTTKRP3Factory() {};$/;"	f	struct:taco::test::MTTKRP3Factory
~MatrixColumnNormalizeFactory	test/expr_factory.h	/^  virtual ~MatrixColumnNormalizeFactory() {};$/;"	f	struct:taco::test::MatrixColumnNormalizeFactory
~MatrixColumnSquaredNormFactory	test/expr_factory.h	/^  virtual ~MatrixColumnSquaredNormFactory() {};$/;"	f	struct:taco::test::MatrixColumnSquaredNormFactory
~MatrixElwiseMultiplyFactory	test/expr_factory.h	/^  virtual ~MatrixElwiseMultiplyFactory() {};$/;"	f	struct:taco::test::MatrixElwiseMultiplyFactory
~MatrixMultiplyFactory	test/expr_factory.h	/^  virtual ~MatrixMultiplyFactory() {};$/;"	f	struct:taco::test::MatrixMultiplyFactory
~MatrixTransposeMultiplyFactory	test/expr_factory.h	/^  virtual ~MatrixTransposeMultiplyFactory() {};$/;"	f	struct:taco::test::MatrixTransposeMultiplyFactory
~ModeFormatImpl	src/lower/mode_format_impl.cpp	/^ModeFormatImpl::~ModeFormatImpl() {$/;"	f	class:taco::ModeFormatImpl
~Movable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    ~Movable() { print_destroyed(this); }$/;"	f	class:Movable
~MoveOnlyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    ~MoveOnlyInt() { print_destroyed(this); }$/;"	f	class:MoveOnlyInt
~MoveOrCopyInt	python_bindings/pybind11/tests/test_copy_move.cpp	/^    ~MoveOrCopyInt() { print_destroyed(this); }$/;"	f	class:MoveOrCopyInt
~Mutex	test/gtest/gtest-all.cc	/^Mutex::~Mutex() {$/;"	f	class:testing::internal::Mutex
~Mutex	test/gtest/gtest.h	/^  ~Mutex() {$/;"	f	class:std::tr1::Mutex
~NativeArray	test/gtest/gtest.h	/^  ~NativeArray() {$/;"	f	class:testing::internal::NativeArray
~NonCopyable	python_bindings/pybind11/tests/test_virtual_functions.cpp	/^    ~NonCopyable() { print_destroyed(this); }$/;"	f	class:NonCopyable
~Notification	test/gtest/gtest.h	/^  ~Notification() {$/;"	f	class:std::tr1::Notification
~Object	python_bindings/pybind11/tests/object.h	/^    virtual ~Object() { print_destroyed(this); }$/;"	f	class:Object
~OsStackTraceGetterInterface	test/gtest/gtest-all.cc	/^  virtual ~OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
~ParamGeneratorInterface	test/gtest/gtest.h	/^  virtual ~ParamGeneratorInterface() {}$/;"	f	class:testing::internal::ParamGeneratorInterface
~ParamIteratorInterface	test/gtest/gtest.h	/^  virtual ~ParamIteratorInterface() {}$/;"	f	class:testing::internal::ParamIteratorInterface
~ParameterizedTestCaseInfoBase	test/gtest/gtest.h	/^  virtual ~ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
~ParameterizedTestCaseRegistry	test/gtest/gtest.h	/^  ~ParameterizedTestCaseRegistry() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
~Printable	include/taco/util/printable.h	/^  virtual ~Printable() {};$/;"	f	class:taco::util::Printable
~PropertyPtr	src/index_notation/property_pointers.cpp	/^PropertyPtr::~PropertyPtr() {$/;"	f	class:taco::PropertyPtr
~PythonAlreadySetInDestructor	python_bindings/pybind11/tests/test_exceptions.cpp	/^    ~PythonAlreadySetInDestructor() {$/;"	f	struct:PythonAlreadySetInDestructor
~PythonCallInDestructor	python_bindings/pybind11/tests/test_exceptions.cpp	/^    ~PythonCallInDestructor() { d["good"] = true; }$/;"	f	struct:PythonCallInDestructor
~RE	test/gtest/gtest-all.cc	/^RE::~RE() {$/;"	f	class:testing::internal::RE
~RangeGenerator	test/gtest/gtest.h	/^  virtual ~RangeGenerator() {}$/;"	f	class:testing::internal::RangeGenerator
~ReturnSentinel	test/gtest/gtest.h	/^    ~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
~Runnable	test/gtest/gtest.h	/^    virtual ~Runnable() {}$/;"	f	class:std::tr1::ThreadWithParamBase::Runnable
~RunnableImpl	test/gtest/gtest.h	/^    virtual ~RunnableImpl() {}$/;"	f	class:std::tr1::ThreadWithParam::RunnableImpl
~ScopedFakeTestPartResultReporter	test/gtest/gtest-all.cc	/^ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
~ScopedMap	include/taco/util/scopedmap.h	/^  ~ScopedMap() {$/;"	f	class:taco::util::ScopedMap
~ScopedPrematureExitFile	test/gtest/gtest-all.cc	/^  ~ScopedPrematureExitFile() {$/;"	f	class:testing::internal::ScopedPrematureExitFile
~ScopedSet	include/taco/util/scopedset.h	/^  ~ScopedSet() {$/;"	f	class:taco::util::ScopedSet
~SingleFailureChecker	test/gtest/gtest-all.cc	/^SingleFailureChecker::~SingleFailureChecker() {$/;"	f	class:testing::internal::SingleFailureChecker
~SocketWriter	test/gtest/gtest-all.cc	/^    virtual ~SocketWriter() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
~TensorSquaredNormFactory	test/expr_factory.h	/^  virtual ~TensorSquaredNormFactory() {};$/;"	f	struct:taco::test::TensorSquaredNormFactory
~Test	test/gtest/gtest-all.cc	/^Test::~Test() {$/;"	f	class:testing::Test
~TestCase	test/gtest/gtest-all.cc	/^TestCase::~TestCase() {$/;"	f	class:testing::TestCase
~TestEventListener	test/gtest/gtest.h	/^  virtual ~TestEventListener() {}$/;"	f	class:testing::TestEventListener
~TestEventListeners	test/gtest/gtest-all.cc	/^TestEventListeners::~TestEventListeners() { delete repeater_; }$/;"	f	class:testing::TestEventListeners
~TestEventRepeater	test/gtest/gtest-all.cc	/^TestEventRepeater::~TestEventRepeater() {$/;"	f	class:testing::internal::TestEventRepeater
~TestFactory1	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    ~TestFactory1() { print_destroyed(this); }$/;"	f	class:TestFactory1
~TestFactory2	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    ~TestFactory2() { print_destroyed(this); }$/;"	f	class:TestFactory2
~TestFactory3	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    virtual ~TestFactory3() { print_destroyed(this); }$/;"	f	class:TestFactory3
~TestFactory6	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    virtual ~TestFactory6() { print_destroyed(this); }$/;"	f	class:TestFactory6
~TestFactory7	python_bindings/pybind11/tests/test_factory_constructors.cpp	/^    virtual ~TestFactory7() { print_destroyed(this); }$/;"	f	class:TestFactory7
~TestFactoryBase	test/gtest/gtest.h	/^  virtual ~TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
~TestInfo	test/gtest/gtest-all.cc	/^TestInfo::~TestInfo() { delete factory_; }$/;"	f	class:testing::TestInfo
~TestMetaFactoryBase	test/gtest/gtest.h	/^  virtual ~TestMetaFactoryBase() {}$/;"	f	class:testing::internal::TestMetaFactoryBase
~TestPartResultReporterInterface	test/gtest/gtest.h	/^  virtual ~TestPartResultReporterInterface() {}$/;"	f	class:testing::TestPartResultReporterInterface
~TestResult	test/gtest/gtest-all.cc	/^TestResult::~TestResult() {$/;"	f	class:testing::TestResult
~TestThread	python_bindings/pybind11/tests/test_iostream.cpp	/^    ~TestThread() {$/;"	f	struct:TestThread
~ThreadLocal	test/gtest/gtest.h	/^  ~ThreadLocal() { ThreadLocalRegistry::OnThreadLocalDestroyed(this); }$/;"	f	class:std::tr1::ThreadLocal
~ThreadLocal	test/gtest/gtest.h	/^  ~ThreadLocal() {$/;"	f	class:std::tr1::ThreadLocal
~ThreadLocalBase	test/gtest/gtest.h	/^  virtual ~ThreadLocalBase() {}$/;"	f	class:std::tr1::ThreadLocalBase
~ThreadLocalValueHolderBase	test/gtest/gtest.h	/^  virtual ~ThreadLocalValueHolderBase() {}$/;"	f	class:std::tr1::ThreadLocalValueHolderBase
~ThreadWithParam	test/gtest/gtest.h	/^  virtual ~ThreadWithParam() {}$/;"	f	class:std::tr1::ThreadWithParam
~ThreadWithParam	test/gtest/gtest.h	/^  ~ThreadWithParam() { Join(); }$/;"	f	class:std::tr1::ThreadWithParam
~ThreadWithParamBase	test/gtest/gtest-all.cc	/^ThreadWithParamBase::~ThreadWithParamBase() {$/;"	f	class:testing::internal::ThreadWithParamBase
~ThreadWithParamBase	test/gtest/gtest.h	/^  virtual ~ThreadWithParamBase() {}$/;"	f	class:std::tr1::ThreadWithParamBase
~UnitTest	test/gtest/gtest-all.cc	/^UnitTest::~UnitTest() {$/;"	f	class:testing::UnitTest
~UnitTestImpl	test/gtest/gtest-all.cc	/^UnitTestImpl::~UnitTestImpl() {$/;"	f	class:testing::internal::UnitTestImpl
~ValuesInIteratorRangeGenerator	test/gtest/gtest.h	/^  virtual ~ValuesInIteratorRangeGenerator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
~Vector2	python_bindings/pybind11/tests/test_operator_overloading.cpp	/^    ~Vector2() { print_destroyed(this); }$/;"	f	class:Vector2
~VectorElwiseSqrtFactory	test/expr_factory.h	/^  virtual ~VectorElwiseSqrtFactory() {};$/;"	f	struct:taco::test::VectorElwiseSqrtFactory
~WithParamInterface	test/gtest/gtest.h	/^  virtual ~WithParamInterface() {}$/;"	f	class:testing::WithParamInterface
~buffer_info	python_bindings/pybind11/include/pybind11/buffer_info.h	/^    ~buffer_info() {$/;"	f	struct:buffer_info
~error_already_set	python_bindings/pybind11/include/pybind11/pybind11.h	/^error_already_set::~error_already_set() {$/;"	f	class:error_already_set
~error_scope	python_bindings/pybind11/include/pybind11/detail/common.h	/^    ~error_scope() { PyErr_Restore(type, value, trace); }$/;"	f	struct:error_scope
~gil_scoped_acquire	python_bindings/pybind11/include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE ~gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire
~gil_scoped_acquire	python_bindings/pybind11/include/pybind11/pybind11.h	/^    ~gil_scoped_acquire() { PyGILState_Release(state); }$/;"	f	class:gil_scoped_acquire
~gil_scoped_release	python_bindings/pybind11/include/pybind11/pybind11.h	/^    ~gil_scoped_release() { PyEval_RestoreThread(state); }$/;"	f	class:gil_scoped_release
~gil_scoped_release	python_bindings/pybind11/include/pybind11/pybind11.h	/^    ~gil_scoped_release() {$/;"	f	class:gil_scoped_release
~internals	python_bindings/pybind11/include/pybind11/detail/internals.h	/^    ~internals() {$/;"	f	struct:internals
~linked_ptr	test/gtest/gtest.h	/^  ~linked_ptr() { depart(); }$/;"	f	class:testing::internal::linked_ptr
~loader_life_support	python_bindings/pybind11/include/pybind11/cast.h	/^    ~loader_life_support() {$/;"	f	class:loader_life_support
~object	python_bindings/pybind11/include/pybind11/pytypes.h	/^    ~object() { dec_ref(); }$/;"	f	class:object
~options	python_bindings/pybind11/include/pybind11/options.h	/^    ~options() {$/;"	f	class:options
~ref	python_bindings/pybind11/tests/object.h	/^    ~ref() {$/;"	f	class:ref
~scoped_interpreter	python_bindings/pybind11/include/pybind11/embed.h	/^    ~scoped_interpreter() {$/;"	f	class:scoped_interpreter
~scoped_ostream_redirect	python_bindings/pybind11/include/pybind11/iostream.h	/^    ~scoped_ostream_redirect() {$/;"	f	class:scoped_ostream_redirect
~strdup_guard	python_bindings/pybind11/include/pybind11/pybind11.h	/^        ~strdup_guard() {$/;"	f	class:cpp_function::strdup_guard
